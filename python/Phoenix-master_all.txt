=========================
wxPython Project Phoenix
=========================

.. image:: demo/bitmaps/splash.png
   :align: center


Introduction
------------

Welcome to wxPython's Project Phoenix! Phoenix is the improved next-generation
wxPython, "better, stronger, faster than he was before." This new
implementation is focused on improving speed, maintainability and
extensibility. Just like "Classic" wxPython, Phoenix wraps the wxWidgets C++
toolkit and provides access to the user interface portions of the wxWidgets
API, enabling Python applications to have a native GUI on Windows, Macs or
Unix systems, with a native look and feel and requiring very little (if any)
platform specific code.

.. note:: 
    This document is primarily intended for those who will be working on
    wxPython, or at least building with the source code fetched directly from
    GitHub. If that's not you then please refer to the instructions at the
    `wxPython website <https://wxpython.org/pages/downloads/>`_ about how to get
    the current release of wxPython for your platform and chosen Python
    environment.

.. contents:: **Contents**


How to build wxPython Phoenix
-----------------------------

First of all, this README is intended primarily for those who want to build
wxPython from a workspace checked out from the wxPython Phoenix repository. If
you are not making changes to wxPython, or needing to build it for some
unsupported compiler or some other hardware architecture, then you probably do
not need to put yourself through the pain for building in this way. It's a
complicated build, and can sometimes be confusing even for the experts.
Instead, if the binaries available at PyPI are not what you need then you can
use pip to build from the released source archives, or from the source archives
created in the pre-release snapshot builds. See the notes about it at: 

* https://wxpython.org/pages/downloads/
* https://wxpython.org/blog/2017-08-17-builds-for-linux-with-pip


Next, review the section below about prerequisites.

All aspects of the wxPython Phoenix build are managed through a series of
commands provided by the build.py script. There is also a setup.py script
available for those who are used to the standard distutils or setuptools types
of builds. The setup.py script assumes that all of the code generation steps
have already been performed, and so it is suitable for use when building from
a source snapshot tarball or when using easy_install or pip. The setup.py
script will delegate to build.py for the actual build, and build.py will
delegate to setup.py when doing setuptoolsy things like performing an install
or building a wheel.

Using the build.py script allows for greater control over the build process
than setup.py does, including commands for performing the various
code-generation steps. So developers working on Phoenix itself or building
from a Git checkout, instead of a source snapshot tarball, should be using
the build.py script. The build.py script provides a fairly simple
command-line interface consisting of commands and options. To see the full
list run ``python build.py --help``. The most important commands are listed
below.

**Windows Users NOTE:** If you are building Phoenix on Windows and have a
non-English language installation of Microsoft Visual Studio then you may
need to set the code page in your console window in order to avoid Unicode
decoding errors. For example::

    chcp 1252
    python build.py <build commands>...

In addition, some tasks within the build currently expect to be able to use
Cygwin on Windows (https://www.cygwin.com/) to do its work. If you have
Cygwin installed in one of the default locations (c:\\cygwin or c:\\cygwin64)
then all is well. If you have it installed somewhere else then you can set
CYGWIN_BASE in the environment and the build tool will use that for the base
dir.

On the other hand, if you just want to do a standard setuptools-style build
using setup.py and are using a full source tarball, then you can stop reading
at this point. If you want to build from a source repository checkout, or
need to make changes and/or to regenerate some of the generated source files,
then please continue reading.


Building wxWidgets
------------------

Since build.py will, by default, build both wxWidgets and Phoenix you will
need the wxWidgets code as well. The source tarballs already include both
wxWidgets and the Phoenix source code, so if you are getting your copy of the
source code that way then you are all set. If you are fetching it from GitHub
you will need to do an additional step. The git repository is set up to bring
in the wxWidgets code as a git "submodule" so after cloning the Phoenix
repository, you can get the wxWidgets source with these commands::

  $ git submodule update --init --recursive

This will clone the wxWidgets repo into: ``Phoenix/ext/wxWidgets``. Once the
submodule is updated, the build script should be able to build wxWidgets.

If you would rather use an already built and installed wxWidgets then that is
possible as well by changing some options, see ``python build.py --help`` for
details. However be aware that doing so will require a wxWidgets that is
**very** close to the same age as the Phoenix code, at least for the
unreleased preview snapshots. In other words, the wxWidgets build should use
code from the wxWidgets source repository within a few days of when the
Phoenix code was checked out. Currently the master branch of Phoenix is
tracking the master branch of wxWidgets.

On the other hand, it is probably best to just let wxPython build and bundle
wxWidgets. The build tools will by default build wxWidgets in a way that
allows it to be bundled with the wxPython extension modules as part of the
wxPython package, meaning it can peacefully coexist with any wxWidgets
libraries you may already have installed. This bundling of the wx shared
libraries works on Windows, OSX and Linux, and probably any other unix-like
system using shared libraries based on the ELF standard. The libraries are
built in such a way that they are relocatable, meaning that they do not have
to be in a fixed location on the filesystem in order to be found by the
wxPython extension modules. This also means that you can do things like use
``pip`` to install a wxPython wheel in one or more virtual environments, move
the wx package to a versioned folder, or even move it into your own project
if desired, all without needing to rebuild the binaries. (Assuming that
compatible Pythons are being used in all cases of course.)

The build phase of the build.py script will copy the results of the wxWidgets
and Phoenix builds into the wx folder in the Phoenix source tree. This will
allow you to run and test Phoenix directly from the source tree without
installing it, if desired. You just need to set ``PYTHONPATH`` appropriately,
or you can use ``python setup.py develop`` or ``pip install -e .`` to install
an .egg-link file in your current Python site-packages folder that will point
to the folder where you built wxPython Phoenix. When you are finished testing
you can then use the install or one of the bdist commands like you normally
would for other Python packages.



Important build.py commands
---------------------------

The following ``build.py`` commands are required to be able to build Phoenix
from scratch. In other words, from a pristine source tree with none of the
generated code present yet. They can be run individually or you can specify
all of them on a single command line, in the order given. Once a command has
succeeded in one run of build.py there is no need to run that command again in
a later run, unless you've changed something which that command has the
responsibility to process. Many of the commands require the results of the
earlier commands, so at least the first time you run the build you will need
to use all 4 of the commands (or their equivalents for composite commands) in
the given order.

* **dox**: Builds the XML files from the wxWidgets documentation source,
  which will be used as input for the etg command.

* **etg**: Extracts information from the dox XML files, runs hand-written
  tweaker code on the extracted data structures, and runs various generators
  on the result to produce code for the next steps. The code being run for
  each item in this step is located in the etg folder in the Phoenix source
  tree.

* **sip**: This command processes the files generated in the etg command
  and produces the C++ code that will become the Python extension modules for
  wxPython Phoenix.

* **build**: Build both wxWidgets and wxPython. There are additional
  commands if you want to build just one or the other. The results will be
  put in the Phoenix/wx folder, and can be used from there without
  installation if desired, by setting PYTHONPATH so the Phoenix/wx package
  dir is found by Python.

Some other useful commands and options are:

* **clean**: Clean up the build products produced by prior runs of
  build.py. There are additional clean commands that will let you clean up
  just portions of the build if needed.

* **touch**: Updates the timestamp on all of the etg scripts, so they will
  be forced to be run in the next build. This is useful when a change has
  been made to the wxWidgets documentation that needs to be propagated
  through the build since the etg command doesn't yet do full dependency
  checking of the input.

* **M.N**: This is the Major.Minor version number of the Python that the
  extension modules will be built for, such as "3.3". This allows you to run
  build.py with a different Python than what you are building for, which is
  handy for things like buildbots running in a virtualenv for one Python
  that need to be able to run builds for other versions too.

  If build.py is not able to find the correct Python given the M.N on the
  command line then you can specify the full path to the python executable you
  want to use with the ``--python`` option.

* **test**: Runs all of Phoenix's unittests.

* **--nodoc**: This option turns off the sphinx generator when running the
  etg scripts. If you don't plan on generating the documentation then this
  will speed up the processing of the etg command.

Please see the output of ``python build.py --help`` for information about
commands and options not mentioned here. And, as always, if there is any
discrepancy between this document and the source code in the build.py script,
then the source code is correct. ;-)

The build.py script will download doxygen, sip and waf for your platform as
needed if they are not already in your Phoenix/bin folder. If prebuilt
versions of these tools are not available for your platform then build.py
will bail out with an error message. To continue with the build you will need
to acquire copies of the tool that will work on your platform and can then
tell build.py where to find it using an environment variable, as described in
the error message.


Example build command-lines
^^^^^^^^^^^^^^^^^^^^^^^^^^^

To do a complete build from a totally clean git workspace, you will
need to use several of the commands listed above.  For example::

    python build.py dox etg --nodoc sip build

Subsequent builds can leave out some of the commands if there were no
changes which would require those commands to be run again.  For
example, if you wanted to just rebuild the Phoenix extension modules
you could do this::

    python build.py build_py

If you've changed one of the etg files and need to regenerate and
rebuild the source affected by that change, then you can use a command
like this::

    python build.py etg --nodoc sip build build_py



Project directory structure
---------------------------

There are a lot of subfolders in this directory, here is a brief
explanation to help a newbie find their way around.

* **build**: Intermediate files produced by the build process are stored
  here. This folder should not be committed to a source repository.

* **buildtools**: This is a Python package containing modules that are used
  from build.py and setup.py and which assist with configuring and running
  the build.

* **etg**: This is where the "Extractor-Tweaker-Generator" scripts are stored.
  These scripts are invoked by the build and they will read the XML files
  produced by Doxygen and will produce interface definition files for SIP.

* **etgtools**: This Python package contains modules which assist with the
  parsing of the XML files, tweaking the collection of objects produced by
  the parser, and also the backend generation of code or documentation.

* **ext**: This folder holds the source for external projects used by
  Phoenix, (currently just wxWidgets) as git submodules. This allows Phoenix
  to use a specific revision of the code in the other projects and not depend
  on the developer fetching the correct version of the code on their own.

  When you first checkout the Phoenix source using git you will need to tell
  git to also fetch the submodules, like this::

    cd Phoenix
    git submodule init
    git submodule update --recursively

* **sip/gen**: The code (.sip files) produced by the ETG scripts is placed
  in this folder.

* **sip/cpp**: The code produced when running SIP is put in this folder. It
  will be C++ source and header files, and also some extra files with
  information about the source files produced, so the build knows what files
  to compile.

* **sip/siplib**: This is a copy of the SIP runtime library. We have our
  own copy so it can be included with the wxPython build as an extension
  module with a unique name (``wx.siplib``) and to not require a runtime
  dependency on SIP being installed on the target system. 3rd party
  extensions that want to integrate with wxPython should ensure that the
  sip.h they ``#include`` is the one in this folder.

* **src**: This folder is for any other source code (SIP, C++, Python, or
  anything else) that is edited by hand instead of being generated by some
  tool.

* **wx**: This is the top of the wxPython package. For an in-place build the
  extension modules and any associated files will be put into this folder.
  Subfolders contain pure-python subpackages of the wx package, such as
  wx.lib, etc.



Naming of files
---------------

To help keep things a little easier when looking for things that need to be
worked on, the file names in the Phoenix project will mirror the names of the
files in the wxWidgets interface headers folder. For example, if there is a
``interface/wx/FOO.h`` and we are processing the XML produced for that file
then the ETG script for the classes and other items will be named
``etg/FOO.py`` and it will produce ``sip/gen/FOO.sip``, unit tests will be in
``unittests/test_FOO.py``, and so on.

In most cases more than one ETG/SIP file will be used to create a single
Python extension module. In those cases there will be one ETG script used to
bring all the others together into the single extension module (by using the
back-end generator's include feature for example.) The names of those scripts
will have a leading underscore, such as ``etg/_core.py``, and all the scripts
that are intended to be included in that extension module should specify that
name in their MODULE variable.


Prerequisites
-------------

The following are some tips about what is required to build Phoenix for
yourself. There are likely some other things that may not have been mentioned
here, if you find something else that should be mentioned then please submit
a PR for updating this document.


**Windows**

All the source code needed for wxWidgets and wxPython Phoenix are
included in the wxWidgets and Phoenix source trees. In addition to a
stock Python installation you will also need a copy of Visual Studio 2008
(for Python2.7 compatibility) or Visual Studio 2015 (for Python 3.x
support). It should also be possible to build using Mingw32, but there
will need to be some changes made to the build scripts to support that.

You may also want to get a copy of the MS SDK in order to have newer
definitions of the Windows API. I typically use 7.0 or 7.1 with Visual
Studio 2008.

Unfortunately Microsoft no longer distributes Visual Studio 2008. But don't
panic! They have recently made available a "Microsoft Visual C++ Compiler for
Python 2.7" package, which can also be used for building Phoenix for Python
2.7. Plus it's free! You can get it at:
http://www.microsoft.com/en-us/download/details.aspx?id=44266

If you want to build Phoenix with debug info then you will need to first
build a debug version of Python, and then use that Python (python_d.exe) to
build Phoenix.


**Linux**

On Ubuntu the following development packages and their dependencies
should be installed in order to build Phoenix. Other debian-like distros
will probably also have these or similarly named packages available.
Extrapolate other package names accordingly for other linux distributions
or other unixes.

* dpkg-dev
* build-essential
* python3.7-dev and libpython3.7-dev  # use appropriate Python version here
* freeglut3-dev 
* libgl1-mesa-dev 
* libglu1-mesa-dev 
* libgstreamer-plugins-base1.0-dev 
* libgtk-3-dev 
* libjpeg-dev 
* libnotify-dev 
* libpng-dev
* libsdl2-dev 
* libsm-dev 
* libtiff-dev 
* libwebkit2gtk-4.0-dev 
* libxtst-dev

If you are building for GTK2 then you'll also need these packages and
their dependencies:

* libgtk2.0-dev
* libwebkitgtk-dev


If You use a custom built python in a non standard location, You need to
compile python with the --enable-shared option.

**Mac OSX**

Like the Windows platform all the source and libs you need for building
Phoenix on OSX are included in the wxWidgets and Phoenix source trees, or
by default on the system. In addition you will need to get the Xcode
compiler and SDKs, if you don't already have it, from
https://developer.apple.com/ (free registration required). You should
also install the command line tools for your version of Xcode and OSX.
This can usually be done from within Xcode or via a separate installer
package.

Also like on Windows, using the same or similar compiler that was used to
build Python usually helps things to work better and have a better chance
for success. For example, the stock Python 2.7 will try to use "gcc-4.2"
when building extensions, but newer versions of Xcode may not have that
command available. I am currently using Xcode 7.1.1.

If all else fails it is not too hard to build Python yourself using
whatever Xcode you have installed, and then use that Python when building
Phoenix.


Help and Helping
----------------

Most discussions about Phoenix happen on the wxPython-dev google group
(a.k.a. the wxPython-dev mail list.) If you have questions or would like to
get involved please subscribe to the group at
https://groups.google.com/forum/#!forum/wxpython-dev and join in.


Latest Snapshot Builds
----------------------

You can find snapshots of the latest wxPython Phoenix build files,
including source snapshots, wheels files for Windows and Mac, and etc. at:
https://wxpython.org/Phoenix/snapshot-builds/.  These files are built at most
once per day, on any day that has had a commit to the master branch.


.. image:: docs/phoenix-fire-md.png
   :width: 100%
-r requirements/devel.txt
<!-- For bugs or other problems please provide the following details in addition to
     your issue report, if applicable. See also https://wxpython.org/pages/how-to-submit-issue/

     For issues about building on Linux, please read this page before reporting it here:
     https://wxpython.org/blog/2017-08-17-builds-for-linux-with-pip/
-->

**Operating system**:
**wxPython version & source**:          <!-- pypi, self-built, etc. -->
**Python version & source**:            <!-- stock, anaconda, EDM, distro, self-built, etc. -->

**Description of the problem**:

<!-- if possible please include a small runnable application that demonstrates the problem -->

```python
# Put code sample here
```
<!-- Be sure to set the issue number that this PR fixes or implements below, and give
     a good description. If this PR is for a new feature or enhancement, then it's
     okay to remove the "Fixes #..." below, but be sure to give an even better
     description of the PR in that case.

     See also https://wxpython.org/pages/contributor-guide/  -->

Fixes #NNNN

Buildbot Master Config
----------------------

The master.cfg file in this folder is the configuration file for Project
Phoenix's buildbot, running at http://buildbot.wxpython.org:8011/ This file
is the master copy and is kept here in order to keep it under revision
control. It is *NOT* automatically copied to the build master when it is
updated and committed and must be copied manually. This is to help avoid
security issues or problems resulting from DSM's by somebody who has commit
access to the source repository but does not know what they are doing with
Buildbot.

Developers with the proper SSH keys can copy the file and reconfigure the
server with these commands:

scp buildbot/master.cfg  wxpybb@buildbot.wxpython.org:/home/wxpybb/bb2
ssh wxpybb@buildbot.wxpython.org "cd /home/wxpybb/bb2 && ./reconfig"

To run the main demo in this directory, execute demo.py.  In other
words, one of the following commands should do it:

       demo.py
       python demo.py
       pythonw demo.py

Name	Type	Platform	Location	Availability	Description
WebReuser	Development	Windows 95, Windows NT, HPUX 9.05 and 10.2, Solaris 2.4 and 2.5	http://www.stablesoft.com	Evaluation	WebReuser is a re-use tool from Hitachi Europe Limited. WebReuser is a tool that simplifies software reuse. Its ability to track, schematize and search documents makes it the ideal way to understand C++ code. These features also make WebReuser an ideal tool to classify any Web resource. WebReuser can even be used for more general documentation management tasks.
MacAnova	Development	Windows, Motif, Mac	http://www.stat.umn.edu/~gary/macanova/macanova.home.html	Free	A large statistical application from the School of Statistics, University of Minnesota. It is based on a modified version of wxWindows 1.65.
Hardy	Development	Win 3.1, WIN32, Motif (Sun only)	http://www.aiai.ed.ac.uk/~hardy/	Freeware for personal and academic use	A hypertext-based diagramming and knowledge-based system development tool, with NASA's CLIPS built-in. It is a superset of wxCLIPS.
wxCLIPS	Development	Win 3.1, WIN32, Motif, XView	http://web.ukonline.co.uk/julian.smart/wxclips	Freeware	A GUI development environment for CLIPS applications.
wxPython	Development	wxWindows 2 for the new version	http://alldunn.com/wxPython/	Freeware	Python/wxWindows combination by Robin Dunn and Harri Pasanen. Python is an elegant object-oriented, interpreted language that runs on many platforms.
MrEd	Development	Win 3.1, WIN32, Motif, XView	http://www.cs.rice.edu/CS/PLT/packages/mred/	Freeware	MrEd is a combined editor and Scheme development environment by Matthew Flatt.
WXLisp	Development	Win 3.1, WIN32, Motif, XView	http://www.cadlab.de/~lipuser/wxlisp/wxlisp.html	Freeware	A combination of wxWindows and XLisp.
Scriptum	Development	Motif	http://www.isoft.com.ar/eng/products/system/scriptum.html	Freeware	Graphical editor with visual highlighting, navigation/browsing, undo, class browser for C++ and Java, source code management, file locking, remote editing using ftp, configurable.
WipeOut	Development	XView/Linux	http://www.softwarebuero.de/wipeout-eng.html	Giftware	WipeOut is an integrated development environment for C++ projects, available for Linux/XView. The authors are working on versions for SunOS/Solaris. Source is available for porting to other platforms.
OPL	Development	Win 3.1, WIN32, Motif, XView	http://www.ozemail.com.au/~adavison/	Freeware	Object Prolog is a portable implementation of Prolog by Andrew Davison, with object-oriented extensions, entirely written in C++. In the initial version, a binding to wxWindows is available. In the revamped version, this binding has not been written yet.
Dataplore	Graphics and sound	Windows, other?	http://www.datan.de/dataplore	Commercial	Data visualisation tool, from Datan
VCG Tool	Graphics and sound	Win 3.1, WIN32, Motif, XView	http://www.cs.uni-sb.de:80/RW/users/sander/html/gsvcg1.html	Freeware	A graph layout tool similar to GraphPlace, but with extensions. Very nice indeed!
Y.E.S.	Graphics and sound	Win 3.1, WIN32, XView (Linux)	ftp://ftp.musik.uni-essen.de/pub/EsAC/program/	Shareware	Monophonic notation program.
JAZZ	Graphics and sound	XView (Linux)	http://rokke.aug.hiagder.no/per/jazz.html	Freeware	A MIDI sequencer for Linux.
ISP	Graphics and sound	Win 3.1, WIN32, Motif, XView	ftp://www.remstar.com/pub/wxwin/contrib/isp-100/	Freeware	Image and sound player educational tool.
ClockWorks	Graphics and sound	Win 3.1, WIN32, Motif, XView	http://web.ukonline.co.uk/Members/julian.smart/freesoft.html#clockworks	Freeware	A configurable analogue clock, with a collection of 'fine art' faces. By Julian Smart.
M	Miscellaneous	Windows 95, Windows NT, Linux	http://www.phy.hw.ac.uk/~karsten/M/index.html	GPL	M is a cross-platform e-mail application. It will be available for X11/Unix and Windows platforms, supporting a wide range of e-mail transfer protocols as well as including full MIME support. M's wealth of features and ease of use make it one of the most powerful MUAs available, providing a consistent and intuitive interface across all platforms.
Boolean	Miscellaneous	Windows 95, Windows NT, Solaris	http://www.xs4all.nl/~kholwerd/bool.html	Freeware	A GDSII CAD file format viewer, and program to perform boolean operations on sets of 2D polygons. By Klaas Holwerda.
TimeMan	Miscellaneous	wxGTK, Unix	http://www.bgif.no/neureka/TimeMan/	Freeware	A time manager, written using wxGTK
Forty Thieves	Miscellaneous	Motif, Windows	apps/forty/forty.htm	Freeware	A fiendish patience game, by Chris Breeze. A nice demo of what's possible with wxWindows.
Lean Integration Platform	Miscellaneous	Windows NT, various flavours of UNIX	http://www.c-lab.de/~lipuser/lip	To be decided	LIP is a workflow-oriented tool integration system which uses wxLisp (and thus wxWindows) as an implementation basis. Lisp combined with the wxWindows bindings make up the compatible extension language platform of the system.
wxWeb	Miscellaneous	Win 3.1, WIN32, Motif	ftp://www.remstar.com/pub/wxwin/contrib/wxweb	Freeware	Andrew Davison's Web browser, with SimSock portable socket library and wxHtml canvas. Includes an http server for UNIX and Windows.
SANTIS	Miscellaneous	Win 3.1, Windows 95, Linux, Solaris OpenLook and Motif, Silicon Graphics	http://www.physiology.rwth-aachen.de/bs/santis/	Free for non-commercial use	SANTIS is a software tool designed for the analysis of signals and time series data of any kind, in particular for scientific purposes. It was developed at the Laboratory of Biomedical Systems Analysis, Institute of Physiology at the University of Aachen, Germany.
Xbaies	Miscellaneous	Win 3.1, WIN32, Motif, XView	xbaies.htm	Freeware	A shell for building Bayesian network models, by Robert Cowell.
wxTinyBB	Miscellaneous	Win 3.1, WIN32, Motif, XView	ftp://www.remstar.com/pub/wxwin/contrib/wxtinybb	Freeware/commercial	A tiny blackboard shell demo showing an embedded (commercial) Prolog engine. Demo written by Arvindra Sehmi. A good example of a nice interface using wxWindows.
Gambit	Miscellaneous	Win 3.1, WIN32, Motif, XView	http://www.hss.caltech.edu/~gambit/Gambit.html	Freeware	A large wxWindows application with source, and features such as a table control with printing.
Tex2RTF	Miscellaneous	Win 3.1, WIN32, Motif, XView	http://web.ukonline.co.uk/julian.smart/tex2rtf	Freeware	Converts subset of LaTeX syntax to WinHelp, wordprocessor RTF, HTML, and wxHelp. As used for wxWindows documentation.
wxPoem	Miscellaneous	Win 3.1, WIN32, Motif, XView	none.htm	Freeware	A poetry display program for wxWindows. Included as a sample in the wxWindows distribution.
Sonar tracking software	Miscellaneous	See Web site	http://www.desertstar.com	Demonstration	Miscellaneous sonar tracking software from Desert Star Systems, who use wxWindows for all their Windows-based software.
Name	Research software	Platform	Location	Availability	Description
DisCo	Research software	N/A	http://www.cs.tut.fi/laitos/DisCo/tool.fm.html	N/A	A tool for specification of reactive systems.
CAFE	Research software	N/A	cafe.htm	N/A	Cellular Analysis of Fire and Extinction
CODA	Research software	See Web site	http://www.ozemail.com.au/~mbedward/coda/coda.html	See Web site	CODA assists in the design of networks of nature reserves or protected areas. It has been used for major reserve planning studies, as a teaching resource and for research into conservation planning methods.
EGRESS	Research software	N/A	http://www.aiai.ed.ac.uk/~jimd/Egress2/projInfo_contents.html	N/A	An evacuation decision model.
ACT	Research software	N/A	none.htm	N/A	A general process and tracker and automator being built at NASA.
Rectangular nesting program	Research software	N/A	http://www.elec-eng.leeds.ac.uk/een5mpd/research.html	N/A	Optimized layout of rectangles on a page.
Finite element post processor	Research software	N/A	http://www.ime.auc.dk/afd3/odessy/manuals/index.htm	N/A	Finite element postprocessor, produced at Aalborg University in Denmark by John Rasmussen and Erik Lund.
__          __ _____  _____
\ \        / /|_   _||  __ \
 \ \  /\  / /   | |  | |__) | ____
  \ \/  \/ /    | |  |  ___/ |_  /
   \  /\  /    _| |_ | |      / /
    \/  \/    |_____||_|     /___|
WIPz Phoenix Demos Checklist
"""
[X] Demo Works! Woot :)
[ ] Demo Still NEEDS work, has missing libs, other. :(
"""
When all done, this checklist.txt can be discarded.

Frames and Dialogs Demos
========================
[X] AUI_DockingWindowMgr
[X] AUI_MDI
        TODO
        Not working properly
[X] Dialog
[X] Frame
[X] MDIWindows
[X] MiniFrame
[X] Wizard

Common Dialogs Demos
====================
[X] AboutBox
[X] ColourDialog
[X] DirDialog
[X] FileDialog
[X] FindReplaceDialog
[X] FontDialog
[X] MessageDialog
[X] MultiChoiceDialog
[X] PageSetupDialog
[X] PrintDialog
[X] ProgressDialog
[X] SingleChoiceDialog
[X] TextEntryDialog

More Dialogs Demos
==================
[X] ImageBrowser
[X] ScrolledMessageDialog

Core Windows/Controls Demos
===========================
[X] BitmapButton
[X] Button
[X] CheckBox
[X] CheckListBox
[X] Choice
[X] ComboBox
[X] CommandLinkButton
[X] DVC_CustomRenderer
[X] DVC_DataViewModel
[X] DVC_IndexListModel
[X] DVC_ListCtrl
[X] DVC_TreeCtrl
[X] Gauge
[X] Grid
[X] Grid_MegaExample
[X] GridLabelRenderer
[X] ListBox
[X] ListCtrl
[X] ListCtrl_virtual
[X] ListCtrl_edit
[X] Menu
[X] PopupMenu
[X] PopupWindow
[X] RadioBox
[X] RadioButton
[X] SashWindow
[X] ScrolledWindow
[X] SearchCtrl
[X] Slider
[X] SpinButton
[X] SpinCtrl
[X] SpinCtrlDouble
[X] SplitterWindow
[X] StaticBitmap
[X] StaticBox
[X] StaticText
[X] StatusBar
[X] StockButtons
[X] TextCtrl
[X] ToggleButton
[X] ToolBar
[X] TreeCtrl
[X] Validator

"Book" Controls Demos
=====================
[X] AUI_Notebook
        TODO
        Not working properly
[X] Choicebook
[X] FlatNotebook
[X] Listbook
[X] Notebook
[X] Toolbook
[X] Treebook

Custom Controls Demos
=====================
[X] AnalogClock
[X] ColourSelect
[X] ComboTreeBox
[X] Editor
[X] GenericButtons
[X] GenericDirCtrl
[X] ItemsPicker
[ ] LEDNumberCtrl
[X] MultiSash
[X] PlateButton
[X] PopupControl
[X] PyColourChooser
[X] TreeListCtrl
        TODO
        still need to adjust for selected image: smiley

AGW Demos
=========
[X] AdvancedSplash
[X] AquaButton
[X] AUI
[X] BalloonTip
[X] ButtonPanel
[X] CubeColourDialog
[X] CustomTreeCtrl
[ ] FlatMenu
        TODO
        Crashes on opening menu
[X] FlatNotebook
[X] FloatSpin
[X] FoldPanelBar
[X] FourWaySplitter
[X] GenericMessageDialog
[X] GradientButton
[X] HyperLinkCtrl
[X] HyperTreeList
[X] AGWInfoBar
[X] KnobCtrl
[X] LabelBook
[X] MultiDirDialog
[X] PeakMeter
[X] PersistentControls
[X] PieCtrl
[X] PyBusyInfo
[X] PyCollapsiblePane
[X] PyGauge
[X] PyProgress
        TODO
        Also cancel button doesn't work
[X] RibbonBar
[X] RulerCtrl
[X] ShapedButton
[X] ShortcutEditor
[X] SpeedMeter
        TODO
        Traceback (most recent call last):
[X] SuperToolTip
[X] ThumbnailCtrl
[X] ToasterBox
        TODO
        is crashing on/after toasty
[X] UltimateListCtrl
[X] XLSGrid
[X] ZoomBar

More Windows/Controls Demos
===========================
[X] ActiveX_FlashWindow
[X] ActiveX_IEHtmlWindow
[X] ActiveX_PDFWindow
[X] BitmapComboBox
[X] Calendar
[X] CalendarCtrl
        TODO
        could use some work/cleanup
[X] CheckListCtrlMixin
[X] CollapsiblePane
[X] ComboCtrl
[X] ContextHelp
        TODO
        ContextHelp doesn't seem to be working yet tho...
[X] DatePickerCtrl
[ ] DynamicSashWindow
[X] EditableListBox
[X] ExpandoTextCtrl
        TODO
        Traceback (most recent call last):
          File "ExpandoTextCtrl.py", line 82, in OnSetMaxHeight
            dlg = wx.NumberEntryDialog(self, "", "Enter new max height:",
        AttributeError: 'module' object has no attribute 'NumberEntryDialog'
[X] FancyText
[X] FileBrowseButton
[X] FloatBar
[X] FloatCanvas
[X] HtmlWindow
        TODO
        Traceback (most recent call last):
          File "HtmlWindow.py", line 177, in OnViewSource
            source = self.html.GetParser().GetSource()
        AttributeError: 'MyHtmlWindow' object has no attribute 'GetParser'
[X] HTML2_WebView
[X] InfoBar
[X] IntCtrl
[X] MVCTree
[X] MaskedEditControls
[X] MaskedNumCtrl
[X] MediaCtrl
[X] MultiSplitterWindow
[X] OwnerDrawnComboBox
[X] Pickers
[ ] PropertyGrid
[X] PyCrust
[X] PyPlot
[X] PyShell
[X] ResizeWidget
[X] RichTextCtrl
[X] ScrolledPanel
[ ] SplitTree
[X] StyledTextCtrl_1
[X] StyledTextCtrl_2
[X] TablePrint
[X] Throbber
[X] Ticker
[X] TimeCtrl
[X] TreeMixin
[X] VListBox

Window Layout Demos
===================
[X] GridBagSizer
[X] LayoutAnchors
[X] LayoutConstraints
[X] Layoutf
[X] RowColSizer
[X] ScrolledPanel
[X] SizedControls
[X] Sizers
[X] WrapSizer
[X] XmlResource
[X] XmlResourceHandler
[X] XmlResourceSubclass

Process and Events Demos
[X] DelayedResult
[X] EventManager
[X] KeyEvents
[X] Process
[X] PythonEvents
[X] Threads
[X] Timer
[ ] #'infoframe    # needs better explanation and some fixing

Clipboard and DnD Demos
=======================
[X] CustomDragAndDrop
        TODO
        DoodleDrop isn't showing upon drop
[X] DragAndDrop
        TODO
        TypeError: Invalid result type upon drops
[X] URLDragAndDrop

Using Images Demos
==================
[X] AdjustChannels
[X] AlphaDrawing
[X] AnimateCtrl
[X] ArtProvider
[X] BitmapFromBuffer
[X] Cursor
[X] DragImage
[X] Image
[X] ImageAlpha
[X] ImageFromStream
[X] Img2PyArtProvider
[X] Mask
[X] RawBitmapAccess
[X] Throbber

Miscellaneous Demos
===================
[X] AlphaDrawing
[X] Cairo
[X] Cairo_Snippets
[X] ColourDB
[ ] #'DialogUnits   # needs more explanations
[X] DragScroller
[X] DrawXXXList
[X] FileHistory
[X] FontEnumerator
[X] GraphicsContext
[X] GraphicsGradient
[X] GLCanvas
        TODO
        Cone not working
[X] I18N
[X] Joystick
        TODO
        Needs more work and tested with a joystick. I dont have one.
[X] MimeTypesManager
[X] MouseGestures
[X] OGL
[X] PDFViewer
[X] PenAndBrushStyles
[X] PrintFramework
[X] PseudoDC
[X] RendererNative
[X] ShapedWindow
[X] Sound
[X] StandardPaths
[X] SystemSettings
[X] UIActionSimulator
[X] Unicode
EMANCIPATION PROCLAMATION:
By the President of the United States of America:
A PROCLAMATION

  Whereas on the 22nd day of September, A.D. 1862, a proclamation
was issued by the President of the United States, containing,
among other things, the following, to wit:

  "That on the 1st day of January, A.D. 1863, all persons held as
slaves within any State or designated part of a State the people
whereof shall then be in rebellion against the United States shall
be then, thenceforward, and forever free; and the executive
government of the United States, including the military and naval
authority thereof, will recognize and maintain the freedom of such
persons and will do no act or acts to repress such persons, or any
of them, in any efforts they may make for their actual freedom.

  "That the executive will on the 1st day of January aforesaid,
by proclamation, designate the States and parts of States, if any,
in which the people thereof, respectively, shall then be in
rebellion against the United States; and the fact that any State
or the people thereof shall on that day be in good faith
represented in the Congress of the United States by members
chosen thereto at elections wherein a majority of the qualified
voters of such States shall have participated shall, in the
absence of strong countervailing testimony, be deemed conclusive
evidence that such State and the people thereof are not then
in rebellion against the United States."

  Now, therefore, I, Abraham Lincoln, President of the United
States, by virtue of the power in me vested as Commander-In-Chief
of the Army and Navy of the United States in time of actual armed
rebellion against the authority and government of the United States,
and as a fit and necessary war measure for supressing said
rebellion, do, on this 1st day of January, A.D. 1863, and in
accordance with my purpose so to do, publicly proclaimed for the
full period of one hundred days from the first day above mentioned,
order and designate as the States and parts of States wherein the
people thereof, respectively, are this day in rebellion against
the United States the following, to wit:

  Arkansas, Texas, Louisiana (except the parishes of St. Bernard,
Palquemines, Jefferson, St. John, St. Charles, St. James, Ascension,
Assumption, Terrebone, Lafourche, St. Mary, St. Martin, and Orleans,
including the city of New Orleans), Mississippi, Alabama, Florida,
Georgia, South Carolina, North Carolina, and Virginia (except the
forty-eight counties designated as West Virginia, and also the
counties of Berkeley, Accomac, Morthhampton, Elizabeth City, York,
Princess Anne, and Norfolk, including the cities of Norfolk and
Portsmouth), and which excepted parts are for the present left
precisely as if this proclamation were not issued.

  And by virtue of the power and for the purpose aforesaid, I do
order and declare that all persons held as slaves within said
designated States and parts of States are, and henceforward shall
be, free; and that the Executive Government of the United States,
including the military and naval authorities thereof, will
recognize and maintain the freedom of said persons.

  And I hereby enjoin upon the people so declared to be free to
abstain from all violence, unless in necessary self-defence; and
I recommend to them that, in all case when allowed, they labor
faithfully for reasonable wages.

  And I further declare and make known that such persons of
suitable condition will be received into the armed service of
the United States to garrison forts, positions, stations, and
other places, and to man vessels of all sorts in said service.

  And upon this act, sincerely believed to be an act of justice,
warranted by the Constitution upon military necessity, I invoke
the considerate judgment of mankind and the gracious favor
of Almighty God.

(signed)
ABRAHAM LINCOLN
-------------------------------------

On Jan. 1, 1863, U.S. President Abraham Lincoln declared free
all slaves residing in territory in rebellion against the federal
government. This Emancipation Proclamation actually freed few
people. It did not apply to slaves in border states fighting on
the Union side; nor did it affect slaves in southern areas already
under Union control. Naturally, the states in rebellion did not
act on Lincoln's order. But the proclamation did show Americans--
and the world--that the civil war was now being fought to end slavery.

Lincoln had been reluctant to come to this position. A believer
in white supremacy, he initially viewed the war only in terms of
preserving the Union. As pressure for abolition mounted in
Congress and the country, however, Lincoln became more sympathetic
to the idea. On Sept. 22, 1862, he issued a preliminary proclamation
announcing that emancipation would become effective on Jan. 1, 1863,
in those states still in rebellion. Although the Emancipation
Proclamation did not end slavery in America--this was achieved
by the passage of the 13TH Amendment to the Constitution on Dec.
18, 1865--it did make that accomplishment a basic war goal and
a virtual certainty.

DOUGLAS T. MILLER

Bibliography: Commager, Henry Steele, The Great Proclamation
(1960); Donovan, Frank, Mr. Lincoln's Proclamation (1964);
Franklin, John Hope, ed., The Emancipation Proclamation (1964).

-------------------------------------

Prepared by Gerald Murphy (The Cleveland Free-Net - aa300)
Distributed by the Cybercasting Services Division of the
  National Public Telecomputing Network (NPTN).

Permission is hereby granted to download, reprint, and/or otherwise
  redistribute this file, provided appropriate point of origin
  credit is given to the preparer(s) and the National Public
  Telecomputing Network.
This license applies to the "SourceCodePro-Regular.ttf" file.
Font Source: https://github.com/adobe-fonts/source-code-pro
-------------------------------------------------------------

Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries.

This Font Software is licensed under the SIL Open Font License, Version 1.1.

This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.
Name	Type	Platform	Location	Availability	Description
WebReuser	Development	Windows 95, Windows NT, HPUX 9.05 and 10.2, Solaris 2.4 and 2.5	http://www.stablesoft.com	Evaluation	WebReuser is a re-use tool from Hitachi Europe Limited. WebReuser is a tool that simplifies software reuse. Its ability to track, schematize and search documents makes it the ideal way to understand C++ code. These features also make WebReuser an ideal tool to classify any Web resource. WebReuser can even be used for more general documentation management tasks.
MacAnova	Development	Windows, Motif, Mac	http://www.stat.umn.edu/~gary/macanova/macanova.home.html	Free	A large statistical application from the School of Statistics, University of Minnesota. It is based on a modified version of wxWindows 1.65.
Hardy	Development	Win 3.1, WIN32, Motif (Sun only)	http://www.aiai.ed.ac.uk/~hardy/	Freeware for personal and academic use	A hypertext-based diagramming and knowledge-based system development tool, with NASA's CLIPS built-in. It is a superset of wxCLIPS.
wxCLIPS	Development	Win 3.1, WIN32, Motif, XView	http://web.ukonline.co.uk/julian.smart/wxclips	Freeware	A GUI development environment for CLIPS applications.
wxPython	Development	wxWindows 2 for the new version	http://alldunn.com/wxPython/	Freeware	Python/wxWindows combination by Robin Dunn and Harri Pasanen. Python is an elegant object-oriented, interpreted language that runs on many platforms.
MrEd	Development	Win 3.1, WIN32, Motif, XView	http://www.cs.rice.edu/CS/PLT/packages/mred/	Freeware	MrEd is a combined editor and Scheme development environment by Matthew Flatt.
WXLisp	Development	Win 3.1, WIN32, Motif, XView	http://www.cadlab.de/~lipuser/wxlisp/wxlisp.html	Freeware	A combination of wxWindows and XLisp.
Scriptum	Development	Motif	http://www.isoft.com.ar/eng/products/system/scriptum.html	Freeware	Graphical editor with visual highlighting, navigation/browsing, undo, class browser for C++ and Java, source code management, file locking, remote editing using ftp, configurable.
WipeOut	Development	XView/Linux	http://www.softwarebuero.de/wipeout-eng.html	Giftware	WipeOut is an integrated development environment for C++ projects, available for Linux/XView. The authors are working on versions for SunOS/Solaris. Source is available for porting to other platforms.
OPL	Development	Win 3.1, WIN32, Motif, XView	http://www.ozemail.com.au/~adavison/	Freeware	Object Prolog is a portable implementation of Prolog by Andrew Davison, with object-oriented extensions, entirely written in C++. In the initial version, a binding to wxWindows is available. In the revamped version, this binding has not been written yet.
Dataplore	Graphics and sound	Windows, other?	http://www.datan.de/dataplore	Commercial	Data visualisation tool, from Datan
VCG Tool	Graphics and sound	Win 3.1, WIN32, Motif, XView	http://www.cs.uni-sb.de:80/RW/users/sander/html/gsvcg1.html	Freeware	A graph layout tool similar to GraphPlace, but with extensions. Very nice indeed!
Y.E.S.	Graphics and sound	Win 3.1, WIN32, XView (Linux)	ftp://ftp.musik.uni-essen.de/pub/EsAC/program/	Shareware	Monophonic notation program.
JAZZ	Graphics and sound	XView (Linux)	http://rokke.aug.hiagder.no/per/jazz.html	Freeware	A MIDI sequencer for Linux.
ISP	Graphics and sound	Win 3.1, WIN32, Motif, XView	ftp://www.remstar.com/pub/wxwin/contrib/isp-100/	Freeware	Image and sound player educational tool.
ClockWorks	Graphics and sound	Win 3.1, WIN32, Motif, XView	http://web.ukonline.co.uk/Members/julian.smart/freesoft.html#clockworks	Freeware	A configurable analogue clock, with a collection of 'fine art' faces. By Julian Smart.
M	Miscellaneous	Windows 95, Windows NT, Linux	http://www.phy.hw.ac.uk/~karsten/M/index.html	GPL	M is a cross-platform e-mail application. It will be available for X11/Unix and Windows platforms, supporting a wide range of e-mail transfer protocols as well as including full MIME support. M's wealth of features and ease of use make it one of the most powerful MUAs available, providing a consistent and intuitive interface across all platforms.
Boolean	Miscellaneous	Windows 95, Windows NT, Solaris	http://www.xs4all.nl/~kholwerd/bool.html	Freeware	A GDSII CAD file format viewer, and program to perform boolean operations on sets of 2D polygons. By Klaas Holwerda.
TimeMan	Miscellaneous	wxGTK, Unix	http://www.bgif.no/neureka/TimeMan/	Freeware	A time manager, written using wxGTK
Forty Thieves	Miscellaneous	Motif, Windows	apps/forty/forty.htm	Freeware	A fiendish patience game, by Chris Breeze. A nice demo of what's possible with wxWindows.
Lean Integration Platform	Miscellaneous	Windows NT, various flavours of UNIX	http://www.c-lab.de/~lipuser/lip	To be decided	LIP is a workflow-oriented tool integration system which uses wxLisp (and thus wxWindows) as an implementation basis. Lisp combined with the wxWindows bindings make up the compatible extension language platform of the system.
wxWeb	Miscellaneous	Win 3.1, WIN32, Motif	ftp://www.remstar.com/pub/wxwin/contrib/wxweb	Freeware	Andrew Davison's Web browser, with SimSock portable socket library and wxHtml canvas. Includes an http server for UNIX and Windows.
SANTIS	Miscellaneous	Win 3.1, Windows 95, Linux, Solaris OpenLook and Motif, Silicon Graphics	http://www.physiology.rwth-aachen.de/bs/santis/	Free for non-commercial use	SANTIS is a software tool designed for the analysis of signals and time series data of any kind, in particular for scientific purposes. It was developed at the Laboratory of Biomedical Systems Analysis, Institute of Physiology at the University of Aachen, Germany.
Xbaies	Miscellaneous	Win 3.1, WIN32, Motif, XView	xbaies.htm	Freeware	A shell for building Bayesian network models, by Robert Cowell.
wxTinyBB	Miscellaneous	Win 3.1, WIN32, Motif, XView	ftp://www.remstar.com/pub/wxwin/contrib/wxtinybb	Freeware/commercial	A tiny blackboard shell demo showing an embedded (commercial) Prolog engine. Demo written by Arvindra Sehmi. A good example of a nice interface using wxWindows.
Gambit	Miscellaneous	Win 3.1, WIN32, Motif, XView	http://www.hss.caltech.edu/~gambit/Gambit.html	Freeware	A large wxWindows application with source, and features such as a table control with printing.
Tex2RTF	Miscellaneous	Win 3.1, WIN32, Motif, XView	http://web.ukonline.co.uk/julian.smart/tex2rtf	Freeware	Converts subset of LaTeX syntax to WinHelp, wordprocessor RTF, HTML, and wxHelp. As used for wxWindows documentation.
wxPoem	Miscellaneous	Win 3.1, WIN32, Motif, XView	none.htm	Freeware	A poetry display program for wxWindows. Included as a sample in the wxWindows distribution.
Sonar tracking software	Miscellaneous	See Web site	http://www.desertstar.com	Demonstration	Miscellaneous sonar tracking software from Desert Star Systems, who use wxWindows for all their Windows-based software.
Name	Research software	Platform	Location	Availability	Description
DisCo	Research software	N/A	http://www.cs.tut.fi/laitos/DisCo/tool.fm.html	N/A	A tool for specification of reactive systems.
CAFE	Research software	N/A	cafe.htm	N/A	Cellular Analysis of Fire and Extinction
CODA	Research software	See Web site	http://www.ozemail.com.au/~mbedward/coda/coda.html	See Web site	CODA assists in the design of networks of nature reserves or protected areas. It has been used for major reserve planning studies, as a teaching resource and for research into conservation planning methods.
EGRESS	Research software	N/A	http://www.aiai.ed.ac.uk/~jimd/Egress2/projInfo_contents.html	N/A	An evacuation decision model.
ACT	Research software	N/A	none.htm	N/A	A general process and tracker and automator being built at NASA.
Rectangular nesting program	Research software	N/A	http://www.elec-eng.leeds.ac.uk/een5mpd/research.html	N/A	Optimized layout of rectangles on a page.
Finite element post processor	Research software	N/A	http://www.ime.auc.dk/afd3/odessy/manuals/index.htm	N/A	Finite element postprocessor, produced at Aalborg University in Denmark by John Rasmussen and Erik Lund.
Each of the leaf items in the tree is a separate demo.  Click and learn!
Use the source Luke!
Many of the demos have some helpful overview text associated with them.  Simply click on the first tab in the notebook control after selecting the demo.  You can switch back and forth to the demo page as often as you like.
You can also view the source code for each demo by clicking on the second notebook tab.
This demo is a teaching tool.  The source code for each sample can be modified and you can see the results immediately!
Be sure to subscribe to the mail list.  Go to http://wxpython.org/maillist.php today!
The wxPyWiki is a place where wxPython users can help other users, and is a colaborative documentation system.  See http://wiki.wxpython.org.
You shouldn't pee on an electric fence!
The whole world is a tuxedo and you are a pair of brown shoes.
Cold hands, no gloves.
Learn to pause -- or nothing worthwhile can catch up to you.
Don't kiss an elephant on the lips today.
Grief can take care of itself; but to get the full value of a joy you must have somebody to divide it with. -- Mark Twain
Stay away from hurricanes for a while.
Beware of a dark-haired man with a loud tie.
Don't ask Robin what these quotes mean, he doesn't remember.
Your lucky number has been disconnected.
You single-handedly fought your way into this hopeless mess.
A few hours grace before the madness begins again.
Your fly might be open (but don't check it just now).
Never commit yourself!  Let someone else commit you.
Noise proves nothing.  Often a hen who has merely laid an egg cackles as if she laid an asteroid.   -- Mark Twain
The very ink with which all history is written is merely fluid prejudice.   -- Mark Twain
Excellent time to become a missing person.
Stay away from flying saucers today.
Look afar and see the end from the beginning.
Tomorrow, this will be part of the unchangeable past but fortunately, it can still be changed today.
It has long been an axiom of mine that the little things are infinitely the most important.  -- Sir Arthur Conan Doyle
I don't know half of you half as well as I should like; and I like less than half of you half as well as you deserve.  -- J. R. R. Tolkien
You are only young once, but you can stay immature indefinitely.
You look like a million dollars.  All green and wrinkled.
The difference between the right word and the almost right word is the difference between lightning and the lightning bug.  -- Mark Twain
The countdown had stalled at 'T' minus 69 seconds when Desiree, the first female ape to go up in space, winked at me slyly and pouted her thick, rubbery lips unmistakably -- the first of many such advances during what would prove to be the longest, and most memorable, space voyage of my career.                -- Winning sentence, 1985 Bulwer-Lytton bad fiction contest.
Q: Why haven't you graduated yet?  A: Well, Dad, I could have finished years ago, but I wanted my dissertation to rhyme.
You are scrupulously honest, frank, and straightforward.  Therefore you have few friends.
Don't you wish you had more energy... or less ambition?
Are you making all this up as you go along?  I am.
Kindness is a language which the deaf can hear and the blind can read.                -- Mark Twain
Don't let your mind wander -- it's too little to be let out alone.
Change your thoughts and you change your world.
Don't you feel more like you do now than you did when you came in?
Today is the tomorrow you worried about yesterday.
Caution: breathing may be hazardous to your health.
You will soon forget this.
Go not to the elves for counsel, for they will say both yes and no.                -- J.R.R. Tolkien
Today is the first day of the rest of your life.
Cheer Up!  Things are getting worse at a slower rate.
You are the only person to ever get this message.
You're almost as happy as you think you are.
Ships are safe in harbor, but they were never meant to stay there.
I must have a prodigious quantity of mind; it takes me as much as a week sometimes to make it up.                -- Mark Twain
If you stand on your head, you will get footprints in your hair.
All generalizations are false, including this one.                -- Mark Twain
You have the body of a 19 year old.  Please return it before it gets wrinkled.
Your ignorance cramps my conversation.
The brain is a wonderful organ; it starts working the moment you get up in the morning and does not stop until you get into the office. -- Robert Frost
By working faithfully eight hours a day, you may get to be a boss and work twelve hours a day.  -- Robert Frost
In three words I can sum up everything I've learned about life: it goes on. -- Robert Frost
If we get involved in a nuclear war, would the electromagnetic pulses from exploding bombs damage my videotapes?
The earth? Oh the earth will be gone in a few seconds...I'm going to blow it up. It's obstructing my view of Venus.  -- Marvin the Martian
There's that word again, 'heavy'. Why are things so heavy in the future? Is there a problem with the earth's gravitational pull? -- Dr Emmet Brown, "Back To The Future"
I'm Luke Skywalker, I'm here to rescue you.
It is good to have an end to journey towards; but it is the journey that matters, in the end.     -- Ursula K. Le Guin, "The Left Hand of Darkness"
I was ready for everything -- except what actually happened.
Flying is simple. You just throw yourself at the ground and miss. -- Douglas Adams, "So Long, and Thanks for the Fish"
Man has always assumed that he is more intelligent than dolphins because he has achieved so much--the wheel, New York, wars and so on -- while all the dolphins had ever done was muck about in the water having a good time. But, conversely, the dolphins had always believed that they were far more intelligent than man -- for precisely the same reasons. -- Douglas Adams, "So Long, and Thanks for the Fish"
I think animal testing is a terrible idea; they get all nervous and give the wrong answers. --A Bit of Fry and Laurie
All right, brain. You don't like me and I don't like you, but let's just do this and I can get back to killing you with beer. -- Homer Simpson
The most exciting phrase to hear in science, the one that heralds new discoveries, is not 'Eureka!' (I found it!) but 'That's funny ...' --Isaac Asimov
Always listen to experts. They'll tell you what can't be done and why. Then do it. --Robert Heinlein
Still waters run deep.
Premature optimization is the root of all evil.  -- Donald Knuth
If at first you don't succeed, you must be a programmer.
Building wxPython4 with Docker
==============================

Introduction
------------

Docker is a relatively lightweight system for deploying containers with a
specified set of software running within them. A Docker container is less than a
virtual machine, but more than a chroot, and will typically be much more
performant than a VM, (sub-second startup time, less resource hungry, etc.)
Typically they would be used for deploying "containerized applications", but a
docker image can easily be created with all that's needed for building software
too.

The files and folders in this subtree provide the Dockerfiles and scripts needed
to build the Docker images, as well as for using those images to build wxPython
wheels for various Linux distributions. A current set of images are available on
Docker Hub at https://hub.docker.com/r/wxpython4/build. There is an image there
tagged with the same names as those in the ./build folder. For example, as of
this writing you can pull images with these names and tags:

    wxpython4/build:centos-7
    wxpython4/build:debian-9
    wxpython4/build:debian-10
    wxpython4/build:fedora-29
    wxpython4/build:fedora-30
    wxpython4/build:ubuntu-14.04
    wxpython4/build:ubuntu-16.04
    wxpython4/build:ubuntu-18.04


Building Images
---------------

Since images are available on DockerHub there shouldn't be much need for
building them yourself, but just in case, here is how to do it. All images
can be built with a simple command like this::

    inv build-images 

And one or more specific images can be built like this::

    inv build-images -i debian-10 -i ubuntu-18.04

The ``inv`` command comes from the ``invoke`` package, which can be downloaded
and installed from PyPI. It loads a set of tasks from the ``tasks.py`` file in
this folder, and provides a command line interface for running those tasks.


Building wxPython
-----------------

To perform a build there must be one (and only one) wxPython source tarball
located in the ``../dist`` folder. This source archive can either be generated
with the ``build.py dox etg sip sdist`` command, or it can be downloaded from a
wxPython release on PyPI, or it can come from the wxPython snapshots server for
prerelease versions of the software.

With that source archive in place then a build for a specific distro can be done
like this (see the paragraph about ``invoke`` above)::

    inv build-wxpython -i ubuntu-18.04

That will do a build for all Pythons that are set up in the image, and both gtk2
and gtk3 if the image supports gtk2 (some don't.) To narrow the build down to
just one Python and one port, a command like this can be used::

    inv build-wxpython -i ubuntu-18.04 -p gtk3 -v Py37

And a bare ``inv build-wxpython`` will cause a build to be done for all distros,
all supported Pythons, and all supported ports. This will take a little while to
accomplish. Go binge-watch something on Netflix while you're waiting...

When the build(s) are finished the results will be placed in the
``../dist/linux`` folder, using the same folder structure for distros and ports
as is used on https://extras.wxpython.org/wxPython4/extras/linux/

PNG

   
IHDR             IDATxڥ3A۶m۶m۶-m۶l}oΞWdS_c7~;LջDѹ}K&d/e'UZZ g!(epAHQHi!H$$OjrH/`ЮڿB+ |.BrJ*7lC~}ۏU  G鮥[QI7k[dA7F3 5Y9$ro$^Wf9 thbR2b=<<)mbo@Nc郅/^U =" 37a>7pDaV*%R$ v`4Tj,xCINͤ$AM@kJOJjҎT'@sOfMN,4WzP	]_{S WϜ){T!pXǧDπ$bB"I~>I = _"!&gBf`@3LFi87 `0
zqBYC1 @ !tb05r|~ϻbߒ}CWF74;I%11<~(\xaa֓}V5 Am@@K+BW"sxNx6+ĄˠV|uXKoO3v໣6v*(qL~Rxx ߒ,wI`	/K+3ɈHi_+?nA^$<
5\wn'gR 0_\k 	sRxZ
 Jp `XEh]x% /DK/Ꞅ0kӪJ:>#tbX-l{<2 = }~=[?n>_!:ڒMCPqtk~,̹f@Oϭ R,^cirKڠ$ׅ'~÷a
ɪkt\[+!+7(0gl7SN<z`6 hJ
q{gQŸN n9 ~Ig a|1ݸj0;+Hsiӱj[ 	Qtd $b(Q3 Ǝ:j奱Mӟ7= R}9)Ϧ|?~AÚp7G1`䭧 O ~C{b,1PǔmNjt    IENDB`Extractor, Tweaker, Generator Scripts
=====================================

What is this stuff?
-------------------

This directory contains Extractor-Tweaker-Generator (ETG) scripts which are
used to drive the process of converting the wxWidgets Doxygen XML files into
the files that will be fed to the bindings generator tool (SIP).

They are each standalone Python scripts (although some refer to others) which
process the incoming XML for one or more wxWidgets classes, (that is the
"extractor" part). That XML data is converted to a hierarchy of objects that
describe the various components of the API (classes, methods, parameters,
etc.)

Since C++ and Python are different then there are some things which do not
match perfectly when implementing wrappers of API elements, and we need to do
some adaptation of the API to make things work. This is the "tweaker" part of
these scripts, and is typically the bulk of the content of the scripts.  The
objects created by the extractor have methods that help facilitate these
tweaks, and it is also possible to add new elements as well, when appropriate.

The last thing these scripts do is hand off the tweaked objects to the active
generators which will traverse the object tree and generate code as needed.


Checklist for all new etg files
-------------------------------

    * Use the bin/make-new-etg-file.py script to create a new boilerplate etg
      and unittest files for you. In simplest cases all you'll do after that is
      add the class names to be processed, and add some unittest code for it.

    * Use a filename that matches the wxWidgets/interface/wx file name
      that the classes and other stuff is being loaded from.  This
      means that there will be lots of very small files in etg, but it
      will help to find the interface header source to compare what is
      being declared there with what is being generated, and to better
      understand what may need tweaked in the etg script file.

    * Read the corresponding interface file and ensure that all classes
      declared in it are listed in the ITEMS list in the etg file,
      unless the class should not be wrapped for some reason.  Other
      items from the interface file will be included automatically.

    * Do not list classes from other interface files in the etg file.

    * Check for any extras added to each class in Classic wxPython and
      evaluate whether the same extras should be added to the Phoenix
      version.  For example, there may be additional methods added
      on to the class with %extend or %pythoncode that need to be
      carried over to Phoenix, such as __nonzero__, etc.  Also look
      for methods where Classic indicates that ownership should be
      transferred, or other special directives.

    * Check for backwards compatibility issues with Classic wxPython
      and document in the MigrationGuide. Compatibility issues
      resulting from not renaming all the overloads can probably be
      left undocumented, we'll probably be adding some of them back as
      deprecated methods eventually, and the programmers should be
      able to figure out the rest once they've started porting some
      code.

    * For window classes check if there are other virtual methods
      besides those added in addWindowVirtuals() that should be
      unignored.

    * UNITTESTS!  Create a unit test script in the unittests folder
      using the same base file name.  It should at least check that
      every non-abstract class can be constructed, and should also
      have tests for things that are added or tweaked in the etg
      script.  Other things that needed no tweaks are ok to be left
      untested for the time being, although porting over some of the
      the old unittest code from Classic would also be a good idea, but
      priority should be given to testing those things that had to be
      tweaked or added.

What is this?
=============

This folder holds the source for external projects used by Phoenix, (currently
just wxWidgets) as git submodules.  This allows Phoenix to use a specific
revision of the code in the other projects and not depend on the developer
fetching the correct version of the code on their own.

When you first check out the Phoenix source using git you will need to tell git
to also fetch the submodules, like this:

    cd Phoenix
    git submodule init
    git submodule update

To learn more about git submodules, please see the following:

    http://git-scm.com/book/en/v2/Git-Tools-Submodules
    http://blogs.atlassian.com/2013/03/git-submodules-workflows-tips/
    http://www.speirs.org/blog/2009/5/11/understanding-git-submodules.html


Notes to self
=============

 * To clone repositories with submodules:

       git clone <repourl>
       cd <repo>
       git submodule init
       git submodule update

 * To update an existing submodule from its upstream:

       git submodule update --remote <submodule>

   Or you can go into the submodule's folder and use normal git
   fetch/merge or pull operations to update the files in the
   submodule's workspace.  Commit the change in the main repo.

 * To set the submodule to track a specific branch from upstream:

       git config -f .gitmodules submodule.<name>.branch <branch name>

 * To use a different repo URL for a submodule than what others will
   see (in order to make and test local changes to the submodule that
   may be pushed to a different URL) then you can set that with a
   command like:

       git config submodule.MODULE_NAME.url PRIVATE_URL


[[ send to:
   wxpython-users@googlegroups.com
   wxpython-dev@googlegroups.com
   wx-users@googlegroups.com
   wx-announce@googlegroups.com
   Python-Announce-List@Python.Org
   ]]



Announcing wxPython 4.0.7
=========================

PyPI:   https://pypi.org/project/wxPython/4.0.7
Extras: https://extras.wxPython.org/wxPython4/extras/
Pip:    ``pip install wxPython==4.0.7``

This release is comprised mostly of fixes and minor features which have been
back-ported from the master branch. This release is likely the last release of
the 4.0.x release series, and is certainly the last 4.0.x release that will
support Python 2.7. It may still continue to build for Python 2.7 for some time, 
but no extra effort will be expended to keep it compatible.

Support for building for Python 3.8 has been added, as well as 3.8 binaries on
PyPI for Windows and MacOS.

This release provides the following changes:

* Bug fixes in wx.lib.calendar: key navigation across month boundaries is now 
  possible; key navigation now sets the date and fires the EVT_CALENDAR event; 
  setter APIs now set the date correctly (#1230).

* Switch to using a wx.Overlay in the Widget Inspection Tool to highlight
  widgets when running on a GTK3 port.

* Fixed issue in wx.lib.agw.customtreectrl where label editor could remain
  stuck forever (#1235).

* Fix a sometimes crash when using a wx.Overlay by letting the wx.DCOverlay hold
  a reference to the DC, to ensure that the DCOverlay is destroyed first.
  (PR#1301)
  
* Ported the embedding sample from Classic, which shows how to use wxPython from
  a C++ wxWidgets application that embeds Python. (PR #1353)

* Fixed wx.GetApp() to use wxWidgets' global wxApp instance instead of 
  maintaining its own pointer. This way, if the wxApp is created by C++ code
  wxPython will still be able to get access to it. (#1126)
  
* Several other PRs have been backported from the master branch (which will 
  become wxPython 4.1.0), the full list can be seen here: 
  https://github.com/wxWidgets/Phoenix/pull/1357



What is wxPython?
-----------------

wxPython is a cross-platform GUI toolkit for the Python programming
language.  It allows Python programmers to create programs with a
robust, highly functional graphical user interface, simply and
easily. It is implemented as a set of Python extension modules that
wrap the GUI components of the popular wxWidgets cross platform
library, which is written in C++. Supported platforms are Microsoft
Windows, Mac OS X and macOS, and Linux or other unix-like systems with
GTK2 or GTK3 libraries. In most cases the native widgets are used on
each platform to provide a 100% native look and feel for the
application.


What is wxPython Phoenix?
-------------------------

wxPython's Project Phoenix is a new from-the-ground-up implementation
of wxPython, created with the intent of making wxPython “better,
stronger, faster than he was before.” In other words, this new
implementation is focused on improving speed, maintainability and
extensibility of wxPython, as well as removing most of the cruft that
had accumulated over the long life of Classic wxPython.

The project has been in development off and on, mostly behind the
scenes, for many years. For the past few years automated snapshot
builds have been available for those adventurous enough to try it, and
many people eventually started using the snapshots in their projects,
even for production releases.  While there are still some things on
the periphery that need to be completed, the core of the new wxPython
extension modules which wrap the wxWidgets code has been stable for a
long time now.

Due to some things being cleaned up, reorganized, simplified and
dehackified wxPython Phoenix is not completely backwards compatible
with wxPython Classic.  This is intended. In general, however, the API
differences tend to be minor and some applications can use Phoenix
with slight, or even with no modifications.  In some other cases the
correct way to do things was also available in Classic and it's only
the wrong way that has been removed from Phoenix.  For more
information there is a Migration Guide document available at:
https://docs.wxpython.org/MigrationGuide.html

The new wxPython API reference documentation, including all
Python-specific additions and customizations, and docs for the wx.lib
package, is located at: https://docs.wxpython.org/

How to use the Phoenix snapshot build
=====================================

Hello, and welcome to the Phoenix snapshot build. If you are not
interested in Phoenix or do not know what Phoenix is, you may want to
exit the plane now and find a ticketing agent to help you get to the
correct package.

This tarball is basically a dump of the 'wx' package after a build has
been done, probably by one of the buildbot's build slaves. To use it
instead of Classic wxPython you will need to do a little tweaking to
your environment, which we will describe here. There are likely other
solutions that would work just as well, feel free to use something
else if you prefer.


Virtualenv
----------

One of the easiest ways to try out new Python modules without
impacting those that are already installed for other projects is to
use the virtualenv (or similar) tool to create a new stock python
environment with only the additional packages that you need, plus this
Phoenix test snapshot.  We highly recommend the use of such a tool to
avoid unexpected interactions with other packages.


Help Python find Phoenix
------------------------

All the usual suspects apply here.  You can simply add this folder to
your PYTHONPATH environment variable.  Or you can add a phoenix.pth
file to someplace already on the sys.path which contains the path to
this folder.  Or you can even copy the wx folder into the
site-packages folder in your virtualenv.


Help Phoenix find wxWidgets
---------------------------

The Phoenix extension modules need to load the dynamic libraries that contain
the wxWidgets code for the platform. In most cases the extension modules in
this snapshot already know to look in the same folder for the wxWidgets
shared libraries. This will work for Windows and Mac, and should also work
for any unix-like system based on ELF binaries, and if the expected objdump
utility was found on the build system.

For those cases where the build was not able to perform the neccesary magic
required to be able to make and use relocatable shared libraries, you may
need to do a little extra to help wxPython find the wxWidgets libraries.
Check your platform's documentation for details, but it may be as simple as
setting the LD_LIBRARY_PATH variable in the environment. For example if
you're in the folder where this README is located, then you can do something
like this::

    export LD_LIBRARY_PATH=`pwd`/wx

Auxiliary wxPython Release Files
================================

The source and binary extension modules for wxPython are located at PyPI where
they can be downloaded either manually or automatically via the pip tool.  See
https://pypi.python.org/pypi/wxPython

The files in this folder are the extras that are not uploaded to PyPI,
including the documentation, demo and samples, and also debugger information
files (.pdb) for Visual Studio.

================
wxPython Phoenix
================


Introduction
============

Phoenix is a new implementation of wxPython focused on improving speed,
maintainability and extensibility. Just like wxPython it wraps the wxWidgets
C++ toolkit and provides access to the UI portions of the wx API, enabling
Python applications to have a GUI on Windows, Macs or Unix systems with a
native look and feel and requiring very little (if any) platform specific code.



More to be written...


wxPython Demo and Samples
=========================

This archive contains a copy of the wxPython Phoenix demo, and also a
collection of small sample applications.

Once you have installed wxPython Phoenix you can run the demo by launching it
from a command line like this::

    cd demo
    python demo.py

Each of the folders in the samples folder contains one or more standalone
applications demonstrating how to use certain features of wxPython.  Examine
the source code in each sample folder to see how to run them and what they do.

wxPython Phoenix Snapshot Builds
================================

This directory contains a set of snapshot builds for the wxPython Phoenix
project. Each time there is a successful daily build from the buildbot the
results are uploaded here, in addition to the source and documentation
tarballs. Currently binaries for Windows and OSX are included, for a few
versions of Python. The source tarball can be used to build wxPython Phoenix
for other platforms. See Phoenix/README.rst in the source tarball for more
information.

If you are wanting to install an official release build of wxPython this is
not the place to be. You should go to PyPI instead, or use pip with the
default server address.

    https://pypi.python.org/pypi/wxPython


File naming conventions:
------------------------

 - Files with the "*.whl" extension are binary wheel files
   (https://wheel.readthedocs.org/en/latest/). See below for more info.

 - Files with the "*.tar.gz" extension are compressed tar archives of the
   Phoenix and wxWidgets source code.

 - The "*-docs-*.tar.gz" files are compressed archives of the documentation.

 - The bulk of the filename follows the conventions for naming wheels
   (https://www.python.org/dev/peps/pep-0427/#file-name-convention). For
   example:

      wxPython-4.0.0a2.dev2973+5ff6be7-cp35-cp35m-macosx_10_6_intel.whl

   means:

   - This is the "wxPython" package

   - It is version 4.0.0a2.dev2973+5ff6be7 (a development version, with
     the build number derived from the source control system.)

   - It is built for CPython version 3.5

   - "cp35m" indicates the name of the Application Binary Interface (ABI) that
     this package is compatible with.  Pip matches this with the ABI of the
     Python being used to run pip to know if the wxPython wheel is compatible
     with the target Python.

   - It is built for the macosx operating system

   - It is built for OSX version 10.6 or greater

   - It is built for Intel processors.


Installing Wheels
-----------------

The *.whl binaries in this directory are provided using Python's "wheel"
format, which is an archive format with some extra meta-data that can
be used by some Python tools to track installs, do uninstalls, etc.
In addition to the tools provided by the wheel package, the commonly
used pip command can also be used to install, upgrade and uninstall
wheels.  It can also be used to automatically download the correct
version of a wheel for you from PyPi, and then install it.  With a
little extra help it can do the same for prerelease versions of
software wheels like what is available here, with a command like
this:

    pip install -U --pre \
        -f https://wxpython.org/Phoenix/snapshot-builds/ \
        wxPython

NOTE: if there isn't a binary here for the latest version of Phoenix
that matches your Python version, then the command above will download
the latest version of the source and will try to build Phoenix for
you.  This will not be successful if you do not have appropriate
development tools and dependent libraries installed.

To install a specific binary from this site you can append the version
number to the command, like this:

    pip install -U --pre \
        -f https://wxpython.org/Phoenix/snapshot-builds/ \
        wxPython==4.0.0a2.dev2973+5ff6be7

There are also snapshot builds available for a few of the common Linux
distributions, located under the following folder:

    https://wxpython.org/Phoenix/snapshot-builds/linux/


Wheels for Linux
----------------

Since there are various options for distro and wx port (GTK2 or GTK3) then the
files can not all be located in the same folder like we can do for the Windows
and OSX builds.  This just simply means that you'll need to drill down a
little further to find the URL to give to pip.  For example, to get the GTK3
Phoenix builds for Ubuntu 16.04 (and 16.10, LinuxMint 18, and probably others)
you can use a pip command like this:

    pip install -U --pre \
        -f https://wxpython.org/Phoenix/snapshot-builds/linux/gtk3/ubuntu-16.04 \
        wxPython


Getting Pip
-----------

If you don't already have pip then you can install it with commands
like this:

    wget https://bootstrap.pypa.io/get-pip.py
    python get-pip.py

See https://pip.pypa.io/en/latest/index.html for more info.


Happy Hacking!
Robin
This folder contains Cairo header files and DLLs for Windows, which enable
building Cairo support in wxWidgets on Windows, (in wx.GraphicsContext) as
well as using Cairo directly from Python, integrated with wxPython using the
wx.lib.wxcairo package. These DLLs will be included by default in the binary
builds for Windows.

These files were originally extracted from a zip file available from the
following location:

    https://github.com/preshing/cairo-windows

Note that the projects represented by these DLLs are released under the LGPL
or similar licenses. The DLLs are able to be included with wxPython because
they are not statically linked, and because end users are able to replace them
with newer or rebuilt versions if desired so long as they use a compatible
API/ABI, (for example a replacement libcairo would need to be compatible with
Cairo 1.15.12).  Source code is available at their respective project pages.
# Python packages needed for building and testing wxPython Phoenix
-r install.txt
appdirs
setuptools
wheel
twine
requests
requests[security]
cython
pytest
pytest-xdist
pytest-forked
pytest-timeout

sphinx==2.2.0 ; python_version >= '3.0'
sphinx==1.8.5 ; python_version < '3.0'
doc2dash==2.3.0
beautifulsoup4
# Runtime dependencies needed when using wxPython Phoenix
numpy < 1.17 ; python_version <= '2.7'
numpy ; python_version >= '3.0'
pillow
six
Recent changes for the SuperDoodle application
==============================================

This is not a real change-log, but rather serves as an example that goes
along with SuperDoodle's example of self-updating functionality. To see it
in action download and unzip either the Windows or Mac version of
SuperDoodle 1.0.0 from http://wxPython.org/software-update-test/. When you
run the 1.0.0 version there will be a "Check for Updates..." item on the
help menu that you can use to see how the self-updating UI works. The
application will download the latest version available, install it, and
will restart SuperDoodle for you. Be sure to check the version numbers in
the About dialog before and after the update so you can see that it is
changing. (That is the only real change in each of the application
updates.)

And now we return you to the totally fake change log, already in
progress...


Version 1.0.3
-------------
    * A little of this, a little of that.
    * Fixed the foozlehopper.
    * Added a whatsamagigit
    * There's a wocket in my pocket.
    
    
Version 1.0.2
-------------
    * "I don't believe there's a power in the 'verse that can stop Kaylee
      from being cheerful."
      
    * "Ten percent of nuthin' is...let me do the math here...nuthin' into
      nuthin'...carry the nuthin'..."
      
    * "Well, what about you, Shepherd? How come you're flying about with us
      brigands? I mean, shouldn't you be off bringing religiosity to the
      Fuzzie-Wuzzies or some such?"
      
    * "Do you know what the chain of command is here? It's the chain I go
      get and beat you with to show you who's in command."
      
    * "A man walks down the street in that hat, people know he's not afraid
      of anything."
      
    

Version 1.0.1
-------------
    * "Time is an illusion. Lunchtime doubly so."
    
    * "The ships hung in the sky in much the same way that bricks don't."
    
    * "Forty-two."
    
    * "Reality is frequently inaccurate."
    
    
Version 1.0.0
-------------
    * Initial release.
Doodle
------

This little sample is a doodle application.  It shows you how to draw
on a canvas, deal with mouse events, popup menus, update UI events,
and much more.

    doodle.py	    A class for the main drawing window.  You can also
                    run it directly to see just this window.


    superdoodle.py  Takes the DoodleWindow from doodle.py and puts it
                    in a more full featured application with a control
                    panel, and the ability to save and load doodles.

    setup.py        This sample also shows you how to make your
                    applications automatically self-update when new
		    releases are available.  There is a bit of code in
                    the superdoodle module to use the softwareupdate
                    module from the library, but the real magic
                    happens here in the distutils setup module.

This sample is an example of using wxPython from within a wxWidgets C++
application that embeds Python. Most things you'll need to know are documented
in the source code in embedded.cpp. THE BROTHERS GRIMM
FAIRY TALES



THE GOLDEN BIRD

A certain king had a beautiful garden, and in the garden stood a tree
which bore golden apples. These apples were always counted, and about
the time when they began to grow ripe it was found that every night
one of them was gone. The king became very angry at this, and ordered
the gardener to keep watch all night under the tree. The gardener set
his eldest son to watch; but about twelve o'clock he fell asleep, and
in the morning another of the apples was missing. Then the second son
was ordered to watch; and at midnight he too fell asleep, and in the
morning another apple was gone. Then the third son offered to keep
watch; but the gardener at first would not let him, for fear some harm
should come to him: however, at last he consented, and the young man
laid himself under the tree to watch. As the clock struck twelve he
heard a rustling noise in the air, and a bird came flying that was of
pure gold; and as it was snapping at one of the apples with its beak,
the gardener's son jumped up and shot an arrow at it. But the arrow
did the bird no harm; only it dropped a golden feather from its tail,
and then flew away. The golden feather was brought to the king in the
morning, and all the council was called together. Everyone agreed that
it was worth more than all the wealth of the kingdom: but the king
said, 'One feather is of no use to me, I must have the whole bird.'

Then the gardener's eldest son set out and thought to find the golden
bird very easily; and when he had gone but a little way, he came to a
wood, and by the side of the wood he saw a fox sitting; so he took his
bow and made ready to shoot at it. Then the fox said, 'Do not shoot
me, for I will give you good counsel; I know what your business is,
and that you want to find the golden bird. You will reach a village in
the evening; and when you get there, you will see two inns opposite to
each other, one of which is very pleasant and beautiful to look at: go
not in there, but rest for the night in the other, though it may
appear to you to be very poor and mean.' But the son thought to
himself, 'What can such a beast as this know about the matter?' So he
shot his arrow at the fox; but he missed it, and it set up its tail
above its back and ran into the wood. Then he went his way, and in the
evening came to the village where the two inns were; and in one of
these were people singing, and dancing, and feasting; but the other
looked very dirty, and poor. 'I should be very silly,' said he, 'if I
went to that shabby house, and left this charming place'; so he went
into the smart house, and ate and drank at his ease, and forgot the
bird, and his country too.

Time passed on; and as the eldest son did not come back, and no
tidings were heard of him, the second son set out, and the same thing
happened to him. He met the fox, who gave him the good advice: but
when he came to the two inns, his eldest brother was standing at the
window where the merrymaking was, and called to him to come in; and he
could not withstand the temptation, but went in, and forgot the golden
bird and his country in the same manner.

Time passed on again, and the youngest son too wished to set out into
the wide world to seek for the golden bird; but his father would not
listen to it for a long while, for he was very fond of his son, and
was afraid that some ill luck might happen to him also, and prevent
his coming back. However, at last it was agreed he should go, for he
would not rest at home; and as he came to the wood, he met the fox,
and heard the same good counsel. But he was thankful to the fox, and
did not attempt his life as his brothers had done; so the fox said,
'Sit upon my tail, and you will travel faster.' So he sat down, and
the fox began to run, and away they went over stock and stone so quick
that their hair whistled in the wind.

When they came to the village, the son followed the fox's counsel, and
without looking about him went to the shabby inn and rested there all
night at his ease. In the morning came the fox again and met him as he
was beginning his journey, and said, 'Go straight forward, till you
come to a castle, before which lie a whole troop of soldiers fast
asleep and snoring: take no notice of them, but go into the castle and
pass on and on till you come to a room, where the golden bird sits in
a wooden cage; close by it stands a beautiful golden cage; but do not
try to take the bird out of the shabby cage and put it into the
handsome one, otherwise you will repent it.' Then the fox stretched
out his tail again, and the young man sat himself down, and away they
went over stock and stone till their hair whistled in the wind.

Before the castle gate all was as the fox had said: so the son went in
and found the chamber where the golden bird hung in a wooden cage, and
below stood the golden cage, and the three golden apples that had been
lost were lying close by it. Then thought he to himself, 'It will be a
very droll thing to bring away such a fine bird in this shabby cage';
so he opened the door and took hold of it and put it into the golden
cage. But the bird set up such a loud scream that all the soldiers
awoke, and they took him prisoner and carried him before the king. The
next morning the court sat to judge him; and when all was heard, it
sentenced him to die, unless he should bring the king the golden horse
which could run as swiftly as the wind; and if he did this, he was to
have the golden bird given him for his own.

So he set out once more on his journey, sighing, and in great despair,
when on a sudden his friend the fox met him, and said, 'You see now
what has happened on account of your not listening to my counsel. I
will still, however, tell you how to find the golden horse, if you
will do as I bid you. You must go straight on till you come to the
castle where the horse stands in his stall: by his side will lie the
groom fast asleep and snoring: take away the horse quietly, but be
sure to put the old leathern saddle upon him, and not the golden one
that is close by it.' Then the son sat down on the fox's tail, and
away they went over stock and stone till their hair whistled in the
wind.

All went right, and the groom lay snoring with his hand upon the
golden saddle. But when the son looked at the horse, he thought it a
great pity to put the leathern saddle upon it. 'I will give him the
good one,' said he; 'I am sure he deserves it.' As he took up the
golden saddle the groom awoke and cried out so loud, that all the
guards ran in and took him prisoner, and in the morning he was again
brought before the court to be judged, and was sentenced to die. But
it was agreed, that, if he could bring thither the beautiful princess,
he should live, and have the bird and the horse given him for his own.

Then he went his way very sorrowful; but the old fox came and said,
'Why did not you listen to me? If you had, you would have carried away
both the bird and the horse; yet will I once more give you counsel. Go
straight on, and in the evening you will arrive at a castle. At twelve
o'clock at night the princess goes to the bathing-house: go up to her
and give her a kiss, and she will let you lead her away; but take care
you do not suffer her to go and take leave of her father and mother.'
Then the fox stretched out his tail, and so away they went over stock
and stone till their hair whistled again.

As they came to the castle, all was as the fox had said, and at twelve
o'clock the young man met the princes going to the bath and gave her
the kiss, and she agreed to run away with him, but begged with many
tears that he would let her take leave of her father. At first he
refused, but she wept still more and more, and fell at his feet, till
at last he consented; but the moment she came to her father's house
the guards awoke and he was taken prisoner again.

Then he was brought before the king, and the king said, 'You shall
never have my daughter unless in eight days you dig away the hill that
stops the view from my window.' Now this hill was so big that the
whole world could not take it away: and when he had worked for seven
days, and had done very little, the fox came and said. 'Lie down and
go to sleep; I will work for you.' And in the morning he awoke and the
hill was gone; so he went merrily to the king, and told him that now
that it was removed he must give him the princess.

Then the king was obliged to keep his word, and away went the young
man and the princess; and the fox came and said to him, 'We will have
all three, the princess, the horse, and the bird.' 'Ah!' said the
young man, 'that would be a great thing, but how can you contrive it?'

'If you will only listen,' said the fox, 'it can be done. When you
come to the king, and he asks for the beautiful princess, you must
say, "Here she is!" Then he will be very joyful; and you will mount
the golden horse that they are to give you, and put out your hand to
take leave of them; but shake hands with the princess last. Then lift
her quickly on to the horse behind you; clap your spurs to his side,
and gallop away as fast as you can.'

All went right: then the fox said, 'When you come to the castle where
the bird is, I will stay with the princess at the door, and you will
ride in and speak to the king; and when he sees that it is the right
horse, he will bring out the bird; but you must sit still, and say
that you want to look at it, to see whether it is the true golden
bird; and when you get it into your hand, ride away.'

This, too, happened as the fox said; they carried off the bird, the
princess mounted again, and they rode on to a great wood. Then the fox
came, and said, 'Pray kill me, and cut off my head and my feet.' But
the young man refused to do it: so the fox said, 'I will at any rate
give you good counsel: beware of two things; ransom no one from the
gallows, and sit down by the side of no river.' Then away he went.
'Well,' thought the young man, 'it is no hard matter to keep that
advice.'

He rode on with the princess, till at last he came to the village
where he had left his two brothers. And there he heard a great noise
and uproar; and when he asked what was the matter, the people said,
'Two men are going to be hanged.' As he came nearer, he saw that the
two men were his brothers, who had turned robbers; so he said, 'Cannot
they in any way be saved?' But the people said 'No,' unless he would
bestow all his money upon the rascals and buy their liberty. Then he
did not stay to think about the matter, but paid what was asked, and
his brothers were given up, and went on with him towards their home.

And as they came to the wood where the fox first met them, it was so
cool and pleasant that the two brothers said, 'Let us sit down by the
side of the river, and rest a while, to eat and drink.' So he said,
'Yes,' and forgot the fox's counsel, and sat down on the side of the
river; and while he suspected nothing, they came behind, and threw him
down the bank, and took the princess, the horse, and the bird, and
went home to the king their master, and said. 'All this have we won by
our labour.' Then there was great rejoicing made; but the horse would
not eat, the bird would not sing, and the princess wept.

The youngest son fell to the bottom of the river's bed: luckily it was
nearly dry, but his bones were almost broken, and the bank was so
steep that he could find no way to get out. Then the old fox came once
more, and scolded him for not following his advice; otherwise no evil
would have befallen him: 'Yet,' said he, 'I cannot leave you here, so
lay hold of my tail and hold fast.' Then he pulled him out of the
river, and said to him, as he got upon the bank, 'Your brothers have
set watch to kill you, if they find you in the kingdom.' So he dressed
himself as a poor man, and came secretly to the king's court, and was
scarcely within the doors when the horse began to eat, and the bird to
sing, and princess left off weeping. Then he went to the king, and
told him all his brothers' roguery; and they were seized and punished,
and he had the princess given to him again; and after the king's death
he was heir to his kingdom.

A long while after, he went to walk one day in the wood, and the old
fox met him, and besought him with tears in his eyes to kill him, and
cut off his head and feet. And at last he did so, and in a moment the
fox was changed into a man, and turned out to be the brother of the
princess, who had been lost a great many many years.

This folder is where the ouput of SIP is placed. These will be the C++ source
and header files, as well as a file for each module that specifies what files
were generated for that module (which is used by the build scripts.)

Currently these files are not committed to the SVN repository, but
they should be included in any source tarballs that are distributed.
This directory is where wxPython's ETG scripts will deposit the
wrapper generator files which describe the wxWidgets APIs that
wxPython wraps. These files will be fed to SIP to procude the C++ code
for the extension modules.

Currently these files are not committed to the SVN repository, but
they should be included in any source tarballs that are distributed.
RIVERBANK COMPUTING LIMITED LICENSE AGREEMENT FOR SIP

1. This LICENSE AGREEMENT is between Riverbank Computing Limited ("Riverbank"),
and the Individual or Organization ("Licensee") accessing and otherwise using
SIP software in source or binary form and its associated documentation.  SIP
comprises a software tool for generating Python bindings for software C and C++
libraries, and a Python extension module used at runtime by those generated
bindings.

2. Subject to the terms and conditions of this License Agreement, Riverbank
hereby grants Licensee a nonexclusive, royalty-free, world-wide license to
reproduce, analyze, test, perform and/or display publicly, prepare derivative
works, distribute, and otherwise use SIP alone or in any derivative version,
provided, however, that Riverbank's License Agreement and Riverbank's notice of
copyright, e.g., "Copyright (c) 2015 Riverbank Computing Limited; All Rights
Reserved" are retained in SIP alone or in any derivative version prepared by
Licensee.

3. In the event Licensee prepares a derivative work that is based on or
incorporates SIP or any part thereof, and wants to make the derivative work
available to others as provided herein, then Licensee hereby agrees to include
in any such work a brief summary of the changes made to SIP.

4. Licensee may not use SIP to generate Python bindings for any C or C++
library for which bindings are already provided by Riverbank.

5. Riverbank is making SIP available to Licensee on an "AS IS" basis.
RIVERBANK MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY
OF EXAMPLE, BUT NOT LIMITATION, RIVERBANK MAKES NO AND DISCLAIMS ANY
REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR
PURPOSE OR THAT THE USE OF SIP WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

6. RIVERBANK SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF SIP FOR ANY
INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING,
DISTRIBUTING, OR OTHERWISE USING SIP, OR ANY DERIVATIVE THEREOF, EVEN IF
ADVISED OF THE POSSIBILITY THEREOF.

7. This License Agreement will automatically terminate upon a material breach
of its terms and conditions.

8. Nothing in this License Agreement shall be deemed to create any relationship
of agency, partnership, or joint venture between Riverbank and Licensee.  This
License Agreement does not grant permission to use Riverbank trademarks or
trade name in a trademark sense to endorse or promote products or services of
Licensee, or any third party.

9. By copying, installing or otherwise using SIP, Licensee agrees to be bound
by the terms and conditions of this License Agreement.
This folder contains a copy of the SIP runtime library code.  It is
here so we can make it part of the wxPython build instead of needing
to have a dependency upon SIP already being installed on user
machines.

3rd party extension modules that need to use or interact with wxPython
types or other items will need to ensure that they #include the sip.h
located in this folder so they will know the proper module name to
import to find this version of the runtime library.  This feature was
added in SIP 4.12.

This directory holds source code that is not generated by any of the tools,
but is edited by hand instead. It may include C/C++, SIP or Python code as
needed.
Here is a tip from a text file.  See test_tipdlg.py
wxEditor component
------------------

The wxEditor class implements a simple text editor using wxPython.  You
can create a custom editor by subclassing wxEditor.  Even though much of
the editor is implemented in Python, it runs surprisingly smoothly on
normal hardware with small files.


Keys
----
Keys are similar to Windows-based editors:

Tab:                 1 to 4 spaces (to next tab stop)
Cursor movement:     Arrow keys
Beginning of line:   Home
End of line:         End
Beginning of buffer: Control-Home
End of the buffer:   Control-End
Select text:         Hold down Shift while moving the cursor
Copy:                Shift-Insert,   Control-C
Cut:                 Shift-Delete,   Control-X
Paste:               Control-Insert, Control-V

How to use it
-------------
The demo code (demo/wxEditor.py) shows how to use it as a simple text
box. Use the SetText() and GetText() methods to set or get text from
the component; these both return a list of strings.

The samples/FrogEdit directory has an example of a simple text editor
application that uses the wxEditor component.

Subclassing
-----------
To add or change functionality, you can subclass this
component. One example of this might be to change the key
Alt key commands. In that case you would (for example) override the
SetAltFuncs() method.

History
-------
The original author of this component was Dirk Holtwic. It originally
had limited support for syntax highlighting, but was not a usable text
editor, as it didn't implement select (with keys or mouse), or any of
the usual key sequences you'd expect in an editor. Robin Dunn did some
refactoring work to make it more usable. Steve Howell and Adam Feuer
did a lot of refactoring, and added some functionality, including
keyboard and mouse select, properly working scrollbars, and
overridable keys. Adam and Steve also removed support for
syntax-highlighting while refactoring the code.

To do
-----
Alt/Ctrl Arrow keys move by word
Descriptive help text for keys
Speed improvements
Different fonts/colors


Authors
-------
Steve Howell, Adam Feuer, Dirk Holtwic, Robin Dunn


Contact
-------
You can find the latest code for wxEditor here:
http://www.pobox.com/~adamf/software/

We're not actively maintaining this code, but we can answer
questions about it. You can email us at:

Adam Feuer <adamf at pobox dot com>
Steve Howell <showell at zipcon dot net>

29 November 2001
Free Icons by Axialis Software
http://www.axialis.com

Here is a library of icons that you can freely use in your projects. All
the icons are licensed under the Creative Commons Attribution License
(http://creativecommons.org/licenses/by/2.5/). It means that you can use
them in any project or website, commercially or not.

The icons have been created by Axialis IconWorkshop, the professional
icon authoring tool for Windows. For more info visit this page:
http://www.axialis.com/iconworkshop

TERMS OF USE
The only restrictions are: (a) you must keep the credits of the authors:
"Axialis Team", even if you modify them; (b) link to us if you use them
on your website (see below).

LINK TO US
If you use the icons in your website, you must add the following link on
EACH PAGE containing the icons (at the bottom of the page for example).
The HTML code for this link is:

  <a href="http://www.axialis.com/free/icons">Icons</a> by <a href="http://www.axialis.com">Axialis Team</a>





# wx.lib.plot Changelog

This is a log of the changes made to this package in reverse chronological
order.

Attempts were made to maintain previous contributors' attributions, but some
things may have been lost in transition. If a mistake is found, please
submit a PR to correct it.

The `wx.lib.plot` code used to be a module. Conversion to a package began
on 2016-07-05 and finished on [insert date here].


## 2016-07-05 (Start) - Douglas Thor (doug.thor@gmail.com) (PR #)
+ Converted module to package.
+ Separated out changelog and readme to separate files.
+ Changed cursors to use the built-ins rather than PyEmbeddedImage.
+ Moved PlotCanvas class to separate plotcanvas.py module
+ Moved demo to examples/demo; added simple_example.py
+ package now callable via `python -m wx.lib.plot`: runs demo.
+ Moved PendingDeprecation, TempSytle to utils.py
+ Renamed `BoxPlot` to `PolyBoxPlot`.


## 2016-06-14 (Start) - Douglas Thor (doug.thor@gmail.com) (PR #98)
+ Refactored PolyBars and PolyHistogram to PolyBarsBase class
+ Replaced `SaveBrush` et. al., with more generic `TempStyle` combination
  Context Manager and Decorator.
+ Removed `eval` in PolyMarkers._drawmarkers
+ Refactored EnableAxes, EnableAxesValues, and EnableTicks, as they all used
  the same core logic.
+ Replaced some instances of dc.DrawText with dc.DrawTextList
+ Various cleanups of math, line character limits, and PEP8-ing
+ Updated/Added a bunch of Sphinx-compatible documentation
+ NaN is now handled (ignored) in BoxPlot.


## 2016-05-27 - Douglas Thor (doug.thor@gmail.com) (PR #91)
+ Added PolyBars and PolyHistogram classes
+ General Cleanup
+ Added demos for PolyBars and PolyHistogram
+ updated plotNN menu items status-bar text to be descriptive.
+ increased default size of demo
+ updated xSpec and ySpec to accept a list or tuple of (min, max) values.


## 2015-08-20 - Douglas Thor (doug.thor@gmail.com) (PR #26)
+ Implemented a drawstyle option to PolyLine that mimics matplotlib's
  Line2dD.drawstyle option.
+ Added significant customization options to PlotCanvas
  - Gridlines, Axes, Centerline, diagonal, and ticks can now have
    their Pen (color, width, and linestyle) set independently.
  - Ticks, Axes, and AxesValues can now be turned on/off for each side.
+ Added properties to replace getters/setters.
+ All getters and setters now have deprecation warnings
+ Fixed python3 FutureWarning for instances of 'x == None' (replaced with
  'x is None')
+ Documentation updates
+ Added Box Plot
+ Added context manager and decorator that gets and resets the pen before
  and after a function call
+ updated demo for new features
+ Most items are now allow custom pens (color, width, linestyle)
+ Added 'drawstyle' option to PolyLine that mimics MatPlotLib's
  Line2dD.drawstyle option.


## 2009-06-22 - Florian Hoech (florian.hoech@gmx.de)
+ Fixed exception when drawing empty plots on Mac OS X
+ Fixed exception when trying to draw point labels on Mac OS X (Mac OS X
  point label drawing code is still slow and only supports wx.COPY)
+ Moved label positions away from axis lines a bit
+ Added PolySpline class and modified demo 1 and 2 to use it
+ Added center and diagonal lines option (Set/GetEnableCenterLines,
  Set/GetEnableDiagonals)
+ Added anti-aliasing option with optional high-resolution mode
  (Set/GetEnableAntiAliasing, Set/GetEnableHiRes) and demo
+ Added option to specify exact number of tick marks to use for each axis
  (SetXSpec(<number>, SetYSpec(<number>) -- work like 'min', but with
  <number> tick marks)
+ Added support for background and foreground colours (enabled via
  SetBackgroundColour/SetForegroundColour on a PlotCanvas instance)
+ Changed PlotCanvas printing initialization from occuring in __init__ to
  occur on access. This will postpone any IPP and / or CUPS warnings
  which appear on stderr on some Linux systems until printing
  functionality is actually used.


## 2004-08-15 - Gordon Williams (g_will@cyberus.ca)
+ Imported modules given leading underscore to name.
+ Added Cursor Line Tracking and User Point Labels.
+ Demo for Cursor Line Tracking and Point Labels.
+ Size of plot preview frame adjusted to show page better.
+ Added helper functions PositionUserToScreen and PositionScreenToUser
  in PlotCanvas.
+ Added functions GetClosestPoints (all curves) and GetClosestPoint (only
  closest curve) can be in either user coords or screen coords.


## 2004-08-06 - Gordon Williams (g_will@cyberus.ca)
+ Added bar graph demo
+ Modified line end shape from round to square.
+ Removed FloatDCWrapper for conversion to ints and ints in arguments


## 2003-12-18 - Jeff Grimmett (grimmtooth@softhome.net)
+ wxScrolledMessageDialog -> ScrolledMessageDialog


## 2003-12-15 - Jeff Grimmett (grimmtooth@softhome.net)
+ 2.5 compatability update.
+ Renamed to plot.py in the wx.lib directory.
+ Reworked test frame to work with wx demo framework. This saves a bit
  of tedious cut and paste, and the test app is excellent.


## 2003-02-?? - Gordon Williams (g_will@cyberus.ca)
+ More style options
+ Zooming using mouse "rubber band"
+ Scroll left, right
+ Grid(graticule)
+ Printing, preview, and page set up (margins)
+ Axis and title labels
+ Cursor xy axis values
+ Doc strings and lots of comments
+ Optimizations for large number of points
+ Legends
+ Did a lot of work here to speed markers up. Only a factor of 4
  improvement though. Lines are much faster than markers, especially
  filled markers.  Stay away from circles and triangles unless you
  only have a few thousand points.

  ```
  +--------------------------------------------+
  | Times for 25,000 points                    |
  +============================================+
  | Line                             | 0.078 s |
  +----------------------------------+---------+
  | Markers: Square                  | 0.22 s  |
  +----------------------------------+---------+
  | Markers: dot                     | 0.10    |
  +----------------------------------+---------+
  | Markers: circle                  | 0.87    |
  +----------------------------------+---------+
  | Markers: cross, plus             | 0.28    |
  +----------------------------------+---------+
  | Markers: triangle, triangle_down | 0.90    |
  +----------------------------------+---------+
  ```
+ Thanks to Chris Barker for getting this version working on Linux.
# wx.lib.plot

A simple, light-weight plotting package for wxPython Phoenix.

Based on wxPlotCanvas
Written by K. Hinsen, R. Srinivasan;
Ported to wxPython: Harm van der Heijden, Feb 1999

This is a simple, light weight plotting module that can be used with
Boa or easily integrated into your own wxPython application. The
emphasis is on small size and fast plotting for large data sets. It
has a reasonable number of features to do line and scatter graphs
easily as well as simple bar graphs. It is not as sophisticated or
as powerful as SciPy Plt or Chaco. Both of these are great packages
but consume huge amounts of computer resources for simple plots.
They can be found at http://scipy.com
Copyright (c) since 2006, Oliver Schoenborn
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met: 

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this file gets copied to wx/lib/pubsub folder when release to wxPython

For wxPython users:

The code in this wx/lib/pubsub folder is taken verbatim from the PyPubSub
project on SourceForge.net. Pubsub originated as a wxPython lib, but it is now
a standalone project on SourceForge. It is included as part of wxPython
distribution for convenience to wxPython users, but pubsub can also be installed
standalone (see installation notes at http://pypubsub.sourceforge.net), or you
can also overwrite the version in this folder with the standalone version or
put an SVN checkout of pubsub in this folder, etc.

Note that the source distribution on SF.net tends to be updated more often than
the copy in wx/lib/pubsub. If you wish to install pubsub standalone, there are
instructions on the Install page of http://pypubsub.sourceforge.net.

There is extensive documentation for pubsub at http://pypubsub.sourceforge.net,
and some examples are in wx/lib/pubsub/examples. The WxPython wiki also discusses
usage of pubsub in wxPython.

Oliver Schoenborn
December 2013
For PyPubSub v3.3.0
^^^^^^^^^^^^^^^^^^^^^

* cleanup low-level API: exception classes, moved some out of pub module that did not 
  belong there (clutter), move couple modules, 
* completed the reference documentation
* support installation via pip
* follow some guidelines in some PEPs such as PEP 396 and PEP 8
* support Python 2.6, 2.7, and 3.2 to 3.4a4 but drop support for Python <= 2.5

For PyPubSub v3.2.0
^^^^^^^^^^^^^^^^^^^

This is a minor release for small improvements made (see docs/CHANGELOG.txt) 
based on feedback from user community. In particular an XML reader for 
topic specification contributed by Josh English. Also cleaned up the 
documentation, updated the examples folder (available in source distribution
as well as `online`_). 

.. _online: https://sourceforge.net/p/pubsub/code/HEAD/tree/

Only 3 changes to API (function names): 

* renamed pub.getDefaultRootAllTopics to pub.getDefaultTopicTreeRoot
* removed pub.importTopicTree: use pub.addTopicDefnProvider(source, format)
* renamed pub.exportTopicTree to pub.exportTopicTreeSpec

Oliver Schoenborn
September 2013


PyPubSub 3.1.2
^^^^^^^^^^^^^^^^

This is a minor release for small improvements made (see docs/CHANGELOG.txt) 
based on feedback from user community. Also extended the documentation. See 
pubsub.sourceforge.net for installation and usage. See the examples folder for 
some useful examples. 

Oliver Schoenborn
Nov 2011


PyPubSub 3.1.1b1
^^^^^^^^^^^^^^^^^^

Docs updated. 

Oliver Schoenborn
May 2010


For PyPubSub v3.1.0b1
^^^^^^^^^^^^^^^^^^^^^^

Major cleanup of the API since 3.0 and better support 
for the legacy wxPython code. Defining a topic tree 
via a text file has been improved drastically, making it
simpler to document topic messages and payload data
required or optional. More examples have been added, 
and the messaging protocols clarified. 

The included docs are not yet updated, that's what I'm 
working on now and will lead to the 3.1.1b1 release. 
I'm also working on an add-on module that would allow 
two applications to communicate over the network using 
pubsub-type messaging (with topics, etc). The design 
is almost complete. 

Oliver Schoenborn
Jan 20100.9.7.9 (9/8/09)
-------------------
Finalized the naming convention so that references to shell in the new "slices"
shell are renamed to "sliceshell" (likewise, Shell becomes SlicesShell)

Also, renamed the file "slices.py" to "sliceshell.py".
Since my goal is to keep PySlices.py as the equivalent to PyCrust.py,
   I think this new convention makes the most sense...

Now (Finally):
  shell.py contains the classes: Shell, ShellFacade, and ShellFrame
  sliceshell.py contains the classes: SlicesShell, SlicesShellFacade,
                                      and SlicesShellFrame
  crust.py contains: Crust and CrustFrame
  crustslices.py contains: CrustSlices and CrustSlicesFrame
  PyShell.py and PySlicesShell.py are the respective standalone shell apps
  PyCrust.py and PySlices.py are the respective apps that also include Filling

  frame.py etc. still continue to service both PyCrust and PySlices.

0.9.7.8 (9/8/09)
-------------------
Added open/save abilities to PySlices (PyCrust remains the same).
  This uses a special format with extension .pyslices.
  A file, *.pyslices will contain a text header and
    also a line denoting the beginning of each new slice,
    naming the type of slice as well (grouping, input, output)
  All output is commented with a single '#' which is removed upon loading.
  This ensures that a well contstucted .pyslices file is also
    a valid python script!

Added the ability to load an entire python file into a new Input slice
    with Ctrl-L
Added the ability to load pyslices files from the command line.

Split the functionality of crust.py (functioning for both PyCrust and PySlices)
  into crust.py (only PyCrust) and crustslices.py (only for PySlices).

After revising the naming conventions:
  shell.py contains the classes: Shell, ShellFacade, and ShellFrame
  slice.py contains the classes: Shell, ShellFacade, and ShellFrame
  crust.py contains: Crust and CrustFrame
  crustslices.py contains: CrustSlices and CrustSlicesFrame
  PyShell.py and PySlicesShell.py are the respective standalone shell apps
  PyCrust.py and PySlices.py are the respective apps that also include Filling

  frame.py etc. still continue to service both PyCrust and PySlices.

0.9.7.7 (8/25/2009) (Current--Still Need to SVNAdd the new file PySlicesShell.py)
-------------------
Added code to introspect.py to check for Enthought's "Traits" attributes.
Added PySlicesShell.py.  PySlices shell is PySlices without Filling
  and other crust attributes.
Fixed a bug with Output_BG

0.9.7.6 (7/18/2009)
-------------------
Made output have a slight-blue background
Added a tutorial that can be disabled in Options->Startup.
Added "Shell Mode" which uses >>> and ... markers for input slices and uses two returns for command execution
Changed manual completion keybindings.
Cleaned up keybinding help.
Made Items in Options->Startup menu automatically save to the config file (since they don't affect anything until startup)
Major code cleanup, removal of much dead code, shortening of very long lines, etc...

0.9.6.9 (7/9/2009)
-------------------
Fixed Undo marker issues and a bug in selection overwrite.

0.9.6.8 (7/1/2009)
-------------------
Merged changes with SVN trunk.

0.9.6.4 thru 0.9.6.6  (10/22/2008-4/27/2009)
-------------------
Added magic.py to handle some very simple "magic" commands:

Now the command:
"f 1"
will be re-interpreted as:
"f(1)"

The command:
"f 1,2,3,4"
will be interpreted as:
f(1,2,3,4)

Special commands "ls","cd", and "pwd" are interpreted separately

Works with slices.py and shell.py

Also fixed auto-indent magic.

0.9.6.1 thru 0.9.6.3 (10/21/2008)
---------------------------------
Added PySlices (slices.py and PySlices.py), a modified version of PyCrust.
PySlices is a "notebook interface" multi-line shell, ala Sage or Mathematica.
It uses Scintilla markers extensively, with red for input and blue for output.

Modified crust.py to use a switch so it can load either a Shell or a Slices_Shell

0.9.5 (12/23/2005)
------------------

Applied a series of enhancments by Franz Steinaeusler, Adi Sieker, and
Sebastian Haase, up until their 7-31-2005 version.  (Their next
version broke some existing functionality, and added some confusing
hacks, and I didn't feel that the incremental gains were worth the
loss at that point so I stopped at 7-31-2005.)

Their changes include the following:

* The Autocomplete and Calltip windows can now be opened manually with
  Ctrl-Space and Ctrl-Shift-Space.

* In the stand alone PyCrust app the various option settings, window
  size and position, and etc. are saved and restored at the next run.

* Added a help dialog bound to the F1 key that shows the key bindings.

* Added a new text completion function that suggests words from the
  history.  Bound to Shift-Return.

* F11 will toggle the maximized state of the frame.

* switched to Bind() from wx.EVT_*().

* Display of line numbers can be toggled.

* F12 toggles a "free edit" mode of the shell buffer.  This mode is
  useful, for example, if you would like to remove some output or
  errors or etc. from the buffer before doing a copy/paste.  The free
  edit mode is designated by the use of a red, non-flashing caret.

* Ctrl-Shift-F will fold/unfold (hide/show) the selected lines.



On top of these changes I (Robin Dunn) added the following:

* General code cleanup and fixes.

* Use wx.StandardPaths to determine the location of the config files.

* Remove Orbtech attributions from the UI, they've been there long
  enough.

* Use wx.SP_LIVE_UPDATE on crust and filling windows.

* Extended the saving of the config info and other new features to the
  PyShell app too.  Additionally, other apps that embed a PyCrust or a
  PyShell can pass their own wx.Config object and have the Py code
  save/restore its settings to/from there.

* All of the classes with config info get an opportunity to save/load
  their own settings instead of putting all the save/load code in one
  place that then has to reach all over the place to do anything.

* Enable editing of the startup python code, which will either be the
  file pointed to by PYTHONSTARTUP or a file in the config dir if
  PYTHONSTARTUP is not set in the environment.

* Added an option to skip the running of the startup code when
  PyShell or PyCrust starts.

* PyCrust adds a pp(item) function to the shell's namespace that
  pretty prints the item in the Display tab of the notebook.  Added
  code to raise that tab when pp() is called.

* Added an option for whether to insert text for function parameters
  when popping up the call tip.

* Added Find and Find-Next functions that use the wx.FindReplaceDialog.






0.9.4 (1/25/2004 to //2004)
------------------------------

Removed wxd decorators in favor of new SWIG-generated docstrings.

Removed docs tabs from crust interface:
* wxPython Docs
* wxSTC Docs

Fixed Calltip tab refresh problem on Windows.

shell.autoCompleteAutoHide added with default of False.

Changed default namespace of Shell to __main__.__dict__, instead of an
empty dictionary.


0.9.3 (9/25/2003 to 1/24/2004)
------------------------------

Fun and games with dynamic renaming.  Details of any other changes
were lost in the confusion.  I'll try to do better in the future.


0.9.2 (5/3/2003 to 9/25/2003)
-----------------------------

Changed to the new prefix-less "wx" package::

    import wx

instead of::

    from wxPython import wx

Fixed typo in ``PyWrap.py``::

    if __name__ == '__main__':
        main(sys.argv)

should have been::

    if __name__ == '__main__':
        main()

Added pretty-print Display tab to Crust, based on suggestion from
Jason Whitlark.

Improved ``Can*`` checks in ``EditWindow``, since STC is too lenient,
particularly when it is set to read-only but returns True for
CanPaste() (seems like an STC bug to me)::

    def CanCopy(self):
        """Return True if text is selected and can be copied."""
        return self.GetSelectionStart() != self.GetSelectionEnd()

    def CanCut(self):
        """Return True if text is selected and can be cut."""
        return self.CanCopy() and self.CanEdit()

    def CanEdit(self):
        """Return True if editing should succeed."""
        return not self.GetReadOnly()

    def CanPaste(self):
        """Return True if pasting should succeed."""
        return stc.StyledTextCtrl.CanPaste(self) and self.CanEdit()


0.9.1 (3/21/2003 to 5/2/2003)
-----------------------------

PyCrust is dead!  Long live Py!

* Renamed ``PyCrust`` package to ``py``.
* Moved code to wxPython's CVS repository.

Fixed bug in ``introspect.py`` on introspecting objects occurring
immediately after a secondary prompt, like this::

    >>> l = [1, 2, 3]
    >>> for n in range(3):
    ...     l.  <-- failed to popup autocomplete list

Added documentation files:

* PyManual.txt
* wxPythonManual.txt
* wxPythonPackage.txt
* wxPythonExamples.txt

Added PyAlaMode and PyAlaCarte code editors.

Major refactoring to support ``editor`` and ``shell`` from the same
base.

Renamed program files:

* ``PyCrustApp.py`` to ``PyCrust.py``
* ``PyFillingApp.py`` to ``PyFilling.py``
* ``PyShellApp.py`` to ``PyShell.py``
* ``wrap.py`` to ``PyWrap.py``

Removed disabling of autocomplete for lists of 2000 items or more.
The current implementation of wxSTC can now handle lists this big.

Improved handling of ``sys.path`` to mimic the standard Python shell.


0.9 (2/27/2003 to 3/20/2003)
----------------------------

Added fontIncrease, fontDecrease, fontDefault signals, receivers and
keybindings::

    Ctrl+]            Increase font size.
    Ctrl+[            Decrease font size.
    Ctrl+=            Default font size.

Continued enhancement of the decorator capability to provide better
documentation and docstrings for wxPython classes and functions.

Introduced new tabbed interface:

* Namespace
* Calltip
* Session
* Dispatcher
* wxPython Docs
* wxSTC Docs

``Filling.tree`` now expands tuples as well as lists.  (It should have
done this all along, I just never noticed this omission before.)

Added this True/False test to all modules::

    try:
        True
    except NameError:
        True = 1==1
        False = 1==0

Added ``wxd`` directory with decoration classes.


0.8.2 (1/5/2003 to 2/26/2003)
-----------------------------

Wrapped ``sys.ps1``, ``sys.ps2``, and ``sys.ps3`` in ``str()``.
(Thanks, Kieran Holland.)

Fixed minor things found by PyChecker.

Changed locals to use ``__main__.__dict__`` and added code to clean up
the namespace, making it as close to the regular Python environment as
possible.  This solves the problem of pickling and unpickling
instances of classes defined in the shell.

Made ``shell.PasteAndRun()`` a little more forgiving when it finds a
ps2 prompt line with no trailing space, such when you copy code from a
web page.

Improved autocomplete behavior by adding these to shell::

    self.AutoCompSetAutoHide(False)
    self.AutoCompStops(' .,;:([)]}\'"\\<>%^&+-=*/|`')

Added ``decor`` directory, ``decorator.py``, ``stcDecor.py``, and
``stcConstants.py``.  These all serve the purpose of adding docstrings
to existing wxPython classes, in particular the ``wxStyledTextCtrl``.

Added ``wrap.py``, a command line utility for running a wxPython app
with additional runtime-tools loaded, such as PyCrust (the only tool
at this point).

Flushed the clipboard Cut/Copy operations so that selections will
exist in the clipboard even after PyCrust has been closed.

Improved the suppression of docstrings for simple data types appearing
in the namespace viewer.

Better handling of autocompletion with numeric types; no
autocompletion when typing a dot after an integer.  If the
autocompletion is desired, type a space before the dot::

    func = 3 .

More Filling!!! The namespace tree is now dynamically updated.


0.8.1 (12/20/2002 to 12/25/2002)
--------------------------------

Improved keyboard handling with Autocomplete active.  You can now use
Enter as well as Tab to select an item from the list.

Disabled autocomplete for lists of 2000 items or more.  The current
implementation of wxSTC can't handle lists this big.

Changed ``filling`` to always display docstrings for objects.  This is
useful for objects whose docstrings have been decorated, rather than
coming directly from the source code.  (Hmmm.  Sounds like someone is
doing some decorating.  I wonder where that would be helpful? <wink>)

Fixed handling of icon.  Added ``images.py`` file.


0.8 (10/29/2002 to 12/16/2002)
------------------------------

Added "help" to startup banner info.

Made all ``wx`` and ``stc`` imports explicit.  No more ``import *``.

Replaced use of the ``wx`` module's ``true`` and ``false`` with
Python's ``True`` and ``False``.

Changed ``introspect.getRoot()`` to use ``tokenize`` module.  This
does a slightly better job than the previous parsing routine and the
code is clearer.

Improved handling of whitespace and empty types during introspection.

Fixed cut/copy clipboard problem under Linux.  (Robin Dunn rocks!!!)

Added shell.about() which works like this::

    >>> shell.about()
    PyCrust Version: 0.8
    Shell Revision: 1.80
    Interpreter Revision: 1.15
    Python Version: 2.2.2
    wxPython Version: 2.3.3.1
    Platform: linux2

Added copy plus and paste plus to shell menu.

Moved shell menu from ``shell.py`` to ``shellmenu.py``.

Added ``sys.stdin.readlines()`` support.

Added ``time.sleep()`` in ``readline()`` and ``OnIdle()`` event
handler to free up the CPU.


0.7.2 (2/22/2002 to 8/27/2002)
------------------------------

Tweaked ``getAttributeNames()`` to pick up a few more attributes::

    '__bases__', '__class__', '__dict__', '__name__', 'func_closure',
    'func_code', 'func_defaults', 'func_dict', 'func_doc',
    'func_globals', 'func_name'

Added a tests directory and unit tests.

Improved support for empty types in the shell: ``[]``, ``()`` and
``{}`` as far as when call tips and autocompletion are available.

Added support for the other triple string - ``''''''``.

Refactored ``introspect.py`` to improve testability.

Improved call tips for unbound methods by leaving the "self"
parameter, since unbound methods require an instance be passed.

Fixed call tip bug where a tip was displayed when a "(" was typed
after an object that wasn't callable.

Fixed ``getAllAttributeNames`` when ``str(object)`` fails.

Added brace highlighting.  (Thank you, Kevin Altis.)

Fixed problem displaying unicode objects in ``PyFilling``.

Changed how ``filling.py`` checks for expandable objects.  Lists are
now expandable objects.

Made the key handling more robust when there is an active text
selection that includes text prior to the last primary prompt.  Thanks
to Raul Cota for pointing this out.

Fixed wxSTC problem with brace highlighting and non-us keyboards.
(Thank you for the patch, Jean-Michel Fauth.)

Added ``busy = wxBusyCursor()`` to key points in ``shell`` and
``filling``.

Added ``OnCloseWindow`` handler to ``ShellFrame`` and ``CrustFrame``.

Default to ``SetWrapMode(1)`` for shell and namespace viewer.

Added ``shell.wrap()`` and ``shell.zoom()``.

Added autoCompleteKeys hooks for Raul Cota.

Cleaned up various little key handling bugs.

Changed input methods to get values from shell, rather than dialog
boxes.  Renamed ``readIn`` to ``readline`` and ``readRaw`` to
``raw_input``.


0.7.1 (12/12/2001 to 2/21/2002)
-------------------------------

Fixed ``OnChar()`` issues effecting European keyboards, as reported by
Jean-Michel Fauth.

Fixed ``introspect.py`` issue with xmlrpc objects reported by Kevin
Altis.

Fixed some introspect/PyFilling issues with regard to Python 2.2.

Fixed font background color as reported by Keith J. Farmer.  (Thanks)

Fixed problem with call tips and autocompletion inside multiline
commands as report by Kevin Altis.

Improved ``OnKeyDown`` handling of cut/copy/paste operations based on
feedback from Syver Enstad.  (Thanks)

Added a ``shell.help()`` method to display some help info.

Changed sort of items in the namespace viewer to case insensitive.

Changed ``attributes.sort(lambda x, y: cmp(x.upper(), y.upper()))`` in
advance of an upcoming fix to an autocompletion matching bug in wxSTC.

Improved support for ZODB by allowing namespace drilldown into BTrees.

Added ``shell.PasteAndRun()`` to support pasting multiple commands into
the shell from the clipboard.  Ctrl+Shift+V or v.

Enter now always processes a command (or copies down a previous one.)
To insert a line break, press Ctrl+Enter.

Escape key clears the current, unexecuted command.

History retrieval changed to replace current command.  Added new keys
to insert from history - Shift+Up and Shift+Down.

Better call tips on objects with ``__call__`` methods.

Improved call tip positioning calculation.


0.7 (10/15/2001 to 12/11/2001)
------------------------------

Changed how command history retrieval functions work.  Added Alt-P,
Alt-N as keybindings for Retrieve-Previous, Retrieve-Next.

Added full support for multi-line commands, similar to IDLE.

Changed ``introspect.getAttributeNames()`` to do a case insensitive
sort.

Changed Cut/Copy/Paste to deal with prompts intelligently.  Cut and
Copy remove all prompts.  Paste can handle prompted or not-prompted
text.

Added ``CopyWithPrompts()`` method attached to Ctrl-Shift-C for those
times when you really do want all the prompts left intact.

Improved handling of the shell's read-only zone.

Changed ``CrustFrame.__init__`` parameter spec to include all
parameters allowed by a ``wxFrame``.

Changed ``FillingText`` to be read-only.

Renamed ``PyCrust.py`` to ``PyCrustApp.py`` to eliminate
package/module name conflicts that kept you from doing ``from PyCrust
import shell`` inside files located in the ``PyCrust`` directory.

Renamed ``PyFilling.py`` to ``PyFillingApp.py`` and ``PyShell.py`` to
``PyShellApp.py`` to maintain consistency.

Removed the ``__date__`` property from all modules.

Fixed bug in ``introspect.getCallTip()``, reported by Kevin Altis.


0.6.1 (9/19/2001 to 10/12/2001)
-------------------------------

Changed ``Shell.run()`` to always position to the end of existing
text, as suggested by Raul Cota.

Changed ``introspect.getAllAttributeNames()`` to break circular
references in ``object.__class__``, which occurs in Zope/ZODB
extension classes.

Changed ``filling.FillingTree.getChildren()`` to introspect extension
classes.

Fixed minor bugs in ``introspect.getCallTip()`` that were interfering
with call tips for Zope/ZODB extension class methods.

In preparation for wxPython 2.3.2, added code to fix a font sizing
problem.  Versions of wxPython prior to 2.3.2 had a sizing bug on Win
platform where the font was 2 points larger than what was specified.

Added a hack to ``introspect.getAllAttributeNames()`` to "wake up"
ZODB objects that are asleep - in a "ghost" state.  Otherwise it
returns incomplete info.


0.6 (8/21/2001 to 9/12/2001)
----------------------------

Added ``PyFilling.py`` and ``filling.py``.

``PyShell.py`` and ``PyFilling.py`` can now be run standalone, as well
as ``PyCrust.py``.

Added ``crust.py`` and moved some code from ``PyCrust.py`` to it.

Added command history retrieval features submitted by Richie Hindle.

Changed ``shell.write()`` to replace line endings with OS-specific
endings.  Changed ``shell.py`` and ``interpreter.py`` to use
``os.linesep`` in strings having hardcoded line endings.

Added ``shell.redirectStdin()``, ``shell.redirectStdout()`` and
``shell.redirectStderr()`` to allow the surrounding app to toggle
requests that the specified ``sys.std*`` be redirected to the shell.
These can also be run from within the shell itself, of course.

The shell now adds the current working directory "." to the search
path::

    sys.path.insert(0, os.curdir)

Added support for distutils installations.


0.5.4 (8/17/2001 to 8/20/2001)
------------------------------

Changed default font size under Linux to::

    'size'   : 12,
    'lnsize' : 10,

Changed ``Shell`` to expect a parameter referencing an Interpreter
class, rather than an intepreter instance, to facilitate subclassing
of Interpreter, which effectively broke when the Editor class was
eliminated.

Fixed ``PyCrustAlaCarte.py``, which had been broken by previous
changes.

Created ``InterpreterAlaCarte`` class as an example for use in the
demo.

Split ``PyCrust.py`` into ``PyCrust.py`` and ``PyShell.py`` in
anticipation of ``PyFilling.py``.


0.5.3 (8/16/2001)
-----------------

Added patch to ``PyCrust.py`` to fix wxPython bug::

    wxID_SELECTALL = NewId() # This *should* be defined by wxPython.


0.5.2 (8/14/2001 to 8/15/2001)
------------------------------

Shortened module names by dropping "PyCrust" as a prefix.

Changed ``version`` to ``VERSION`` in ``version`` module.

Added Options menu to PyCrust application.

Eliminated the Editor class (and editor module) by merging with Shell.
This means that Shell "is a" wxStyledTextCtrl rather than "has a".
There just wasn't enough non-gui code to justify the separation.
Plus, Shell will be much easier for gui toolkits/designers to deal
with now.


0.5.1 (8/10/2001 to 8/14/2001)
------------------------------

Added ``introspect`` module.

Moved some functionality from ``PyCrustInterp`` to ``introspect``.

Changed ``introspect.getRoot()`` to no longer remove whitespace from
the command.  This was a remnant of a previous approach that, when
left as part of the current approach, turned out to be a really bad
thing.

Changed ``introspect.getRoot()`` to allow commands of ``''``, ``""``,
``""""""``, ``[]``, ``()``, and ``{}`` to pass through.  This allows
you to type them, followed by a dot, and get autocomplete options on
them.

Changed ``introspect.getRoot()`` to identify some situations where
strings shouldn't be considered roots.  For example::

    >>> import PyCrust  # To illustrate the potential problem.
    >>> len('PyCrust.py')

Typing the dot at the end of "PyCrust" in the second line above should
NOT result in an autocompletion list because "PyCrust" is part of a
string in this context, not a reference to the PyCrust module object.
Similar reasoning applies to call tips.  For example::

    >>> len('dir(')

Typing the left paren at the end of "dir" should NOT result in a call
tip.

Both features now behave properly in the examples given.  However,
there is still the case where whitespace precedes the potential root
and that is NOT handled properly.  For example::

    >>> len('this is a dir(')

and::

    >>> len('This is PyCrust.py')

More code needs to be written to handle more complex situations.

Added ``locals=None`` parameter to ``Shell.__init__()``.

Added support for magic attribute retrieval.  Users can change this
with::

    >>> shell.editor.autoCompleteIncludeMagic = 0

Added the ability to set filters on auto completion to exclude
attributes prefixed with a single or double underscore.  Users can
exclude one or the other or both with::

    >>> shell.editor.autoCompleteExcludeSingle = 1
    >>> shell.editor.autoCompleteExcludeDouble = 1


0.5 (8/8/2001)
--------------

Mostly just a final version change before creating a release.


0.4 (8/4/2001 to 8/7/2001)
--------------------------

Changed version/revision handling.

Fixed bugs.


0.3 (8/2/2001 to 8/3/2001)
--------------------------

Removed lots of cruft.

Added lots of docstrings.

Imported to CVS repository at SourceForge.

Added call tips.


0.2 (7/30/2001 to 8/2/2001)
---------------------------

Renamed several files.

Added command autocompletion.

Added menus to PyCrust.py: File, Edit and Help.

Added sample applications: ``PyCrustAlaCarte.py``,
``PyCrustAlaMode.py``, and ``PyCrustMinimus.py``.


0.1 (7/1/2001 to 7/19/2001)
---------------------------

Added basic syntax coloring much like Boa.

Added read-only logging much like IDLE.

Can retrieve a previous command by putting the cursor back on that
line and hitting enter.

Stdin and raw_input operate properly so you can now do ``help()`` and
``license()`` without hanging.

Redefined "quit", "exit", and "close" to display a better-than-nothing
response.

Home key honors the prompt.

Created SourceForge account, but nothing was posted.


In the beginning, there was pie... (7/1/2001)
---------------------------------------------

Blame it all on IDLE, Boa and PythonWin.  I was using all three, got
frustrated with their dissimilarities, and began to let everyone know
how I felt.  At the same time, Scintilla looked like an interesting
tool to build a shell around.  And while I didn't receive much in the
way of positive feedback, let alone encouragement, I just couldn't let
go of the idea of a Scintilla-based Python shell.  Then the PythonCard
project got to the point where they were talking about including a
shell in their development environment.  That was all the incentive I
needed.  PyCrust had to happen...
=====================================
 PyCrust - The Flakiest Python Shell
=====================================

Half-baked by Patrick K. O'Brien (pobrien@orbtech.com)

Orbtech - "Your source for Python programming expertise."
Sample all our half-baked Python goods at www.orbtech.com.


What is PyCrust?
----------------

PyCrust is an interactive Python environment written in Python.
PyCrust components can run standalone or be integrated into other
development environments and/or other Python applications.

PyCrust comes with an interactive Python shell (PyShell), an
interactive namespace/object tree control (PyFilling) and an
integrated, split-window combination of the two (PyCrust).


What is PyCrust good for?
-------------------------

Have you ever tried to bake a pie without one? Well, you shouldn't
build a Python program without a PyCrust either.


What else do I need to use PyCrust?
-----------------------------------

PyCrust requires Python 2.2 or later, and wxPython 2.4 or later.
PyCrust uses wxPython and the Scintilla wrapper (wxStyledTextCtrl).
Python is available at http://www.python.org/.  wxPython is available
at http://www.wxpython.org/.


Where can I get the latest version of PyCrust?
----------------------------------------------

The latest production version ships with wxPython.  The latest
developer version is available in the wxWindows CVS at:
http://cvs.wxwindows.org/viewcvs.cgi/


Where is the PyCrust project hosted?
------------------------------------

The old answer was "At SourceForge, of course." The SourceForge
summary page is still available at:
http://sourceforge.net/projects/pycrust/

The new answer is that there is no longer a need for a separate
project.  Simply install wxPython and you'll have everything you need.


I found a bug in PyCrust, what do I do with it?
-----------------------------------------------

You can send it to me at pobrien@orbtech.com.


I want a new feature added to PyCrust. Will you do it?
------------------------------------------------------

Flattery and money will get you anything. Short of that, you can send
me a request and I'll see what I can do.


Does PyCrust have a mailing list full of wonderful people?
----------------------------------------------------------

As a matter of fact, we do. Join the PyCrust mailing lists at:
http://sourceforge.net/mail/?group_id=31263


//----------------------------------------------------------------------
// Name:        embedded.cpp
// Purpose:     To serve as an example of how to use wxPython from
//              within a C++ wxWindows program.
//
// Author:      Robin Dunn
//
// Created:     1-May-2002
// RCS-ID:      $Id$
// Copyright:   (c) 2002 by Total Control Software
// Licence:     wxWindows license
//----------------------------------------------------------------------
// For compilers that support precompilation, includes "wx/wx.h".
// Import Python and wxPython headers
//----------------------------------------------------------------------
// Class definitions
//----------------------------------------------------------------------
// MyApp methods
// don't start the app if we can't initialize wxPython.
// Initialize Python
// Load the wxPython core API.  Imports the wx._core_ module and sets a
// local pointer to a function table located there.  The pointer is used
// internally by the rest of the API functions.
// Save the current Python thread state and release the
// Global Interpreter Lock.
// Restore the thread state and tell Python to cleanup after itself.
// wxPython will do its own cleanup as part of that process.  This is done
// in OnExit instead of ~MyApp because OnExit is only called if OnInit is
// successful.
//----------------------------------------------------------------------
//RedirectStdio();
// Make some child windows from C++
// And get a panel from Python
//----------------------------------------------------------------------
// This is where the fun begins...
// For simple Python code that doesn't have to interact with the
// C++ code in any way, you can execute it with PyRun_SimpleString.
// First, whenever you do anything with Python objects or code, you
// *MUST* aquire the Global Interpreter Lock and block other
// Python threads from running.
// Execute the code in the __main__ module
// Finally, release the GIL and let other Python threads run.
// This is a helpful little tidbit to help debugging and such.  It
// redirects Python's stdout and stderr to a window that will popup
// only on demand when something is printed, like a traceback.
// More complex embedded situations will require passing C++ objects to
// Python and/or returning objects from Python to be used in C++.  This
// sample shows one way to do it.  NOTE: The above code could just have
// easily come from a file, or the whole thing could be in the Python
// module that is imported and manipulated directly in this C++ code.  See
// the Python API for more details.
// As always, first grab the GIL
// Now make a dictionary to serve as the global namespace when the code is
// executed.  Put a reference to the builtins module in it.  (Yes, the
// names are supposed to be different, I don't know why...)
// Execute the code to make the makeWindow function
// Was there an exception?
// Now there should be an object named 'makeWindow' in the dictionary that
// we can grab a pointer to:
// Now build an argument tuple and call the Python function.  Notice the
// use of another wxPython API to take a wxWindows object and build a
// wxPython object that wraps it.
// Was there an exception?
// Otherwise, get the returned window out of Python-land and
// into C++-ville...
// Release the python objects we still have
// Finally, after all Python stuff is done, release the GIL
//----------------------------------------------------------------------
// This contains all the C++ code that is needed by the sip module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
//
// This file is part of SIP.
//
// This copy of SIP is licensed for use under the terms of the SIP License
// Agreement.  See the file LICENSE for more details.
//
// This copy of SIP may also used under the terms of the GNU General Public
// License v2 or v3 as published by the Free Software Foundation which can be
// found in the files LICENSE-GPL2 and LICENSE-GPL3 included in this package.
//
// SIP is supplied WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// Set a C++ bool for the main C implementation of the module.
// If building for Windows...
//----------------------------------------------------------------------
// This gets run when the DLL is loaded.  We just need to save the
// instance handle.
//----------------------------------------------------------------------
// handle to DLL module
// reason for calling function
// reserved
// If wxPython is embedded in another wxWidgets app then
// the instance has already been set.
// __WXMSW__
//----------------------------------------------------------------------
// Classes for implementing the wxp main application shell.
//----------------------------------------------------------------------
//m_callFilterEvent = false;
// Implementing OnInit is optional for wxPython apps
// implementation only
//bool m_callFilterEvent;
// Exception object raised for wxASSERT failures
// ignore it?
// turn it into a Python exception?
// set the exception
// Now when control returns to whatever API wrapper was called from
// Python it should detect that an exception is set and will return
// NULL, signalling the exception to Python.
// Send it to the normal log destination, but only if
// not _DIALOG because it will call this too
// do the normal wx assert dialog?
// Only initialize wxWidgets once
// Copy the values in Python's sys.argv list to a C array of char* to
// be passed to the wxEntryStart function below.
// borrowed reference
// if there isn't anything in sys.argv[0] then set it to the python executable
// Initialize wxWidgets
// wxApp takes ownership of the argv array, don't delete it here
// It's now ok to generate exceptions for assertion errors.
// Call the Python wxApp's OnPreInit and OnInit functions if they exist
// Only use CallOnInit the first time, otherwise it will block on [NSApp run] in wxOSX_Cocoa;
//#ifdef __WXOSX_COCOA__
//    OSXSetInitWasCalled(true);  TODO: consider adding this method to wxApp
//#endif
// Function to test if the Display (or whatever is the platform equivallent)
// can be connected to.
// This is adapted from Python's Mac/Modules/MacOS.c in the
// MacOS_WMAvailable function.
/*
/* On 10.1 CGMainDisplayID() isn't available, and
// Also foreground the application on the first call as a side-effect.
// 
// TODO: These APIs are deprecated, and will likely be gone in the 10.15 SDK
//
// [NSRunningApplication activateIgnoringOtherApps: YES]  ??
// 
// TODO...
//--------------------------------------------------------------------------
// Name:        src/bitmap_ex.h
// Purpose:     Helper functions and etc. for copying bitmap data to/from
//              buffer objects.  This file is included in etg/bitmap.py and
//              used in the wxBitmap wrapper.
//
// Author:      Robin Dunn
//
// Created:     27-Apr-2012
// Copyright:   (c) 2012-2018 by Total Control Software
// Licence:     wxWindows license
//--------------------------------------------------------------------------
// TODO: Switch these APIs to use the new wxPyBuffer class
// A simple sequence of RGB bytes
// A simple sequence of RGBA bytes
// A sequence of 32-bit values in native endian order,
// where the alpha is in the upper 8 bits, then red, then
// green, then blue.  The stride is the distance in bytes
// from the beginning of one row of the image data to the
// beginning of the next row.  This may not be the same as
// width*4 if alignment or platform specific optimizations
// have been utilized.
// NOTE: This is normally used with Cairo, which seems to
// already have the values premultiplied.  Should we have
// a way to optionally do it anyway?
// Some helper macros used below to help declutter the code
// images loaded from a file may not have set the depth, at least on Mac...
// A simple sequence of RGB bytes
// Source has alpha, but we won't be using it because the
// destination buffer doesn't
// A simple sequence of RGBA bytes
// A sequence of 32-bit values in native endian order,
// where the alpha is in the upper 8 bits, then red, then
// green, then blue.  The stride is the distance in bytes
// from the beginning of one row of the image data to the
// beginning of the next row.  This may not be the same as
// width*4 if alignment or platform specific optimizations
// have been utilized.
// NOTE: This is normally used with Cairo, which seems to
// already have the values premultiplied.  Should we have
// a way to optionally do it anyway?
// if (!useAlpha /*depth == 24*/)
/*depth == 24*/)
//--------------------------------------------------------------------------
// If building for Windows...
//----------------------------------------------------------------------
// Use an ActivationContext to ensure that the new (themed) version of
// the comctl32 DLL is loaded.
//----------------------------------------------------------------------
// Note that the use of the ISOLATION_AWARE_ENABLED define replaces the
// activation context APIs with wrappers that dynamically load the API
// pointers from the kernel32 DLL so we don't have to do that ourselves.
// Using ISOLATION_AWARE_ENABLED also causes the manifest resource to be put
// in slot #2 as expected for DLLs. (See wx/msw/wx.rc)
// ISOLATION_AWARE_ENABLED
// __WXMSW__
//#ifdef __WXMSW__
////     wxCrtSetDbgFlag(_CRTDBG_LEAK_CHECK_DF
////                     | _CRTDBG_CHECK_ALWAYS_DF
////                     | _CRTDBG_DELAY_FREE_MEM_DF
////         );
//#endif
//
//#ifdef WXP_WITH_THREAD
//#if wxPyUSE_GIL_STATE
//    PyEval_InitThreads();
//#else
//    PyEval_InitThreads();
//    wxPyTStates = new wxPyThreadStateArray;
//    wxPyTMutex = new wxMutex;
//
//    // Save the current (main) thread state in our array
//    PyThreadState* tstate = wxPyBeginAllowThreads();
//    wxPyEndAllowThreads(tstate);
//#endif
//#endif
// Ensure that the build options in the DLL (or whatever) match this build
// Exception object raised for wxASSERT failures
// Create an exception object to use for wxASSERTions
// An alias that should be deprecated sometime
// Create an exception object to use when the app object hasn't been created yet
// TODO: Find some magic way to deprecate wx.Platform such that it raises
// a warning when used...  Maybe a class that returns wx.Port for any __getattr__?
// Make a tuple of strings that gives more info about the platform and build.
//--------------------------------------------------------------------------
// Name:        src/dc_ex.h
// Purpose:     Functions that can quickly draw lists of items on a DC
//
// Author:      Robin Dunn
//
// Created:     18-Aug-2012
// Copyright:   (c) 2012-2018 by Total Control Software
// Licence:     wxWindows license
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
// Use a new pen?
// Use a new brush?
// Get the Coordinates
// call the drawOp
// end of main for loop
//---------------------------------------------------------------------------
// Use a new string ?
// Use a new foreground ?
// Use a new background ?
// Get the point coordinates
// Now draw the text
//---------------------------------------------------------------------------
// get the x value
// get the y value
// The length of the sequence is returned in count.
// Get an item: try fast way first.
// Convert o to wxPoint.
// Clean up.
// #define wxPy_PRECALLINIT     "_preCallInit"
// #define wxPy_POSTCALLCLEANUP "_postCallCleanup"
// This function is used for all events destined for Python event handlers.
// Call the event handler, passing the event object
// steals ref to arg
// result is ignored, but we still need to decref it
// Just in case...
/////////////////////////////////////////////////////////////////////////////
// Name:        src/pseudodc.cpp
// Purpose:     Implementation of the wxPseudoDC classes
// Author:      Paul Lanier
// Modified by: Robin Dunn
//
// Created:     25-May-2006
// Copyright:   (c) 2006-2018 Total Control Software
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////
// For compilers that support precompilation, includes "wx.h".
//include "wx/wxprec.h"
//#undef DEBUG
// wxList based class definitions
//----------------------------------------------------------------------------
// Helper functions used for drawing greyed out versions of objects
//----------------------------------------------------------------------------
// ============================================================================
// various pdcOp class implementation methods
// ============================================================================
// ----------------------------------------------------------------------------
// pdcDrawPolyPolygonOp
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// pdcDrawLinesOp
// ----------------------------------------------------------------------------
// The first * gives us a wxPoint ptr, second * dereferences that ptr
// ----------------------------------------------------------------------------
// pdcDrawPolygonOp
// ----------------------------------------------------------------------------
// The first * gives us a wxPoint ptr, second * dereferences that ptr
// ----------------------------------------------------------------------------
// pdcDrawSplineOp
// ----------------------------------------------------------------------------
// The first * gives us a wxPoint ptr, second * dereferences that ptr
// wxUSE_SPLINES
// ============================================================================
// pdcObject implementation
// ============================================================================
// ----------------------------------------------------------------------------
// DrawToDC - play back the op list to the DC
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Translate - translate all the operations by some dx,dy
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// SetGreyedOut - set the greyout member and cache grey versions of everything
// if greyout is true
// ----------------------------------------------------------------------------
// ============================================================================
// wxPseudoDC implementation
// ============================================================================
// ----------------------------------------------------------------------------
// Destructor
// ----------------------------------------------------------------------------
// delete all the nodes in the list
// ----------------------------------------------------------------------------
// ClearAll - remove all nodes from list
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// GetLen - return the number of operations in the current op list
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// FindObject - find and return an object node by id.  If node doesn't exist
//               and create is true then create one and return it.  Otherwise
//               return NULL.
// ----------------------------------------------------------------------------
// see if last operation was for same id
//~ if (m_lastObject && m_lastObject->GetId() == id)
//~ return m_lastObject;
// if not then search for it
//not found
//found
// ----------------------------------------------------------------------------
// AddToList - Add a node to the list at the end (preserve draw order)
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// ClearID - remove all the operations associated with a single ID
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// RemoveID - Remove the object node (and all operations) associated with an id
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// SetIdBounds - Set the bounding rect for a given id
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// GetIdBounds - Get the bounding rect for a given id
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// TranslateId - Translate all the operations of a single id
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// DrawIdToDC - Draw a specific id to the dc passed in
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// SetIdGreyedOut - Set the greyedout member of id
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// GetIdGreyedOut - Get the greyedout member of id
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// FindObjectsByBBox - Return a list of all the ids whose bounding boxes
//                     contain (x,y)
// ----------------------------------------------------------------------------
//wxPyBlock_t blocked = wxPyBeginBlockThreads();
//wxPyEndBlockThreads(blocked);
// ----------------------------------------------------------------------------
// FindObjects - Return a list of all the ids that draw to (x,y)
// ----------------------------------------------------------------------------
//wxPyBlock_t blocked = wxPyBeginBlockThreads();
// special case radius = 0
// setup the memdc for rendering
// start clean
// draw the object
// clear and update rgn2
// create bitmap with circle for masking
// now setup a memdc for rendering our object
// set the origin so (x,y) is in the bmp center
// a region will be used to see if the result is empty
// start clean
//memdc.Clear();
// draw the object
// remove background color
// clear and update rgn2
//rgn2.Intersect(rgn);
//wxPyEndBlockThreads(blocked);
// ----------------------------------------------------------------------------
// DrawToDCClipped - play back the op list to the DC but clip any objects
//                   known to be not in rect.  This is a coarse level of
//                   clipping to speed things up when lots of objects are off
//                   screen and doesn't affect the dc level clipping
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// DrawToDC - play back the op list to the DC
// ----------------------------------------------------------------------------
//--------------------------------------------------------------------------
// This class can wrap a Python file-like object and allow it to be used
// as a wxInputStream.
// Make sure there is at least a read method
// implement base class virtuals
// cast off const
// strings only, not unicode...
// wxFileOffset is a 64-bit value...
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
// This class can wrap a Python file-like object and allow it to be used
// as a wxInputStream.
// Make sure there is at least a write method
// implement base class virtuals
// cast off const
// wxFileOffset is a 64-bit value...
//--------------------------------------------------------------------------
// Unlike GDK_WINDOW_XWINDOW, GDK_WINDOW_XID can't handle a NULL, so check 1st
#!/usr/bin/python
#----------------------------------------------------------------------
# Name:        build.py
# Purpose:     Master build controller script.
#              This script is used to run through the commands used for the
#              various stages of building Phoenix, and can also be a front-end
#              for building wxWidgets and the wxPython distribution files.
#
# Author:      Robin Dunn
#
# Created:     3-Dec-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#----------------------------------------------------------------------
# which version of Python is running this script
# defaults
# it will be set later
# convenience access to the wxPython version digits
# same for the wxWidgets version
# is the minor version odd or even?
# Some tools will be downloaded for the builds. These are the versions and
# MD5s of the tool binaries currently in use.
# And the location where they can be downloaded from
#---------------------------------------------------------------------------
# For collecting test names or files, to be run after all have been pulled
# off the command line
# ensure that each command starts with the CWD being the phoenix dir.
# ignore empty command-line args (possible with the buildbot)
# Now run the collected tests names, if any
#---------------------------------------------------------------------------
# Helper functions  (see also buildtools.config for more)
#---------------------------------------------------------------------------
# Use $TOOLS to find the correct Python. If set then it should be
# the install root of all Python's on the system, with the 64-bit
# ones in an amd64 subfolder, like this:
#
# $TOOLS\Python27\python.exe
# $TOOLS\Python33\python.exe
# $TOOLS\amd64\Python27\python.exe
# $TOOLS\amd64\Python33\python.exe
#
# Otherwise check if the invoking Python is the right version
# find a pythonX.Y on the PATH
# If no version or path were specified then default to the python
# that invoked this script
# Make sure this is set in case it wasn't above.
# Using --dev is a shortcut for setting several build options that I use
# while working on the code in my local workspaces. Most people will
# probably not use this so it is not part for the documented options and
# is explicitly handled here before the options parser is created. If
# anybody besides Robin is using this option do not depend on the options
# it inserts into the args list being consistent. They could change at any
# update from the repository.
#'--build_dir=../bld',
#'--prefix=/opt/wx/2.9',
#  % numCPUs(),
# These will be ignored on the other platforms so it is okay to
# include them unconditionally
#'--osx_carbon',
#'--mac_arch=i386',
#'--mac_arch=i386,x86_64',
# replace the --dev item with the items from the list
# Linux, Unix and MacOS:
# Linux & Unix:
# OSX:
# Windows:
# Default
#line N' lines from the SIP generated code")),
# If WXPYTHON_BUILD_ARGS is set in the environment, split it and add to args
# Parse the args into options
# We always use magic on Windows
# Turn off magic if using the system wx
# Some options don't make sense for release builds
# pop back to the original dir
# Check in the bin dir for the specified version of the tool command. If
# it's not there then attempt to download it. Validity of the binary is
# checked with an MD5 hash.
# Setting a value in the environment overrides other options
# setup
# if the file exists run some verification checks on it
# first make sure it is a normal file
# now check the MD5 if not in dev mode and it's set to None
# If the cmd is a script run by some interpreter, or similar,
# then we don't need to check anything else
# Ensure that commands that are platform binaries are executable
# if we get this far then all is well, the cmd is good to go
# Recursive call so the MD5 value will be double-checked on what was
# just downloaded
# The download and MD5 check only needs to happen once per run, cache the sip
# cmd value here the first time through.
# Same thing for WAF
# and Doxygen
# NOTE: It is expected that there will be a host entry defined in
# ~/.ssh/config named wxpython-rbot, with the proper host, user, identity
# file, etc. needed for making an SSH connection to the snapshots server.
# Release builds work similarly with their own host configuration defined
# in the ~/.ssh/config file.
# copy the new file to the server
# Make sure it is readable by all, and writable by rbot
# get the list of all snapshot files on the server
# Leave the last keep number of builds, including this new one, on the server.
# Delete the rest.
# Ensure the destination exists
# Upload the tree
# Make sure it is readable by all
# Remove files that were last modified more than `days` days ago
# Make sure that the compiler that Python wants to use can be found.
# It will terminate if the compiler is not found or other exceptions
# are raised.
# Now get the environment variables which that compiler needs from
# its vcvarsall.bat command and load them into this process's
# environment.
#if PY2:
#    return bytes(v)
#else:
#    return bytes(v, 'utf8')
# NOTE: SIP is now generating code with scoped-enums. Older linux
# platforms like what we're using for builds, and also TravisCI for
# example, are using GCC versions that are still defaulting to C++98,
# so this flag is needed to turn on the C++11 mode. If this flag
# causes problems with other non-Windows, non-Darwin compilers then
# we'll need to make this a little smarter about what flag (if any)
# needs to be used.
#
# NOTE 2: SIP changed its output such that this doesn't appear to be
# needed anymore, but we'll leave the code in place to make it easy to
# turn it back on again if/when needed.
#print('**** Using CXXFLAGS:', os.environ.get('CXXFLAGS', ''))
# If we have cygwin then we can use cygpath to convert the path.
# Note that MSYS2 (and Git Bash) now also have cygpath so this should
# work there too.
# Are we using Windows System for Linux? (untested)
# Otherwise, do a simple translate and hope for the best?
# c:/foo --> /c/foo
# TODO: Check this!!
# If we have cygwin then we can use cygpath to convert the path.
# Note that MSYS2 (and Git Bash) now also have cygpath so this should
# work there too.
# Are we using Windows System for Linux? (untested)
# Otherwise, do a simple translate and hope for the best?
# /c/foo --> c:/foo
# There's also paths like /cygdrive/c/foo or /mnt/c/foo, but in those
# cases cygpath or wsl should be available.
# generate a new sysconfig data file
# On success the new data module will have been written to a subfolder
# of the current folder, which is recorded in ./pybuilddir.txt
# grab the file in that folder and copy it into the Python lib
#---------------------------------------------------------------------------
# Command functions and helpers
#---------------------------------------------------------------------------
# Use Doxygen to generate the docset
# Remove any existing docset in the dist dir and move the new docset in
# clear out any old docset build
# run the docset generator
# Remove the sidebar from the pages in the docset
# build the tarball
# TODO: Better support for selecting etg cmd-line flags...
# get the files to run, moving _core the to the front of the list
# all but itself
# run the script only if any dependencies are newer
# Copy the rst files into txt files
# Copy the hand-edited top level doc files too
# # pythonhosted.org can host the wxPython documentation for us, so let's
# # use it for the docs associated with the latest release of wxPython.  It
# # requires that the docs be in a .zip file with an index.html file at the
# # top level. To build this we'll just need to do like the above tarball
# # code, except add the files from within the docs/html folder so they will
# # all be at the top level of the archive.  shutil.make_archive can be used
# # in this case because we don't need to rewrite the pathnames in the
# # archive.
# if options.release:
#     msg("Archiving wxPython Phoenix documentation for pythonhosted.org...")
#     rootname = "%s-docs-pythonhosted-%s" % (baseName, cfg.VERSION)
#     zipfilename = "dist/%s.zip" % rootname
#
#     if os.path.exists(zipfilename):
#         os.remove(zipfilename)
#
#     # with zipfile.ZipFile(zipfilename, 'w', zipfile.ZIP_DEFLATED) as zip:
#     #     pwd2 = pushDir('docs/html')
#
#     zipfilename = shutil.make_archive(base_name=os.path.splitext(zipfilename)[0],
#                                       format="zip",
#                                       root_dir="docs/html")
#     zipfilename = os.path.relpath(zipfilename)
#     zipfilename = zipfilename.replace('\\', '/')
#
#     if options.upload:
#         uploadPackage(zipfilename, options, keep=5,
#                       mask='%s-docs-pythonhosted-%s*' % (baseName, cfg.VER_MAJOR))
#
#     msg('Pythonhosted zip file built at %s' % zipfilename)
# move _core the to the front of the list
# remove the leading _
# Check if any of the included files are newer than the .sbf file
# produced by the previous run of sip. If not then we don't need to
# run sip again.
# leave this turned off for now...
# typehint = '-y {}'.format(posixjoin(cfg.PKGDIR, base[1:]) + '.pyi')
# Either just fix the pathnames in the #line lines...
# ...or totally remove them by replacing those lines with ''
#line.*\n', '', srcTxt, flags=re.MULTILINE)
# inject wxClassInfo macros into the sip generated wrapper class
# find the beginning of the class declaration
# next line is '{', insert after that
# find the '};' that terminates the class
# join it back up and return
# Check each file in tmpdir to see if it is different than the same file
# in cfg.SIPOUT. If so then copy the new one to cfg.SIPOUT, otherwise
# ignore it.
# Remove tmpdir and its contents
# Run all tests
# --boxed runs each test in a new process (only for posix *&##$#@$^!!)
# -n is the number of processes to run in parallel
# --timeout will kill the test process if it gets stuck
# let pytest find all tests in the unittest folder
# otherwise, run only the test modules given
# Windows-specific pre build stuff
# Platform is something other than MSW
# TODO:  Don't hard-code this path
#if options.install:
#    build_options.append('--installdir=%s' % DESTDIR)
#    build_options.append("--install")
# Change to what will be the wxWidgets build folder
# (Note, this needs to be after any testing for file/path existance, etc.
# because they may be specified as relative paths.)
# Using $ORIGIN in the rpath will cause the dynamic linker to look
# for shared libraries in a folder relative to the loading binary's
# location. Here we'll use just $ORIGIN so it should look in the same
# folder as the wxPython extension modules.
# Import and run the wxWidgets build script
# build again without the --debug flag?
# Build the wx message catalogs, but first check that there is a msgfmt
# command available
# Copy the wxWidgets DLLs to the wxPython package folder
# Also copy the cairo DLLs if needed
# For Python 3.5 and 3.6 builds we also need to copy some VC14 redist DLLs.
# NOTE: Do it for 3.7+ too for now. But when we fully switch over to VS 2017
# this may need to change. See notes in wscript about it.
# Copy the wxWidgets dylibs
# Now use install_name_tool to change the extension modules to look
# in the same folder for the wx libs, instead of the build dir. Also
# change the wx libs the same way.
# Not Windows and not OSX.  For now that means that we'll assume it's wxGTK.
# If all went well the wxPython extensions should already be looking
# for the wxlib's in $ORIGIN, so there is nothing else to do here
# hope it is on the PATH
# this needs to be the last option
# Using $ORIGIN in the rpath will cause the dynamic linker to look
# for shared libraries in a folder relative to the loading binary's
# location. Here we'll use just $ORIGIN so it should look in the same
# folder as the wxPython extension modules.
# Regenerate the _sysconfigdata module?
# Run waf to perform the builds
# Uses docker images defined by the Dockerfiles under ./docker/build for
# building wxPython wheels for a few versions of Linux.
#
# Requirements: Docker
#               Internet connection for downloading docker images, if needed
#               One wxPython source archive in ./dist (created with cmd_sdist)
# 'none' can be used to skip building and go straight to uploading
# Build other stuff that may have their own seprarate build commands instead
# of the (ab)normal etg/tweak/generate/sip/compile sequence that the rest of
# wxPython uses. So far, it's just the wx.svg package
# Otherwise, run 'make install' in the wx build folder
# Also remove any remaining DLLs just to make sure. This includes the C++
# runtime DLLs, Cairo, etc.
# TODO: Check for specific files, not just *.dll
# These take care of all the object, lib, shared lib files created by the
# compilation part of build
# Clean all the intermediate and generated files from the sphinx command
# Now also scrub out all of the SIP and C++ source files that are
# generated by the Phoenix ETG system.
# (re)build everything
# Build a source tarball that includes the generated SIP and CPP files.
# Make a place to export everything to
# and a place to put the final tarball
# recursively export a git archive of this repo and submodules
# copy Phoenix's generated code into the archive tree
# Copy the license files from wxWidgets
# Copy the locale message catalogs
# Also add the waf executable, fetching it first if we don't already have it
# And the REV.txt if there is one
# Copy the Sphinx source files in the docs tree, excluding the html and
# sphinx/build folders, if present.
# Add some extra stuff to the root folder
# build the tarball
# Build a tarball containing the demo and samples
# make a tree for building up the archive files
# and a place to put the final tarball
# pull out an archive copy of the repo files
# Add in the README file
# build the tarball
# Build a tarball and/or installer that includes all the files needed at
# runtime for the current platform and the current version of Python.
# If the DLLs are not already in the wx package folder then go fetch
# them now.
# Grab the current revision number from the version control system
# (if possible) and write it to a file we'll use later for
# building the package version number
# Ignore this command for release builds, they are not supposed to
# include current VCS revision info in the version number.
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        setup-wxsvg.py
# Purpose:     Distutils build script for wxPython's wx.svg package
#
# Author:      Robin Dunn
#
# Created:     25-July-2019
# Copyright:   (c) 2019 by Total Control Software
# License:     wxWindows License
#----------------------------------------------------------------------
# Create a buildtools.config.Configuration object, to get the VERSION
#packages         = [PACKAGE],
#----------------------------------------------------------------------
# Name:        setup.py
# Purpose:     Distutils build script for wxPython (phoenix)
#
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#----------------------------------------------------------------------
# Create a buildtools.config.Configuration object
#----------------------------------------------------------------------
#')]
#----------------------------------------------------------------------
# Classes used in place of some distutils/setuptools classes.
# Run build.py to do the actual building of the extension modules
# Use the same Python that is running this script.
# Let distutils handle building up the package folder under the
# build/lib folder like normal.
# Clean out any libwx* symlinks in the build_lib folder, as they will
# turn into copies in the egg since zip files can't handle symlinks.
# The links are not really needed since the extensions link to the
# specific soname, and they could bloat the egg too much if they were
# left in.
#
# TODO: can eggs have post-install scripts that would allow us to
# restore the links? No.
#
# On Mac the name used by the extension module is the real
# file, so we can just get rid of all the links.
# On linux the soname used in the extension modules may
# be (probably is) one of the symlinks, so we have to be
# more tricky here. If the named file is a link and it is
# the soname, then remove the link and rename the
# linked-to file to this name.
# Otherwise just leave the symlink there since we don't
# know what to do with it.
# Redo the calculation of the egg's filename since we always have
# extension modules, but they are not built by setuptools so it
# doesn't know about them.
# Ensure that there is a basic library build for bdist_egg to pull from.
# Run the default bdist_egg command
# Do a bit of monkey-patching to let bdist_wheel know that there
# really are extension modules in this build, even though they are
# not built here.
#Distribution.is_pure = _is_pure
# Ensure that there is a basic library build for bdist_egg to pull from.
# Run the default bdist_wheel command
# Use build.py to perform the sdist
# Put the filename in dist_files in case the upload command is used.
# On the other hand, PyPI's upload size limit is waaaaaaaaay too
# small so it probably doesn't matter too much...
# Map these new classes to the appropriate distutils command names.
#----------------------------------------------------------------------
# Monkey-patch copy_file and copy_tree such that they preserve symlinks. We
# need this since we're copying the wx shared libs into the package folder
# and the default implementations would have copied the file content multiple
# times instead of just copying the symlinks.
# make a new, matching symlink in dst
#----------------------------------------------------------------------
#        ],
#    'gui_scripts' : [  # TODO: Why was this commented out?
# New wx wget
# Get/Launch Docs
# Get/Launch Demo
#'build_base' : cfg.BUILD_BASE }
#if cfg.WXPORT == 'msw':
#    BUILD_OPTIONS[ 'compiler' ] = cfg.COMPILER
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# Name:        bin/make-new-etg-file.py
# Author:      Kevin Ollivier
#
# Created:     24-Sept-2011
# Copyright:   (c) 2015-2018 by Kevin Ollivier, Robin Dunn
# License:     wxWindows License
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/%(filename)s
# Author:      %(author)s
#
# Created:     %(date)s
# Copyright:   (c) %(year)s by %(copyright)s
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#module.addHeaderCode('#include <wx/some_header_file.h>')
#c = module.find('')
#assert isinstance(c, etgtools.ClassDef)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: refactor to just use make-new-unittest-file instead of duplicating it here...
#---------------------------------------------------------------------------
# TODO: Remove this test and add real ones.
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# Name:        bin/make-new-unittest-file.py
# Author:      Robin Dunn
#
# Created:     12-July-2012
# Copyright:   (c) 2013-2018 by Robin Dunn
# License:     wxWindows License
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: Remove this test and add real ones.
#---------------------------------------------------------------------------
# Make sure the builder program exists
# check the PATH for the program
# TODO: How do we check if we're in Cygwin?
# if we don't have configure, just report success
# Important Note: if extending args, check it first!
# NoneTypes are not iterable and will crash the clean, build, or install!
# Very very irritating when this happens right at the end.
# Concrete subclasses of abstract Builder interface
#olddir = os.getcwd()
#os.chdir(dir)
#os.chdir(olddir)
# I don't have commercial versions of MSVC so I can't test this
#!/usr/bin/env python
###################################
# Author: Kevin Ollivier
# Licence: wxWindows licence
###################################
# builder object
# other globals
# Linux, Unix and MacOS:
# Linux & Unix:
# OSX:
# Windows:
# Default
# TODO: Add more tests to get the other versions...
# the name of the framework is based on the wx port being built
# the path inside the framework that is the wx --prefix
# When an installdir is used then the install_names embedded in
# the dylibs are not correct.  Reset the IDs and the dependencies
# to use just the prefix.
# ('*[0-9].[0-9].[0-9].[0-9]*.dylib')
# Failed!
# compiler / build system specific args
#wxpy_configure_opts.append("--enable-monolithic")
# Set the minimum supported OSX version, and find the oldest SDK
# version present on the build machine.
# TODO: should there be a command line option to set the SDK?
# for xcodePath in getXcodePaths():
#     sdks = [ xcodePath+"/SDKs/MacOSX10.{}.sdk".format(n)
#              for n in range(9, 15) ]
#     # use the lowest available sdk on the build machine
#     for sdk in sdks:
#         if os.path.exists(sdk):
#             wxpy_configure_opts.append(
#                 "--with-macosx-sdk=%s" % sdk)
#             break
# wxPython likes adding these debug options too
# TODO: Should options.install be automatically turned on if the
# mac_framework flag is given?
# framework builds always need to be monolithic
# The --prefix given to configure will be the framework prefix
# plus the framework specific dir structure.
# the framework build adds symlinks above the installDir + prefixDir folder
# so we need to wipe from the framework root instead of inside the prefixDir.
# Remove this when Windows XP finally dies, or when there is a
# solution for ticket #13116...
# TODO:
#print("reallib is %s" % reallib)
# we make wx the "actual" library file and link to it from libwhatever.dylib
# so that things can link to wx and survive minor version changes
#ifndef __WX_FRAMEWORK_HEADER__
#define __WX_FRAMEWORK_HEADER__
#endif // __WX_FRAMEWORK_HEADER__
#include <wx/" + os.path.basename(include) + ">\n"
# sanity check to ensure the symlink works
# put info about the framework into wx-config
# The framework is finished!
# adjust the install_name if needed
# wxPython's build will do this later if needed
#, buildDir)
# make a package if a destdir was set.
# use sys.exit instead
#----------------------------------------------------------------------
# Name:        buildtools.config
# Purpose:     Code to set and validate platform options and etc. for
#              the wxPython build.  Moved to their own module and
#              class to help setup.py to be simpler.
#
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#----------------------------------------------------------------------
#----------------------------------------------------------------------
##SIP      = SIPdefault         # Where is the sip binary?
# Use our local copy of sip.h
# Where the generated .sip files go
# where to find other sip files for %Include or %Import
# where to put the generated C++ code
# we need the WXWIN dir to configure this, see __init__
# Usually you shouldn't need to touch this, but you can set it to
# pass an alternate version of wx-config or alternate flags,
# eg. as required by the .deb in-tree build.  By default a
# wx-config command will be assembled based on version, port,
# etc. and it will be looked for on the default $PATH.
# On Linux/Unix there are several ports of wxWidgets available.
# Setting this value lets you select which will be used for the
# wxPython build.  Possibilities are 'gtk', 'gtk2', 'gtk3' and 'x11'.
# Currently only gtk, gtk2 and gtk3 work.
# Directory to use for temporary build files.
# The core wxWidgets lib can be built as either a single
# monolithic DLL or as a collection of DLLs.  This flag controls
# which set of libs will be used on Windows.  (For other platforms
# it is automatic via using wx-config.)
# Version part of wxWidgets LIB/DLL names
# Used to select which compiler will be used on Windows.  This not
# only affects distutils, but also some of the default flags and
# other assumptions in this script.  Current supported values are
# 'msvc' and 'mingw32'
# If this is set, add an -arch XXX flag to cflags. Only tested (and
# presumably, needed) for OS X.
# Don't install the tools/script files
# The name of the top-level package
# ---------------------------------------------------------------
# Basic initialization and configuration code
# change the PORT default for wxMac
# and do the same for wxMSW, just for consistency
# make sure we only use the compiler value on MSW builds
# to get our version of sip.h
# for the wxPython API
# for other hand-written headers
# enable warnings
# turn on auto-docstrings
# turn on acquire/release of GIL for everything
# name of the module containing the siplib
#'-e',    # turn on exceptions support
#'-T',    # turn off writing the timestamp to the generated files
#'-r',    # turn on function call tracing
# this is as far as we go for now
# otherwise do the rest of it
#---------------------------------------
# MSW specific settings
# Set compile flags and such for MSVC.  These values are derived
# from the wxWidgets makefiles for MSVC, other compilers settings
# will probably vary...
#('NDEBUG',),  # using a 1-tuple makes it do an undef
# '/GX-'  # workaround for internal compiler error in MSVC on some machines
# These confuse WAF, but since it already reliably picks the correct
# MSVC it shouldn't hurt to get rid of them.
# Other MSVC flags...
# Uncomment these to have debug info for all kinds of builds
#self.cflags += ['/Od', '/Z7']
#self.lflags = ['/DEBUG', ]
#---------------------------------------
# Posix (wxGTK, wxMac or mingw32) settings
#('NDEBUG',),  # using a 1-tuple makes it do an undef
# wxMac settings
# Flags and such for a Darwin (Max OS X) build of Python
# We want to use the linker command from wx to make sure
# we get the right sysroot, but we also need to ensure that
# the other linker flags that distutils wants to use are
# included as well.
# remove the compiler command
# remove any -sysroot flags and their arg
# Strip this argument and the next one:
# Combine with wx's ld command and stash it in the env
# where distutils will get it later.
# wxGTK settings
# Set flags for other Unix type platforms
# Some distros (e.g. Mandrake) put libGLU in /usr/X11R6/lib, but
# wx-config doesn't output that for some reason.  For now, just
# add it unconditionally but we should really check if the lib is
# really found there or wx-config should be fixed.
# Move the various -I, -D, etc. flags we got from the config scripts
# into the distutils lists.
# WAF wants a simple list of strings, so convert self.defines in case
# we'll be using that instead of distutils
# ---------------------------------------------------------------
# Helper functions
# load the version numbers into this instance's namespace
# Include the subversion revision in the version number? REV.txt can
# be created using the build.py setrev command. If it doesn't exist
# then the version number is built without a revision number. IOW, it
# is a release build.  (In theory)
# the values of the items in the class namespace that start
# with an upper case letter can be overridden on the command
# line
# remove the cmd line args that we recognized
# if WX_CONFIG hasn't been set to an explicit value then construct one.
# success
# TODO:  execute WX_CONFIG --list and verify a matching config is found
# get a list of all files under the srcdir, to be used for install_data
# TODO: Python3 version using os.walk generator
# get a list of all files under the srcdir matching wildcards,
# returned in a format to be used for install_data
##UNICODE:
# if wx-config --libs output does not start with -L, wx is
# installed with a standard prefix and wx-config does not
# output these libdirs because they are already searched by
# default by the compiler and linker.
# We expect that the first -I flag is the path we're looking for here
# We'll use a factory function so we can use the Configuration class as a singleton
#----------------------------------------------------------------------
# other helpers
# TODO: we might be able to get rid of this when the install code is updated...
#cmd = 'install_name_tool -change %s/lib/%s %s/lib/%s %s' % \
#      (destdir+prefix,lib,  prefix,lib,  extension)
# TODO: Change the -id too?
# -arch all  ??
# Some helpers for the code below
# Try getting the revision number from SVN, or GIT, or just fall back
# to the date.
# add quotes to elements of the command that need it
# convert the resulting command to a string
# Failed!
#raise subprocess.CalledProcessError(rval, cmd)
# TODO: Add more tests to get the other versions...
# Copy the license files from wxWidgets
# Get the sip license too
# Combine the relevant files into a single LICENSE.txt file
#----------------------------------------------------------------------
# Name:        buildtools.distutils_hacks
# Purpose:     Various hacks that have been needed to override features
#              or work-around problems in Python's distutils.
#
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# New command classes
# The Ubuntu Python adds a --install-layout option to distutils that
# is used in our package build.  If we detect that the current
# distutils does not have it then make sure that it is removed from
# the command-line options, otherwise the build will fail.
#print("WXPREFIX is %s, root is %s" % (WXPREFIX, root))
# hack for universal builds, which append i386/ppc
# to the root
#----------------------------------------------------------------------
# These functions and class are copied from distutils in Python 2.5
# and then grafted back into the distutils modules so we can change
# how the -arch and -isysroot compiler args are handled.  Basically if
# -arch is specified in our compiler args then we need to strip all of
# the -arch and -isysroot args provided by Python.
# 8.4.3
# OSX before 10.4.0, these don't support -arch and -isysroot at
# all.
# Strip this argument and the next one:
# Strip this argument and the next one:
# Check if the SDK that is used during compilation actually exists,
# the universal build requires the usage of a universal SDK and not all
# users have that installed by default.
# If a different deployment target is specified in the
# environment then make sure it is put in the global
# config dict.
# Inject a little code into the CCompiler class that will check if the object
# file is up to date with respect to its source file and any other
# dependencies associated with the extentension. If so then it is removed from
# the collection of files to build.
# Remove items from the build collection that don't need to be built
# because their obj file is newer than the source fle and any other
# dependencies.
#----------------------------------------------------------------------
# Another hack-job for the CygwinCCompiler class, this time replacing
# the _compile function with one that will pass the -I flags to windres.
# gcc needs '.res' and '.rc' compiled to object files !!!
#self.spawn(["windres", "-i", src, "-o", obj])
# for other files use the C-compiler
#----------------------------------------------------------------------
# Yet another distutils hack, this time for the msvc9compiler.  There
# is a bug in at least version distributed with Python 2.6 where it
# adds '/pdb:None' to the linker command-line, but that just results
# in a 'None' file being created instead of putting the debug info
# into the .pyd files as expected.  So we'll strip out that option via
# a monkey-patch of the msvc9compiler.MSVCCompiler.initialize method.
#----------------------------------------------------------------------
# let the base class do the rest
#if cfg.verbose:
#    cmd.append('--verbose')
# now call the base class version of this method
# Subclasses disutils.command.build_ext,
# replacing it with a SIP version that compiles .sip -> .cpp
# before calling the original build_ext command.
# Written by Giovanni Bajo <rasky at develer dot com>
# Based on Pyrex.Distutils, written by Graham Fawcett and Darrel Gallion.
# Add the SIP include directory to the include path
# pre-2.4 compatibility
# ?
# Filter dependencies list: we are interested only in .sip files,
# since the main .sip files can only depend on additional .sip
# files. For instance, if a .h changes, there is no need to
# run sip again.
# Create the temporary directory if it does not exist already
# Collect the names of the source (.sip) files
# Use the sbf file as dependency check
#----------------------------------------------------------------------
# Name:        buildtools.version
# Purpose:     wxPython project name and version numbers used in the
#              build.  This can be considered the master copy of the
#              version digits and project name.
#
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#----------------------------------------------------------------------
# Master copy of the project name
# The version numbers for wxPython are no longer kept in sync with the
# wxWidgets version number. In the past the common version number was used to
# indicate which version of wxWidgets should be used for the wxPython build.
# Now wxWidgets is a git submodule, and the linked version is included in the
# wxPython source tarball. That said, we should still bump up the MAJOR and
# MINOR numbers each time there is a corresponding bump in the wxWidgets
# version numbers.
# wxPython release flags
# The VER_FLAGS value is appended to the version number constructed from the
# first 3 components and should be set according to the following patterns.
# These should help us to better follow the PEP-0440 notions of version
# numbers, where public version identifiers are supposed to conform to the
# following scheme:
#
#      [N!]N(.N)*[{a|b|rc}N][.postN][.devN]
#
#
#   ""             for final release builds
#
#   "aN"           for official alpha releases
#   "bN"           for official beta releases
#   "rcN"          for release candidate releases
#
#   ".postN"       for numbered post releases, such as when there are
#                  minor packaging or documentation issues that can be fixed
#                  with no code changes.
#
#   ".postNaN"     for an alpha (or beta or rc) build of a numbered post
#                  release
#
#   ".dev12345"    for daily snapshot builds, by default this is automatically
#                  pulled from the REV.txt file made by the setrev build command,
#                  if it exists, and is appended to VER_FLAGS
#
#
# See also:
#   http://www.python.org/dev/peps/pep-0440/
# The version numbers of wxWidgets to be used in the build
# only used when wxVER_MINOR is an odd value
# Just a little convenience function that can be used by other build scripts
# or whatever to get the complete current version number.
# Import system's os, not backports.os.
# Check that a given file can be accessed with the correct mode.
# Additionally check that `file` is not a directory, as on Windows
# directories pass the os.access check.
# If we're given a path with a directory part, look it up directly rather
# than referring to PATH directories. This includes checking relative to the
# current directory, e.g. ./script
# The current directory takes precedence on Windows.
# PATHEXT is necessary to check on Windows.
# See if the given file matches any of the expected path extensions.
# This will allow us to short circuit when given "python.exe".
# If it does match, only test that one, otherwise we have to try
# others.
# On other platforms you don't have things like PATHEXT to tell you
# what file suffixes are executable, so just pass on cmd as-is.
# Copyright (c) 2010-2018 Benjamin Peterson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# Useful for very coarse version differentiation.
# Jython always uses 32 bits.
# It's possible to have sizeof(long) != sizeof(Py_ssize_t).
# 32-bit
# 64-bit
# Invokes __set__.
# This is a bit ugly, but it avoids running this again by
# removing this descriptor.
# Subclasses should override this
# in case of a reload
# eventually raises ImportError
# same as get_code
# mark as package
# Add windows specific modules.
# mark as package
# Workaround for standalone backslash
# If the file has an encoding, encode unicode with it.
# This requires a bit of explanation: the basic idea is to make a dummy
# metaclass for one level of class instantiation that replaces itself with
# the actual metaclass.
# Complete the moves implementation.
# This code is at the end of this module to speed up module loading.
# Turn this module into a package.
# required for PEP 302 and PEP 451
# see PEP 366 @ReservedAssignment
# PEP 451 @UndefinedVariable
# Remove other six meta path importers, since they cause problems. This can
# happen if six is removed from sys.modules and then reloaded. (Setuptools does
# this for some reason.)
# Here's some real nastiness: Another "instance" of the six module might
# be floating around. Therefore, we can't use isinstance() to check for
# the six meta path importer, since the other six instance will have
# inserted an importer with different class.
# Finally, add the importer to the meta path import hook.
# Copied from Python 3.6's textrap
# https://raw.githubusercontent.com/python/cpython/master/Lib/textwrap.py
# As of commit: https://github.com/python/cpython/commit/f3ebc9fe3fae3d44da4d0da9764ed7c033115f12
# Then lightly modified to make less Python 3 specific
# - print_function
# - no kw-only arguments
# - different handling of str.translate
# - more tests
# - bespoke handling of genuine Unicode emdash
# Copyright (C) 1999-2001 Gregory P. Ward.
# Copyright (C) 2002, 2003 Python Software Foundation.
# Written by Greg Ward <gward@python.net>
# default path
# Hardcode the recognized whitespace characters to the US-ASCII
# whitespace characters.  The main reason for doing this is that
# some Unicode spaces (like \u00a0) are non-breaking whitespaces.
# This funky little regex is just the trick for splitting
# text up into word-wrappable chunks.  E.g.
#   "Hello there -- you goof-ball, use the -b option!"
# splits into
#   Hello/ /there/ /--/ /you/ /goof-/ball,/ /use/ /the/ /-b/ /option!
# (after stripping out empty strings).
# any whitespace
# em-dash between words
# Unicode em-dash between words
# word, possibly hyphenated
# hyphenated word
# end of word
# em-dash
# Unicode em-dash
# NB re.UNICODE flag added for consistent behavior across Python 2 and 3
# Not really needed in Python 3, but without it, Python 2 foolishly does
# not consider letters with diacritical marks (e.g. the very common
# '\N{LATIN SMALL LETTER E WITH ACUTE}') to be "word" characters (`\w`)
# NB Unicode em dash cannot be easily combined with -- case, because the
# -{2,} admits the (slightly degenerate) --- etc. cases, which are
# unique to simulate em dashes
# If \N{EM DASH} finds favor, then direct handling of \N{HYPHEN}
# and \N{NON-BREAKING HYPHEN} make sense as follow-ons
# This less funky little regex just split on recognized spaces. E.g.
#   "Hello there -- you goof-ball, use the -b option!"
# splits into
#   Hello/ /there/ /--/ /you/ /goof-ball,/ /use/ /the/ /-b/ /option!/
# XXX this is not locale- or charset-aware -- string.lowercase
# is US-ASCII only (and therefore English-only)
# lowercase letter
# sentence-ending punct.
# optional end-of-quote
# end of chunk
# -- Private methods -----------------------------------------------
# (possibly useful for subclasses to override)
# text = text.translate(self.unicode_whitespace_trans)
# shim for Python 2 str
# Figure out when indent is larger than the specified width, and make
# sure at least one character is stripped off on every pass
# If we're allowed to break long words, then do so: put as much
# of the next chunk onto the current line as will fit.
# Otherwise, we have to preserve the long word intact.  Only add
# it to the current line if there's nothing already there --
# that minimizes how much we violate the width constraint.
# If we're not allowed to break long words, and there's already
# text on the current line, do nothing.  Next time through the
# main loop of _wrap_chunks(), we'll wind up here again, but
# cur_len will be zero, so the next line will be entirely
# devoted to the long word that we can't handle right now.
# Arrange in reverse order so items can be efficiently popped
# from a stack of chucks.
# Start the list of chunks that will make up the current line.
# cur_len is just the length of all the chunks in cur_line.
# Figure out which static string will prefix this line.
# Maximum width for this line.
# First chunk on line is whitespace -- drop it, unless this
# is the very beginning of the text (ie. no lines started yet).
# Can at least squeeze this chunk onto the current line.
# Nope, this line is full.
# The current line is full, and the next chunk is too big to
# fit on *any* line (not just this one).
# If the last chunk on this line is all whitespace, drop it.
# Convert current line back to a string and store it in
# list of all lines (return value).
# -- Public interface ----------------------------------------------
# -- Convenience interface ---------------------------------------------
# -- Loosely related functionality -------------------------------------
# Look for the longest leading string of spaces and tabs common to
# all lines.
# Current line more deeply indented than previous winner:
# no change (previous winner is still on top).
# Current line consistent with and no deeper than previous winner:
# it's the new winner.
# Find the largest common whitespace between current line and previous
# winner.
# sanity check (testing/debugging only)
# pragma: no cover
#print dedent("\tfoo\n\tbar")
#print dedent("  \thello there\n  \t  how are you?")
# pragma: no cover
# Windows FILE_ATTRIBUTE constants for interpreting the
# FIND_DATA.dwFileAttributes member
# Because Python <= 3.2 doesn't have u'unicode' syntax
# The code duplication below is intentional: this is for slightly
# better performance on systems that fall back to GenericDirEntry.
# It avoids an additional attribute lookup and method call, which
# are relatively slow on CPython.
# Path doesn't exist or is a broken symlink
# Path doesn't exist or is a broken symlink
# Path doesn't exist or is a broken symlink
# Various constants from windows.h
# Numer of seconds between 1601-01-01 and 1970-01-01
# ctypes wrappers for (wide string versions of) FindFirstFile,
# FindNextFile, and FindClose
# First convert Win32 dwFileAttributes to st_mode
# Some fields set to zero per CPython's posixmodule.c: st_ino, st_dev,
# st_nlink, st_uid, st_gid
# It's a symlink, call link-following stat()
# Not a symlink, stat is same as lstat value
# Lazily convert to stat object, because it's slow
# in Python, and often we only need is_dir() etc
# Call FindFirstFile and handle errors
# No files, don't yield anything
# Call FindNextFile in a loop, stopping when no more files
# Skip '.' and '..' (current and parent directory), but
# otherwise yield (filename, stat_result) tuple
# Linux, OS X, and BSD implementation
# Rather annoying how the dirent struct is slightly different on each
# platform. The only fields we care about are d_name and d_type.
# must be uint32, not ulong
# Some other system -- no d_type or stat information
# We may not have read permission for top, in which case we can't
# get a list of the files the directory contains.  os.walk
# always suppressed the exception then, rather than blow up for a
# minor reason when (say) a thousand readable directories are still
# left to visit.  That logic is copied here.
# If is_dir() raises an OSError, consider that the entry is not
# a directory, same behaviour than os.path.isdir().
# Bottom-up: recurse into sub-directory, but exclude symlinks to
# directories if followlinks is False
# If is_symlink() raises an OSError, consider that the
# entry is not a symbolic link, same behaviour than
# os.path.islink().
# Yield before recursion if going top down
# Recurse into sub-directories
# Issue #23605: os.path.islink() is used instead of caching
# entry.is_symlink() result during the loop on os.scandir() because
# the caller can replace the directory entry during the "yield"
# above.
# Yield after recursion if going bottom up
# Fix for broken unicode handling on Windows on Python 2.x, see:
# https://github.com/benhoyt/scandir/issues/54
# Copyright (c) 2014-2017 Matthias C. M. Troffaes
# Copyright (c) 2012-2014 Antoine Pitrou and contributors
# Distributed under the terms of the MIT License.
#
# Internals
#
# py2 => minimal unicode support
# get file information, needed for samefile on older Python versions
# see http://timgolden.me.uk/python/win32_how_do_i/
# see_if_two_files_are_the_same_file.html
# Whether this pattern needs actual matching using fnmatch, or can
# be looked up directly as a file.
# If no drive is present, try to find one in the previous
# parts. This makes the result of parsing e.g.
# ("C:", "/", "a") reasonably intuitive.
# Same drive => second path is relative to the first
# Second path is non-anchored (common case)
# Reference for Windows paths can be found at
# http://msdn.microsoft.com/en-us/library/aa365247%28v=vs.85%29.aspx
# Interesting findings about extended paths:
# - '\\?\c:\a', '//?/c:\a' and '//?/c:/a' are all supported
#   but '\\?\c:/a' is not
# - extended paths are always absolute; "relative" extended paths will
#   fail.
# XXX extended paths should also disable the collapsing of "."
# components (according to MSDN docs).
# is a UNC path:
# vvvvvvvvvvvvvvvvvvvvv root
# \\machine\mountpoint\directory\etc\...
#            directory ^^^^^^^^^^^^^^
# a UNC path can't have two slashes in a row
# (after the initial two)
# End of the path after the first one not found
# Means fallback on absolute
# Turn back an extended path into a normal DOS-like path
# NOTE: the rules for reserved names seem somewhat complicated
# (e.g. r"..\NUL" is reserved but not r"foo\NUL").
# We err on the side of caution and return True for paths which are
# not considered reserved by Windows.
# UNC paths are never reserved
# Under Windows, file URIs use the UTF-8 encoding.
# It's a path on a local drive => 'file:///c:/a/b'
# It's a path on a network drive => 'file://host/share/a/b'
# Try to guess user home directory.  By default all users
# directories are located in the same place and are named by
# corresponding usernames.  If current user home directory points
# to nonstandard place, this guess is likely wrong.
# According to POSIX path resolution:
# http://pubs.opengroup.org/onlinepubs/009695399/basedefs/
# xbd_chap04.html#tag_04_11
# "A pathname that begins with two successive slashes may be
# interpreted in an implementation-defined manner, although more
# than two leading slashes shall be treated as a single slash".
# current dir
# parent dir
# Already seen this path
# use cached value
# The symlink is not resolved, so we must have a symlink
# loop.
# Resolve the symbolic link
# Not a symlink, or non-strict mode. We just leave the path
# untouched.
# not resolved symlink
# resolved symlink
# NOTE: according to POSIX, getcwd() cannot contain path components
# which are symlinks.
# We represent the path using the local filesystem encoding,
# for portability to other applications.
# Under POSIX, os.symlink() takes two args
# Helper for resolve()
#
# Globbing helpers
#
#
# Public API
#
# We don't store the instance to avoid reference cycles
# Using the parts tuple helps share interned path parts
# when pickling related paths.
# This is useful when you don't want to create an instance, just
# canonicalize some constructor arguments.
# duck typing for older Python versions
# Force-cast str subclasses to str (issue #21127)
# also handle unicode for PY2 (six.text_type = unicode)
# cast to str using filesystem encoding
# We need to call _parse_args on the instance, so as to get the
# right flavour.
# Overridden in concrete Path
# Cached casefolded parts, for hashing and comparison
# XXX if suffix is None, should the current suffix be removed?
# For the purpose of this method, drive and root are considered
# separate parts, i.e.:
#   Path('c:/').relative_to('c:')  gives Path('/')
#   Path('c:/').relative_to('/')   raise ValueError
# We cache the tuple to avoid building a new one each time .parts
# is accessed.  XXX is this necessary?
# Can't subclass os.PathLike from PurePath and keep the constructor
# optimizations in PurePath._parse_args().
# Filesystem-accessing classes
# Private non-constructor arguments
# This is an optimization used for dir walking.  `part` must be
# a single part relative to this path.
# A stub for the opener argument to built-in open()
# Public API
# Yielding a path object for these makes little sense
# XXX untested yet!
# FIXME this must defer to the specific flavour (and, under Windows,
# use nt._getfullpathname())
# No symlink resolution => for consistency, raise an error if
# the path doesn't exist or is forbidden
# Now we have no symlinks in the path, it's safe to normalize it.
# First try to bump modification time
# Implementation note: GNU touch uses the UTIME_NOW option of
# the utimensat() / futimens() functions.
# Avoid exception chaining
# Convenience functions for querying the stat results
# Path doesn't exist or is a broken symlink
# (see https://bitbucket.org/pitrou/pathlib/issue/12/)
# Path doesn't exist or is a broken symlink
# (see https://bitbucket.org/pitrou/pathlib/issue/12/)
# Path doesn't exist
# Path doesn't exist or is a broken symlink
# (see https://bitbucket.org/pitrou/pathlib/issue/12/)
# Path doesn't exist or is a broken symlink
# (see https://bitbucket.org/pitrou/pathlib/issue/12/)
# Path doesn't exist or is a broken symlink
# (see https://bitbucket.org/pitrou/pathlib/issue/12/)
# Path doesn't exist or is a broken symlink
# (see https://bitbucket.org/pitrou/pathlib/issue/12/)
#!/usr/bin/env python
#---------------------------------------------------------------------------
#AC76DE">
#458154" width="100%%" cellspacing="0"
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# First we create and fill the info object
# Then we call wx.AboutBox giving it that info object
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#acrobat = win32com.client.gencache.EnsureModule('{CA8A9783-280D-11CF-A24D-444553540000}', 0x0, 1, 3)
#----------------------------------------------------------------------
# this function creates a new class that can be used as
# a wxWindow, but contains the given ActiveX control.
# create an instance of the new class
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Make a new class that derives from the WebBrowser class in the
# COM module imported above.  This class also derives from wxWindow and
# implements the machinery needed to integrate the two worlds.
# Create an instance of that class
# The following event handlers are called by the web browser COM
# control since  we passed self to MakeActiveXClass.  It will look
# here for matching attributes and call them if they exist.  See the
# module generated by makepy for details of method names, etc.
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# setting the movie property works too
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# 11/18/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
#----------------------------------------------------------------------
# Since this is a wx.Window we have to call Layout ourselves
## Hook up the event handlers for the IE window.  Using
## AddEventSink is how we tell the COM system to look in this
## object for method names matching the COM Event names.  They
## are automatically looked for in the ActiveXCtrl class, (so
## deriving a new class from IEHtmlWindow would also have been
## a good appraoch) and now they will be looked for here too.
# put the frame title back
## ET Phone Home!
# Here are some of the event methods for the IE COM events.  See
# the MSDN docs for DWebBrowserEvents2 for details on what events
# are available, and what the parameters are.
# This is how you can cancel loading a page.  The
# Cancel parameter is defined as an [in,out] type and
# so setting the value means it will be returned and
# checked in the COM control.
# Veto the creation of a  new window.
#def ProgressChange(self, this, progress, progressMax):
#    self.log.write('ProgressChange: %d of %d\n' % (progress, progressMax))
#----------------------------------------------------------------------
# for the demo framework...
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Create some controls
# Set up the layout
# Put it all in an outter box with a border
# Set up the event handlers
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#$%^&*_+-=?
#----------------------------------------------------------------------
# Show how to add a private font to the application at runtime that
# doesn't have to be installed on the user's operating system.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#wx.Font.AddPrivateFont
#!/usr/bin/env python
#----------------------------------------------------------------------
# AdjustChannels demo. The interesting part is ImageWindow.OnPaint
# left controls, right image output
# slider controls controls
# image window
# forward the slider change events to the image window
# the factors -- 1.0 does not not modify the image
# position is a int value -- calculate the factor
# position is a int value -- calculate the factor
# position is a int value -- calculate the factor
# position is a int value -- calculate the factor
# paint a background to show the alpha manipulation
# apply correction to the image channels via wx.Image.AdjustChannels
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# make a image 10% brighter - first three parameters are the factors for red, green and blue
# add 20% transparency to a image - the last parameter is the factor for the alpha channel
#!/usr/bin/env python
#----------------------------------------------------------------------
# half transparent
# some additional testing stuff
#dc.SetPen(wx.Pen(wx.Colour(0,0,255, 196)))
#dc.SetBrush(wx.Brush(wx.Colour(0,0,255, 64)))
#dc.DrawCircle(50, 275, 25)
#dc.DrawEllipse(100, 275, 75, 50)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# AnalogClock demo
#   E. A. Tacao <e.a.tacao |at| estadao.com.br>
#   http://j.domaindlx.com/elements28/wxpython/
#   12 Fev 2006, 22:00 GMT-03:00
# Distributed under the wxWidgets license.
#----------------------------------------------------------------------
# A mostly default clock
# for a simpler test case just set this to False and
# only the one clock will be created
# A plain clock, with square hour and round minute marks, no
# shadow, static border
# No minute tick marks
# A clock with hex numbers no seconds hand and different colours.
# A clock with binary numbers shown only at the quarter tick marks,
# no minutes ticks and different colours.
# A clock with a sunken border, roman numerals shown only at the
# quarter tick marks with a roman font, circular minutes ticks,
# no seconds hand, no shadows, tick overlapping and different colours.
# layout the clocks in a grid
# put it in another sizer for a border
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#	Tags: phoenix-port, py3-port
#----------------------------------------------------------------------
# check /ext/wxWidgets/include/wx/artprov.h for the available wxArtID's
#----------------------------------------------------------------------
# You can do anything here you want, such as using the same
# image for any size, any client, etc., or using specific
# images for specific sizes, whatever...
# See end of file for the image data
# use this one for all 48x48 images
# but be more specific for these
# and just ignore the size for these
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Image data
#\xbb]$y\x00\x14\xd5\x00\x08\x00\
#\x9a\x97Ts\x03B\x8b\xc6\xcc\xf4T\x8f\xcd\x1b\x86y@\
#\x91\xe1\xf6\xc7|\xf0\xfa\xb3\xe44\xac$\x13\
#\x10\x95\xcf\x04\x8e\x04\xba\xe1&\xabg\x9e\'w[\x13\xef\
#\x82j\x997\xe5y38\
#\xa6{pbQ\xf9\xdb?/\xb2\xb9\xb9\x8d[":\xb5\x1f\x00\xdc\x85A\xdf\x18\xa5\x8c\
#\xa9!0\x88\xd0\x84L\x1b\x85\x18tR\xc3\x83\x16\x1e\
#\xe5\x8e\x9c\x129\x15\x02y\x1eb\xb5\xa8\x94\
#\x05a\x9c\xf0\xfdw\
#\tv\xa9\xc2\xa3\xc3\x16\x9d\xe6\x13\xb0\\\x82a\
#E:\x07\x16\
#\x05\xedv\x0b\xdf\x0f\xa8:\xb0\xeeh\xee\xed\
#\x8a\xd0\xd8\x17\xc33q4:9{\x1dE\xac,\xe2\x15\xa0P&\x1a\xc1\
#\xe6\xdf\xbaHm\
#\rg\xdf\
#q\xf8_\xb5\xbf\
#\
#\xe94\xd3S)\xe6\xcd\x9fO\
#t\'\
#\x82\xaah\\\
#XB \x8f\x1b\xa0\
#$e\x02\xa0\xde\x9c\xc4\xb0l\x84-\x90\xab\x06#R3\x9a\x12d}\xe1\
#H\x01c\x8ay8\xc5\xbb\xe0\
#x\x9e\x07\x80a\x18\xf8\xbe\
#\x95"\x16\x8b\xa3P\xcc\
#=\x9d\x9d8""\
#\xa1W\xa5^)\
#j\
#\xa4\xe0\xf4\xc0Y\x06\x87/\xe3\xc4\xe3\x98n\
#.\x88\
#\x95fm\xad:\x14n\xb3=`G\n\xb5\xc5\xa5E\xda\x8d\
#\x164c\xd1\x17?T\x84R\xd1a\xaa\\\x1c\x88\xef\xe4\x81\
#9>\x19\xa0D\x9b\xda\xfa\x06I\xbb9\xb0\xb0\xf4\n5\'\x15\x9c?7\xcd\xa7\
#\
#\xc6\x18uvv\x92V\xabU\\\xc7q\x1cy<\x1e*\x16\x8b\x92\xff\x1bY#ZYY\
#\xe2j!j\xc4\xbd\
#\x1a\
#!/usr/bin/env python
# This reserves count IDs and returns a list of WindowIDRef objects
#----------------------------------------------------------------------
# tell FrameManager to manage this frame
# create menu
# min size for the frame itself isn't completely done.
# see the end up FrameManager::Update() for the test
# code. For now, just hard code a frame minimum size
# create some toolbars
# add a bunch of panes
# create some center panes
# add the toolbars to the manager
# make some default perspectives
# "commit" all changes made to FrameManager
# Show How To Use The Closing Panes Event
# show the settings pane, and float it
# -- wx.SizeReportCtrl --
# (a utility control that always reports it's client size)
# intentionally empty
#vert.Add(s1, 0, wx.EXPAND | wxLEFT | wxBOTTOM, 5)
#vert.Add(s2, 0, wx.EXPAND | wxLEFT | wxBOTTOM, 5)
#vert.Add(s3, 0, wx.EXPAND | wxLEFT | wxBOTTOM, 5)
#vert.Add(1, 1, 1, wx.EXPAND)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#child.Show()
# Close all ChildFrames first else Python crashes
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ... create the frame itself ...
# Create and initialize the banner.
# Create and initialize the 1st banner and define a bitmap.
# Create and initialize the 2nd banner and define the gradient text.
#FF8000', end='#FFFFFF')
# Layout
#---------------------------------------------------------------------------
#!/usr/bin/env python
#import wx.lib.buttons
#wx.BitmapButton = wx.lib.buttons.GenBitmapButton
#----------------------------------------------------------------------
# a test case for catching wx.PyAssertionError
#wx.GetApp().SetAssertMode(wx.PYAPP_ASSERT_SUPPRESS)
#wx.GetApp().SetAssertMode(wx.PYAPP_ASSERT_EXCEPTION)
#wx.GetApp().SetAssertMode(wx.PYAPP_ASSERT_DIALOG)
#wx.GetApp().SetAssertMode(wx.PYAPP_ASSERT_EXCEPTION | wx.PYAPP_ASSERT_DIALOG)
# hide a little surprise in the button...
# we need to make it be the same size as the primary image, so
# grab a subsection of this new image
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# calculate some colour values for this sample based on x,y position
# Make a bitmap using an array of RGB bytes
# bytes per pixel
# Make a bitmap using an array of RGBA bytes
# bytes per pixel
# Make a bitmap using an array of RGB bytes plus a separate
# buffer for the alpha channel
# bytes per pixel
# just use an alpha buffer with a constant alpha value for all
# pixels for this example, it could just as easily have
# varying alpha values like the other sample.
# draw some text to help show the alpha
# draw the bitmap over the text
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Left is the default, the image can be on the other sides too
#wx.RIGHT
#wx.TOP
#wx.BOTTOM
# default is 4 but that seems too big to me.
# Setting the bitmap and margins changes the best size, so
# reset the initial size since we're not using a sizer in this
# example which would have taken care of this for us.
#b = wx.Button(self, 60, "Multi-line\nbutton", (20, 280))
#b = wx.Button(self, 70, pos=(160, 280))
#b.SetLabel("Another\nmulti-line")
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Draw some stuff on the plain dc
# now draw something with cairo
# and something else...
# here's a gradient pattern
# Draw some text
# Text as a path, with fill and stroke
# Show iterating and modifying a (text) path
# Drawing a bitmap.  Note that we can easily load a PNG file
# into a surface, but I wanted to show how to convert from a
# wx.Bitmap here instead.  This is how to do it using just cairo:
#img = cairo.ImageSurface.create_from_png(opj('bitmaps/toucan.png'))
# And this is how to convert a wx.Btmap to a cairo image
# surface.  NOTE: currently on Mac there appears to be a
# problem using conversions of some types of images.  They
# show up totally transparent when used. The conversion itself
# appears to be working okay, because converting back to
# wx.Bitmap or writing the image surface to a file produces
# the expected result.  The other platforms are okay.
#bmp = wx.Bitmap(opj('bitmaps/splash.png'))
# this is how to convert an image surface to a wx.Bitmap
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# used by many snippets
#----------------------------------------------------------------------
# TODO:  Add the ability for the user to edit and render their own snippet
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Name:         Calendar.py
# Purpose:      Calendar control display testing on panel for wxPython demo
#
# Author:       Lorne White (email: lwhite1@planet.eon.net)
#
# Version       0.9
# Date:         Feb 26, 2001
# Licence:      wxWindows license
#----------------------------------------------------------------------------
# 11/15/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
#
# 11/26/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Ugh. AFter updating to the Bind() method, things lock up
#   on various control clicks. Will have to debug. Only seems
#   to happen on windows with calendar controls, though.
#
# 11/30/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Lockup issue clarification: it appears that the spinner is
#   the culprit.
#
# highlighted days in month
# test of full window calendar control functions
#        start_month = 2        # preselect the date for calendar
#        start_year = 2001
# get the current month & year
# month list from DateTime module
# set start month and year
# set attributes of calendar
# display routine
# mouse click event
# scroll bar for month selection
# spin control for year selection
# button for calendar dialog test
# button for calendar window test
# calendar dialog
# test the date dialog
# calendar window test
# calendar print preview
# month and year control events
# log mouse events
# format date
# set the highlighted days for the calendar
# increment and decrement toolbar controls
# test of full window calendar control functions
# toolbar
#        self.calend.ShowWeekEnd()
# format date
#---------------------------------------------------------------------------
# example class for printing/previewing calendars
# last used by
# highlighted selected days
# number of copies of label
# start position of label
# initial zoom value
# set the calendar parameters
# current month
# next column
# next month
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Track a few holidays
# (these don't move around)
# bind some event handlers to each calendar
# create some sizers for layout
# convert wxDateTime 0-11 => 1-12
# August 14th is a special day, mark it with a blue square...
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#, (10, 10))
#, (65, 40), (150, 20), wx.NO_BORDER)
#, (65, 60), (150, 20), wx.NO_BORDER)
#, (65, 80), (150, 20), wx.NO_BORDER)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# so that (un)checking also selects (moves the highlight)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# this is called by the base class when an item is checked/unchecked
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Now make a bunch of panels for the choice book
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Create some controls
# Set up the layout
# Put it all in an outter box with a border
# Set up the event handlers
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# redo the layout
# and also change the labels
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# Note: this module is not a demo per se, but is used by many of
# the demo modules for various purposes.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Populate our color list
# Just for style points, we'll use this as a background image.
# This could also be done by getting the window's default font;
# either way, we need to have a font loaded for later on.
#self.SetBackgroundColour("WHITE")
# Create drawing area and set its font
# Using GetFullTextExtent(), we calculate a basic 'building block'
# that will be used to draw a depiction of the color list. We're
# using 'Wy' as the model becuase 'W' is a wide character and 'y'
# has a descender. This constitutes a 'worst case' scenario, which means
# that no matter what we draw later, text-wise, we'll have room for it
# Height plus descender
# Pad a little bit
# ... and this is the basic width.
# jmg 11/8/03: why 24?
# 'prep' our scroll bars.
# Bind event handlers
# tile the background bitmap loaded in __init__()
# adjust for scrolled position
# Redraw the background over a 'damaged' area.
# determine the subset of the color list that has been exposed
# and needs drawn. This is based on all the precalculation we
# did in __init__()
#%02X%02X%02X" % tuple(colours[line][1:])
# On wxGTK there needs to be a panel under wx.ScrolledWindows if they are
# going to be in a wxNotebook. And, in this demo, we are.
#----------------------------------------------------------------------
# This loads a whole bunch of new color names and values
# into TheColourDatabase
#
# Note 11/24/03 - jg - I moved this into runTest() because
# there must be a wx.App existing before this function
# can be called - this is a change from 2.4 -> 2.5.
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# Ensure the full colour dialog is displayed,
# not the abbreviated version.
# If the user selected OK, then the dialog's wx.ColourData will
# contain valid information. Fetch the data ...
# ... then do something with it. The actual colour data will be
# returned as a three-tuple (r, g, b) in this particular case.
# Once the dialog is destroyed, Mr. wx.ColourData is no longer your
# friend. Don't use it again!
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Name:         ColourSelect.py
# Purpose:      Colour Selection control display testing on panel for wxPython demo
#
# Author:       Lorne White (email: lorne.white@telusplanet.net)
#
# Version       0.6
# Date:         Nov 14, 2001
# Licence:      wxWindows license
#
# Change Log:  Add Label parameter to accommodate updated library code
#
# Cliff Wells (logiplexsoftware@earthlink.net) 2002/03/11
#              - added code to demonstrate EVT_COLOURSELECT
#              - use sizers
#              - other minor "improvements"
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# sizer to contain all the example buttons
# show a button with all default values
# build several examples of buttons with different colours and sizes
# for saving references to buttons
# build each button and save a reference to it
# store reference to button
# show the state of each button
# default control value
# get the colour selection button result
# create string list for easy viewing of results
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# print("OnSetFocus")
# print("OnKillFocus")
#'this is a long item that needs a scrollbar...',
# This combobox is created with a preset list of values.
#| wx.TE_PROCESS_ENTER
#| wx.CB_SORT
# Once the combobox is set up, we can append some more data to it.
# This combobox is created with no values initially.
# Here we dynamically add our values to the second combobox.
# When the user selects something, we go here.
# Capture events every time a user hits a key in the text entry field.
# Capture events when the user types something into the control then
# hits ENTER.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This class is used to provide an interface between a ComboCtrl and the
# ListCtrl that is used as the popoup for the combo widget.
# The following methods are those that are overridable from the
# ComboPopup base class.  Most of them are not required, but all
# are shown here for demonstration purposes.
# This is called immediately after construction finishes.  You can
# use self.GetCombo if needed to get to the ComboCtrl instance.
# Create the popup child control.  Return true for success.
# Return the widget that is to be used for the popup
# Called just prior to displaying the popup, you can use it to
# 'select' the current item.
# Return a string representation of the current item.
# Called immediately after the popup is shown
# Called when popup is dismissed
# This is called to custom paint in the combo control itself
# (ie. not the popup).  Default implementation draws value as
# string.
# Receives key events from the parent ComboCtrl.  Events not
# handled should be skipped, as usual.
# Implement if you need to support special action when user
# double-clicks on the parent wxComboCtrl.
# Return final size of popup. Called on every popup, just prior to OnPopup.
# minWidth = preferred minimum width for window
# prefHeight = preferred height. Only applies if > 0,
# maxHeight = max height for window, as limited by screen size
#   and should only be rounded down, if necessary.
# Return true if you want delay the call to Create until the popup
# is shown for the first time. It is more efficient, but note that
# it is often more convenient to have the control created
# immediately.
# Default returns false.
#----------------------------------------------------------------------
# It is important to call SetPopupControl() as soon as possible
# Populate using wx.ListView methods
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# We first have to set an application-wide help provider.  Normally you
# would do this in your app's OnInit or in other startup code...
# This panel is chock full of controls about which we can demonstrate the
# help system.
# This help text, set for the panel itself, will be used if context
# sensitive help cannot be found for any particular control.
# Init the context help button.
# And even include help text about the help button :-)
# Yes, even static text can have help text associated with it :-)
# A text control with help text.
# Same thing, but this time to demonstrate how the help event can be
# intercepted.
# On the second text control above, we intercept the help event. This is where
# we process it. Anything could happen here. In this case we're just printing
# some stuff about it, then passing it on with Skip(), at which point we
# see the help tip.
# On the third text control above, we intercept the help event.
# Here, we print a note about it, generate our own tip window, and,
# unlike last time, we don't pass it on to the underlying provider.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#-Imports----------------------------------------------------------------------
#--Python Imports.
#--wxPython Imports.
#-Globals----------------------------------------------------------------------
# .cur, .ani loose files.
# .png loose files.
# PyEmbeddedImages
# wxPython Stock Cursors.
#-Classes----------------------------------------------------------------------
# Create all the widgets for the test panel.
# Add all the widgets to a tuple that we will access when changing cursors.
# Do the panel layout.
# Draw a dot so the user can see where the hotspot is.
# Create a list of choices from the dictionary above.
# Create the controls.
# Bind events.
# Setup the layout.
# Convienience start for mousewheel switching.
# Clear the dots.
# .cur or .ani loose files.
# .png loose files.
# Since these image didn't come from a .cur or .ani file,
# tell it where the hotspot is.
# Make the image into a cursor.
# PyEmbeddedImages
# Since these image didn't come from a .cur or .ani file,
# tell it where the hotspot is.
# Make the image into a cursor.
# Create one of the stock (built-in) cursors.
# Set the cursors for all the testPanels widgets.
# Draw a dot so the user can see where the hotspot is.
#-wxPython Demo----------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# pickle the lines list
# create our own data format and use it in a
# custom data object
# Also create a Bitmap version of the drawing
# Now make a data object for the bitmap and also a composite
# data object holding both of the others.
# And finally, create the drop source and begin the drag
# and drop operation
#----------------------------------------------------------------------
# specify the type of data we will accept
# some virtual methods that track the progress of the drag
#self.log.WriteText("OnDragOver: %d, %d, %d\n" % (x, y, d))
# The value returned here tells the source what kind of visual
# feedback to give.  For example, if wxDragCopy is returned then
# only the copy cursor will be shown, even if the source allows
# moves.  You can use the passed in (x,y) to determine what kind
# of feedback to give.  In this case we return the suggested value
# which is based on whether the Ctrl key is pressed.
# Called when OnDrop returns True.  We need to get the data and
# do something with it.
# copy the data from the drag source to our data object
# convert it back to a list of lines and give it to the viewer
# what is returned signals the source what to do
# with the original data (move, copy, etc.)  In this
# case we again just return the suggested value given
# to us.
#----------------------------------------------------------------------
# Make the controls
# put them in sizers
# Events
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#win = TestPanel(nb, log)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# In some cases the widget used above will be a native date
# picker, so show the generic one too.
# dpc = wx.adv.DatePickerCtrlGeneric(self, size=(120,-1),
# style = wx.TAB_TRAVERSAL
# | wx.adv.DP_DROPDOWN
# | wx.adv.DP_SHOWCENTURY
# | wx.adv.DP_ALLOWNONE )
# self.Bind(wx.adv.EVT_DATE_CHANGED, self.OnDateChanged, dpc)
# sizer.Add(dpc, 0, wx.LEFT, 50)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# output result
# get ready for next job:
# output result
# get ready for next job:
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
# demodata.py
#-------------------------------------------------------------------------------
#
# _demoPngs
#
# These are the images names used in the demo treectrl.
# These come from images.py or bitmaps/imagename.ext
#
# _demoPngs = ["imagename1", "imagename2", "etc"]
#
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#
# _treeList
#
# These are the Demo Category Headers
# and Demo Module Names(Ex: Frame.py without ext)
#
# ('Demo Category Name String', [
#       'DemoModuleName1',
#       'DemoModuleName2',
#       'Etc',
#       ]),
#
#-------------------------------------------------------------------------------
# new stuff
# managed windows == things with a (optional) caption you can close
# the common dialogs
# dialogs from libraries
# core controls
# controls coming from other libraries
# How to lay out the controls in a frame/dialog
# ditto
##'infoframe',    # needs better explanation and some fixing
# Clipboard and DnD
# Images
# Other stuff
#!/usr/bin/env python
#---------------------------------------------------------------------------
# Create and set a help provider.  Normally you would do this in
# the app's OnInit as it must be done before any SetHelpText calls.
#---------------------------------------------------------------------------
# Instead of calling wx.Dialog.__init__ we precreate the dialog
# so we can set an extra style that must be set before
# creation, and then we create the GUI object using the Create
# method.
# Now continue with the normal construction of the dialog
# contents
#1:")
#1")
#2:")
#2")
#---------------------------------------------------------------------------
# this does not return until the dialog is closed.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Name:         DialogUnits.py
# Purpose:      A minimal wxPython program that is a bit smarter than test1.
#
# Author:       Robin Dunn
#
# Created:      A long time ago, in a galaxy far, far away...
# Copyright:    (c) 1998-2018 by Total Control Software
# Licence:      wxWindows license
#----------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Create a new frame class, derived from the wxPython Frame.
# First, call the base class' __init__ method to create the frame
# Associate some events with methods of this class
# Add a panel and some controls to display the size and position
#print(wx.DLG_UNIT(panel, (24, 4)), wx.DLG_UNIT(panel, (36, -1)))
#print(panel.DLG_UNIT((24, 16)), panel.DLG_UNIT((36, -1)))
# This method is called automatically when the CLOSE event is
# sent to this window
# tell the window to kill itself
# This method is called by the System when the window is resized,
# because of the association above.
# tell the event system to continue looking for an event handler,
# so the default handler will get called.
# This method is called by the System when the window is moved,
# because of the association above.
#---------------------------------------------------------------------------
# if running standalone
# Every wxWindows application must have a class derived from wxApp
# wxWindows calls this method to initialize the application
# Create an instance of our customized Frame class
# Tell wxWindows that this is our main window
# Return a success flag
# Create an instance of the application class
# Tell it to start processing events
#---------------------------------------------------------------------------
# if running as part of the Demo Framework...
#----------------------------------------------------------------------------
#
#!/usr/bin/env python
#---------------------------------------------------------------------------
# In this case we include a "New directory" button.
#| wx.DD_DIR_MUST_EXIST
#| wx.DD_CHANGE_DIR
# If the user selects OK, then we process the dialog's data.
# This is done by getting the path data from the dialog - BEFORE
# we destroy it.
# Only destroy a dialog after you're done with it.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#def OnDragOver(self, x, y, d):
#    self.log.WriteText("OnDragOver: %d, %d, %d\n" % (x, y, d))
#    return wx.DragCopy
#self.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, False))
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Make a shape from an image and mask.  This one will demo dragging outside the window
#bmp = wx.Bitmap('bitmaps/toucan.png')
# Make a shape from some text
# matches the bg image
# create a bitmap the same size as our text
# 'draw' the text onto the bitmap
# We're not doing anything here, but you might have reason to.
# for example, if you were dragging something, you might elect to
# 'drop it' when the cursor left the window.
# tile the background bitmap
# print('TileBackground')
# Go through our list of shapes and draw them in whatever place they are.
# This is actually a sophisticated 'hit test', but in this
# case we're also determining which shape, if any, was 'hit'.
# Fired whenever a paint event occurs
# print('OnPaint')
# Left mouse button is down.
# Did the mouse go down on one of our shapes?
# If a shape was 'hit', then set that as the shape we're going to
# drag around. Get our start position. Dragging has not yet started.
# That will happen once the mouse moves, OR the mouse is released.
# Left mouse button up.
# Hide the image, end dragging, and nuke out the drag image.
# reposition and draw the shape
# Note by jmg 11/28/03
# Here's the original:
#
# self.dragShape.pos = self.dragShape.pos + evt.GetPosition() - self.dragStartPos
#
# So if there are any problems associated with this, use that as
# a starting place in your investigation. I've tried to simulate the
# wx.Point __add__ method here -- it won't work for tuples as we
# have now from the various methods
#
# There must be a better way to do this :-)
#
# The mouse is moving
# Ignore mouse movement if we're not dragging.
# if we have a shape, but haven't started dragging yet
# only start the drag after having moved a couple pixels
# refresh the area of the window where the shape was so it
# will get erased.
# if we have shape and image then move it, posibly highlighting another shape.
# figure out what to hilite and what to unhilite
# if needed, hide the drag image so we can update the window
# now move it and show it again if needed
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# number of characters in text
# number of points per polygon
# make some lists of random shapes
# make some random pens and brushes
# make some random color lists
#dc.DrawPointList(Apoints, wx.Pen("RED", 2))
#dc.DrawPointList(Apoints, pens)
##    for i in range(10):
##        #dc.DrawRectangleList(rectangles,pens,brushes)
##        dc.DrawRectangleList(rectangles)
##        for i in range(10):
##            #dc.DrawRectangleList(rectangles,pens,brushes)
##            dc.DrawRectangleList(rectangles)
# NOTE: you need to set BackgroundMode for the background colors to be used.
# Initialize our various samples and add them to the notebook.
# Class used for all the various sample pages; the mechanics are the same
# for each one with regards to the notebook. The only difference is
# the function we use to draw on it.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#	Tags: phoenix-port, py3-port
#----------------------------------------------------------------------
#self.log.write('SetValue: %s' % value)
# Return the size needed to display the value.  The renderer
# has a helper function we can use for measuring text that is
# aware of any custom attributes that may have been set for
# this item.
#self.log.write('GetSize("{}"): {}'.format(value, size))
#if state != 0:
#    self.log.write('Render: %s, %d' % (rect, state))
# we'll draw a shaded background to see if the rect correctly
# fills the cell
#ffd0d0'))
# And then finish up with this helper function that draws the
# text for us, dealing with alignment, font and color
# attributes, etc.
# x-offset
# wxDataViewCellRenderState flags
# The HasEditorCtrl, CreateEditorCtrl and GetValueFromEditorCtrl
# methods need to be implemented if this renderer is going to
# support in-place editing of the cell value, otherwise they can
# be omitted.
#
# NOTE: This is well supported only in the DVC implementation on Windows,
# so this sample will not turn on the editable mode for the custom
# rendered column, see below.
# select the text and put the caret at the end
# The LeftClick and Activate methods serve as notifications
# letting you know that the user has either clicked or
# double-clicked on an item.  Implementing them in your renderer
# is optional.
#----------------------------------------------------------------------
# To help focus this sample on the custom renderer, we'll reuse the
# model class from another sample.
# Create a dataview control
#| dv.DV_HORIZ_RULES
# Create an instance of the model
# Now we create some columns.
# Use a custom renderer for the Title column.
# NOTE: Using an editor with the custom renderer is only well
# supported on the Windows version of the DVC, so we won't turn on
# editing in that case, and will inform the user about it.
#----------------------------------------------------------------------
# Get the data from the ListCtrl sample to play with, converting it
# from a dictionary to a list of lists, including the dictionary key
# as the first element of each sublist.
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Just a little helper function to make an empty image for our
# model to use.
#----------------------------------------------------------------------
# We'll use instances of these classes to hold our music data. Items in the
# tree will get associated back to the corresponding Song or Genre object.
# get a random date value
#----------------------------------------------------------------------
# This model acts as a bridge between the DataViewCtrl and the music data, and
# organizes it hierarchically as a collection of Genres, each of which is a
# collection of songs. We derive the class from PyDataViewCtrl, which knows
# how to reflect the C++ virtual methods to the Python methods in the derived
# class.
# This model provides these data columns:
#
#     0. Genre :  string
#     1. Artist:  string
#     2. Title:   string
#     3. id:      integer
#     4. Acquired: date
#     5. Liked:   bool
#
# The PyDataViewModel derives from both DataViewModel and from
# DataViewItemObjectMapper, which has methods that help associate
# data view items with Python objects. Normally a dictionary is used
# so any Python object can be used as data nodes. If the data nodes
# are weak-referencable then the objmapper can use a
# WeakValueDictionary instead.
# Report how many columns this model provides data for.
# Map the data column numbers to the data type
# the real value is an int, but the renderer should convert it okay
# The view calls this method to find the children of any node in the
# control. There is an implicit hidden root node, and the top level
# item(s) should be reported as children of this node. A List view
# simply provides all items as children of this hidden root. A Tree
# view adds additional items as children of the other items, as needed,
# to provide the tree hierachy.
##self.log.write("GetChildren\n")
# If the parent item is invalid then it represents the hidden root
# item, so we'll use the genre objects as its children and they will
# end up being the collection of visible roots in our tree.
# Otherwise we'll fetch the python object associated with the parent
# item and make DV items for each of its child objects.
# Return True if the item has children, False otherwise.
##self.log.write("IsContainer\n")
# The hidden root is a container
# and in this model the genre objects are containers
# but everything else (the song objects) are not
#def HasContainerColumns(self, item):
#    self.log.write('HasContainerColumns\n')
#    return True
# Return the item which is this item's parent.
##self.log.write("GetParent\n")
# Return the value to be displayed for this item and column. For this
# example we'll just pull the values from the data objects we
# associated with the items in GetChildren.
# Fetch the data object for this item.
# We'll only use the first column for the Genre objects,
# for the other columns lets just return empty values
# TODO: There should be some way to indicate a null value...
##self.log.write('GetAttr')
# We're not allowing edits in column zero (see below) so we just need
# to deal with Song objects and cols 1 - 5
#----------------------------------------------------------------------
# Create a dataview control
# nice alternating bg colors
#| dv.DV_HORIZ_RULES
# Create an instance of our model...
# it's a new instance so we need to decref it below
# Tell the DVC to use the model
# Define the columns that we want in the view.  Notice the
# parameter which tells the view which column in the data model to pull
# values from for each view column.
# here is an example of adding a column with full control over the renderer, etc.
# title
# renderer
# data model column
# otherwise there are convenience methods for the simple cases
# Notice how we pull the data from col 3, but this is the 6th column
# added to the DVC. The order of the view columns is not dependent on
# the order of the model columns at all.
# Set some additional attributes for all the columns
#----------------------------------------------------------------------
# Reuse the music data in the ListCtrl sample, and put it in a
# hierarchical structure so we can show it as a tree
## For testing Unicode
#musicdata = {
#    1 : (u'BE \u662f', u'Python \u662f\u6700\u597d\u7684\u7de8\u7a0b\u8a9e\u8a00\uff01', u"Rock \u662f"),
#}
#musicdata = musicdata.items()
# our data structure will be a collection of Genres, each of which is a
# collection of Songs
# Finally create the test window
#----------------------------------------------------------------------
#!/usr/bin/env python
#	Tags: phoenix-port, py3-port
#----------------------------------------------------------------------
# This model class provides the data to the view when it is asked for.
# Since it is a list-only model (no hierarchical data) then it is able
# to be referenced by row rather than by item object, so in this way
# it is easier to comprehend and use than other model types.  In this
# example we also provide a Compare function to assist with sorting of
# items in our model.  Notice that the data items in the data model
# object don't ever change position due to a sort or column
# reordering.  The view manages all of that and maps view rows and
# columns to the model's rows and columns as needed.
#
# For this example our data is stored in a simple list of lists.  In
# real life you can use whatever you want or need to hold your data.
# All of our columns are strings.  If the model or the renderers
# in the view are other types then that should be reflected here.
# This method is called to provide the data object for a
# particular row,col
# This method is called when the user edits a data item in the view.
# Report how many columns this model provides data for.
# Report the number of rows in the model
#self.log.write('GetCount')
# Called to check if non-standard attributes should be used in the
# cell at (row, col)
##self.log.write('GetAttrByRow: (%d, %d)' % (row, col))
# This is called to assist with sorting the data in the view.  The
# first two args are instances of the DataViewItem class, so we
# need to convert them to row numbers with the GetRow method.
# Then it's just a matter of fetching the right values from our
# data set and comparing them.  The return value is -1, 0, or 1,
# just like Python's cmp() function.
# swap sort order?
# make a copy since we'll be sorting(mutating) the list
# use reverse order so the indexes don't change as we remove items
# remove it from our data structure
# notify the view(s) using this model that it has been removed
# update data structure
# notify views
# Create a dataview control
# nice alternating bg colors
#| dv.DV_HORIZ_RULES
# Create an instance of our simple model...
# ...and associate it with the dataview control.  Models can
# be shared between multiple DataViewCtrls, so this does not
# assign ownership like many things in wx do.  There is some
# internal reference counting happening so you don't really
# need to hold a reference to it either, but we do for this
# example so we can fiddle with the model from the widget
# inspector or whatever.
# Now we create some columns.  The second parameter is the
# column number within the model that the DataViewColumn will
# fetch the data from.  This means that you can have views
# using the same model that show different columns of data, or
# that they can be in a different order than in the model.
# There are Prepend methods too, and also convenience methods
# for other data types but we are only using strings in this
# example.  You can also create a DataViewColumn object
# yourself and then just use AppendColumn or PrependColumn.
# The DataViewColumn object is returned from the Append and
# Prepend methods, and we can modify some of it's properties
# like this.
# Through the magic of Python we can also access the columns
# as a list via the Columns property.  Here we'll mark them
# all as sortable and reorderable.
# Let's change our minds and not let the first col be moved.
# set the Sizer property (same as SetSizer)
# Add some buttons to help out with the tests
# Bind some events so we can see what the DVC sends us
# Remove the selected row(s) from the model. The model will take care
# of notifying the view (and any other observers) that the change has
# happened.
# Add some bogus data to a new row in the model's data
#----------------------------------------------------------------------
# Get the data from the ListCtrl sample to play with, converting it
# from a dictionary to a list of lists, including the dictionary key
# as the first element of each sublist.
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Reuse the music data in the ListCtrl sample
#musicdata.sort()
# create the listctrl
# Give it some columns.
# The ID col we'll customize a bit:
# Load the data. Each item (row) is added as a sequence of values
# whose order matches the columns
# Set the layout so the listctrl fills the panel
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# create the treectrl
# Set the layout so the treectrl fills the panel
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# Formerly wx.gizmos in Classic
#----------------------------------------------------------------------
# This is an example of the complex view that manages its own scrollbars
# as described in the overview below.
#super(TestView, self).__init__()  # Test 2-phase
#self.Create(parent, ID, style=wx.NO_BORDER)
# or 1-phase
#self.SetScrollWidth(500)
# hook the scrollbars provided by the wxDynamicSashWindow
# to this view
# And set the wxStyledText to use these scrollbars instead
# of its built-in ones.
# use the same document
# redirect the scroll events from the dyn_sash's scrollbars to the STC
# when the scrollbar gets the focus move it back to the STC
#----------------------------------------------------------------------
# This one is simpler, but doesn't do anything with the scrollbars
# except the default wxDynamicSashWindow behaviour
#wx.Panel.__init__(self)                      # 2-phase create
#self.Create(parent, ID)
# 1-phase
# It's automatically added to the proper place in the sash window
#----------------------------------------------------------------------
#| gizmos.DS_MANAGE_SCROLLBARS
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#wx.adv.EL_NO_REORDER |
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#FFFFFF bmp_source/teststar.png images.py",
#0000FF  bmp_source/test2.bmp images.py",
#C0C0C0 bmp_source/tog1.bmp images.py",
#C0C0C0 bmp_source/tog2.bmp images.py",
#FFFFFF bmp_source/smiles2.bmp images.py",
#0000FF bmp_source/sm_up.bmp images.py",
#0000FF bmp_source/sm_down.bmp images.py",
#!/usr/bin/env python
#---------------------------------------------------------------------------
# Name:        EventManager.py
# Purpose:     A module to demonstrate wx.lib.evtmgr.EventManager.
#
# Author:      Robb Shecter (robb@acm.org)
#
# Created:     16-December-2002
# Copyright:   (c) 2002-2018 by Robb Shecter (robb@acm.org) and
#              Total Control Software
# Licence:     wxWindows license
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# Register myself for mouse events over self.tile in order to
# create typical button/hyperlink visual effects.
# Some pre-computation.
# Watch for the mouse click to enable/disable myself.
# Implement being on or off by registering and
# de-registering self.makeColor() from the event manager.
# In range [0..MAX]
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# create some buttons and sizers to use in testing some
# features and also the layout
# Put the panel in a sizer for the frame so we can use self.Fit()
# The Expando control will redo the layout of the
# sizer it belongs to, but sometimes this may not be
# enough, so it will send us this event so we can do any
# other layout adjustments needed.  In this case we'll
# just resize the frame to fit the new needs of the sizer.
# just for testing...
#print(self.eom.numLines)
#print(self.eom.numLines)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# | wx.FC_OPEN
# | wx.FC_SAVE
# | wx.FC_MULTIPLE
# | wx.FC_NOSHOWHIDDEN
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# This is how you pre-establish a file filter so that the dialog
# only shows the extension(s) you want it to.
#---------------------------------------------------------------------------
# Create the dialog. In this case the current directory is forced as the starting
# directory for the dialog, and no default file name is forced. This can easilly
# be changed in your program. This is an 'open' dialog, and allows multitple
# file selections as well.
#
# Finally, if the directory is changed in the process of getting files, this
# dialog is set up to change the current working directory to the path chosen.
# Show the dialog and retrieve the user response. If it is the OK response,
# process the data.
# This returns a Python list of files that were selected.
# Compare this with the debug above; did we change working dirs?
# Destroy the dialog. Don't do this until you are done with it!
# BAD things can happen otherwise!
# Create the dialog. In this case the current directory is forced as the starting
# directory for the dialog, and no default file name is forced. This can easilly
# be changed in your program. This is an 'save' dialog.
#
# Unlike the 'open dialog' example found elsewhere, this example does NOT
# force the current working directory to change if the user chooses a different
# directory than the one initially set.
# This sets the default filter that the user will initially see. Otherwise,
# the first filter in the list will be used by default.
# Show the dialog and retrieve the user response. If it is the OK response,
# process the data.
# Normally, at this point you would save your data using the file and path
# data that the user provided to you, but since we didn't actually start
# with any data to work with, that would be difficult.
#
# The code to do so would be similar to this, assuming 'data' contains
# the data you want to save:
#
# fp = file(path, 'w') # Create file anew
# fp.write(data)
# fp.close()
#
# You might want to add some error checking :-)
#
# Note that the current working dir didn't change. This is good since
# that's the way we set it up.
# Destroy the dialog. Don't do this until you are done with it!
# BAD things can happen otherwise!
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Make and layout the controls
# Make a menu
# Little know wx Fact #42: there are a number of pre-set IDs
# in the wx package, to be used for common controls such as those
# illustrated below. Neat, huh?
# and a file history
# and finally the event handler bindings
# A little extra cleanup is required for the FileHistory control
# add it to the history
# get the file based on the menu ID
# add it back to the history so it will be moved up the list
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# 11/17/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
#
# 11/28/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Changed the event binding slightly.
#---------------------------------------------------------------------------
#print(repr(evt.GetFindString()), repr(self.findData.GetFindString()))
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#print("Using numpy, version:", N.__version__)
# numpy isn't there
#---------------------------------------------------------------------------
# this gets called when needed, rather than on import
# if it's not there locally, try the wxPython lib.
## Set up the MenuBar
#item = draw_menu.Append(-1, "&Speed","Run a test of Drawing Speed")
#self.Bind(wx.EVT_MENU, self.SpeedTest, item)
# Add the Canvas
# reference the contained FloatCanvas
##Create a sizer to manage the Canvas and message window
## getting all the colors for random objects
## Here is how you catch FloatCanvas mouse events
## Here is how you unbind FloatCanvas mouse events
# move left-right
# move up-down
#
## these set the limits for how much you can zoom in and out
############# Random tests of everything ##############
# Rectangles
# Ellipses
# Points
# SquarePoints
# Circles
# %i"%(i), xy, Size = 12, BackgroundColor = None, Position = "cc")
# Lines
# Polygons
## Pointset
# Text
# Scaled Text
# Arrows
# ArrowLines
## Random tests of everything:
# Rectangles
# Ellipses
# Circles
# %i"%(i), xy, Size = 12, BackgroundColor = None, Position = "cc")
# Lines
# Polygons
# Scaled Text
# Now the Foreground Object:
# milliseconds
#import time
#start = time.time()
#print("Did %i frames in %f seconds"%(N, (time.time() - start) ))
#Add a Hit-able rectangle
#Add one that is not HitAble
# Makes it a little easier to hit
#Points = N.array(( (x, y), (x, y+2.*h/3), (x+w, y+h), (x+w, y+h/2.), (x + 2.*w/3, y+h/2.), (x + 2.*w/3,y) ), N.float_)
#Add a Hitable rectangle
## A set of Rectangles that move together
## NOTE: In a real app, it might be better to create a new
## custom FloatCanvas DrawObject
## Add a non-visible rectangle, just to get a Bounding Box
## Text objects have a zero-size bounding box, because it changes with zoom
# Text
# NOTE: this font exists on my Linux box..who knows were else you'll find it!
# NOTE: this font exists on my OS-X.who knows were else you'll find it!
# All defaults
#        Point = N.array((0, 0), N.float_)
#        for Position in ["br"]:
#'LightBlue',
## Test of Actual Map Data
#start = time.clock()
# so log text will get displayed now.
#print("It took %f seconds to load %i shorelines"%(time.clock() - start,len(Shorelines) ))
#start = time.clock()
#print("It took %f seconds to add %i shorelines"%(time.clock() - start,len(Shorelines) ))
#start = time.clock()
#print("It took %f seconds to draw %i shorelines"%(time.clock() - start,len(Shorelines) ))
#            import random
## Test of drawing lots of lines
#start = time.clock()
#print("It took %f seconds to add %i lines"%(time.clock() - start,len(linepoints) ))
#start = time.clock()
#print("It took %f seconds to draw %i lines"%(time.clock() - start,len(linepoints) ))
#            import os, time
##            import random
# Lines
# Pointset
##One of each object:
# Rectangle
# Ellipse
# Point
# Circle
# Line
# Polygon
##            points = []
##            for j in range(random.randint(2,6)):
##                point = (random.uniform(Range[0],Range[1]),random.uniform(Range[0],Range[1]))
##                points.append(point)
## Pointset
## Point
# Text
# Scaled Text
# A "Button"
# put in a rectangle to get a bounding box
# Draw some Arrows
##print("The Changeable Arrow was Clicked")
## You can do them either one at a time, or both at once
## Doing them both at once prevents the arrow points from being calculated twice
#self.RotArrow.SetDirection(self.RotArrow.Direction + random.uniform(-90,90))
#self.RotArrow.SetLength(self.RotArrow.Length + random.randint(-20,20))
# Create a couple random Polygons
# Put a reference to the Polygon in the Button object
# Create a random Polygon
#fixme: Do something to unselect the old one
# Draw points on the Vertices of the Selected Poly:
#Canvas.ZoomToBB()
# -b": #New segment beginning
#---------------------------------------------------------------------------
# running stand alone, Use wxversion:
#    import wxversion
#    wxversion.select("2.6")
#    wxversion.select("2.8")
# check options:
# the default
## check to see if the demo is set to start in a particular mode.
## fixme: should this be in a dict instead?
# put in True if you want output to go to it's own window.
# It's not running stand-alone, set up for wxPython demo.
# don't  neeed wxversion here.
## TestPanel and runTest used for integration into wxPython Demo
## TestPanel and runTest used for integration into wxPython Demo
#win = wx.lib.plot.TestFrame(self, -1, "PlotCanvas Demo")
# import to get the doc
#!/usr/bin/env python
#---------------------------------------------------------------------------
# an empty row
# an empty row
# give it some border space
# set colour
# Don't destroy the dialog until you get everything you need from the
# dialog!
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#	Tags: phoenix-port, py3-port
#----------------------------------------------------------------------
# The FontEnumerator handles fonts installed on the user's operating system.
##         st = font.GetNativeFontInfo().ToString()
##         ni2 = wx.NativeFontInfo()
##         ni2.FromString(st)
##         font2 = wx.FontFromNativeInfo(ni2)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
##self.SetBackgroundColour("sky blue")
# A regular button, selected as the default button
# Same thing, but NOT set as the default button
# Plain old text button based off GenButton()
# Plain old text button, disabled.
# This time, we let the botton be as big as it can be.
# Also, this one is fancier, with custom colors and bezel size.
# let the sizer set best size
# An image button
# An image button, disabled.
# An image button, using a mask to get rid of the
# undesireable part of the image
# A toggle button
# An image toggle button
# A bitmap button with text.
# a flat text button
# A flat image button
##b.SetBackgroundColour("sky blue")
##b.SetBackgroundColour("pink")
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# some space above
# some space below
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# The Python OpenGL package can be found at
# http://PyOpenGL.sourceforge.net/
#----------------------------------------------------------------------
#** Enable this to show putting a GLCanvas on the wx.Panel
# initial mouse position
# Do nothing, to avoid flashing on MSW.
# set viewing projection
# position viewer
# position object
# clear color and depth buffers
# draw six faces of a cube
# camera frustrum setup
# position viewer
# position viewer
#
# clear color and depth buffers
# use a fresh transformation matrix
# position object
#glTranslate(0.0, 0.0, -2.0)
# push into visible buffer
#----------------------------------------------------------------------
#!/usr/bin/env python
# To help test compatibility of the generic GraphicsContext classes uncomment
# this line:
#import wx.lib.graphics as g
#----------------------------------------------------------------------
# sizes used in shapes drawn below
# use buffered drawing on Windows
# When there is a size event then recreate the buffer to match
# the new size of the window.
# The buffer already contains our drawing, so no need to
# do anything else but create the buffered DC.  When this
# method exits and dc is collected then the buffer will be
# blitted to the paint DC automagically
# Otherwise we need to draw our content to the paint DC at
# this time.
# If you want to force the use of Cairo instead of the native
# GraphicsContext backend then create the context like this.
# It works on Windows so far, (on wxGTK the Cairo context is
# already being used as the native default.)
#
# On Windows we also need to ensure that the cairo DLLs are
# found on the PATH, so let's add the wx package dir to the
# PATH here.  In a real application you will probably want to
# be smarter about this.
# Otherwise, creating it this way will use the native
# backend, (GDI+ on Windows, CoreGraphics on Mac, or
# Cairo on GTK).
# make a path that contains a circle and some lines, centered at 0,0
# Now use that path to demonstrate various capbilites of the grpahics context
# save current translation/scale/other state
# reposition the context origin
# show the difference between stroking, filling and drawing
# restore saved state
# save it again
# offset to the lower part of the window
# for testing clipping
#gc.Clip(0, 0, 100, 100)
#rgn = wx.RegionFromPoints([ (0,0), (75,0), (75,25,), (100, 25),
#                            (100,100), (0,100), (0,0)  ])
#gc.ClipRegion(rgn)
#gc.ResetClip()
# 128 == half transparent
# increase scale by 8%
# restore saved state
# save it again
# Move the origin over to the next location
# draw our path again, rotating it about the central point,
# and changing colors as we go
# save this new current state so we can
# pop back to it at the end of the loop
# use translate to artfully reposition each drawn path
# use Rotate to rotate the path
# now draw it
# Draw a bitmap with an alpha channel on top of the last group
#-bsz.width,
#-bsz.height/2,
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# To test compatibility of gradients with the generic GraphicsContext classes
# uncomment this line
#import wx.lib.graphics as g
#----------------------------------------------------------------------
# Create a simple default brush we can use until a gradient
# brush is given to us
# make some widgets
# put them in a sizer
# make the panel that will display the gradient
# and the other widgets for collecting data about the gradient
# bind some events
# do the layout
# called when any of the spinctrls in the nested panels are updated
# called when any of the color pickers are updated
# called for changes to x1,y1 or x2,y2
# Tweak the panels in self.stops to set limits on the allowed
# positions, and to disable those that should not be changed or
# removed.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# if it's already at the "other" spot then move it back
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# For this example, select the text
#self.startValue:
# update the table
## We can ask the base class to do it
#return super(MyCellEditor, self).IsAcceptedKey(evt)
# or do it ourselves
# For this example, replace the text.  Normally we would append it.
#self._tc.AppendText(ch)
#---------------------------------------------------------------------------
# Somebody changed the grid so the type registry takes precedence
# over the default attribute set for editors and renderers, so we
# have to set null handlers for the type registry before the
# default editor will get used otherwise...
#self.RegisterDataType(wxGRID_VALUE_STRING, None, None)
#self.SetDefaultEditor(MyCellEditor(self.log))
# Or we could just do it like this:
#self.RegisterDataType(wx.GRID_VALUE_STRING,
#                      wx.GridCellStringRenderer(),
#                      MyCellEditor(self.log))
#                       )
# but for this example, we'll just set the custom editor on one cell
# and on a column
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#--------------------------------------------------
# required methods for the wxPyGridTableBase interface
# Get/Set values in the table.  The Python version of these
# methods can handle any data-type, (as long as the Editor and
# Renderer understands the type too,) not just strings as in the
# C++ version.
# add a new row
# tell the grid we've added a row
# The table
# what we did to it
# how many
#--------------------------------------------------
# Some optional methods
# Called when the grid needs to display labels
# Called to determine the kind of editor/renderer to use by
# default, doesn't necessarily have to be the same type used
# natively by the editor/renderer if they know how to convert.
# Called to determine how the data can be fetched and stored by the
# editor and renderer.  This allows you to enforce some type-safety
# in the grid.
#---------------------------------------------------------------------------
# The second parameter means that the grid is to take ownership of the
# table and will destroy it when done.  Otherwise you would need to keep
# a reference to it and call it's Destroy method later.
# I do this because I don't like the default behaviour of not starting the
# cell editor on double clicks, but only a second click.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#--------------------------------------------------
# required methods for the wxPyGridTableBase interface
#--------------------------------------------------
# Some optional methods
# Called when the grid needs to display column labels
# Called when the grid needs to display row labels
#--------------------------------------------------
# Methods added for demo purposes.
# The physical moving of the cols/rows is left to the implementer.
# Because of the dynamic nature of a wxGrid the physical moving of
# columns differs from implementation to implementation
# Move the column
# Move the identifiers
# Notify the grid
# Move the row
# Move the rowLabels and data rows
# Notify the grid
#---------------------------------------------------------------------------
# The second parameter means that the grid is to take ownership of the
# table and will destroy it when done.  Otherwise you would need to keep
# a reference to it and call it's Destroy method later.
# Enable Column moving
# Enable Row moving
# Event method called when a column move needs to take place
# Column being moved
# Before which column to insert
# Event method called when a row move needs to take place
# Row being moved
# Before which row to insert
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# Set VIRTUAL to 1 to use a virtual grid
#---------------------------------------------------------------------------
# the x,y coordinates here are Unscrolled coordinates.  They must be changed
# to scrolled coordinates.
# now we need to get the row and column from the grid
# set the drag and drop target
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# the edit control needs this key
# this would be a good place to add a new row if your app
# needs to do that
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# This is all it takes to make a custom data table to plug into a
# wxGrid.  There are many more methods that can be overridden, but
# the ones shown below are the required ones.  This table simply
# provides strings containing the row and column values.
#---------------------------------------------------------------------------
# The second parameter means that the grid is to take
# ownership of the table and will destroy it when done.
# Otherwise you would need to keep a reference to it, but that
# would allow other grids to use the same table.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#ffe0e0'))
#e0ffe0'))
#e0e0ff'))
#e0ffe0'))
#e0e0ff'))
#ffe0e0'))
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#import wx.lib.mixins.grid as mixins
#---------------------------------------------------------------------------
##, mixins.GridAutoEditMixin):
##mixins.GridAutoEditMixin.__init__(self)
#, gridlib.Grid.SelectRows)
##self.EnableEditing(False)
# simple cell formatting
#self.SetRowLabelSize(0)
#self.SetColLabelSize(0)
# attribute objects let you keep a set of formatting values
# in one spot, and reuse them if needed
# you can set cell attributes for the whole row (or column)
#self.SetDefaultCellOverflow(False)
#r = gridlib.GridCellAutoWrapStringRenderer()
#self.SetCellRenderer(9, 1, r)
# overflow cells
# test all the events
# Show how to stay in a cell that has bad data.  We can't just
# call SetGridCursor here since we are nested inside one so it
# won't have any effect.  Instead, set coordinates to move to in
# idle time.
# Another way to stay in a cell that has a bad value...
# cancels the cell selection
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#import wx.lib.inspection
#wx.lib.inspection.InspectionTool().Show()
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# There is a bug in wxGTK for this method...
# I do this because I don't like the default behaviour of not starting the
# cell editor on double clicks, but only a second click.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# The base class must be initialized *first*
# XXX
# we need to store the row length and column length to
# see if the table has changed size
# update the column rendering plugins
# update the scrollbars and the displayed part of the grid
# This sends an event to the grid table to update all of the values
# ------------------------------------------------------
# begin the added code to manipulate the table (non wx related)
#print('append')
# XXX Hack
# entry["A"] can only be between 1..4
# we'll cheat here and just remove the name from the
# list of column names.  The data will remain but
# it won't be shown
# we need to advance the delete count
# to make sure we delete the right columns
# we need to advance the delete count
# to make sure we delete the right rows
# end table manipulation code
# ----------------------------------------------------------
# --------------------------------------------------------------------
# Sample wx.Grid renderers
# clear the background
# copy the image but only to the size of the grid cell
# Here we draw text in a grid cell using various fonts
# and colors.  We have to set the clipping region on
# the grid's DC, otherwise the text will spill over
# to the next cell
# clear the background
# change the text background based on whether the grid is selected
# or not
# Okay, now for the advanced class :)
# Let's add three dots "..."
# to indicate that that there is more text to be read
# when the text is larger than the grid cell
# --------------------------------------------------------------------
# Sample Grid using a specialized table and renderers that can
# be plugged in based on column names
# The base class must be initialized *first*
# Did we click on a row or a column?
# -----------------------------------------------------------------
# Test data
# data is in the form
# [rowname, dictionary]
# where dictionary.get(colname, None) -> returns the value for the cell
#
# the colname must also be supplied
# XXX
# the "A" column can only be between one and 4
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# The emulation level is a persistent per-user per-application value. If
# you would like to reset it back to the default (no-emulation) then
# it can be done by calling this:
# put the frame title back
# WebView events
# this event happens prior to trying to get a resource
# This is how you can cancel loading a page.
# The full document has loaded
# Control bar events
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# This shows how to catch the OnLinkClicked non-event.  (It's a virtual
# method in the C++ code...)
# def OnHTMLOpeningURL(self, urlType, url):
#     self.log.WriteText('OnHTMLOpeningURL: %s %s' % (urlType, url))
#     if urlType == wx.html.HTML_URL_IMAGE and 'canada' not in url:
#         return (wx.html.HTML_REDIRECT, "bitmaps/canada.gif")
#     return (wx.html.HTML_OPEN, "")
# This filter doesn't really do anything but show how to use filters
# This method decides if this filter is able to read the file
# If CanRead returns True then this method is called to actually
# read the file and return the contents.
# A button with this ID is created on the widget test page.
# put the frame title back
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#Boa:FramePanel:LanguageSelectPanel
# Normally you would just set _ to be a reference to the
# wx.GetTranslation function, and then wrap all you literal strings in
# _() function calls.  Then everytime you use one of your literals, it
# would first pass through the translation function and try to load a
# translated version of the string from the current message catalogs.
# For this example, since we are changinb language on the fly, and
# since we are only translating the label for one widget, we'll not do
# it the automatic way and we'll be more explicit.  See the setup in
# __init__() and the translation done in updateLanguage() below.
# demo string
# wx built in translation
# wx built in translation
# generated method, don't edit
# generated method, don't edit
# generated method, don't edit
# generated method, don't edit
# generated method, don't edit
# generated method, don't edit
# usually you would define wx.Locale in your wx.App.OnInit class.
# for the demo we just define it in this module
# Make *sure* any existing locale is deleted before the new
# one is created.  The old C++ object needs to be deleted
# before the new one is created, and if we just assign a new
# instance to the old Python variable, the old C++ locale will
# not be destroyed soon enough, likely causing a crash.
# create a locale object for this language
# set to the selected language
# set back to default
#-------------------------------------------------------------------------------
#!/usr/bin/env python
# IMG_QUALITY = wx.IMAGE_QUALITY_NORMAL
#----------------------------------------------------------------------
#FFBB66'
# self.log = log
# self.SetDoubleBuffered(True)
# | wx.FLP_SMALL
# Start with a fresh copy of the image to mod.
#, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER, 5)
#, 0, wx.ALL, 5)
# Start with a fresh copy of the image to mod.
# local opt
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Try to make up for lack of alpha support in wxGTK (gtk+
# 1.2) by converting the alpha blending into a
# transparency mask.
# first convert to a wx.Image
# Then convert the alpha channel to a mask, specifying the
# threshold below which alpha will be made fully
# transparent
# convert back to a wx.Bitmap
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Name:         ImageBrowser.py
# Purpose:      Image Selection dialog for wxPython demo
#
# Author:       Lorne White (email: lorne.white@telusplanet.net)
#
# Version       0.5
# Date:         Feb 26, 2001
# Licence:      wxWindows license
#----------------------------------------------------------------------------
#---------------------------------------------------------------------------
# get current working directory
# set the initial directory for the demo bitmaps
# open the image browser dialog
# show the selected file
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#	Tags: phoenix-port, py3-port
#----------------------------------------------------------------------
#, (bmp.GetWidth(), bmp.GetHeight()))
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This file was generated by encode_bitmaps.py
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ***************** Catalog starts here *******************
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Create the InfoBar.  It starts out in a hidden state so it
# won't be visible until we need it.
# wx.ICON_INFORMATION is the default
# Calling evt.Skip() will allow the default handler to run
# which will dismiss the info bar.  If you don't want it to be
# dismissed for a particular button then then don't call
# Skip().
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Output menu
# Enable output menu item
# Disable output menu item
# Attach the menu to our menu bar
# Attach menu bar to frame
# Point to ourselves as the output object's parent.
# Associate menu bar with output object
# We're going to set up a timer; set up an event handler for it.
# Set up a timer for demo purposes
# Get a copy of stdout and set it aside. We'll use it later.
# Now point to the output object for stdout
# ... and use it.
# We stored a pointer to the original stdout above in .__init__(), and
# here we restore it before closing the window.
# Clean up
# Event handler for timer events.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
##     class MyFrame(wxFrame):
##         def __init__(self,output):
##             wxFrame.__init__(self,None,-1,"Close me...",size=(300,100))
##             EVT_CLOSE(self,self.OnClose)
##             menubar = wxMenuBar()
##             menu = wxMenu()
##             mID = wxNewId()
##             menu.Append(mID,"&Enable output","Display output frame")
##             EVT_MENU(self,mID,output.EnableOutput)
##             mID = wxNewId()
##             menu.Append(mID,"&Disable output","Close output frame")
##             EVT_MENU(self,mID,output.DisableOutput)
##             menubar.Append(menu,"&Output")
##             self.SetMenuBar(menubar)
##             output.SetOtherMenuBar(menubar,menuname="Output")
##         def OnClose(self,event):
##             if isinstance(sys.stdout,wx.lib.infoframe.PyInformationalMessagesFrame):
##                 sys.stdout.close()
##             self.Destroy()
# Override the default output window and point it to the
# custom class.
# At this point, we should probably check to see if self.stdioWin
# is actually pointed to something. By default, wx.App() sets this
# attribute to None. This causes problems when setting up the menus
# in MyFrame() above. On the other hand, since there's little that
# can be done at this point, you might be better served putting
# an error handler directly into MyFrame().
#
# That's in practice. In the case of this demo, the whole point
# of the exercise is to demonstrate the window, so we're being
# just a little lazy for clarity's sake. But do be careful in
# a 'real world' implementation :-)
# Associate the frame with stdout.
# *extremely important*
#
# In this demo, if the redirect flag is set to False, the infoframe will not
# be created or used. All output will go to the default stdout, which in this
# case will cause the app to throw an exception. In a real app, you should
# probably plan ahead and add a check before forging ahead. See suggestion above.
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Customize the buttons for this example.
# NOTE: wx.Button on OSX does not modify the button size when adding a
# bitmap after the fact like this, and these bitmaps are a little too
# large and look funny in OSX, so we won't do this customization there.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Name:        Joystick.py
# Purpose:     Demonstrate use of wx.adv.Joystick
#
# Author:      Jeff Grimmett (grimmtoo@softhome.net), adapted from original
#              .wdr-derived demo
#
# Created:     02-Jan-2004
# Copyright:
# Licence:     wxWindows license
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Once all supported versions of Python support 32-bit integers on all
# platforms, this can go up to 32.
#----------------------------------------------------------------------------
# A derived StaticText that always aligns right and renders
# in a bold font.
#----------------------------------------------------------------------------
# The face Bitmap init is done here, to make sure the buffer is always
# the same size as the Window
# When dc is destroyed it will blit self.buffer to the window,
# since no other drawing is needed we'll just return and let it
# do it's thing
# draw the guage as a maxed square in the center of this window.
# Restrict our drawing activities to the square defined
# above.
# Get the joystick position as a float
# Get the joystick range of motion
# calc a ratio of our range versus the joystick range
# calc the displayable value based on position times ratio
# and normalize the value from our brush's origin
# Now to draw it.
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#
# Display the current postion of the POV control
#
# calculate the size of our display and make a buffer for it.
# When dc is destroyed it will blit self.buffer to the window,
# since no other drawing is needed we'll just return and let it
# do it's thing
# draw the guage as a maxed circle in the center of this window.
# our 'raster'.
# fancy decorations
# use the appropriate function to get the POV position
# trap invalid values
# rotate CCW by 90 so that 0 is up.
# Normalize
# Stolen from wx.lib.analogclock :-)
# normalise value to match our actual center.
# Draw the line
# And a little thing to show the endpoint
#----------------------------------------------------------------------------
#
# Displays static info about the POV control
#
# Effectively makes the checkboxes read-only.
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# calculate the size of our display.
# When dc is destroyed it will blit self.buffer to the window,
# since no other drawing is needed we'll just return and let it
# do it's thing
# bitmap size
# center of bitmap
# calc the 0, 0 origin of the bitmap
# our 'raster'.
# Set the font for the DC ...
# ... and calculate how much space our value
# will take up.
# Calc the center of the LED, and from that
# derive the origin of our value.
# I draw the value twice so as to give it a pseudo-shadow.
# This is (mostly) because I'm too lazy to figure out how
# to blit my text onto the gauge using one of the logical
# functions. The pseudo-shadow gives the text contrast
# regardless of whether the bar is under it or not.
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# of Sticks: '), (1, 2), (1, 1), wx.ALL | wx.GROW | wx.ALIGN_RIGHT, 2)
# of Axes: '), (1, 4), (1, 1), wx.ALL | wx.GROW | wx.ALIGN_RIGHT, 2)
# Axes: '), (1, 6), (1, 1), wx.ALL | wx.GROW | wx.ALIGN_RIGHT, 2)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#
# This class allows us to use a wx.Gauge to display the axis value
# with a fancy label overlayed onto the guage itself. Two values are
# used to do things: first of all, since the gauge is limited to
# positive numbers, the scale is fixed at 0 to 1000. We will receive
# an adjusted value to use to render the gauge itself. The other value
# is a raw value and actually reflects the value from the joystick itself,
# which is then drawn over the gauge.
#
# This is the value we will display.
# NOTE: See comment below
# # Capture paint events for purpose of updating
# # the displayed value.
# self.Bind(wx.EVT_PAINT, self.onPaint)
# Updates the gauge itself, sets the raw value for
# the next EVT_PAINT
# Must always create a PaintDC when capturing
# an EVT_PAINT event
# This method handles actual painting of and drawing
# on the gauge.
# Clear out the gauge
# NOTE: in Classic we exposed wxWindow::OnPaint for MSW, so the default
#       paint behavior can be triggered and then we can draw on top of
#       that after the native OnPaint is done. For Phoenix, I chose to
#       not do this any more, so this breaks. Not sure this is really
#       needed for this demo, but if so then we'll nede to find another
#       way to do this. In the meantime, this is commented out, and the
#       Paint event will also not be captured at all.
# # and then carry out business as usual
# wx.Gauge.OnPaint(self, evt)
# This is the size available to us.
# This is what we will overlay on the gauge.
# It reflects the actual value received from the
# wx.adv.Joystick.
# Copy the default font, make it bold.
# Set the font for the DC ...
# ... and calculate how much space our value
# will take up.
# Calc the center of the gauge, and from that
# derive the origin of our value.
# I draw the value twice so as to give it a pseudo-shadow.
# This is (mostly) because I'm too lazy to figure out how
# to blit my text onto the gauge using one of the logical
# functions. The pseudo-shadow gives the text contrast
# regardless of whether the bar is under it or not.
#----------------------------------------------------------------------------
#
# This class is a container for the min, max, and current
# values of the joystick axis in question. It contains
# also special features to render a 'dummy' if the axis
# in question is not available.
#
#
# token represents the type of axis we're displaying.
#
#
# Create a call to the 'Has*()' method for the stick.
# X and Y are always there, so we tie the Has* method
# to a hardwired True value.
#
# Now init the panel.
#
# Tie our calibration functions to the appropriate
# stick method. If we don't have the axis in question,
# we won't need them.
#
# Create our displays and set them up.
# We go here if the axis in question is not available.
#----------------------------------------------------------------------------
# Don't bother if the axis doesn't exist.
#
# Not all values are available from a wx.JoystickEvent, so I've elected
# to not use it at all. Therefore, we are getting our values direct from
# the stick. These values also seem to be more stable and reliable than
# those received from the event itself, so maybe it's a good idea to
# use the stick directly for your program.
#
# Here we either select the appropriate member of stick.GetPosition() or
# apply the appropriate Get*Position method call.
#
#
# While we might be able to rely on a range of 0-FFFFFF on Win, that might
# not be true of all drivers on all platforms. Thus, calc the actual full
# range first.
#
#
# The relative value is used by the derived wx.Gauge since it is a
# positive-only control.
#
#
# Pass both the raw and relative values to the derived Gauge
#
# a dummy method used for X and Y axis.
#----------------------------------------------------------------------------
#
# Contained herein is a panel that offers a graphical display
# of the levels for all axes supported by wx.adv.Joystick. If
# your system doesn't have a particular axis, it will be
# 'dummied' for transparent use.
#
# Defines labels and 'tokens' to identify each
# supporte axis.
# Contains a list of all axis initialized.
#----------------------------------------------------------------------------
# Go through the list of labels and tokens and add a label and
# axis display to the sizer for each.
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Try to grab the control. If we get it, capture the stick.
# Otherwise, throw up an exception message and play stupid.
# Calibrate our controls
# One Sizer to Rule Them All...
# Capture Joystick events (if they happen)
# Do not try this without a stick
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# assume buttonState is what the stick returned, and buttonBit
# is the bit you want to examine
# button pressed, do something with it
#----------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#wx.WXK_PRIOR : "WXK_PRIOR",
#wx.WXK_NEXT : "WXK_NEXT",
#wx.WXK_NUMPAD_PRIOR : "WXK_NUMPAD_PRIOR",
#wx.WXK_NUMPAD_NEXT : "WXK_NUMPAD_NEXT",
#----------------------------------------------------------------------
#| wx.RAISED_BORDER
#| wx.SUNKEN_BORDER
#----------------------------------------------------------------------
# build a newline and tab delimited string to put into the clipboard
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Nifty little trick here; apply wx.NewIdRef() to generate a series of
# IDs used later on in the app.
# A small note here: while only certain parts of this frame are actually demonstrating
# the capabilities of the LayoutAnchors feature, all the controls are within the same
# frame; therefore, all controls and windows within the frame must use LayoutAnchors.
# You can't mix LayoutAnchors and sizers.
# Based on the values of the above checkboxes, we will adjust the layout constraints
# on the sample window whenever one of the checkboxes changes state.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#1;l=l10#1;b=b10#1;r%r50#1',(self,))
#1;r=r10#1;b%b30#1;l>10#2', (self,self.panelA))
#3;r=r10#1;b=b10#1;l>10#2', (self,self.panelA,self.panelB))
#1;Y=Y#1;h*;w%w50#1', (self.panelA,)))
#1;r=r4#1;h*;w*', (self.panelB,)))
#1;r%w50#1;h=h#2;w=w#2', (self.panelC, b))
#1;l>#1;h*;w*', (self.panelD,)))
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
# Formerly wx.gizmos in Classic
#----------------------------------------------------------------------
# | gizmos.LED_DRAW_FADED)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
#wx.BK_TOP
#wx.BK_BOTTOM
#wx.BK_LEFT
#wx.BK_RIGHT
# make an image list using the LBXX images
# Now make a bunch of panels for the list book
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#!/usr/bin/env python
#	Tags: phoenix-port, py3-port
#---------------------------------------------------------------------------
# This listbox subclass lets you type the starting letters of what you want to
# select, and scrolls the list to the match if it is found.
# Changed in 2.5 because ListBox.Number() is no longer supported.
# ListBox.GetCount() is now the appropriate way to go.
# backspace removes one character and backs up
#---------------------------------------------------------------------------
# These only work on Windows
# event.GetClientData()
# data = lb.GetClientData(lb.GetSelection())
# if data is not None:
# self.log.WriteText('\tdata: %s\n' % data)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Name:         ListCtrl.py
# Purpose:      Testing lots of stuff, controls, window types, etc.
#
# Author:       Robin Dunn & Gary Dumer
#
# Created:
# Copyright:    (c) 1998-2018 by Total Control Software
# Licence:      wxWindows license
#----------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#| wx.BORDER_SUNKEN
#| wx.LC_SORT_ASCENDING    # disabling initial auto sort gives a
#| wx.LC_NO_HEADER         # better illustration of col-click sorting
#| wx.LC_VRULES
#| wx.LC_HRULES
#| wx.LC_SINGLE_SEL
# Now that the list exists we can init the other base class,
# see wx/lib/mixins/listctrl.py
#self.SortListItems(0, True)
# for wxMSW
# for wxGTK
# for normal, simple columns, you can add them like this:
# but since we want images on the column header we have to do it the hard way:
# show how to select an item
# show how to change the colour of a couple items
# Used by the ColumnSorterMixin, see wx/lib/mixins/listctrl.py
# Used by the ColumnSorterMixin, see wx/lib/mixins/listctrl.py
##print(event.GetItem().GetTextColour())
#event.Veto()  # doesn't work
# this does
# Show how to reselect something we don't want deselected
## Show how to not allow a column to be resized
#if event.GetColumn() == 0:
#    event.Veto()
# only do this part the first time so the events are only bound once
# make a menu
# add some items
# Popup the menu.  If an item is selected then its handler
# will be called before PopupMenu returns.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Name:         ListCtrl_edit.py
# Purpose:      Testing editing a ListCtrl
#
# Author:       Pim van Heuven
#
# Created:      2004/10/15
# Copyright:    (c) Pim Van Heuven
# Licence:      wxWindows license
#----------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# for normal, simple columns, you can add them like this:
#| wx.LC_SORT_ASCENDING            # Content of list as instructions is
# nonsense with auto-sort enabled
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#-----------------------------------------------------------------
# These methods are callbacks for implementing the "virtualness"
# of the list...  Normally you would determine the text,
# attributes and/or image based on values from some external data
# source, but for this demo we'll just calculate them
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/bin/env python
#----------------------------------------------------------------------------
# Name:         Main.py
# Purpose:      Testing lots of stuff, controls, window types, etc.
#
# Author:       Robin Dunn
#
# Created:      A long time ago, in a galaxy far, far away...
# Copyright:    (c) 1999-2018 by Total Control Software
# Licence:      wxWindows license
# Tags:         phoenix-port, py3-port
#----------------------------------------------------------------------------
# FIXME List:
# * Problems with flickering related to ERASE_BACKGROUND
#     and the splitters. Might be a problem with this 2.5 beta...?
#     UPDATE: can't see on 2.5.2 GTK - maybe just a faster machine :)
# * Demo Code menu?
# * Annoying switching between tabs and resulting flicker
#     how to replace a page in the notebook without deleting/adding?
#     Where is SetPage!? tried freeze...tried reparent of dummy panel....
#     AG: It looks like this issue is fixed by Freeze()ing and Thaw()ing the
#         main frame and not the notebook
# TODO List:
# * UI design more professional (is the new version more professional?)
# * save file positions (new field in demoModules) (@ LoadDemoSource)
# * Update main overview
# * Why don't we move _treeList into a separate module
# =====================
# = EXTERNAL Packages =
# =====================
# In order to let a package (like AGW) be included in the wxPython demo,
# the package owner should create a sub-directory of the wxPython demo folder
# in which all the package's demos should live. In addition, the sub-folder
# should contain a Python file called __demo__.py which, when imported, should
# contain the following methods:
#
# * GetDemoBitmap: returns the bitmap to be used in the wxPython demo tree control
#   in a PyEmbeddedImage format;
# * GetRecentAdditions: returns a list of demos which will be displayed under the
#   "Recent Additions/Updates" tree item. This list should be a subset (or the full
#   set) of the package's demos;
# * GetDemos: returns a tuple. The first item of the tuple is the package's name
#   as will be displayed in the wxPython demo tree, right after the "Custom Controls"
#   item. The second element of the tuple is the list of demos for the external package.
# * GetOverview: returns a wx.html-ready representation of the package's documentation.
#
# Please see the __demo__.py file in the demo/agw/ folder for an example.
# Last updated: Andrea Gavana, 20 Oct 2008, 18.00 GMT
# We won't import the images module yet, but we'll assign it to this
# global when we do.
# For debugging
##wx.Trap();
##print("wx.VERSION_STRING = %s (%s)" % (wx.VERSION_STRING, wx.USE_UNICODE and 'unicode' or 'ansi'))
##print("pid:", os.getpid())
##raw_input("Press Enter...")
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# get images and demo list
#---------------------------------------------------------------------------
#ffffff\" border cols=1>'
#ffffff\" border cols=1>'
#ffffff\" cellspacing=20>'
#---------------------------------------------------------------------------
#ff0000"
#0000ff"
#0000ff"
# check values aren't -1
# attempt to average.
# (wx systemsettings allows on and off time, but scintilla just takes a single period.)
# Issue where wx.SYS_CARET_ON/OFF_MSEC is unavailable.
#---------------------------------------------------------------------------
# Set up a thread that will scan the wxWidgets docs for window styles,
# events and widgets screenshots
# This is the code executing in the new thread. Simulation of
# a long process as a simple urllib call
# Unable to get to the internet
# Some other strange error...
#---------------------------------------------------------------------------
# Show how to derive a custom wxLog class
#---------------------------------------------------------------------------
# A class to be used to display source code in the demo.  Try using the
# wxSTC in the StyledTextCtrl_2 sample first, fall back to wxTextCtrl
# if there is an error, such as the stc module not being present.
#
##raise ImportError     # for testing the alternate implementation
# Some methods to make it compatible with how the wxTextCtrl is used
# if wx.USE_UNICODE:
# value = value.decode('iso8859_1')
#self.EnsureVisible(line)
# Enable folding
# Highlight tab/space mixing (shouldn't be any)
# Set left and right margins
# Set up the numbers in the margin for margin #1
# Reasonable value for, say, 4-5 digits using a mono font (40 pix)
# Indentation and tab stuff
# Proscribed indent size for wx
# Show indent guides
# Backspace unindents rather than delete 1 space
# Tab key indents
# Proscribed tab size for wx
# Use spaces rather than tabs, or
# TabTimmy will complain!
# White space
# Don't view white space
# EOL: Since we are loading/saving ourselves, and the
# strings will always have \n's in them, set the STC to
# edit them that way.
# No right-edge mode indicator
# Setup a margin to hold fold markers
# and now set up the fold markers
# Global default style
#000000,back:#FFFFFF,face:Courier New')
# TODO: if this looks fine on Linux too, remove the Mac-specific case
# and use this whenever OS != MSW.
#000000,back:#FFFFFF,face:Monaco')
#000000,back:#FFFFFF,face:Courier,size:%d'%defsize)
# Clear styles and revert to default.
# Following style specs only indicate differences from default.
# The rest remains unchanged.
# Line numbers in margin
#000000,back:#99A9C2')
# Highlighted brace
#00009D,back:#FFFF00')
# Unmatched brace
#00009D,back:#FF0000')
# Indentation guide
#CDCDCD")
# Python styles
#000000')
# Comments
#008000,back:#F0FFF0')
#008000,back:#F0FFF0')
# Numbers
#008080')
# Strings and characters
#800080')
#800080')
# Keywords
#000080,bold')
# Triple quotes
#800080,back:#FFFFEA')
#800080,back:#FFFFEA')
# Class names
#0000FF,bold')
# Function names
#008080,bold')
# Operators
#800000,bold')
# Identifiers. I leave this as not bold because everything seems
# to be an identifier if it doesn't match the above criterae
#000000')
# Caret color
# Selection background
#66CCFF')
# Attempt to set caret blink rate.
# NOTE: STC already has this method
#---------------------------------------------------------------------------
# Constants for module versions
#---------------------------------------------------------------------------
# makes it easier for the event handler
# Loads a demo from a DemoModules object
# Update the radio/restore buttons
# Create the demo directory if one doesn't already exist
# Save
# Handles the "Delete Modified" button
# Delete the modified copy
#---------------------------------------------------------------------------
# HACK: on Linux, a leading / gets lost...
# Loop over the content of the demo directory
# Not a directory, continue
# See if a file called "name" is there
# We must return a string...
# Loop over the content of the demo directory
# Not a directory, continue
# See if a __demo__.py file is there
# Extend sys.path and import the external demos
# Nothing to import...
# Modify the tree items and icons
# We put the external packages right before the
# More Windows/Controls item
# Sort and reverse the external demos keys so that they
# come back in alphabetical order
# Loop over all external packages
# Insert a new package in the _treeList of demos
# Get the recent additions for this package
# Extend the demo bitmaps and the catalog
# That's all folks...
# Loop over all the external demos
# Get the tree item name for the package and its demos
# Get the overview for the package
# The user clicked on the parent tree item, return the overview
# The user clicked on a real demo, return the package
# No match found, return None for both
#---------------------------------------------------------------------------
#              (dict , source ,  filename , description   , error information )
#              (  0  ,   1    ,     2     ,      3        ,          4        )
# load original module
# load modified module (if one exists)
#---------------------------------------------------------------------------
# traceback list entries: (filename, line number, function name, text)
# --Based on traceback.py::format_exception_only()--
# If it's a syntax error, extra information needs
# to be added to the traceback
#---------------------------------------------------------------------------
#, style=wx.NO_FULL_REPAINT_ON_RESIZE)
# Main Label
# Exception Information
# Used to center the grid within the box
# Set up the traceback list
# This one automatically resizes last column to take up remaining space
#Add the traceback data
# Filename
# Line
# Function
# Code
# Check whether this entry is from the demo module
# FIXME: make more generalised
# Store line number for easy access
# Give it a blue colour
# Editor can't jump into this one's code
# This occurs before OnDoubleClick and can be used to set the
# currentItem. OnDoubleClick doesn't get a wxListEvent....
# If double-clicking on a demo's entry, jump to the line number
# Switch to the code viewer tab
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# wx.adv.TBI_CUSTOM_STATUSITEM
# Set the image
# bind some events
# wxMac can be any size upto 128x128, so leave the source img alone....
#---------------------------------------------------------------------------
#, wx.ST_SIZEGRIP
# Create a Notebook
# Create a TreeCtrl
# Something is wrong with the bestsize of the SearchCtrl, so for now
# let's set it based on the size of a TextCtrl.
# Set up a wx.html.HtmlWindow on the Overview Notebook page
# we put it in a panel first because there seems to be a
# refresh bug of some sort (wxGTK) when it is directly in
# the notebook...
# the old way
# hopefully I can remove this hacky code soon, see SF bug #216861
# Set up a log window
# Set the wxWindows log target to be this textctrl
#wx.Log.SetActiveTarget(wx.LogTextCtrl(self.log))
# But instead of the above we want to show how to use our own wx.Log class
# for serious debugging
#wx.Log.SetActiveTarget(wx.LogStderr())
#wx.Log.SetTraceMask(wx.TraceMessages)
# add the windows to the splitter and split it.
# Make sure there is room for the focus ring
# select initial items
# Load 'Main' module
# select some other initial module?
# Use the aui manager to set up everything
# Make a File menu
# Make a Demo menu
# Make an Option menu
# Make a Help menu
# This is another way to set Accelerators, in addition to
# using the '\t<key>' syntax in the menu items.
#---------------------------------------------
# Catch the search type (name or content)
# Do not`scan all the demo files for every char
# the user input, use wx.EVT_TEXT_ENTER instead
# The native treectrl on MSW has a bug where it doesn't draw
# all of the text for an item if the font is larger than the
# default.  It seems to be clipping the item's label as if it
# was the size of the same label in the default font.
# for normal size events
# Set a flag so the idle time handler will also do the repositioning.
# It is done this way to get around a buglet where GetFieldRect is not
# accurate during the EVT_SIZE resulting from a frame maximize.
# reposition the download gauge
# rect = self.statusBar.GetFieldRect(1)
# self.downloadGauge.SetPosition((rect.x+2, rect.y+2))
# self.downloadGauge.SetSize((rect.width-4, rect.height-4))
# Catch the search type (name or content)
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
# reset the overview text if the tree item is clicked on again
#---------------------------------------------
#---------------------------------------------
# User selected the "wxPython Overview" node
# ie: _this_ module
# Changing the main window at runtime not yet supported...
#---------------------------------------------
#---------------------------------------------
# o The RunTest() for all samples must now return a window that can
#   be palced in a tab in the main notebook.
# o If an error occurs (or has occurred before) an error tab is created.
# There was a previous error in compiling or exec-ing
# change to the demo page the first time a module is run
# otherwise just stay on the same tab in case the user has changed to another one
#---------------------------------------------
# inform the window that it's time to quit if it cares
##            wx.YieldIfNeeded() # in case the page has pending events
#---------------------------------------------
# Add a new page
# Reload an existing page
# Excellent! No redraw/flicker
# Delete a page
#---------------------------------------------
# if wx.USE_UNICODE:
# text = text.decode('iso8859_1')
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
# TODO: verify that this encoding is correct
#print("load time: ", time.time() - start)
# Menu methods
# string not found, start at beginning
# if it already exists then just make sure it's visible
# Make a PyShell window
# Hook the close event of the main frame window so that we
# close the shell at the same time if it still exists
# Activate the widget inspection tool, giving it a widget to preselect
# in the tree.  Use either the one under the cursor, if any, or this
# frame.
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
##        wx.SafeYield()
#---------------------------------------------
# if showTip:
# tp = wx.CreateFileTipProvider(opj("data/tips.txt"), index)
# showTip = wx.ShowTip(self, tp)
# index = tp.GetCurrentTip()
# config.Write("tips", str( (showTip, index) ))
# config.Flush()
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Make sure the default handler runs too so this window gets
# destroyed
# if the timer is still running then go ahead and show the
# main frame now
#---------------------------------------------------------------------------
# add the image for modified demos.
#---------------------------------------------------------------------------
# Check runtime version
# for the InspectionMixin base class
# Now that we've warned the user about possibile problems,
# lets import images
# For debugging
#self.SetAssertMode(wx.PYAPP_ASSERT_DIALOG|wx.PYAPP_ASSERT_EXCEPTION)
# Create and show the splash screen.  It will then create and
# show the main frame when it is time to do so.  Normally when
# using a SplashScreen you would create it, show it and then
# continue on with the application's initialization, finally
# creating and showing the main application window(s).  In
# this case we have nothing else to do so we'll delay showing
# the main frame until later (see ShowMain above) so the users
# can see the SplashScreen effect.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# that's all, folks!
# A reference bitmap that we won't mask
# One that we will
# This mask comes from a monochrome bitmap
# Set the mask on our bitmap
# Now we'll create a mask in a bit of an easier way, by picking a
# colour in the image that is to be the transparent colour.
# Make an interesting background...
# Draw raw image, mask, and masked images
# Draw array of assorted blit operations
# On wxGTK there needs to be a panel under wx.ScrolledWindows if they are
# going to be in a wxNotebook...
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# The following list is of the controls for the demo. Feel free to play around with
# the options!
#description        mask                    excl format     regexp                              range,list,initial
###) ###-#### x:###", "", 'F^-',     "^\(\d{3}\) \d{3}-\d{4}",           '','',''),
#",      "###-##-####",          "", 'F',        "\d{3}-\d{2}-\d{4}",                '','',''),
#{5}-#{4}",            "", 'F',        "\d{5}-(\s{4}|\d{4})",              '','',''),
###",             "", 'F!',       "C[A-Z]{2}-\d{3}",                  '','',''),
#{9}.##",              "", 'F-_,',     "",                                 '','',''),
#{9}",                 "", 'F-_',      "",                                 '','',''),
#description        mask                    excl format     regexp                              range,list,initial
#{6}",          "", 'F-_',       "",                                 '','', ' 0    '),
######",      "", 'F_',        "",                                 (1,399),'', '1     '),
#{6}.#{9}",     "", 'F-_R',      "",                                 '','', '000000.000000000'),
##/##/#### ##:##:## AM",  'BCDEFGHIJKLMNOQRSTUVWXYZ','DF!',"",          '','', wx.DateTime.Now().Format("%m/%d/%Y %I:%M:%S %p")),
# Create this one using factory function:
#/##",
####")
# these are to give dropdown some initial height,
# as base control apparently only sets that size
# during initial construction <sigh>:
# get rid of initial choices used to size the dropdown
###" )
#.###.###")
# requires entry to match or not allowed
# This allows any value in penultimate field, but colors anything outside of the range invalid:
#{9}", formatcodes = '_-,F>')
#{9}", formatcodes = '_-,Fr')
#{9}.#{2}", formatcodes="F,_-R", useParensForNegatives=False)
# right-insert, require explicit cursor movement to change fields
# don't allow blank fraction
# Format choice to fit into format for #{9}.#{2}, with sign position reserved:
# (ordinal + fraction == 11 + decimal point + sign == 13)
# clear the value again
###'
# ---------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# strip out module header used for pydoc:
#!/usr/bin/env python
#----------------------------------------------------------------------
# Create this masked.NumCtrl using factory, to show how:
# Now resize and fit the dialog as appropriate:
# Now resize and fit the dialog as appropriate:
# Now resize and fit the dialog as appropriate:
# Now resize and fit the dialog as appropriate:
# Now resize and fit the dialog as appropriate:
# try to clear the value again
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# Importing ScrolledWindow demo to make use of the MyCanvas
# class defined within.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# tile the background bitmap
#closing demo
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# There are better ways to do IDs, but this demo requires that the window
# IDs be in a specific range. There are better ways to do that, too, but
# this will do for purposes of this demo.
#----------------------------------------------------------------------
#self.CreateStatusBar()
# Create some layout windows
# A window like a toolbar
# A window like a statusbar
# A window to the left of the client window
# Another window to the left of the client window
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# These are spawned as new processes because on Mac there can be
# some problems related to having regular frames and MDI frames in
# the same app.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Create some controls
# let MediaCtrl choose default backend
#backend=wx.media.MEDIABACKEND_DIRECTSHOW
#backend=wx.media.MEDIABACKEND_WMP10
# the following event is not sent with the Windows default backend
# MEDIABACKEND_DIRECTSHOW
# choose above e.g. MEDIABACKEND_WMP10 if this is a problem for you
# setup the layout
#, flag=wx.EXPAND)
#self.DoLoadFile(os.path.abspath("data/testmovie.mpg"))
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#-------------------------------------------------------------------
# Prepare the menu bar
# 1st menu from left
# This is how you would create the menu item if you want to
# change some of the visible attributes.
# But we'lkl just do it the normal way for this sample
# Add menu to the menu bar
# 2nd menu from left
# a submenu in the 2nd menu
# Append 2nd menu
# Radio items
# Check menu items
# Show how to put an icon in the menu item
# Show how to change the background colour of the menu item
# Show how to change the menu item's text colour
# Show how to change the menu item's font
# Shortcuts
# Menu events
# Range of menu items
# Methods
# Show how to get menu item info from this event handler
# but in this case just call Skip so the default is done
# This works
#menu.Remove(504)
# this also works
# This doesn't work, as expected since submenuItem is not on menu
#menu.RemoveItem(submenuItem)
# get the menu
# figure out the position to insert at
# now insert the new item
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#-------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wxMimeTypesManager
# Purpose:     Demonstrate use of wx.MimeTypesManager, wx.FileType
#
# Author:      Jeff Grimmett (grimmtoo@softhome.net), adapted from original
#              .wdr-derived demo
#
# Created:     12/31/03
# Copyright:
# Licence:     wxWindows license
#----------------------------------------------------------------------
# helper function to make sure we don't convert unicode objects to strings
# or vice versa when converting lists and None values to text.
#----------------------------------------------------------------------------
# This will be used for all of the labels that follow (bold label)
# Contains everything
# Contains upper controls
# Text control for ext / type entry plus label.
# Select how to look it up
# Trigger a lookup (hitting ENTER in the text ctrl will do the same thing)
# StaticBox with larger label than usual
# Contains the wx.FileType info
#------- Icon info
#------- MIME Type
#------- MIME Types
#------- Extensions
#------- Description
#------- Open command
#------- Print command
#------- All commands
# Set the default height to be smaller than normal (for
# multi-line) so the sizer can then expand it to whatever
# space is available
# Tell the sizer to expand this row as needed
#----------------------------------------------------------------------------
#------- List box with known MIME types
# | wx.LB_SORT)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Populate the Known MIME types list with what is in the database
# TODO: On wxMac, EnumAllFileTypes produces tons of dupes, which
# causes quirky behavior because the list control doesn't expect
# dupes, and simply wastes space. So remove the dupes for now,
# then remove this hack when we fix EnumAllFileTypes on Mac.
#self.mimelist.Append(mt)
# Do a lookup of *.wav for a starting position
# Grab the selection from the listbox, push that into
# the text box at top, select 'MIME', and then look it up.
# Look up a given file extension or MIME type.
# For MIME lookups
# Select the entered value in the list
# Must be an extension lookup
# Select the entered value in the list
# Using CallAfter to ensure that GUI is ready before trying to
# select it (otherwise, it's selected but not visible)
# Populate the wx.FileType fields with actual values.
#------- Icon info
#------- MIME type
#------- MIME types
#------- Associated extensions
#------- Description of file type
#------- Prep a fake command line command
#------- OPEN command
#------- PRINT command
#------- All commands
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# print("OnCloseWindow")
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#*******************
#By Daniel Pozmanter
#Thanks to Robin Dunn for taking the time to show me how to do this
#via the mailing list.
#Version 0.0.0
#This is a hacked version of DragAndDrop.py from the wxPython demo 2.5.2.8
#ToDo:
#Add a dialog to record gestures  (Have it showcase the manual mode)
#Allow users to remove gestures
#----------------------------------------------------------------------
#Mouse Gestures:
#Widgets:
#Sizer:
#Events:
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# shared document reference
# Reset doc reference in case this demo is run again
#---------------------------------------------------------------------------
# Use this method to set the default class that will be created when
# a new sash is created. The class's constructor needs 1 parameter
# which is the parent of the window
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# This is one way to control the sash limits
#if evt.GetSashPosition() < 50:
#    evt.Veto()
# Or you can reset the sash position to whatever you want
#if evt.GetSashPosition() < 5:
#    evt.SetSashPosition(25)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
#wx.BK_TOP
#wx.BK_BOTTOM
#wx.BK_LEFT
#wx.BK_RIGHT
# | wx.NB_MULTILINE
# Show how to put an image on one of the notebook tabs,
# first make the image list:
# now put an image on the first tab we just created:
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Various options can be set after the message is created if desired.
# notify.SetFlags(# wx.ICON_INFORMATION
#                 wx.ICON_WARNING
#                 # wx.ICON_ERROR
#                 )
# notify.SetTitle("Wooot")
# notify.SetMessage("It's a message!")
# notify.SetParent(self)
# 1 for short timeout, 100 for long timeout
# notify.Close()       # Hides the notification.
#---------------------------------------------------------------------------
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 11/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
#
# 20040508 - Pierre Hjälm
#
# o Changed to use the python version of OGL
# o Added TextShape, CompositeShape and CompositeShape with divisions
#
# 20040830 - Pierre Hjälm
#
# o Added DrawnShape
#----------------------------------------------------------------------
#ff8030"))
#00ee10"))
#9090f0"))
# Make sure to call CalculateSize when all drawing is done
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# create a division in the composite
# add a shape to the original division
# now divide the division so we get 2
# and add a shape to the second division (and move it to the
# centre of the division)
#----------------------------------------------------------------------
# If we don't do this, the shapes will be able to move on their
# own, instead of moving the composite
# If we don't do this the shape will take all left-clicks for itself
#----------------------------------------------------------------------
# used for measuring
#----------------------------------------------------------------------
#canvas.Redraw(dc)
# If we unselect it now then some of the objects in
# shapeList will become invalid (the control points are
# shapes too!) and bad things will happen...
##canvas.Redraw(dc)
#----------------------------------------------------------------------
#wx.WHITE)
#dc = wx.ClientDC(self)
#self.PrepareDC(dc)
# Composites have to be moved for all children to get in place
#shape.SetShadowMode(ogl.SHADOW_RIGHT)
#----------------------------------------------------------------------
# This creates some pens and brushes that the OGL library uses.
# It should be called after the app object has been created, but
# before OGL is used.
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
## self.SetDoubleBuffered(True)
#--Rubberband Overlay
#('Stipple'             , wx.PENSTYLE_STIPPLE),
# Capture the mouse and save the starting posiiton for the rubber-band
## print('self.startPos:', self.startPos)
## print('OnLeftDown')
# topLeft = NoneType. Attempting to double click image or something
# Draw the rubber-band rectangle using an overlay so it
# will manage keeping the rectangle and the former window
# contents separate.
# Mac's DC is already the same as a GCDC, and it causes
# problems with the overlay if we try to use an actual
# wx.GCDC so don't try it.  If you do not need to use a
# semi-transparent background then you can leave this out.
# Set the pen, for the box's border
# Create a brush (for the box's interior) with the same colour,
# but 50% transparency.
# Draw the rectangle
# draw on left side of rect, not inside it
# Make sure the odc is destroyed before the dc is.
## print('OnMouseMove')
## print('StartPos: %s' %self.startPos)
## print('EndPos: %s' %self.endPos)
# When the mouse is released we reset the overlay and it
# restores the former content to the window.
## print('OnLeftUp')
#self.Update()
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# This ComboBox class graphically displays the various pen styles that
# are available, making it easy for the user to choose the style they
# want.
# Overridden from OwnerDrawnComboBox, called to draw each
# item in the list
# painting the control, but there is no valid item selected yet
# make a copy
# for painting the control itself
# for painting the items in the popup
# Overridden from OwnerDrawnComboBox, called for drawing the
# background area of each item.
# If the item is selected, or its item # iseven, or we are painting the
# combo control itself, then use the default rendering.
# Otherwise, draw every other background with different colour.
# Overridden from OwnerDrawnComboBox, should return the height
# needed to display an item in the popup, or -1 for default
# Simply demonstrate the ability to have variable-height items
# Overridden from OwnerDrawnComboBox.  Callback for item width, or
# -1 for default/undetermined
# default - will be measured from text width
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#data.SetDefaultMinMargins(True)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# introduce buttonpanel and viewer to each other
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#"wx.PENSTYLE_INVALID",
#"wx.BRUSHSTYLE_INVALID",
#bmp.GetHeight()
# dash values represent units on, off, on. off...
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#print(title.GetBestSize(), title.GetMinSize(), title.GetSize())
# spacer
# spacer
# spacer
# spacer
# spacer
# spacer
# spacer
# spacer
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
###############################################################################
# Name: PlateButtonDemo.py                                                    #
# Purpose: PlateButton Test and Demo File                                     #
# Author: Cody Precord <cprecord@editra.org>                                  #
# Copyright: (c) 2007 Cody Precord <staff@editra.org>                         #
# Licence: wxWindows Licence                                                  #
###############################################################################
#-----------------------------------------------------------------------------#
# Imports
#-----------------------------------------------------------------------------#
# Layout
# Event Handlers
# Make three different panels of buttons with different backgrounds
# to test transparency and appearance of buttons under different use
# cases
# Bitmaps (32x32) and (16x16)
# 32x32
# 32x32
# 16x16
# 16x16
# Button Styles
# Create a number of different PlateButtons
# Each button is created in the below loop by using the data set in this
# lists tuple
#        (bmp,   label,                Style,   Variant, Menu, Color, Enable)
# Row 2
# Row 3
# Row 4
# Make and layout three rows of buttons in the panel
# With this style flag set the button can appear transparent on
# on top of a background that is not solid in color, such as the
# gradient panel in this demo.
#
# Note: This flag only has affect on wxMSW and should only be
#       set when the background is not a solid color. On wxMac
#       it is a no-op as this type of transparency is achieved
#       without any help needed. On wxGtk it doesn't hurt to
#       set but also unfortunatly doesn't help at all.
# Set a custom window size variant?
# Make a menu for the button?
# Set a custom colour?
# Enable/Disable button state
#-----------------------------------------------------------------------------#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Icon Data
# All icons from the Tango Icon Set
#-----------------------------------------------------------------------------#
#!/usr/bin/env python
# This method is needed to set the contents that will be displayed
# in the popup
# Event registration for date selection
# Method called when a day is selected in the calendar
# Format the date that was selected for the text part of the control
# Method overridden from PopupControl
# This method is called just before the popup is displayed
# Use this method to format any controls in the popup
# I parse the value in the text part to resemble the correct date in
# the calendar control
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Make and layout the controls
# only do this part the first time so the events are only bound once
#
# Yet another anternate way to do IDs. Some prefer them up top to
# avoid clutter, some prefer them close to the object of interest
# for clarity.
# make a menu
# Show how to put an icon in the menu
# add some other items
# make a submenu
# Popup the menu.  If an item is selected then its handler
# will be called before PopupMenu returns.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# 11/30/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Some issues with the listbox example; I tried correcting
#   it but it's still not working the way it should. Commented
#   out for now, as I found it.
#---------------------------------------------------------------------------
#FFB6C1")
# This isn't working so well, not sure why. Commented out for
# now.
#        b = wx.Button(self, -1, "Show wx.PopupWindow with listbox", (25, 140))
#        self.Bind(wx.EVT_BUTTON, self.OnShowPopupListbox, b)
#win = TestPopupWithListbox(self, wx.SIMPLE_BORDER, self.log)
# Show the popup right below or above the button
# depending on available screen space...
# Show the popup right below or above the button
# depending on available screen space...
# Show the popup right below or above the button
# depending on available screen space...
# This class is currently not implemented in the demo. It does not
# behave the way it should, so for the time being it's only here
# for show. If you figure out how to make it work, please send
# a corrected file to Robin!
#sz = self.lb.GetBestSize()
#sz)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# data.SetAllPages(True)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# we only have 2 pages in this document
#-------------------------------------------
# One possible method of setting scaling factors...
# Let's have at least 50 device units margin
# Add the margin to the graphic size
# Get the size of the DC in pixels
# Calculate a suitable scaling factor
# Use x or y scaling factor, whichever fits on the DC
# Calculate the position on the DC for centering the graphic
# Set the scale and origin
#-------------------------------------------
#----------------------------------------------------------------------
# psdd.CalculatePaperSizeFromId()
# this makes a copy of the wx.PrintData instead of just saving
# a reference to the one inside the PrintDialogData that will
# be destroyed when the dialog is destroyed
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# We can either derive from wx.Process and override OnTerminate
# or we can let wx.Process send this window an event that is
# caught in the normal way...
# Make the controls
# Hook up the events
# Do the layout
#print("b4 CloseOutput")
#print("after CloseOutput")
# Called when the demo application is switching to a new sample. Tell
# the process to close (by closign its output stream) and then wait
# for the termination signals to be received and processed.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# 11/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
#
# 11/30/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wx.ProgressDialog appears to be broken. No abort button
#   and it's not possible to dismiss it otherwise.
#---------------------------------------------------------------------------
#| wx.PD_CAN_SKIP
#| wx.PD_ELAPSED_TIME
#| wx.PD_AUTO_HIDE
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
############################################################################
#
# TEST RELATED CODE AND VARIABLES
#
############################################################################
#
# Note that the results of autofill will appear on the second page.
#
# Set number of iterations appropriately to test performance
#
# Test result for 100,000 iterations on Athlon XP 2000+:
#
# Time spent per property: 0.054ms
# Memory allocated per property: ~350 bytes (includes Python object)
#
############################################################################
#
# CUSTOM PROPERTY SAMPLES
#
############################################################################
# Just test this function to make sure validationInfo and
# wxPGVFBFlags work properly.
# Mark the cell if validation failed
# Set default delimiter
# NOTE: In the Classic version of the propgrid classes, all of the wrapped
# property classes override DoGetEditorClass so it calls GetEditor and
# looks up the class using that name, and hides DoGetEditorClass from the
# usable API. Jumping through those hoops is no longer needed in Phoenix
# as Phoenix allows overriding all necessary virtual methods without
# special support in the wrapper code, so we just need to override
# DoGetEditorClass here instead.
# let's just use the cached display value
# Must re-generate cached string when delimiter changes
# Proper way to call same method from super class
# Create and populate buttons-subwindow
# Add two regular buttons
# Add a bitmap button
# Create the 'primary' editor control (textctrl in this case)
# Finally, move buttons-subwindow to correct position and make sure
# returned wxPGWindowList contains our custom button list.
# We must maintain a reference to any editor objects we created
# ourselves. Otherwise they might be freed prematurely. Also,
# we need it in OnEvent() below, because in Python we cannot "cast"
# result of wxPropertyGrid.GetEditorControlSecondary() into
# PGMultiButton instance.
# Do something when the first button is pressed
# Return false since value did not change
# Do something when the second button is pressed
# Return false since value did not change
# Do something when the third button is pressed
# Return false since value did not change
# Prepare choices
# Set what happens on button click
# Make room for button
#
# Pass this event outside wxPropertyGrid so that,
# if necessary, program can tell when user is editing
# a textctrl.
# Changing unspecified always causes event (returning
# True here should be enough to trigger it).
# Make room for button
# When the textctrl is destroyed, destroy the statbmp too
#
# Pass this event outside wxPropertyGrid so that,
# if necessary, program can tell when user is editing
# a textctrl.
# Changing unspecified always causes event (returning
# True here should be enough to trigger it).
############################################################################
#
# MAIN PROPERTY GRID TEST PANEL
#
############################################################################
# Difference between using PropertyGridManager vs PropertyGrid is that
# the manager supports multiple pages and a description box.
# Show help as tooltips
#
# Let's use some simple custom editor
#
# NOTE: Editor must be registered *before* adding a property that
# uses it.
# ensure we only do it once
#
# Add properties
#
# NOTE: in this example the property names are used as variable names
# in one of the tests, so they need to be valid python identifiers.
#
# You can find the property by name,
#boolprop,               # or give the property object itself.
# The attribute name and value
#pg.Append( wxpg.PointProperty("Point",value=panel.GetPosition()) )
#pg.Append( wxpg.FontDataProperty("FontData") )
# Test another type of delimiter
# SampleMultiButtonEditor
# Custom editor samples
# When page is added, it will become the target page for AutoFill
# calls (and for other property insertion methods as well)
# default_object_content1
#print(sandbox['obj'].__dict__)
# Validate client data
# Test setting unicode string
#
# Test some code that *should* fail (but not crash)
# GetPyIterator
# VIterator
# Properties
# Items
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Setup
# Base class' Create() makes the book control, sizers, etc.
# Create the stock buttons
# Add some pages
# Do the layout
# This and the following method just create some panels to display in the
# bookctrl in the dialog.  The actual content of these panels don't
# matter much so pay very little attention to them, the point is that any
# kind of panels with controls can be used here and the PropertySheetDialog
# takes care of the rest.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# create a PseudoDC to record our drawing
# vars for handling mouse clicks
#l = self.pdc.FindObjectsByBBox(x, y)
#l = self.pdc.FindObjectsByBBox(x, y)
# Create a buffered paint DC.  It will create the real
# wx.PaintDC and then blit the bitmap to it when dc is
# deleted.
# we need to clear the dc BEFORE calling PrepareDC
# use PrepareDC to set position correctly
# create a clipping rect from our position and size
# and the Update Region
# Draw the saved drawing operations to the dc using the calculated
# clipping rect
# number of characters in text
# number of points per polygon
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------
#---------------------------------------------------------------
#---------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#############################################################################
# Where's the code???
#
# The wx.lib.plot package comes with its own excellent demo built in, for
# testing purposes, but it serves quite well to demonstrate the code and
# classes within, so we are simply importing and using that code for this
# sample in the wxPython demo. Please load up wx/lib/plot/examples/demo.py
# for a review of the demo code itself.
#############################################################################
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# This shows the new 'official' way to do custom events as derived
# from the wxPython 2.5 migration guide.
#######################################################\
#  *** Old and busted ***                              |
#                                                      |
# myEVT_BUTTON_CLICKPOS = wx.NewEventType()            |
#                                                      |
# def EVT_BUTTON_CLICKPOS(win, id, func):              |
#     win.Connect(id, -1, myEVT_BUTTON_CLICKPOS, func) |
#######################################################/
#############################\
#   *** The new Hottness *** |
#############################/
#----------------------------------------------------------------------
#def __del__(self):
#    print('__del__')
#    wx.PyCommandEvent.__del__(self)
#print(id(evt), sys.getrefcount(evt))
#print(id(evt), sys.getrefcount(evt))
# This is our custom event binder created above.
#print(id(event), sys.getrefcount(event))
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#self.SetBackgroundColour(wx.BLUE)
#rb.SetBackgroundColour(wx.BLUE)
#rb.SetLabel("wx.RadioBox")
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Layout controls on panel:
# 1st group of controls:
# 2nd group of controls:
# Setup event handling and initial state for controls:
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# use the numpy code instead of the raw access code for comparison
# time the execution of making a bitmap?
# how big to make the bitmaps
# should we use a wx.GraphicsContext for painting?
#----------------------------------------------------------------------
# attempt to import a numeric module if requested to
#----------------------------------------------------------------------
# Put self in timeit's global namespace as
# 's' so it can be found in the code
# snippets being tested.
# Create the bitmap that we will stuff pixel values into using
# the raw bitmap access classes.
# Create an object that facilitates access to the bitmap's
# pixel buffer
# We have two ways to access each pixel, first we'll use an
# iterator to set every pixel to the colour and alpha values
# passed in.
# This block of code is another way to do the same as above,
# but with the accessor interface instead of the Python
# iterator.  It is a bit faster than the above because it
# avoids the iterator/generator magic, but it is not nearly as
# 'clean' looking ;-)
#pixels = pixelData.GetPixels()
#for y in range(DIM):
#    pixels.MoveTo(pixelData, 0, y)
#    for x in range(DIM):
#        pixels.Set(red, green, blue, alpha)
#        pixels.nextPixel()
# Next we'll use the pixel accessor to set the border pixels
# to be fully opaque
# Make an array of bytes that is DIM*DIM in size, with enough
# slots for each pixel to have a RGB and A value
# just some indexes to keep track of which byte is which
# initialize all pixel values to the values passed in
# Set the alpha for the border pixels to be fully opaque
# first row
# last row
# first col
# last col
# finally, use the array to create a bitmap
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# print(length)
# print(len(globalOrder))
# print(bool)
#Update the TextCtrl
#Update the TextCtrl
# print('doWhat', doWhat)
#---------------------------------------------------------------------------
# print('GetOrder: ', rd.GetOrder())
# print(rd.lc.GetString(i))
# print(rd.lc.IsChecked(i))
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Event Handlers
#dc = wx.PaintDC(self)
# Setup Brushes
# The below code will use RendererNative to draw controls in
# various states. The wx.CONTROL_* flags are used to tell the
# Renderer which state to draw the control in.
# Draw some checkboxes
# Draw ComboBoxDropButton
# Draw DropArrow
# Draw HeaderButton
# Set some extra options for drawing
# Draw ItemSelectionRect
# DrawPushButton
# DrawTreeItemButton
# DrawComboBox
# DrawChoice
# DrawTextCtrl
# DrawItemText
# DrawGauge
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# This one we will reparent to the ResizeWidget...
# This one we will create as a child of the resizer to start with
# now make a sizer with a bunch of other widgets
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# return value ignored as we have "Ok" only anyhow
# ... make sure we won't show it again the next time ...
# Plonk!
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Create and initialize text attributes
# This gives us a string suitable for the file dialog based on
# the file handlers that are loaded
# Get an instance of the html file handler, use it to save the
# document to a StringIO stream, and then display the
# resulting html text in a dialog with a HtmlWindow.
# The RichTextCtrl can handle menu and update events for undo,
# redo, cut, copy, paste, delete, and select all, so just
# forward the event to it.
#doBind( editMenu.AppendSeparator(),  )
#doBind( editMenu.Append(-1, "&Find...\tCtrl+F"),  )
#doBind( editMenu.Append(-1, "&Replace...\tCtrl+R"),  )
#----------------------------------------------------------------------
# make sure we haven't already added them.
# This would normally go in your app's OnInit method.  I'm
# not sure why these file handlers are not loaded by
# default by the C++ richtext code, I guess it's so you
# can change the name or extension if you wanted...
# ...like this
# This is needed for the view as HTML option since we tell it
# to store the images in the memory file system.
# give easy access to the demo's PyShell if it's running
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Order is random now
# print(HEX)
# Twice for doubles and good luck :)
# print(HEX[item])
#%s'%hexstr
#Note: DONT use wx.EVT_LEFT_UP, it is crashy with RichToolTip
#000000', colEnd='#FFFFFF')
#FFFFFF'),wx.Colour('#FF8000'))
# def OnChangeTipKind(self, event):
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
# Name:         run.py
# Purpose:      Simple framework for running individual demos
#
# Author:       Robin Dunn
#
# Created:      6-March-2000
# Copyright:    (c) 2000-2018 by Total Control Software
# Licence:      wxWindows license
#----------------------------------------------------------------------------
# stuff for debugging
##print("pid: %s" % os.getpid()); input("Press Enter...")
##assertMode = wx.APP_ASSERT_EXCEPTION
#----------------------------------------------------------------------------
# for the InspectionMixin base class
# a window will be returned if the demo does not create
# its own top-level window
# so set the frame to a good size for showing stuff
# It was probably a dialog or something that is already
# gone, so we're done.
#wx.Log.SetActiveTarget(wx.LogStderr())
#wx.Log.SetTraceMask(wx.TraceMessages)
# Make a PyShell window, and position it below our test window
# Hook the close event of the test window so that we close
# the shell at the same time
#----------------------------------------------------------------------------
# ensure the CWD is the demo folder
#!/usr/bin/env python
#---------------------------------------------------------------------------
# Create some layout windows
# A window like a toolbar
# A window like a statusbar
# A window to the left of the client window
# Another window to the left of the client window
# will occupy the space not used by the Layout Algorithm
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# A test for scrolling with a too big control
#if word == "three":
#    tc = wx.TextCtrl(panel1, -1, word, size=(150,-1))
#else:
#    tc = wx.TextCtrl(panel1, -1, word, size=(50,-1))
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# There are two different approaches to drawing, buffered or direct.
# This sample shows both approaches so you can easily compare and
# contrast the two by changing this value.
#---------------------------------------------------------------------------
# Initialize the buffer bitmap.  No real DC is needed at this point.
# Create a buffered paint DC.  It will create the real
# wx.PaintDC and then blit the bitmap to it when dc is
# deleted.  Since we don't need to draw anything else
# here that's all there is to it.
# Since we're not buffering in this case, we have to
# (re)paint the all the contents of the window, which can
# be potentially time consuming and flickery depending on
# what is being drawn and how much of it there is.
# This has troubles when used on a print preview in wxGTK,
# probably something to do with the pen styles and the scaling
# it does...
# If doing buffered drawing we'll just update the
# buffer here and then refresh that portion of the
# window.  Then the system will send an event and that
# portion of the buffer will be redrawn in the
# EVT_PAINT handler.
# otherwise we'll draw directly to a wx.ClientDC
# figure out what part of the window to refresh, based
# on what parts of the buffer we just updated
# make a rectangle
# refresh it
## This is an example of what to do for the EVT_MOUSEWHEEL event,
## but since wx.ScrolledWindow does this already it's not
## necessary to do it ourselves. You would need to add an event table
## entry to __init__() to direct wheelmouse events to this handler.
##     wheelScroll = 0
##     def OnWheel(self, evt):
##         delta = evt.GetWheelDelta()
##         rot = evt.GetWheelRotation()
##         linesPer = evt.GetLinesPerAction()
##         print(delta, rot, linesPer)
##         ws = self.wheelScroll
##         ws = ws + rot
##         lines = ws / delta
##         ws = ws - lines * delta
##         self.wheelScroll = ws
##         if lines != 0:
##             lines = lines * linesPer
##             vsx, vsy = self.GetViewStart()
##             scrollTo = vsy - lines
##             self.Scroll(-1, scrollTo)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Create controls
# Something is wrong with the bestsize of the SearchCtrl, so for now
# let's set it based on the size of a TextCtrl.
# Setup the layout
##         self.tc = wx.TextCtrl(self)  # just for testing that heights match...
##         sizer.Add(self.tc, 0, wx.TOP, 15)
# Set event bindings
##self.Bind(wx.EVT_TEXT, self.OnDoSearch, self.search)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# wxMac clips the tooltip to the window shape, YUCK!!!
# wxGTK requires that the window be created before you can
# set its shape, so delay the call to SetWindowShape until
# this event.
# On wxMSW and wxMac the window has already been created, so go for it.
# Use the bitmap's mask to determine the region
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#EFEFEF\"><tr><td><pre>
#EFEFEF\"><tr><td><pre>
#EFEFEF\">
# row 1
# row 2
# row 3
# row 4
# two chars for state
# row 5
# here's how to add a 'nested sizer' using sized_controls
# make these children of the radioPane to have them use
# the horizontal layout
# end row 5
# add dialog buttons
# a little trick to make sure that you can't resize the dialog to
# less screen space than the controls need
# row 1
# row 2
# row 3
# row 4
# two chars for state
# row 5
# here's how to add a 'nested sizer' using sized_controls
# make these children of the radioPane to have them use
# the horizontal layout
# end row 5
# add dialog buttons
# Always use self.GetContentsPane() - this ensures that your dialog
# automatically adheres to HIG spacing requirements on all platforms.
# pane here is a sc.SizedPanel with a vertical sizer layout. All children
# should be added to this pane, NOT to self.
# first row
# second row
# third row
# final row
# since we want to use a custom button layout, we won't use the
# CreateStdDialogBtnSizer here, we'll just create our own panel with
# a horizontal layout and add the buttons to that.
# 3-column grid layout
# row 1
# row 2
# row 3
# should always do this when there's a resize border
# should always do this when there's a resize border
#---------------------------------------------------------------------------
# this does not return until the dialog is closed.
# this does not return until the dialog is closed.
# this does not return until the dialog is closed.
#!/usr/bin/env python
# 11/26/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Had to do a bit of rework for the demo; there was no panel attached
#   to the demo window, so all buttons were showing as dark gray on
#   dark gray. I have no idea why this didn't break before. Robin,
#   please examine my changes to ensure you approve. It's rather
#   hackish looking.
#----------------------------------------------------------------------
# sizer test code
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#style=wx.RAISED_BORDER
#style=wx.SUNKEN_BORDER
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#    box.Add(SampleWindow(win, "five"), 1, wx.EXPAND)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
##box.Hide(btn3)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# rows, cols, vgap, hgap
#(75, 50),
#----------------------------------------------------------------------
# rows, cols, vgap, hgap
#----------------------------------------------------------------------
# rows, cols, vgap, hgap
#(SampleWindow(win, 'five'),  0, wx.EXPAND),
#----------------------------------------------------------------------
# rows, cols, vgap, hgap
#----------------------------------------------------------------------
# rows, cols, vgap, hgap
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#    ("Percent Sizer", makeSimpleBox6,
#     "You can use the wx.BoxSizer like a Percent Sizer.  Just make sure that all "
#     "the weighting factors add up to 100!"
#     ),
#----------------------------------------------------------------------
# self.MakeModal(False)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# sounds can also be loaded from a buffer object
# save a reference (This shoudln't be needed, but there seems to be a bug...)
# wx.YieldIfNeeded()
#sound = wx.adv.Sound(dlg.GetPath(), wx.SOUND_SYNC)
#sound.Play()
# another way to do it.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# 11/30/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o EVT_SPIN events (or something about them) freezes up the app.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# uncomment this to not allow the change
#evt.SetSashPosition(-1)
#---------------------------------------------------------------------------
#sty = wx.BORDER_NONE
#sty = wx.BORDER_SIMPLE
#---------------------------------------------------------------------------
#!/usr/bin/env python
# 11/13/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
#
# 11/26/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Bigtime errors on startup. Blows up with a program error.
#   Error:
#
#   21:04:11: Debug: ..\..\src\msw\treectrl.cpp(1508): assert "IsVisible(item)"
#   failed: The item you call GetNextVisible() for must be visible itself!
#
#   I suspect this error is in the lib itself.
#----------------------------------------------------------------------
# make an image list
# Add some items
# This method is called to draw each item in the value window
#wx.TR_HIDE_ROOT |
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# get the global (singleton) instance of wx.StandardPaths
# StandardPaths will use the value of wx.App().GetAppName()
# for some of the stnadard path components.  Let's set it to
# something that makes that obvious for the demo.  In your own
# apps you'll set it in to something more meaningfull for your
# app in your OnInit, (or just let it default.)
# Loop through all of the getters in wx.StandardPaths and make
# a set of items in the sizer for each.
# this one needs parameters
# trim the whitespace from each line
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
##self.SetBackgroundColour("sky blue")
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# This gets the recommended amount of border space to use for items
# within in the static box for the current platform.
## The OLD way.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
##self.SetBackgroundColour("sky blue")
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# This status bar has three fields
# Sets the three fields to be relative widths to each other.
# Field 0 ... just text
# This will fall into field 1 (the second field)
# set the initial position of the checkbox
# We're going to use a timer to drive a 'clock' in the last field.
# Handles events from the timer we started in __init__().
# We're using it to drive a 'clock' in field 2 (the third field).
# the checkbox was clicked
# for normal size events
# Set a flag so the idle time handler will also do the repositioning.
# It is done this way to get around a buglet where GetFieldRect is not
# accurate during the EVT_SIZE resulting from a frame maximize.
# reposition the checkbox
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This shows how to catch the Modified event from the wx.StyledTextCtrl
# This is how the clipboard contents can be preserved after
# the app has exited.
# you can prevent moving of text (only copy)
# you can change what is dragged
#evt.SetDragText("")             # or prevent the drag with empty text
# prevent dropping at the beginning of the buffer
# Can change text if needed
#evt.SetDragResult(wx.DragNone)  # Can also change the drag operation, but it
# is probably better to do it in OnDragOver so
# there is visual feedback
#evt.SetPosition(25)             # Can also change position, but I'm not sure why
# you would want to...
#----------------------------------------------------------------------
# make some styles
#0000FF" % (pb, face1))
#FF0000,size:%d" % (face2, pb))
# Now set some text to those styles...  Normally this would be
# done in an event handler that happens when text needs displayed.
# set style for 6 characters using style 1
# line numbers in the margin
# setup some markers
#CCFF00", "RED")
#00FF00", "#00FF00")
# put some markers on some lines
# and finally, an indicator or two
# some test stuff...
# if wx.USE_UNICODE:
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
## This version of the editor has been set up to edit Python source
## code.  Here is a copy of wxPython/demo/Main.py to play with.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#self.SetBufferedDraw(False)
#self.SetViewEOL(True)
#self.SetEOLMode(stc.STC_EOL_CRLF)
#self.SetUseAntiAliasing(True)
# Setup a margin to hold fold markers
#self.SetFoldFlags(16)  ###  WHAT IS THIS VALUE?  WHAT ARE THE OTHER FLAGS?  DOES IT MATTER?
# Arrow pointing right for contracted folders, arrow pointing down for expanded
# Plus for contracted folders, minus for expanded
# Like a flattened tree control using circular headers and curved joins
#404040")
#404040")
#404040")
#404040")
#404040")
#404040")
#404040")
# Like a flattened tree control using square headers
#808080")
#808080")
#808080")
#808080")
#808080")
#808080")
#808080")
# Make some styles,  The lexer defines what each style is used for, we
# just have to define what each style looks like.  This set is adapted from
# Scintilla sample property files.
# Global default styles for all languages
# Reset all to be like the default
# Global default styles for all languages
#C0C0C0,face:%(helv)s,size:%(size2)d" % faces)
#FFFFFF,back:#0000FF,bold")
#000000,back:#FF0000,bold")
# Python styles
# Default
#000000,face:%(helv)s,size:%(size)d" % faces)
# Comments
#007F00,face:%(other)s,size:%(size)d" % faces)
# Number
#007F7F,size:%(size)d" % faces)
# String
#7F007F,face:%(helv)s,size:%(size)d" % faces)
# Single quoted string
#7F007F,face:%(helv)s,size:%(size)d" % faces)
# Keyword
#00007F,bold,size:%(size)d" % faces)
# Triple quotes
#7F0000,size:%(size)d" % faces)
# Triple double quotes
#7F0000,size:%(size)d" % faces)
# Class name definition
#0000FF,bold,underline,size:%(size)d" % faces)
# Function or method name definition
#007F7F,bold,size:%(size)d" % faces)
# Operators
# Identifiers
#000000,face:%(helv)s,size:%(size)d" % faces)
# Comment-blocks
#7F7F7F,size:%(size)d" % faces)
# End of line where string is not closed
#000000,face:%(mono)s,back:#E0C0E0,eol,size:%(size)d" % faces)
# register some images for use in the AutoComplete box.
# Tips
# Code completion
#lst = []
#for x in range(50000):
#    lst.append('%05d' % x)
#st = " ".join(lst)
#print(len(st))
#self.AutoCompShow(0, st)
#kw.append("this_is_a_much_much_much_much_much_much_much_longer_value")
# Python sorts are case sensitive
# so this needs to match
# Images are specified with a appended "?type"
# check for matching braces
# check before
# check after
#pt = self.PointFromPosition(braceOpposite)
#self.Refresh(True, wxRect(pt.x, pt.y, 5,5))
#print(pt)
#self.Refresh(False)
# fold and unfold as needed
# find out if we are folding or unfolding
#----------------------------------------------------------------------
# line numbers in the margin
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#print(bmp.GetSize())
#----------------------------------------------------------------------
# Add a few smallish bitmaps in a row
# and add another, larger one below that row
# Load the first SVG in the list into the static bitmaps
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# TODO: Add ability for the user to select the renderer
# renderer = wx.GraphicsRenderer.GetCairoRenderer()
# Load the first SVG in the list into the static bitmaps
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
###############################################################################
# Name: SystemSettingsDemo.py                                                 #
# Purpose: SystemSettings Test and Demo File                                  #
# Author: Cody Precord <cprecord@editra.org>                                  #
# Copyright: (c) 2009 Cody Precord <staff@editra.org>                         #
# Licence: wxWindows Licence                                                  #
###############################################################################
#-----------------------------------------------------------------------------#
# Imports
#-----------------------------------------------------------------------------#
# Attributes
# Setup
# Layout
#----------------------------------------------------------------------
#, size=(500, 500))
# Attributes
## Event Handlers
#----------------------------------------------------------------------
# Attributes:
# Color box dimensions
# Draw a sample box for each system color
# Draw label
# Calculate box position
#----------------------------------------------------------------------
# Attributes:
# 'SYS_ICONTITLE_FONT',
# 'SYS_SYSTEM_FIXED_FONT',
# Draw a sample box for each system color
# Draw label
# Calculate box position
#----------------------------------------------------------------------
# Attributes:
# Draw a sample box for each system color
# Draw label
# Calculate box position
#----------------------------------------------------------------------
# Attributes:
# Draw a sample box for each system color
# Draw label
# Calculate box position
#----------------------------------------------------------------------
# Attributes
# Layout
# Setup
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#-----------------------------------------------------------------------------#
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
# def OnSetFocus(self, evt):
#     print("OnSetFocus")
#     evt.Skip()
# def OnKillFocus(self, evt):
#     print("OnKillFocus")
#     evt.Skip()
# def OnWindowDestroy(self, evt):
#     print("OnWindowDestroy")
#     evt.Skip()
# t1.Bind(wx.EVT_SET_FOCUS, self.OnSetFocus)
# t1.Bind(wx.EVT_KILL_FOCUS, self.OnKillFocus)
# t1.Bind(wx.EVT_WINDOW_DESTROY, self.OnWindowDestroy)
# get the current size
#| wx.TE_RICH
#self.tc.Remove(5, 9)
# This is why GetStringSelection was added
# This is why GetStringSelection was added
#last position eol or eof
# print('Exception', exc)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# This creates a new Event class and a EVT binder function
#----------------------------------------------------------------------
# We communicate with the UI by sending events to it. There can be
# no manipulation of UI objects from the worker thread.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#self.CenterOnParent()
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# create the throbbers
# use a list so we can keep our order
# Add custom throbber to sizer.
# start and stop buttons
# Buttoms for the custom throbber.
# Layout.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This file was generated by encode_bitmaps.py
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#for easy color selection
#----------------------------------------------------------------------
# Controls for ...controlling... the ticker.
# Do layout
# Bind events
# Set defaults
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# 11/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o presense of spin control causing probs (see spin ctrl demo for details)
#----------------------------------------------------------------------
# Turn on mxDateTime option only if we can import the module:
# (demonstrates that G/SetValue returns/takes a wx.DateTime)
# (demonstrates that G/SetValue returns/takes a wx.TimeSpan)
# (demonstrates that G/SetValue returns/takes a DateTime)
# (demonstrates that G/SetValue returns/takes a DateTimeDelta)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Bind all EVT_TIMER events to self.OnTest1Timer
# Test 1 shows how to use a timer to generate EVT_TIMER
# events, by passing self to the wx.Timer constructor.  The
# event is bound above to the OnTest1Timer method.
# Test 2 shows how to use the wx.CallLater class.
# Call OnTest2Timer one second in the future, passing some
# optional arbitrary args.  There is no need to hold a
# reference to this one, unless we want to manipulate or query
# it later like we do in the two methods below
# Normally a FutureCall is one-shot, but we can make it
# recurring just by calling Restart.  We can even use a
# different timeout or pass differnt args this time.
# The return value of this function is saved and can be
# retrived later.  See OnTest2Stop above.
# Test 3 shows how to use a class derived from wx.Timer.  See
# also the NotifyTimer class below.
# Test 4 shows the old way (a kludge that goes back all the
# way to the first version of wxPython) to bind a timer
# directly to a callable.  You should migrate any code that
# uses this method to use EVT_TIMER instead as this may be
# deprecated in the future.
#----------------------------------------------------------------------
# When deriving from wx.Timer you must provide a Notify method
# that will be called when the timer expires.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# adjust default size for the bitmap
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#| wx.TB_TEXT
#| wx.TB_HORZ_LAYOUT
#---------------------------------------------------------------------------
# Use the wxFrame internals to create the toolbar and
# associate it all in one tidy method call.  By using
# CreateToolBar or SetToolBar the "client area" of the
# frame will be adjusted to exclude the toolbar.
# Here's a 'simple' toolbar example, and how to bind it using SetToolBar()
#tb = wx.ToolBarSimple(self, -1, wx.DefaultPosition, wx.DefaultSize,
#               wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT)
#self.SetToolBar(tb)
# But we're doing it a different way here.
# The toolbar can also be a child of another widget, and
# be managed by a sizer, although there may be some
# implications of doing this on some platforms.
#tb.AddTool(10, new_bmp, "New", "Long help for 'New'")
#tb.AddTool(20, open_bmp, "Open", "Long help for 'Open'")
#tool = tb.AddCheckTool(50, images.Tog1.GetBitmap(), shortHelp="Toggle this")
# Match all
# Final thing to do for a toolbar is call the Realize() method. This
# causes it to render (more or less, that is).
# called by TestSearchCtrl
# return true to tell the search ctrl to remember the text
#tb = self.GetToolBar()
# called for the timer event handler
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
#"Cyan", "Dark Grey", "Dark Green",
#"Steel Blue",
#----------------------------------------------------------------------------
#wx.BK_TOP
#wx.BK_BOTTOM
#wx.BK_LEFT
#wx.BK_RIGHT
# make an image list using the LBXX images
# Now make a bunch of panels for the list book
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#!/usr/bin/env python
# -*- coding: utf-8 -*-
## self.tt8.SetMaxWidth(-1)
#---------------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------------
#wx.BK_TOP
#wx.BK_BOTTOM
#wx.BK_LEFT
#wx.BK_RIGHT
# make an image list using the LBXX images
# Now make a bunch of panels for the list book
# This is a workaround for a sizing bug on Mac...
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#!/usr/bin/env python
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Use the WANTS_CHARS style so the panel doesn't eat the Return key.
#| wx.TR_MULTIPLE
#| wx.TR_HIDE_ROOT
# NOTE:  For some reason tree items have to have a data object in
#        order to be sorted.  Since our compare just uses the labels
#        we don't need any real data, so we'll just use None below for
#        the item data.
# show how to prevent edit...
# Lets just see what's visible of its children
# show how to reject edit, we'll not allow any digits
#items = self.tree.GetSelections()
#print(map(self.tree.GetItemText, items))
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Formerly wx.gizmos in Classic
#----------------------------------------------------------------------
#| gizmos.TR_HAS_BUTTONS
#| gizmos.TR_TWIST_BUTTONS
#| gizmos.TR_ROW_LINES
#| gizmos.TR_COLUMN_LINES
#| gizmos.TR_NO_LINES
#| gizmos.TR_LINES_AT_ROOT
# create some columns
# the one with the tree in it...
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#raw_input("Press enter...")
#!/usr/bin/env python
# Show how to change the item font. Here we use a small font for
# items that have children and the default font otherwise.
# Show how to change the item text colour. In this case second level
# items are coloured red and third level items are blue. All other
# items are black
# Show how to change the item background colour. In this case the
# background colour of each third item is green.
# Return the right icon depending on whether the item has children.
# class VirtualTreeListCtrl(DemoTreeMixin, wx.adv.TreeListCtrl):
#     def __init__(self, *args, **kwargs):
#         kwargs['style'] = wx.TR_DEFAULT_STYLE | wx.TR_FULL_ROW_HIGHLIGHT
#         super(VirtualTreeListCtrl, self).__init__(*args, **kwargs)
#         self.AppendColumn('Column 0')
#         self.AppendColumn('Column 1')
#         for art in wx.ART_TIP, wx.ART_WARNING:
#             self.imageList.Add(wx.ArtProvider.GetBitmap(art, wx.ART_OTHER,
#                                                         (16, 16)))
#
#     def OnGetItemText(self, indices, column=0):
#         # Return a different label depending on column.
#         return '%s, column %d'%\
#             (super(VirtualTreeListCtrl, self).OnGetItemText(indices), column)
#
#     def OnGetItemImage(self, indices, which, column=0):
#         # Also change the image of the other columns when the item has
#         # children.
#         if column == 0:
#             return super(VirtualTreeListCtrl, self).OnGetItemImage(indices,
#                                                                    which)
#         elif self.OnGetChildrenCount(indices):
#             return 4
#         else:
#             return 3
# It's a radio item; reset other items on the same level
#(VirtualTreeListCtrl, 'TreeListCtrl'),
#!/usr/bin/env python
#----------------------------------------------------------------------
# create widgets and bind events
# create the layout
# make a copy so we can pop()
# play back faster than it was recorded
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Some unicode strings
# Equivalents in UTF-8.  Should I demo these somehow???
#----------------------------------------------------------------------
# create some controls
# put them in a sizer
# put the row in the main sizer
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
##         inSizer.Add(wx.StaticText(self, -1,
##                                  "Drag this TEXT to your browser:",
##                                  style = wx.ALIGN_RIGHT),
##                     0, wx.ALIGN_RIGHT )
##         self.dragText2 = wx.TextCtrl(self, -1, "http://wxPython.org/")
##         inSizer.Add(self.dragText2, 0, wx.EXPAND)
##         self.dragText2.Bind(EVT_MOTION, self.OnStartDrag2)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Returning without calling even.Skip eats the event before it
# gets to the text control
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Prevent wxDialog from complaining.
# Prevent wxDialog from complaining.
#----------------------------------------------------------------------
#wx.BoxSizer(wx.HORIZONTAL)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This file was generated by wxPython's wscript.
#!/usr/bin/env python
#----------------------------------------------------------------------
# The wx.VListBox is much like a regular wx.ListBox except you draw the
# items yourself and the items can vary in height.
# This method must be overridden.  When called it should draw the
# n'th item on the dc within the rect.  How it is drawn, and what
# is drawn is entirely up to you.
# This method must be overridden.  It should return the height
# required to draw the n'th item.
# These are also overridable:
#
# OnDrawSeparator(dc, rect, n)
#   Draw a separator between items.  Note that rect may be reduced
#   in size if desired so OnDrawItem gets a smaller rect.
#
# OnDrawBackground(dc, rect, n)
#   Draw the background and maybe a border if desired.
# %d" % item
# %d\n with an extra line" % item
#----------------------------------------------------------------------
# The wx.HtmlListBox derives from wx.VListBox, but draws each item
# itself as a wx.HtmlCell.
# <b>%d</b>" % n
# <b>%d</b> <br>Any <font color='RED'>HTML</font> is okay." % n
#there's a bug in the wxPython wrapper as of 2.8.7.1
#super(MyHtmlListBox, self).OnLinkClicked(n, linkinfo)
#----------------------------------------------------------------------
#there's a bug in the wxPython wrapper as of 2.8.7.1
#self.Bind(html.EVT_HTML_LINK_CLICKED, self.OnLinkClicked, hlb )
#there's a bug in the wxPython wrapper as of 2.8.7.1
#def OnLinkClicked(self, event):
#    linkinfo = event.GetLinkInfo()
#    self.log.WriteText('OnLinkClicked: %s\n' % linkinfo.GetHref())
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# This file is used for the HtmlWindow demo.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Classes derived from wxPyWizardPanel must override
# GetNext and GetPrev, and may also override GetBitmap
# as well as all those methods overridable by
# wx.PyWindow.
#----------------------------------------------------------------------
# You usually wouldn't need to override this method
# since you can set a non-default bitmap in the
# wxWizardPageSimple constructor, but if you need to
# dynamically change the bitmap based on the
# contents of the wizard, or need to also change the
# next/prev order then it can be done by overriding
# GetBitmap.
#----------------------------------------------------------------------
# Show how to prevent cancelling of the wizard.  The
# other events can be Veto'd too.
# Create the wizard and the pages
# Use the convenience Chain function to connect the pages
# Create the wizard and the pages
#wizard = wx.PreWizard()
#wizard.SetExtraStyle(wx.WIZARD_EX_HELPBUTTON)
#wizard.Create(self, self.ID_wiz, "Simple Wizard",
#              images.WizTest1.GetBitmap())
# Set the initial order of the pages
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# Make a title area and sizer for the upper part of the panel
# In the lower part of the panel we'll put a bunch of buttons
# in a WrapSizer
# Add a little color to make it interesting
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
# make the components
# This shows a few different ways to load XML Resources
# XML Resources can be loaded from a file like this:
# or from a Virtual FileSystem:
# notice the matching filename
# or from a buffer compatible object, like this:
# Now create a panel from the resource data
# and do the layout
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This is the little bit of customization that we do for this
# silly example.
# To do it the more complex way, (see below) we need to write the
# class a little differently...  This could obviously be done with a
# single class, but I wanted to make separate ones to make clear what
# the different requirements are.
#----------------------------------------------------------------------
# Specify the styles recognized by objects of this type
# This method and the next one are required for XmlResourceHandlers
# NOTE: wxWindows can be created in either a single-phase or
# in a two-phase way.  Single phase is what you normally do,
# and two-phase creates the instance first, and then later
# creates the actual window when the Create method is called.
#
# wxXmlResource supports either method, a pre-made instance can
# be created and populated by xrc using the appropriate
# LoadOn* method (such as LoadOnPanel) or xrc can create the
# instance too, using the Load* method.  However this makes
# the handlers a bit more complex.  If you can be sure that a
# particular class will never be loaded using a pre-existing
# instance, then you can make the handle much simpler.  I'll
# show both methods below.
# The simple method assumes that there is no existing
# instance.  Be sure of that with an assert.
# Now create the object
# When using the more complex (but more flexible) method
# the instance may already have been created, check for it
# if not, then create the instance (but not the window)
# Now call the panel's Create method to actually create the window
# These two things should be done in either case:
# Set standard window attributes
# Create any child windows of this node
#----------------------------------------------------------------------
# make the components
# Load the resource
# Now create a panel from the resource data
# and do the layout
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# the Create step is done by XRC.
# This is the little bit of customization that we do for this
# silly example.  It could just as easily have been done in
# the resource.  We do it in the EVT_WINDOW_CREATE handler
# because the window doesn't really exist yet in the __init__.
# On OSX the EVT_SIZE happens before EVT_WINDOW_CREATE !?!
# so give it another kick
#----------------------------------------------------------------------
# make the components
# Load the resource
# Now create a panel from the resource data
# and do the layout
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Create the InfoBar.  It starts out in a hidden state so it
# won't be visible until we need it.
# wx.ICON_INFORMATION is the default
# Calling event.Skip() will allow the default handler to run
# which will dismiss the info bar.  If you don't want it to be
# dismissed for a particular button then then don't call
# Skip().
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# Initialize AquaButton 1 (with image)
# Initialize AquaButton 2 (no image)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# Custom pane button bitmaps
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Custom pane bitmaps reference
#                      bitmap  button id       active  maximize
#----------------------------------------------------------------------
# Custom buttons in tab area
#
#----------------------------------------------------------------------
# Define a translation function
# -- SizeReportCtrl --
# (a utility control that always reports it's client size)
# ---------------------------------------------------------------------------- #
# Class ProgressGauge
# ---------------------------------------------------------------------------- #
# We take the percent way of the colour from colour -> white
#draw main
#draw main
# tell AuiManager to manage this frame
# set frame icon
# set up default notebook style
# Attributes
# create menu
##        if wx.Platform == "__WXMAC__":
##            switcherAccel = "Alt+Tab"
##        elif wx.Platform == "__WXGTK__":
##            switcherAccel = "Ctrl+/"
##        else:
##            switcherAccel = "Ctrl+Tab"
##
##        view_menu.Append(ID_SwitchPane, _("S&witch Window...") + "\t" + switcherAccel)
# min size for the frame itself isn't completely done.
# see the end up AuiManager.Update() for the test
# code. For now, just hard code a frame minimum size
# prepare a few custom overflow elements for the toolbars' overflow buttons
# create some toolbars
# add a bunch of panes
# create some center panes
# add the toolbars to the manager
# Show how to add a control inside a tab
# make some default perspectives
# Show how to get a custom minimizing behaviour, i.e., to minimize a pane
# inside an existing AuiToolBar
# "commit" all changes made to AuiManager
##        self.Bind(wx.EVT_MENU, self.OnSwitchPane, id=ID_SwitchPane)
# show the settings pane, and float it
# Snap everywhere
# Snap left
# Snap right
# Snap top
# Snap bottom
# Demonstrate how to remove a close button from a tab
# for the purpose of this test application, explicitly
# allow all noteboko drag and drop events
# create the popup menu
# make sure the button is "un-stuck"
# create the notebook off-window to avoid flicker
# Demonstrate how to disable a tab
# Add the main windows and toolbars, in two separate columns
# We'll use the item 'id' to store the notebook selection, or -1 if not a page
# Now add the wxAuiNotebook pages
# Select the focused window
# Show the switcher dialog
# In GTK+ we can't use Ctrl+Tab; we use Ctrl+/ instead and tell the switcher
# to treat / in the same was as tab (i.e. cycle through the names)
#----------------------------------------------------------------------
# set frame icon
#----------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
##        b2 = wx.Button(self, -1, " AGW AuiMDIs ", (50, 80))
##        self.Bind(wx.EVT_BUTTON, self.OnButton2, b2)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# ----------------------------------------------------------------------------
# BalloonTip Demo Implementation
#
# This Demo Shows How To Use The BalloonTip Control, With Different Styles
# And Behaviors.
# ----------------------------------------------------------------------------
# if it's not there locally, try the wxPython lib.
# ----------------------------------------------------------------------------
# Beginning Of BalloonTip Demo
# ----------------------------------------------------------------------------
# statusbar fields
# Add A Button
# Add A TextCtrl
# Add A CheckBox
# Add A Choice
# Add A Gauge
# Add A ListBox
# Add A TreeCtrl
# Add A Slider
# | wx.SL_LABELS)
# Add Another TextCtrl
# Add A GenStaticText
# Add A GenBitmapButton
# Add The Controls To The Main FlexGridSizer
# Declare The BalloonTip Background Colours
# Declare The BalloonTip Top-Left Icons
# Declare The BalloonTip Top Titles
# Declare The BalloonTip Top Titles Fonts
# Declare The BalloonTip Top Titles Colours
# Declare The BalloonTip Messages
# Declare The BalloonTip Tip Messages Colours
# Declare The BalloonTip Tip Messages Fonts
# Declare The BalloonTip Frame Shapes
# Declare The BalloonTip Destruction Style
# Set The Targets/Styles For The BalloonTip
# Set The Target
# Set The Balloon Colour
# Set The Font For The Top Title
# Set The Colour For The Top Title
# Set The Font For The Tip Message
# Set The Colour For The Tip Message
# Set The Delay After Which The BalloonTip Is Created
# Set The Delay After Which The BalloonTip Is Destroyed
# Store The Last BalloonTip Reference To Enable/Disable Globall The
# BalloonTip. You Can Store Any Of Them, Not Necessarily The Last One.
# Make a menubar
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# statusbar fields
# Here we (re)create the buttons for the default startup demo
# First 2 buttons are togglebuttons
# First 2 buttons have also a text
# Append a separator after the second button
# Add a wx.TextCtrl to ButtonPanel
# Add a wx.Choice to ButtonPanel
# Here we (re)create the buttons for the button-only demo
# Buttons are created completely random, with random images, toggle behavior
# and text
# Change the layout after a switch in ButtonPanel alignment
# No resetting if the user is using the Settings Panel
# Sets the colours for the two demos: called only if the user didn't
# modify the colours and sizes using the Settings Panel
# set the colour the text is drawn with
# These default to white and whatever is set in the system
# settings for the wx.SYS_COLOUR_ACTIVECAPTION.  We'll use
# some specific settings to ensure a consistent look for the
# demo.
# Here we change the alignment property of ButtonPanel
# Restore the ButtonPanel default style (no gradient)
# Use gradients to paint ButtonPanel background
# Reload the default startup demo
# Reload the button-only demo
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# If the user selected OK, then the dialog's wx.ColourData will
# contain valid information. Fetch the data ...
# ... then do something with it. The actual colour data will be
# returned as a three-tuple (r, g, b) in this particular case.
# Once the dialog is destroyed, Mr. wx.ColourData is no longer your
# friend. Don't use it again!
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just A Dialog To Select Pen Styles
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just A Dialog To Select Tree Buttons Icons
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just A Dialog To Select Tree Check/Radio Item Icons
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just A Dialog To Select Tree Items Icons
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# CustomTreeCtrl Demo Implementation
#---------------------------------------------------------------------------
# Create the CustomTreeCtrl, using a derived class defined below
# add the windows to the splitter and split it.
# Todo:  The settings in the leftpanel should be reset too
# self.PopulateLeftPanel(self.tree.styles, self.tree.events)  # Crashes on LeftImage selection
# only if the style TR_ALIGN_WINDOWS_RIGHT is used
# Ineffective (only updates when collapse/expand)
#---------------------------------------------------------------------------
# CustomTreeCtrl Demo Implementation
#---------------------------------------------------------------------------
# To set the position on Window image (default==True)
# EVT_TREE_ITEM_CHECKED to update position
# NOTE:  For some reason tree items have to have a data object in
#        order to be sorted.  Since our compare just uses the labels
#        we don't need any real data, so we'll just use None below for
#        the item data.
# This is for SetWindow on TreeItem, when collapsed is on the right, on the left otherwise
# Add the Window on on_the_right=True
# Item Text Appearance
# Icons On Item
# Enabling/Disabling Windows Associated To An Item
# Enabling/Disabling Items
# Generic Item's Info
# show how to prevent edit...
# Lets just see what's visible of its children
# show how to reject edit, we'll not allow any digits
# Lets hide all Windows
# Overlaps item icon
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#-------------------------------
# Menu items IDs
#-------------------------------
# colour the menu face with background colour
#------------------------------------------------------------
# A custom renderer class for FlatMenu
#------------------------------------------------------------
# ControlNormal, ControlDisabled, default
# Draw the button borders
# For office style, we simple draw a rectangle with a gradient colouring
# fill with gradient
# fill with gradient
#------------------------------------------------------------
# Declare our main frame
#------------------------------------------------------------
# Create a main panel and place some controls on it
# Create minibar Preview Panel
# Add log window
# Connect a button
# Connect a button
# statusbar fields
# AUI support
# create mini toolbar
# Create the menubar
# Load toolbar icons (32x32)
# Set an icon to the exit/help/transparency menu item
# Create a context menu
# Create the menu items
# Toolbar separator
# Toobar separator
# Separator
# Add a wx.ComboBox to FlatToolbar
# Separator
#stext.SetBackgroundStyle(wx.BG_STYLE_CUSTOM )
# Separator
# Add another couple of bitmaps
# Add non-toolbar item
# Second menu
# Demonstrate how to set custom font and text colour to a FlatMenuItem
# Add some radio items
# Add sub-menu to main menu
# Add some dummy entries to the sub menu
# Add sub-menu to main menu
# Create the submenu items and add them
# Demonstrate how to set custom font and text colour to a FlatMenuItem
# Add menu to the menu bar
# Attach menu events to some handlers
# Demonstrate using the wxFlatMenu without a menu bar
# Create the popup menu
# Position the menu:
# The menu should be positioned at the bottom left corner of the button.
# Since the btnPt (button position) is in client coordinates,
# and the menu coordinates is relative to screen we convert
# the coords
# A nice feature with the Popup menu, is the ability to provide an
# object that we wish to handle the menu events, in this case we
# pass 'self'
# if we wish the menu to appear under the button, we provide its height
# Demonstrate using the wxFlatMenu without a menu bar
# Create the popup menu
# Postion the menu:
# The menu should be positioned at the bottom left corner of the button.
# btnPt is returned relative to its parent
# so, we need to convert it to screen
# if we wish the menu to appear under the button, we provide its height
#-----------------------------------------------
# Flat Menu test
#-----------------------------------------------
# First we create the sub-menu item
# Create the menu items
# Add sub-menu to main menu
# Create the submenu items and add them
# Create the submenu items and add them
# Add sub-menu to submenu menu
#-----------------------------------------------
# Flat Menu test
#-----------------------------------------------
#%ld"%(ii+1), "", wx.ITEM_NORMAL, sub)
#%ld"%(k+1))
#%ld"%(ii+1))
# ------------------------------------------
# Event handlers
# ------------------------------------------
# add it to the history
# get the file based on the menu ID
# add it back to the history so it will be moved up the list
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
# statusbar fields
# Set right click menu to the notebook
# Set the image list
# Add spacer between the books
# Add some pages to the second notebook
# Hide the navigation buttons
# Hide the navigation buttons
# Hide the tabs
# Hide the X button
# Hide the navigation buttons
# remove old tabs style
# remove old tabs style
# remove old tabs style
# set new style
# remove old tabs style
# set new style
# remove old tabs style
# remove old tabs style
# Open a colour dialog
#" + str(self._newPageCounter)
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
# Don't destroy the dialog until you get everything you need from the
# dialog!
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#	Tags: phoenix-port, py3-port
# if it's not there locally, try the wxPython lib.
# ----------------------------------------------------------------------------
# Extended Demo Implementation
#
# This demo shows how to use custom CaptionBar styles and custom icons for
# the caption bars. here i used the standard Windows XP icons for the
# collapsed and expanded state.
# ----------------------------------------------------------------------------
#----------------------------------------------------------------------
# different icons for the collapsed/expanded states.
# Taken from standard Windows XP collapsed/expanded states.
#----------------------------------------------------------------------
#\xc9\xd5\n\xa8*\xc5?\x9a\x01\x8a\xd2b\r\x1cN\xc3\
#\x82,\xe5q\x05\x91D\xba@\xefj\xba1\xf0\xdc\
#\xae\xf5|\xddo\xd6\xe2H\
#\x12\xfd\xf2a\xde[\x81\x87\xbb\xdf\x9cr\x1a\x87\xd3\
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ----------------------------------------------------------------------------
# Beginning Of Extended Demo
# ----------------------------------------------------------------------------
# will occupy the space not used by the Layout Algorithm
# Leaves bits of itself behind sometimes
# Leaves bits of itself behind sometimes
# delete earlier panel
# recreate the foldpanelbar
# RED colour spin control
# GREEN colour spin control
# BLUE colour spin control
# RED colour spin control
# GREEN colour spin control
# BLUE colour spin control
# read back current gradients and set the sliders
# for the colour which is now taken as default
# put down some caption styles from which the user can
# select to show how the current or all caption bars will look like
# one more panel to finish it
# recreate with style collapse to bottom, which means
# all panels that are collapsed are placed at the bottom,
# or normal
# recreate with style where only one panel at the time is
# allowed to be opened
# recreate with style where only one panel at the time is
# allowed to be opened and the others are collapsed to bottom
# Make a menubar
# Dummy option
# make fold panel menu
# Now Implemented!
# Now Implemented!
# ----------------------------------------------------------------------------
# Collapsed Demo Implementation
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# do not add this for horizontal for better presentation
# do not add this for horizontal for better presentation
# True is to force the frame to close
# ----------------------------------------------------------------------------
# NotCollapsed Implementation
# ----------------------------------------------------------------------------
# Event Handlers
# True is to force the frame to close
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
# This is one way to control the sash limits
#if event.GetSashPosition().x < 50:
#    event.Veto()
# statusbar fields
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# Aquabuttons
# GradientButtons
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# Initialize GradientButton 1 (no image)
# Initialize GradientButton 2 (with image)
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
# Creator credits
# Default Web links:
# Web link with underline rollovers, opens in window
# middle click to open in window
# Intense link examples..
# Goto URL, demonstrates attempt to open link in current window:
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
#   Tags: phoenix-port, py3-port
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#\xbe_ \x9f\xf7\x98\x9f?\xc2\xf4\x93\xe7\x16\xb0\xdeA6\x93V,\
#\xf0\xba\x89\\\x01\x16YXXh\xba\xabA\xa5\x95\xa1\
#-\xf1\x056\x98<\x00\x00\x00\
#-----------------------------------------------------------------------------
# PATH & FILE FILLING (OS INDEPENDENT)
#-----------------------------------------------------------------------------
# HACK: on Linux, a leading / gets lost...
#-----------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just A Dialog To Select Pen Styles
#---------------------------------------------------------------------------
# If the user selected OK, then the dialog's wx.ColourData will
# contain valid information. Fetch the data ...
# ... then do something with it. The actual colour data will be
# returned as a three-tuple (r, g, b) in this particular case.
# Once the dialog is destroyed, Mr. wx.ColourData is no longer your
# friend. Don't use it again!
#---------------------------------------------------------------------------
# Just A Dialog To Select Tree Buttons Icons
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just A Dialog To Select Tree Check/Radio Item Icons
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just A Dialog To Select Tree Items Icons
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Custom Renderer for the column headers
#---------------------------------------------------------------------------
# determine if the string can fit inside the current width
# determine the base width
# continue until we have enough space or only one character left
# if still not enough space, remove ellipsis characters
# Draw a solid background in self.color
# Draw the column divider on the right
# We need to draw the text and/or icon bitmap
# Determine the width of the text
# 2 pixel margin either side
# and the width of the icon, if any
# 2 is a margin between the image and text
# ALIGN_LEFT if the label is larger than the available space
#---------------------------------------------------------------------------
# HyperTreeList Demo Implementation
#---------------------------------------------------------------------------
# statusbar fields
# Set up a log window
# Create the HyperTreeList
# wx.LIST_AUTOSIZE_USEHEADER
# TODO: we need an "undetermined check" icon...
#---------------------------------------------------------------------------
# HyperTreeList Implementation
#---------------------------------------------------------------------------
# NOTE:  For some reason tree items have to have a data object in
#        order to be sorted.  Since our compare just uses the labels
#        we don't need any real data, so we'll just use None below for
#        the item data.
# create some columns
# the one with the tree in it...
# Item Text Appearance
# Icons On Item
# Enabling/Disabling Windows Associated To An Item
# Enabling/Disabling Items
# Generic Item's Info
# show how to prevent edit...
# Lets just see what's visible of its children
# show how to reject edit, we'll not allow any digits
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This file was generated by encode_bitmaps.py
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ***************** Catalog starts here *******************
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#wx.BORDER_SUNKEN)
#----------------------------------------------------------------------
#wx.SUNKEN_BORDER)
# statusbar fields
# it is a labelbook:
#wx.CallAfter(self.book.SetAGWWindowStyleFlag, style)
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# Create two pipes
# Center the progress bar vertically in the box supplied
# not started
# completed
# in progress
#| wx.BORDER_NONE
#| wx.LC_SORT_ASCENDING
#| wx.LC_NO_HEADER
#| wx.LC_VRULES
#| wx.LC_SINGLE_SEL
#---------------------------------------------------------------------------
# Create the CustomTreeCtrl, using a derived class defined below
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# Initialize Peak Meter control 1
# Initialize Peak Meter control 2
# generate 15 random number and set them as data for the meter
# 2 fps
# 18 fps
# 20 fps
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# Prepare the menu bar
# 1st menu from left
# Add menu to the menu bar
# Radio items
# Check menu items
# wx.ColourDialog
# wx.FontDialog
# wx.TextEntryDialog
# The wx.HtmlListBox derives from wx.VListBox, but draws each item
# itself as a wx.HtmlCell.
# <b>%d</b>" % n
# <b>%d</b> <br>Any <font color='RED'>HTML</font> is okay." % n
# create the notebook off-window to avoid flicker
# create some columns
##treeList.SetMainColumn(0) # the one with the tree in it...
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
# Auxiliary Timer Class For The Demo (For The ProgressPie)
#----------------------------------------------------------------------
# catch error on exit if the ProgressPie control
# is deleted and the timer is still active
#----------------------------------------------------------------------
# Beginning Of PIECTRL Demo wxPython Code
#----------------------------------------------------------------------
# Create Some Maquillage For The Demo: Icon, StatusBar, MenuBar...
# Create A Simple PieCtrl With 3 Sectors
# Create A ProgressPie
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#self.gtkText.Enable(selection == 4)
#self.gtkChoice.Enable(selection == 4)
# standard wx.Button
# buttons.GenButton
# buttons.GenBitmapButton
# buttons.GenBitmapTextButton
# buttons.ThemedGenButton
# buttons.ThemedGenBitmapTextButton
# redo the layout
# and also change the labels
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# --------------------------------------------------- #
# Some constants for ribbon buttons
# --------------------------------------------------- #
# Some bitmaps for ribbon buttons
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# --------------------------------------------------- #
# --------------------------------------------------- #
# --------------------------------------------------- #
# not using wx.WrapSizer(wx.HORIZONTAL) as it reports an incorrect min height
# Set the background of the gallery to the hovered colour, or back to the
# default if there is no longer a hovered item.
# Foreground too similar to background - use a different
# strategy to find a contrasting colour
# Try to find colour in gallery
# Colour not in gallery - add it
# Set selection
# Send an event to respond to the selection change
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
# Make some styles,  The lexer defines what each style is used for, we
# just have to define what each style looks like.  This set is adapted from
# Scintilla sample property files.
# Global default styles for all languages
# Reset all to be like the default
# Global default styles for all languages
#FFFFFF,back:#0000FF,bold")
#000000,back:#FF0000,bold")
# Python styles
# Default
#000000,face:%(helv)s,size:%(size)d" % faces)
# Comments
#007F00,face:%(other)s,size:%(size)d" % faces)
# Number
#007F7F,size:%(size)d" % faces)
# String
#7F007F,face:%(helv)s,size:%(size)d" % faces)
# Single quoted string
#7F007F,face:%(helv)s,size:%(size)d" % faces)
# Keyword
#00007F,bold,size:%(size)d" % faces)
# Triple quotes
#7F0000,size:%(size)d" % faces)
# Triple double quotes
#7F0000,size:%(size)d" % faces)
# Class name definition
#0000FF,bold,underline,size:%(size)d" % faces)
# Function or method name definition
#007F7F,bold,size:%(size)d" % faces)
# Operators
# Identifiers
#000000,face:%(helv)s,size:%(size)d" % faces)
# Comment-blocks
#7F7F7F,size:%(size)d" % faces)
# End of line where string is not closed
#000000,face:%(mono)s,back:#E0C0E0,eol,size:%(size)d" % faces)
# Some methods to make it compatible with how the wxTextCtrl is used
# if wx.USE_UNICODE:
# value = value.decode('iso8859_1')
# statusbar fields
# Show how to block a changing indicator
# Try to emulate the rulers inside a text editor
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
# Beginning Of SHAPEDBUTTON Demo wxPython Code
#----------------------------------------------------------------------
# Create Some Maquillage For The Demo: Icon, StatusBar, MenuBar...
# Make A ToolBar-Like Audio Control With Round Buttons/Toggles
# Make 9 SBitmapButtons With Text Rotation And Different Colours
# Make Some Mixed SButton/SToggle With Bitmap And Text Rotation
# Build Buttons With Elliptic Shape
# The Rewind Button Is A Simple Bitmap Button (SBitmapButton)
# The Play Button Is A Toggle Bitmap Button (SBitmapToggleButton)
# The Record Button Is A Toggle Bitmap Button (SBitmapToggleButton)
# The Pause Button Is A Toggle Bitmap Button (SBitmapToggleButton)
# The Stop Button Is A Simple Bitmap Button (SBitmapButton)
# The FFWD Button Is A Simple Bitmap Button (SBitmapButton)
# We Build 9 Buttons With Different Colours And A Nice Text Rotation
# Here We Build Some Buttons/Toggles With Different Properties
# Notice That We Put Some Images Also For The "Selected" State
# For A Button
# Here We Build Elliptic Buttons. Elliptic Buttons Are Somewhat
# More Hostiles To Handle, Probably Because My Implementation
# Is Lacking Somewhere, But They Look Nice However.
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Get a random image for the menu
# Append a sub-sub-menu
# Get a random image for the menu
# Append a separator
# No shortcut
# Ctrl + character
# Shift + character
# Ctrl + Shift + character
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
# Beginning Of SPEEDMETER Demo wxPython Code
#----------------------------------------------------------------------
# 6 Panels To Hold The SpeedMeters ;-)
# First SpeedMeter: We Use The Following Styles:
#
# SM_DRAW_HAND: We Want To Draw The Hand (Arrow) Indicator
# SM_DRAW_SECTORS: Full Sectors Will Be Drawn, To Indicate Different Intervals
# SM_DRAW_MIDDLE_TEXT: We Draw Some Text In The Center Of SpeedMeter
# SM_DRAW_SECONDARY_TICKS: We Draw Secondary (Intermediate) Ticks Between
#                          The Main Ticks (Intervals)
# Set The Region Of Existence Of SpeedMeter (Always In Radians!!!!)
# Create The Intervals That Will Divide Our SpeedMeter In Sectors
# Assign The Same Colours To All Sectors (We Simulate A Car Control For Speed)
# Usually This Is Black
# Assign The Ticks: Here They Are Simply The String Equivalent Of The Intervals
# Set The Ticks/Tick Markers Colour
# We Want To Draw 5 Secondary Ticks Between The Principal Ticks
# Set The Font For The Ticks Markers
# Set The Text In The Center Of SpeedMeter
# Assign The Colour To The Center Text
# Assign A Font To The Center Text
# Set The Colour For The Hand Indicator
# Do Not Draw The External (Container) Arc. Drawing The External Arc May
# Sometimes Create Uglier Controls. Try To Comment This Line And See It
# For Yourself!
# Set The Current Value For The SpeedMeter
# Second SpeedMeter: We Use The Following Styles:
#
# SM_DRAW_HAND: We Want To Draw The Hand (Arrow) Indicator
# SM_DRAW_SECTORS: Full Sectors Will Be Drawn, To Indicate Different Intervals
# SM_DRAW_MIDDLE_TEXT: We Draw Some Text In The Center Of SpeedMeter
# SM_DRAW_SECONDARY_TICKS: We Draw Secondary (Intermediate) Ticks Between
#                          The Main Ticks (Intervals)
# SM_DRAW_PARTIAL_FILLER: The Region Passed By The Hand Indicator Is Highlighted
#                         With A Different Filling Colour
# SM_DRAW_SHADOW: A Shadow For The Hand Indicator Is Drawn
# We Want To Simulate A Clock. Somewhat Tricky, But Did The Job
# Set The Colour For The External Arc
# We Set The Background Colour Of The SpeedMeter OutSide The Control
# Set The Colour For The Shadow
# Third SpeedMeter: We Use The Following Styles:
#
# SM_DRAW_HAND: We Want To Draw The Hand (Arrow) Indicator
# SM_DRAW_PARTIAL_SECTORS: Partial Sectors Will Be Drawn, To Indicate Different Intervals
# SM_DRAW_MIDDLE_ICON: We Draw An Icon In The Center Of SpeedMeter
# We Want To Simulate A Car Gas-Control
# Define The Icon We Want
# Draw The Icon In The Center Of SpeedMeter
# Fourth SpeedMeter: We Use The Following Styles:
#
# SM_DRAW_HAND: We Want To Draw The Hand (Arrow) Indicator
# SM_DRAW_SECTORS: Full Sectors Will Be Drawn, To Indicate Different Intervals
# SM_DRAW_SHADOW: A Shadow For The Hand Indicator Is Drawn
# SM_DRAW_MIDDLE_ICON: We Draw An Icon In The Center Of SpeedMeter
#
# NOTE: We Use The Mouse Style mousestyle=SM_MOUSE_TRACK. In This Way, Mouse
# Events Are Catched (Mainly Left Clicks/Drags) And You Can Change The Speed
# Value Using The Mouse
# We Want To Simulate Some Kind Of Thermometer (In Celsius Degrees!!!)
# We Want A Simple Arrow As Indicator, Not The More Scenic Hand ;-)
# Define The Icon We Want
# Draw The Icon In The Center Of SpeedMeter
# Quite An High Fever!!!
# Fifth SpeedMeter: We Use The Following Styles:
#
# SM_DRAW_HAND: We Want To Draw The Hand (Arrow) Indicator
# SM_DRAW_PARTIAL_SECTORS: Partial Sectors Will Be Drawn, To Indicate Different Intervals
# SM_DRAW_SECONDARY_TICKS: We Draw Secondary (Intermediate) Ticks Between
#                          The Main Ticks (Intervals)
# SM_DRAW_MIDDLE_TEXT: We Draw Some Text In The Center Of SpeedMeter
# SM_ROTATE_TEXT: The Ticks Texts Are Rotated Accordingly To Their Angle
# We Want To Simulate The Round Per Meter Control In A Car
# Sixth SpeedMeter: That Is Complete And Complex Example.
#                   We Use The Following Styles:
#
# SM_DRAW_HAND: We Want To Draw The Hand (Arrow) Indicator
# SM_DRAW_PARTIAL_FILLER: The Region Passed By The Hand Indicator Is Highlighted
#                         With A Different Filling Colour
# SM_DRAW_MIDDLE_ICON: We Draw An Icon In The Center Of SpeedMeter
# SM_DRAW_GRADIENT: A Circular Colour Gradient Is Drawn Inside The SpeedMeter, To
#                   Give Some Kind Of Scenic Effect
# SM_DRAW_FANCY_TICKS: We Use wx.lib.
# SM_DRAW_SHADOW: A Shadow For The Hand Indicator Is Drawn
# If You Use The Style SM_DRAW_FANCY_TICKS, Refer To wx.lib.fancytext To Create
# Correct XML Strings To Put Here
# Set The First Gradient Colour, Which Is The Colour Near The External Arc
# Set The Second Gradient Colour, Which Is The Colour Near The Center Of The SpeedMeter
# End Of SpeedMeter Controls Construction. Add Some Functionality
# These Are Cosmetics For The First SpeedMeter Control
# These Are Cosmetics For The Second SpeedMeter Control
# Create The Timer For The Clock
# These Are Cosmetics For The Third SpeedMeter Control
# These Are Cosmetics For The Fourth SpeedMeter Control
# These Are Cosmetics For The Fifth SpeedMeter Control
# These Are Cosmetics For The Sixth SpeedMeter Control
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# Using a predefined style
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# statusbar fields
# If the user selects OK, then we process the dialog's data.
# This is done by getting the path data from the dialog - BEFORE
# we destroy it.
# Only destroy a dialog after you're done with it.
# wxGlade: MyFrame.<event_handler>
# wxGlade: MyFrame.<event_handler>
# wxGlade: MyFrame.<event_handler>
# wxGlade: MyFrame.<event_handler>
# wxGlade: MyFrame.<event_handler>
# wxGlade: MyFrame.<event_handler>
# Don't destroy the dialog until you get everything you need from the
# dialog!
# Ensure the full colour dialog is displayed,
# not the abbreviated version.
# If the user selected OK, then the dialog's wx.ColourData will
# contain valid information. Fetch the data ...
# ... then do something with it. The actual colour data will be
# returned as a three-tuple (r, g, b) in this particular case.
# Once the dialog is destroyed, Mr. wx.ColourData is no longer your
# friend. Don't use it again!
# add some other items
# make a submenu
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# Main ToasterBoxDemo
# if it's not there locally, try the wxPython lib.
# In case of TB_COMPLEX style, create a panel that contains an image, some
# text, an hyperlink and a ticker.
# ------------------------------------------------------------------------------ #
# Class ToasterBoxDemo
#    This class implements the demo for toasterbox control. try to change the
#    style using the radiobox in the upper section of the frame, and see how
#    ToasterBox acts.
# ------------------------------------------------------------------------------ #
# Simple Demo:
# This Is The New Call Style: The Call To GetToasterBoxWindow()
# Is Mandatory, In Order To Create A Custom Parent On ToasterBox.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# load some images into an image list
# create the list control
# assign the image list to it
# create some items for the list
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# load some images into an image list
# create the list control
# assign the image list to it
# create some items for the list
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Create two pipes
# Center the progress bar vertically in the box supplied
# not started
# completed
# in progress
##        listmix.TextEditMixin.__init__(self)
#| wx.BORDER_SUNKEN
#| wx.LC_SORT_ASCENDING
#| wx.LC_NO_HEADER
#| wx.LC_SINGLE_SEL
##        listmix.ColumnSorterMixin.__init__(self, 4)
# for wxMSW
# for wxGTK
# Add our custom renderer for the header of column 3, we can also use
# SetHeaderCustomRenderer to set the renderer for all the columns.
# The custom renderer can also be set for all columns on the header and/or footer
# self.list.SetHeaderCustomRenderer(klass)
# We must first have a footer in order to set its custom renderer:
# style = self.list.GetAGWWindowStyleFlag() | ULC.ULC_FOOTER
# if self.list.GetAGWWindowStyleFlag() != style:
# self.list.SetAGWWindowStyleFlag(style)
# self.list.SetFooterCustomRenderer(klass)
# set some radiobutton-like item on the 3rd column
# set some custom renderers...
# show how to select an item
# show how to change the colour of a couple items
# Disable one item
# Set 2 hypertext items
# Set 2 items with widgets
# Put an item with overflow
##        self.list.SetColumnShown(1, False)
##        self.list.EnableSelectionVista(True)
##        self.list.SetGradientStyle(1)
##        self.list.SetBackgroundImage(wx.Bitmap("splash.png", wx.BITMAP_TYPE_PNG))
# Used by the ColumnSorterMixin, see wx/lib/mixins/listctrl.py
# Used by the ColumnSorterMixin, see wx/lib/mixins/listctrl.py
#event.Veto()  # doesn't work
# this does
##        # Show how to reselect something we don't want deselected
##        if evt.Index == 11:
##            wx.CallAfter(self.list.SetItemState, 11, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
## Show how to not allow a column to be resized
#if event.GetColumn() == 0:
#    event.Veto()
# only do this part the first time so the events are only bound once
# make a menu
# add some items
# Popup the menu.  If an item is selected then its handler
# will be called before PopupMenu returns.
#---------------------------------------------------------------------------
# Create the CustomTreeCtrl, using a derived class defined below
# add the windows to the splitter and split it.
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# After setting the column width you can specify that
# this column expands to fill the window. Only one
# column may be specified.
#---------------------------------------------------
# These methods are callbacks for implementing the
# "virtualness" of the list...  Normally you would
# determine the text, attributes and/or image based
# on values from some external data source, but for
# this demo we'll just calculate them
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
# helper function to make sure we don't convert unicode objects to strings
# or vice versa when converting lists and None values to text.
#------- Icon info
#---------------------------------------------------------------------------
# Create the CustomTreeCtrl, using a derived class defined below
#---------------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# if it's not there locally, try the wxPython lib.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# Start the imports...
# ========================================
# For AGW (Advanced Generic Widgets :-D )
# ========================================
# ========================================
# End AGW things
# ========================================
# Get the image as PyEmbeddedImage
# Return the AGW bitmap to use in
# the wxPython demo tree control
# Return the Recent Additions for AGW
# The tree item text for AGW
# The AGW demos
# wxPython widgets to highlight using the <code> tag
# Split the docs in many lines
# Add the title
# Get the number of widgets in the package...
# Loop over the lines in the AGW documentation
# That's a new widget
# Put a bullet
# It's a title
# It's a web address
# It's an email address
# Break the loop, all widgets included
# Make AGW bold and wxPython underlined...
# Show wx things with the <code> tag
# Return the beautified AGW docs, ready for wx.html
#/* angles are specified */
#/* in radians           */
#/* draw helping lines */
#/* angles are specified */
#/* in radians           */
#/* draw helping lines */
#/* a custom shape, that could be wrapped in a function */
#/*< parameters like cairo_rectangle */
#/*< and an approximate curvature radius */
#if (!rect_width || !rect_height)
#    return
# ink
# skip
# ink
# skip
# fill
# stroke
# reset identity matrix so line_width is a constant
# width in device-space, not user-space
# For an explanation of the fill rules see
# http://cairographics.org/manual/cairo-cairo-t.html#cairo-fill-rule-t
# draw 0.16 glyphs in 0.20 squares, at (0.02, 0.04) from left corner
# demo/test for group functions
#/* default */
#/* draw helping lines */
#/* default */
# draw 0.08 glyphs in 0.10 squares, at (0.01, 0.02) from left corner
#/* draw helping lines */
#/* draw helping lines */
#/* draw helping lines */
# snippet list generation
# list of snippet files
# function used by some or all snippets
#!/usr/bin/env python
#----------------------------------------------------------------------
# Name:        tasks.py
# Purpose:     Invoke-based set of commands for dealing with wxPython's
#              Docker files, images and performing wxPython builds.
#
# Author:      Robin Dunn
#
# Created:     1-July-2019
# Copyright:   (c) 2019 by Total Control Software
# License:     wxWindows License
#----------------------------------------------------------------------
# build it
# test it
# build it
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# collect all availabilities in the environment
# this is not done in the directive itself because it some transformations
# must have already been run, e.g. substitutions
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# Simply insert an empty availabilitylist node which will be replaced later
# when process_availability_nodes is called
# ----------------------------------------------------------------------- #
# Replace all availabilitylist nodes with a list of the collected availabilities.
# Augment each availability with a backlink to the original location.
# Create a reference
#' + availability_info['target']['refid']
# ignore if no URI can be determined, e.g. for LaTeX output
# (Recursively) resolve references in the availability content
# Insert into the availabilitylist
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# -*- coding: utf-8 -*-
#
# Phoenix documentation build configuration file, created by
# sphinx-quickstart on Mon Jun 22 09:32:57 2009.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# -- General configuration -----------------------------------------------------
# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# Add any paths that contain templates here, relative to this directory.
# The suffix(es) of source filenames.
# The encoding of source files.
#source_encoding = 'utf-8-sig'
# The master toctree document.
# General information about the project.
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None
# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
# List of documents that shouldn't be included in the build.
#unused_docs = []
# List of directories, relative to source directory, that shouldn't be searched
# for source files.
# The reST default role (used for this markup: `text`) to use for all documents.
# If true, '()' will be appended to :func: etc. cross-reference text.
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# The name of the Pygments (syntax highlighting) style to use.
# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []
# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False
# -- Options for HTML output ---------------------------------------------------
# The theme to use for HTML and HTML Help pages.  Major themes that come with
# Sphinx are currently 'default' and 'sphinxdoc'.
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# Add any paths that contain custom themes here, relative to this directory.
# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None
# A shorter title for the navigation bar.  Default is the same as html_title.
# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'
# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True
# Custom sidebar templates, maps document names to template names.
#'relations.html',  # Next/Prev in the sidebar, disabled for now
# Additional templates that should be rendered to pages, maps page names to
# template names.
# If false, no module index is generated.
# If false, no index is generated.
# If true, the index is split into individual pages for each letter.
# If true, links to the reST sources are added to the pages.
# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True
# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''
# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''
# Output file base name for HTML help builder.
# -- Options for LaTeX output --------------------------------------------------
# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'
# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None
# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False
# Additional stuff for the LaTeX preamble.
#latex_preamble = ''
# Documents to append as an appendix to all manuals.
#latex_appendices = []
# If false, no module index is generated.
#latex_use_modindex = True
# -- Options for PDF output --------------------------------------------------
# Grouping the document tree into PDF files. List of tuples
# (source start file, target name, title, author, options).
#
# If there is more than one author, separate them with \\.
# For example: r'Guido van Rossum\\Fred L. Drake, Jr., editor'
#
# The options element is a dictionary that lets you override
# this config per-document.
# For example,
# ('index', u'MyProject', u'My Project', u'Author Name',
# dict(pdf_compressed = True))
# would mean that specific document would be compressed
# regardless of the global pdf_compressed setting.
# A comma-separated list of custom stylesheets. Example:
# pdf_stylesheets = ['sphinx', 'kerning', 'a4', "C:\\AGW\\agw\\fonts\\sphinx.json"]
# Create a compressed PDF
# Use True/False or 1/0
# Example: compressed=True
#pdf_compressed = False
# A colon-separated list of folders to search for fonts. Example:
#pdf_font_path = ['E:\\AGW\\agw\\fonts', 'C:\\Windows\\Fonts']
# Language to be used for hyphenation support
#pdf_language = "en_US"
# Mode for literal blocks wider than the frame. Can be
# overflow, shrink or truncate
#pdf_fit_mode = "shrink"
# Section level that forces a break page.
# For example: 1 means top-level sections start in a new page
# 0 means disabled
#pdf_break_level = 0
# When a section starts in a new page, force it to be 'even', 'odd',
# or just use 'any'
#pdf_breakside = 'any'
# Insert footnotes where they are defined instead of
# at the end.
#pdf_inline_footnotes = True
# verbosity level. 0 1 or 2
# If false, no index is generated.
#pdf_use_index = True
# If false, no modindex is generated.
#pdf_use_modindex = True
# If false, no coverpage is generated.
#pdf_use_coverpage = True
# Documents to append as an appendix to all manuals.
#pdf_appendices = []
# Enable experimental feature to split table cells. Use it
# if you get "DelayedTable too big" errors
# Author: Samuel Dunn
# Intent: Provide an admonishment for wx deprecations
# Date: 2 / 19 / 18
# Barely more than a copy-paste from sphinx-doc.org/en/1.6/extdev/tutorial.html
# docutils will assign magic-members to the instance
# before invoking run.
# convenience reference to the build environment:
# ?
# create a node and pass content and such in.
# Parse all sub-elements into deprecation_node instance
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to retrieve default platform's
# bitmaps using wx.ArtProvider
# Show a few bitmaps retrieved via wx.ArtProvider
# Layout everything in a nice sizer
##Andrea Gavana
#!/usr/bin/env python
# This sample makes the main frame "immortal", i.e., non-closable
# by the user. The main window can not be close by pressing Alt+F4
# or by clicking on the "X" button in the titlebar
# Bind the "close window" event to the OnClose handler
# Veto the event the user can not close the main
# window in any way
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to assign different fonts to various
# wx.StaticTexts
# OR
# OR
#0000FF')
# Size up everything in a nice vertical box sizer
# Enter the application main loop
##Andrea Gavana
#!/usr/bin/env python
# This sample shows a simple example of how to use the
# "Bind" method to handle an event
# Bind the "close window" event to the OnClose handler
# This displays a message box asking the user to confirm
# she wants to quit the application
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to assign different fonts to various
# wx.StaticTexts
# Construct 2 font objects from the wx.Font constructor
# A font can be retrieved from the OS default font
# and modified
# Size up everything in a nice vertical box sizer
# Enter the application main loop
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to create a wx.StatusBar with 2 fields,
# set the second field to have double width with respect to the
# first and and display the date of today in the second field.
# A Statusbar in the bottom of the window
# Set it up so it has two fields
# Set the second field to be double in width wrt the first
# Get today date via datetime
# Set today date in the second field
##Andrea Gavana
#!/usr/bin/env python
# This sample shows hot to take advantage of wx.CallAfter when running a
# separate thread and updating the GUI in the main thread
##Andrea Gavana
#!/usr/bin/env python
# This sample demonstrates a simple use of wx.Process/wx.Execute to
# monitor an external program stdout
##Chris Barker
#!/usr/bin/env python
##Chris Barker
#!/usr/bin/env python
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to create a simple wx.MenuBar
# and a simple wx.StatusBar
# A Statusbar in the bottom of the window
# Setting up the menu
# wx.ID_ABOUT and wx.ID_EXIT are standard IDs provided
# by wxWidgets.
# Creating the menubar
# Adding the 'file_menu' to the menu bar
# Adding the menu bar to the frame content
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to listen to a move change event for a
# top-level window (wx.Frame, wx.Dialog). This is MSW-specific
# Capture the mouse position (in screen coordinates) and
# assign its x, y values to the statictexts
##Andrea Gavana
#!/usr/bin/env python
# This sample creates a "File->Open" menu, and lets the user select
# a Python file. Upon selection, the file is read in memory and a new
# wx.TextCtrl showing the file content is added as a page of a wx.Notebook
# Create the notebook
# Setting up the menu
# wx.ID_OPEN
# Bind the "select menu item" event to the OnOpen event handler
# Creating the menubar
# Adding the 'file_menu' to the menu bar
# Adding the menu bar to the frame content
# This is how you pre-establish a file filter so that the dialog
# only shows the extension(s) you want it to.
# Show the dialog and retrieve the user response. If it is the OK response,
# process the data.
# This returns the file that was selected
# Open the file as read-only and slurp its content
# Create the notebook page as a wx.TextCtrl and
# add it as a page of the wx.Notebook
# Destroy the dialog. Don't do this until you are done with it!
# BAD things can happen otherwise!
##Andrea Gavana
#!/usr/bin/env python
# This sample uses the random module to draw 100 random lines iinside
# a wx.Frame client area, as a demonstration of how to handle a wx.PaintDC
# Bind a "paint" event for the frame to the
# "OnPaint" method
# Use a blue pen, for example...
# Remember the signature of wx.DC.DrawLine:
# DrawLine(x1, y1, x2, y2)
##Andrea Gavana
#!/usr/bin/env python
# This sample demonstrates a simple use of wx.Process/wx.Execute to
# monitor an external program stdout
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to create a "spli-split" window, i.e. a
# window split verticall which contains two windows split horizontally
# Create the main splitter window (to be split vertically)
# Create the second splitter window (to be split horizontally)
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to create a wx.StatusBar with 2 fields,
# set the second field to have double width with respect to the
# first and and display the date of today in the second field.
# A Statusbar in the bottom of the window
# Set it up so it has two fields
# Set the second field to be double in width wrt the first
# Get today date via datetime
# Set today date in the second field
##Andrea Gavana
#!/usr/bin/env python
# This sample classifies the Python keywords alphabetically, using the
# first letter of the keyword (i.e., ``and`` goes into ``a``, ``for``
# goes into ``f`` and so on):
#
#      * For each letter, adds a child to the treectrl root
#      * In each child of the root item, adds its corresponding keyword(s)
#
# Add the tree root
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to override OnCompareItems for wx.TreeCtrl.
# The overridden method simply compares lowercase item texts
#myapp.org")
# ... create the frame itself ...
# Create and initialize the banner.
# And position it along the left edge of the window.
# ... add the rest of the window contents to the same sizer ...
# To be written...
# Later on...
# Do something with every tree item ...
# FirstPage is an instance of wx.adv.WizardPageSimple
#           | t.m_11  t.m_12  0 |   | m_11  m_12   0 |
# matrix' = | t.m_21  t.m_22  0 | x | m_21  m_22   0 |
#           | t.m_tx  t.m_ty  1 |   | m_tx  m_ty   1 |
#           | m_11  m_12  0 |
# Invert    | m_21  m_22  0 |
#           | m_tx  m_ty  1 |
#           | cos    sin   0 |   | self.11  self.12   0 |
# matrix' = | -sin   cos   0 | x | self.21  self.22   0 |
#           |  0      0    1 |   | self.tx  self.ty   1 |
#           | xScale   0      0 |   | self.11  self.12   0 |
# matrix' = |   0    yScale   0 | x | self.21  self.22   0 |
#           |   0      0      1 |   | self.tx  self.ty   1 |
#                                   | self.11  self.12   0 |
# dist' = | src.self.x  src._my  0 | x | self.21  self.22   0 |
#                                   | self.tx  self.ty   1 |
#                                   | self.11  self.12   0 |
# dist' = | src.self.x  src._my  0 | x | self.21  self.22   0 |
#                                   | self.tx  self.ty   1 |
#                                    | self.11  self.12   0 |
# point' = | src.self.x  src._my  1 | x | self.21  self.22   0 |
#                                    | self.tx  self.ty   1 |
#                                    | self.11  self.12   0 |
# point' = | src.self.x  src._my  1 | x | self.21  self.22   0 |
#                                    | self.tx  self.ty   1 |
#           |  1   0   0 |   | self.11  self.12   0 |
# matrix' = |  0   1   0 | x | self.21  self.22   0 |
#           | dx  dy   1 |   | self.tx  self.ty   1 |
#           | t.m_11  t.m_12  0 |   | m_11  m_12   0 |
# matrix' = | t.m_21  t.m_22  0 | x | m_21  m_22   0 |
#           | t.m_tx  t.m_ty  1 |   | m_tx  m_ty   1 |
#           | m_11  m_12  0 |
# Invert    | m_21  m_22  0 |
#           | m_tx  m_ty  1 |
# Your implementation of CreateBitmap here
# optionally override this one as well
# Your implementation of CreateIconBundle here
# Later on...
# Normal usage
# It can be used as a context manager too
# Write some text to the clipboard
# Test if text content is available
# Read some text
# you may also do:  event.Skip()
# since the default event handler does call Destroy(), too
# add the pane with a zero proportion value to the 'sz' sizer which contains it
# now add a test label in the collapsible pane using a sizer to layout it:
# Some function for redrawing using the given colour. Ideally, it
# shouldn't do anything if the colour is the same as the one used
# before.
# Colour did change.
# Colour didn't change.
# This call is unnecessary under platforms generating
# wx.EVT_COLOUR_CHANGED if the dialog was accepted and unnecessary
# under the platforms not generating self event if it was cancelled,
# so we could check for the different cases explicitly to avoid it,
# but it's simpler to just always call it.
#----------------------------------------------------------------------
# This class is used to provide an interface between a ComboCtrl and the
# ListCtrl that is used as the popoup for the combo widget.
# The following methods are those that are overridable from the
# ComboPopup base class.  Most of them are not required, but all
# are shown here for demonstration purposes.
# This is called immediately after construction finishes.  You can
# use self.GetCombo if needed to get to the ComboCtrl instance.
# Create the popup child control.  Return true for success.
# Return the widget that is to be used for the popup
# Called just prior to displaying the popup, you can use it to
# 'select' the current item.
# Return a string representation of the current item.
# Called immediately after the popup is shown
# Called when popup is dismissed
# This is called to custom paint in the combo control itself
# (ie. not the popup).  Default implementation draws value as
# string.
# Receives key events from the parent ComboCtrl.  Events not
# handled should be skipped, as usual.
# Implement if you need to support special action when user
# double-clicks on the parent wxComboCtrl.
# Return final size of popup. Called on every popup, just prior to OnPopup.
# minWidth = preferred minimum width for window
# prefHeight = preferred height. Only applies if > 0,
# maxHeight = max height for window, as limited by screen size
#   and should only be rounded down, if necessary.
# Return true if you want delay the call to Create until the popup
# is shown for the first time. It is more efficient, but note that
# it is often more convenient to have the control created
# immediately.
# Default returns false.
# It is important to call SetPopupControl() as soon as possible
# Populate using wx.ListView methods
# Let's make the text right-aligned
# using wx.Config instead of writing wx.FileConfig or wx.RegConfig enhances
# portability of the code
# another example: using default values and the full path instead of just
# key name: if the key is not found , the value 17 is returned
# at the end of the program we would save everything back
# right now the current path is '/'
# go to some other place: if the group(s) don't exist, they will be created
# create an entry in subgroup
# '..' is understood
# use absolute path: it is allowed, too
# ...
# we're reading "/Foo/Data/Test" here! -1 will probably be returned...
# first enum all entries
# ... we have all entry names in names...
# now all groups...
# ... we have all group (and entry) names in names...
# this function loads somes settings from the given wx.Config object
# the path selected inside it is left unchanged
# NOTE: without wx.ConfigPathChanger it would be easy to forget to
#       set the old path back into the wx.Config object before this return!
# do something useful with SomeString...
# again: wx.ConfigPathChanger dtor will restore the original wx.Config path
# GetSizeFromText is a simpler way to do this:
# Create a control for post code entry.
# And set its initial and minimal size to be big enough for
# entering 5 digits.
# Create a control for post code entry.
# And set its initial and minimal size to be big enough for
# entering 5 digits.
# Some more code...
# ... use dataobj.GetBitmap() ...
# ... use dataobj.GetFilenames() ...
# Some integer...
# sc is a wx.SpinCtrl
# avoid memory leak !!
# add columns now
### wxPython does not provide wrappers for wxObjectDataPtr
#87ceeb\">light</span> and "
#000080\">dark</span> blue")
# Markup renderer that removes bgcolor attributes when in selection
# Do something with every tree item ...
# Uninitialized datetime
# This datetime format is wrong on purpose
# This is correct
# Uninitialized datetime
# This datetime format is wrong on purpose
# This is correct
# ... drawing functions here are affected by clipping rect ...
# ... drawing functions here are not affected by clipping rect ...
# In Python we don't have to worry about the stack vs. the heap, however
# that means that dialogs do need to be destroyed. The typical pattern for
# dialog usage looks something like this:
# do something here
# handle dialog being cancelled or ended by some other button
# explicitly cause the dialog to destroy itself
# Things can be made a little simpler in Python by using the dialog as a
# context manager, using the with statement, like this:
# do something here
# handle dialog being cancelled or ended by some other button
# The dialog is automatically destroyed on exit from the context manager# block all events directed to this window while
# we do the 1000 FunctionWhichSendsEvents() calls
# wx.EventBlocker destructor called on exit from the context
# manager, old event handlers are restored.
# the event generated by this call will be processed:
# This class allows to determine the last time the user has worked with
# this application:
# Update the last user activity
# Continue processing the event normally as well.
# This function could be called periodically from some timer to
# do something (e.g. hide sensitive data or log out from remote
# server) if the user has been inactive for some time period.
# other code...
# the previously active event loop restored here
# wx.ThreadEvent.Clone() makes sure that the internal wx.String
# member is not shared by other string instances:
# something inheriting from wx.EvtHandler
# something inheriting from wx.EvtHandler
# otherwise ask the user what new file to open
# the user changed their mind
# Proceed loading the file chosen by the user
# the user changed their mind
# save the current contents in the file
# opens file 'hello.htm'
# opens file 'subdir/folder/hello.htm' !!
#chapter2") == "chapter2":
#zip:index.htm") == "file:myzipfile.zip":
#zip:index.htm") == "zip":
#zip:index.htm") == "index.htm":
# provide the message parameters for the MIME type manager
# parameter names are not case-sensitive
# the full command for opening the text documents is in 'command'
# (it might be "notepad foo.txt" under Windows or "cat foo.txt" under Unix)
# we don't know how to handle such files...
# Create a font using wx.FontInfo
# Create a font using the old-style constructor
# ...failure (or we may try iso8859-1/7bit ASCII)...
# ...display text...
# Do something with the folder name
# work with the file
# else: cancelled by user
# Signal enumeration
# verify if the process exists under Unix
# forcefully kill, dangerous!
# terminate the process gently
# KillError enumeration
# no error
# no such signal
# permission denied
# no such process
# another, unspecified error
# Cancelled by user.
# Some values
# OGL 5.0, whenever available
# Values usually are platform-dependant named (even value assigned!)
# Don't forget self
# Context attributes are set by an ARB-function
# terminate the list
# terminate the list
# Create paint DC
# Create graphics context from it
# make a path that contains a circle and some lines
# matrix = t * matrix
# from somewhere
# .. code-block:: text
# .. code-block:: text
# in a grid displaying music notation, use a solid black pen between
# octaves (C0=row 127, C1=row 115 etc.)
# ... many other operations with self.grid ...
# destructor called, grid refreshed
# Fill in the constructor
# ... toggle visibility of the column rc-200 ...
# ... compute minimal width for column idx ...
# "pages" now contains all page break positions and, in
# particular, its size is the number of pages
# file is a wx.FSFile in this case...
# file is a wx.FSFile in this case...
# self.embeddedHelpWindow is a wx.html.HtmlHelpWindow
# self.embeddedHtmlHelp is a wx.html.HtmlHelpController
# Create embedded HTML Help window
# Set your own config object here
# The help can be browsed during the lifetime of self object when the
# user quits the help, program execution will continue.
# .. code-block:: xml
# some code in HandleTag for "MYITEMS"...
# back to working on "MYITEMS"...
# .. code-block:: text
# .. code-block:: text
# .. code-block:: text
# ... Some code here...
# you have wx.HtmlTag variable tag which is equal to the
# HTML tag <FONT SIZE=+2 COLOR="#0000FF">
# dummy == "+2"
# dummy == "#0000FF"
# dummy == "\"#0000FF\"" -- see the difference!!
# .. code-block:: html
# change state of parser (e.g. set bold face)
# ...
# restore original state of parser
# .. code-block:: html
# In Python the value returned will be a sip wrapper around a void* type,
# and it can be converted to the address being pointed to with int().
# Assuming you are able to get a ctypes, cffi or similar access to the
# webview library, you can use that pointer value to give it access to the
# WebView backend to operate upon.
# This is a raw translation of the ImageHistogramEntry
# code in C++, not a real Python class
# get the bitmap from somewhere
# rescale it to have size of 32*32
# another possibility:
# ... add other frame controls to the sizer ...
# handle Ctrl-XXX ...
# handle Ctrl-XXX ...
# It's a printable character
# It's a special key, deal with all the known ones:
# move cursor ...
# give help ...
# This item is selected - do whatever is needed with it
# now listCtrl.GetColumnsOrder() will return order and
# listCtrl.GetColumnIndexFromOrder(n) will return order[n] and
# listCtrl.GetColumnOrder() will return 1, 2 and 0 for the column 0,
# 1 and 2 respectively
# let the previous logger show it
# and also send it to the one
# all the log messages are sent to stderr and also processed as usually
# don't delete logChain directly as this would leave a dangling
# pointer as active log target, use SetActiveTarget() instead
# There will normally be a log message if a non-existant file is
# loaded into a wx.Bitmap.  It can be suppressed with wx.LogNull
# when noLog is destroyed the old log sink is restored
# Don't try to load the image if it doesn't exist. This avoids the
# log messages without blocking all the others.
# ... do something else here...
# connect to the media event
# ...
# Create a memory DC
# We can now draw into the memory DC...
# Copy from this DC to another DC.
# use all stock properties:
# use the stock label and the stock accelerator but not the stock help string:
# use all stock properties except for the bitmap:
# buttons have standard "Yes"/"No" values, so rephrase the question
# Just for demonstration purposes, intercept all uses of
# wx.FileDialog. Notice that self doesn't provide any real
# sandboxing, of course, the program can still read and write
# files by not using wx.FileDialog to ask the user for their
# names.
# Skip showing the file dialog entirely.
# Allow the dialog to be shown as usual.
# Again, just for demonstration purposes, show how long did
# the user take to dismiss the dialog. Notice that we
# shouldn't use wx.LogMessage() here as self would result in
# another modal dialog call and hence infinite recursion. In
# general, the hooks should be as unintrusive as possible.
# Called when window needs to be repainted.
# Find out where the window is scrolled to
# get the update rect list
# Repaint this rectangle
# wxMSW is one of the platforms where the generic implementation
# of wx.FilePickerCtrl is used...
# If the resource could not be acquired, tell the user that he has
# to keep the system alive
# Run an important download and the system will not suspend while downloading
# wx.POWER_RESOURCE_SYSTEM automatically released here.
# TBW# TBW# Create and populate buttons-subwindow
# Add two regular buttons
# Add a bitmap button
# Create the 'primary' editor control (textctrl in self case)
# Finally, move buttons-subwindow to correct position and make sure
# returned wx.propgrid.PGWindowList contains our custom button list.
# Do something when the first button is pressed
# Return true if the action modified the value in editor.
# Do something when the second button is pressed
# Do something when the third button is pressed
# Register editor class - needs only to be called once
# Insert the property that will have multiple buttons
# Change property to use editor created in the previous code segment
# Thanks to the magic of Python nothing extra needs to be done here.
# Create dialog dlg at dlgPos. Use value as initial string
# value.
# All arguments of this ctor should have a default value -
# use wx.propgrid.PG_LABEL for label and name
# Determines editor used by property.
# You can replace 'TextCtrl' below with any of these
# builtin-in property editor identifiers: Choice, ComboBox,
# TextCtrlAndButton, ChoiceAndButton, CheckBox, SpinCtrl,
# DatePickerCtrl.
# TODO: Convert given property value to a string and return it
# TODO: Adapt string to property value and return it
# NOTE: wxVariants are handled internally in wxPython. Conversions are
# implicitly done for those types that wxVariant already knows about, and
# the Raw PyObject is used for those that it doesn't know about.
# TBW
# append category
# insert into category - using second variant
# insert before to first item - using first variant
# append category
# insert into category - using second variant
# insert before the first item - using first variant
# These and other similar styles are automatically
# passed to the embedded wx.PropertyGrid.
# Include toolbar.
# Include description box.
# Include compactor.
# Plus defaults.
# Display a header above the grid
# ... code to update the text control with the currently selected
# item width and to react to its changes omitted ...
# checked item #0
# return value ignored as we have "Ok" only anyhow
# ... make sure we won't show it again the next time ...
# Don't set the initial font in the dialog (so the user is choosing
# 'normal text', i.e. the current font) but do tell the dialog
# what 'normal text' is.
# get the location of files waiting to be burned on a CD
# endif __WXMSW__
# Other code...
# Other code...
# NOTE: wxPython doesn't yet support using a control in place of the label...
# NOTE: wxPython doesn't yet support using a control in place of the label...
# Other controls here...
# Other code...
# stopwatch is stopped now ...
# Later on...
# C++-style stream support is not implemented for Python.
# C++-style stream support is not implemented for Python.
# C++-style stream support is not implemented for Python.
# C++-style stream support is not implemented for Python.
# 1 second interval
# do whatever you want to do every second here
# Use the 32-bit images
# This class is not expected to be used from Python.
# ... process item ...
# The C++ convenience macro does not apply for Python, however you can
# accomplish something similar with a function like this
# Note: default constructor used.
# Can be called before actually creating it.
# Won't be shown yet.
# Now everything will be shown at once.
# Suppose we have this factory function in another module.
# Then we can create a window of MyCustomClassDerivingFromWindow
# class without really knowing about this type, as we would have
# to do if we wanted to use the non-default constructor, like this:
# First create the object using the factory function.
# And now create the underlying window, perhaps after doing
# some other stuff first.
# do the window-specific processing after processing the update event
# Note: default ctor is used here.
# Use default constructor here!
# Do this first:
# And really create the window afterwards:
# start processing the XML file
# examine prologue
# process Process Instruction contents
# Other code here...
# process text enclosed by tag1/tag1
# Other code here...
# process attributes of tag1
# process tag2 ...
# myfile2.xml will be identical to myfile.xml saving it self way:
# myfile2.xml != myfile.xml
# Create a document and add the root node.
# Add some XML.
# Write the output to a string.
# .. code-block:: text
# .. code-block:: text
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to retrieve default platform's
# bitmaps using wx.ArtProvider
# Show a few bitmaps retrieved via wx.ArtProvider
# Layout everything in a nice sizer
##Andrea Gavana
#!/usr/bin/env python
# This sample makes the main frame "immortal", i.e., non-closable
# by the user. The main window can not be close by pressing Alt+F4
# or by clicking on the "X" button in the titlebar
# Bind the "close window" event to the OnClose handler
# Veto the event the user can not close the main
# window in any way
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to assign different fonts to various
# wx.StaticTexts
# OR
# OR
#0000FF')
# Size up everything in a nice vertical box sizer
# Enter the application main loop
##Andrea Gavana
#!/usr/bin/env python
# This sample shows a simple example of how to use the
# "Bind" method to handle an event
# Bind the "close window" event to the OnClose handler
# This displays a message box asking the user to confirm
# she wants to quit the application
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to assign different fonts to various
# wx.StaticTexts
# Construct 2 font objects from the wx.Font constructor
# A font can be retrieved from the OS default font
# and modified
# Size up everything in a nice vertical box sizer
# Enter the application main loop
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to create a wx.StatusBar with 2 fields,
# set the second field to have double width with respect to the
# first and and display the date of today in the second field.
# A Statusbar in the bottom of the window
# Set it up so it has two fields
# Set the second field to be double in width wrt the first
# Get today date via datetime
# Set today date in the second field
##Andrea Gavana
#!/usr/bin/env python
# This sample shows hot to take advantage of wx.CallAfter when running a
# separate thread and updating the GUI in the main thread
##Andrea Gavana
#!/usr/bin/env python
# This sample demonstrates a simple use of wx.Process/wx.Execute to
# monitor an external program stdout
##Chris Barker
#!/usr/bin/env python
##Chris Barker
#!/usr/bin/env python
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to create a simple wx.MenuBar
# and a simple wx.StatusBar
# A Statusbar in the bottom of the window
# Setting up the menu
# wx.ID_ABOUT and wx.ID_EXIT are standard IDs provided
# by wxWidgets.
# Creating the menubar
# Adding the 'file_menu' to the menu bar
# Adding the menu bar to the frame content
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to listen to a move change event for a
# top-level window (wx.Frame, wx.Dialog). This is MSW-specific
# Capture the mouse position (in screen coordinates) and
# assign its x, y values to the statictexts
##Andrea Gavana
#!/usr/bin/env python
# This sample creates a "File->Open" menu, and lets the user select
# a Python file. Upon selection, the file is read in memory and a new
# wx.TextCtrl showing the file content is added as a page of a wx.Notebook
# Create the notebook
# Setting up the menu
# wx.ID_OPEN
# Bind the "select menu item" event to the OnOpen event handler
# Creating the menubar
# Adding the 'file_menu' to the menu bar
# Adding the menu bar to the frame content
# This is how you pre-establish a file filter so that the dialog
# only shows the extension(s) you want it to.
# Show the dialog and retrieve the user response. If it is the OK response,
# process the data.
# This returns the file that was selected
# Open the file as read-only and slurp its content
# Create the notebook page as a wx.TextCtrl and
# add it as a page of the wx.Notebook
# Destroy the dialog. Don't do this until you are done with it!
# BAD things can happen otherwise!
##Andrea Gavana
#!/usr/bin/env python
# This sample uses the random module to draw 100 random lines iinside
# a wx.Frame client area, as a demonstration of how to handle a wx.PaintDC
# Bind a "paint" event for the frame to the
# "OnPaint" method
# Use a blue pen, for example...
# Remember the signature of wx.DC.DrawLine:
# DrawLine(x1, y1, x2, y2)
##Andrea Gavana
#!/usr/bin/env python
# This sample demonstrates a simple use of wx.Process/wx.Execute to
# monitor an external program stdout
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to create a "spli-split" window, i.e. a
# window split verticall which contains two windows split horizontally
# Create the main splitter window (to be split vertically)
# Create the second splitter window (to be split horizontally)
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to create a wx.StatusBar with 2 fields,
# set the second field to have double width with respect to the
# first and and display the date of today in the second field.
# A Statusbar in the bottom of the window
# Set it up so it has two fields
# Set the second field to be double in width wrt the first
# Get today date via datetime
# Set today date in the second field
##Andrea Gavana
#!/usr/bin/env python
# This sample classifies the Python keywords alphabetically, using the
# first letter of the keyword (i.e., ``and`` goes into ``a``, ``for``
# goes into ``f`` and so on):
#
#      * For each letter, adds a child to the treectrl root
#      * In each child of the root item, adds its corresponding keyword(s)
#
# Add the tree root
##Andrea Gavana
#!/usr/bin/env python
# This sample shows how to override OnCompareItems for wx.TreeCtrl.
# The overridden method simply compares lowercase item texts
# -*- coding: utf-8 -*-
#
# Author:   Werner F. Bruhin
# Purpose:  how to I18N enable an application
#
# Inspired by the I18N wxPython demo and the Internationalization page on
# the wxPython wiki.
#
# Install a custom displayhook to keep Python from setting the global
# _ (underscore) to the value of the last evaluated expression.  If
# we don't do this, our mapping of _ to gettext can get overwritten.
# This is useful/needed in interactive debugging with PyShell.
# add translation macro to builtin similar to what gettext does
# InspectionMixin
# work around for Python stealing "_"
# configuration folder
# win: C:\Users\userid\AppData\Roaming\appName
# nix: \home\userid\appName
# AppConfig stuff is here
# on first run we default to German
# if an unsupported language is requested default to English
# create a locale object for this language
# -*- coding: utf-8 -*-
#
# Author:  Werner F. Bruhin
# Purpose: Application constants
# Created: 06/04/2012
# language domain
# languages you want to support
# -*- coding: utf-8 -*-
# we remove English as source code strings are in English
# setup some stuff to get at Python I18N tools/utilities
# build command for pygettext
# build command for msgfmt
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# file menu
# edit menu
# help menu
# Show the dialog and retrieve the user response. If it is the
# OK response,
# process the data.
# This returns a Python list of files that were selected.
#---------------------------------------------------------------------------
# Name:        etg/aboutdlg.py
# Author:      Robin Dunn
#
# Created:     22-Mar-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/generic/aboutdlgg.h>')
#-----------------------------------------------------------------
# Add some aliases for the non-UK spelling
# Do this after doCommonTweaks so that the .License property exists first
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/accel.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     06-Sept-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2013-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Replace the implementation of the AcceleratorTable ctor so it can
# accept a Python sequence of tuples or AcceleratorEntry objects like
# Classic does. Using the arraySize and array annotations does let us
# pass a list of entries, but they have to already be AccelertorEntry
# obejcts. We want to allow Items in the list to be either
# wx.AcceleratorEntry items or a 3-tuple containing the values to pass to
# the wx.AcceleratorEntry ctor.
# Ignore the current constructor
# and add the code for the new constructor
# Mac doesn't have this, and we don't real with resource files from
# wxPython anyway.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/access.py
# Author:      Robin Dunn
#
# Created:     08-Oct-2018
# Copyright:   (c) 2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/access.h>')
#TODO: double-check this one
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/activityindicator.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2019
# Copyright:   (c) 2019 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/affinematrix2d.py
# Author:      Robin Dunn
#
# Created:     04-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/animate.py
# Author:      Robin Dunn
#
# Created:     21-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# move this before wxAnimationCtrl so it can be used for default arg values
# TODO: It would be nice to be able to use the generic verison on all
# platforms since the native GTK version has some limitations...
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/anybutton.py
# Author:      Robin Dunn
#
# Created:     03-Nov-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/app.py
# Author:      Robin Dunn
#
# Created:     22-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# and some C++ code too
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# There's no need for the command line stuff as Python has its own ways to
# deal with that
# We will use OnAssertFailure, but I don't think we should let it be
# overridden in Python.
# TODO: Decide if these should be visible from Python. They are for
# dealing with C/C++ exceptions, but perhaps we could also add the ability
# to deal with unhandled Python exceptions using these (overridable)
# methods too.
# Release the GIL for potentially blocking or long-running functions
#-------------------------------------------------------
# Add a new C++ wxPyApp class that adds empty Mac* methods for other
# platforms, and other goodies, then change the name so SIP will
# generate code wrapping this class as if it was the wxApp class seen in
# the DoxyXML.
# Now change the class name, ctors and dtor names from wxApp to wxPyApp
#ifdef __WXMAC__
#endif
#ifdef __WXMSW__
#else
#endif
# Remove the virtualness from these methods
# Methods we implement in wxPyApp beyond what are in wxApp, plus some
# overridden virtuals (or at least some that we want the wrapper
# generator to treat as if they are overridden.)
#
# TODO: Add them as etg method objects instead of a WigCode block so the
# documentation generators will see them too
# Add these methods by creating extractor objects so they can be tweaked
# like normal, their docs will be able to be generated, etc.
# Release the GIL for potentially blocking or long-running functions
#-------------------------------------------------------
# add extractor objects for the enum too
#-------------------------------------------------------
# Now add extractor objects for the main App class as a Python class,
# deriving from the wx.PyApp class that we created above. Also define the
# stdio helper class too.
# These methods provide the file-like output behaviour.
# make sure we can create a GUI
# TODO: more description is needed for wxMSW...
# This has to be done before OnInit
# Set the default handler for SIGINT.  This fixes a problem
# where if Ctrl-C is pressed in the console that started this
# app then it will not appear to do anything, (not even send
# KeyboardInterrupt???)  but will later segfault on exit.  By
# setting the default handler then the app will exit, as
# expected (depending on platform.)
# Save and redirect the stdio to a window?
# Use Python's install prefix as the default
# Until the new native control for wxMac is up to par, still use the generic one.
# This finishes the initialization of wxWindows and then calls
# the OnInit that should be present in the derived class
# Just in case the MainLoop was overridden without calling RestoreStio
# Try to set it to the same language as what is already set in the C locale
# otherwise fall back to the system default
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/apptrait.py
# Author:      Robin Dunn
#
# Created:     22-Nov-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO: Enable these as etg scripts for their return types are added
#'GetStandardPaths',
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/artprov.py
# Author:      Robin Dunn
#
# Created:     07-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# These are protected and so they are ignored by default.  Unignore them.
# deal with ownership transfers
# deprecated and removed
# Change the types of the art constants from wxString to const char*
# since that is what they really are.
# move them to the front of the module
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/auibar.py
# Author:      Robin Dunn
#
# Created:     26-Oct-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/auibook.py
# Author:      Robin Dunn
#
# Created:     26-Oct-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
# Add AuiTabCtrl in.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/auidockart.py
# Author:      Robin Dunn
#
# Created:     26-Oct-2016
# Copyright:   (c) 2016-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/auiframemanager.py
# Author:      Robin Dunn
#
# Created:     25-Oct-2016
# Copyright:   (c) 2016-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/auitabmdi.py
# Author:      Robin Dunn
#
# Created:     27-Oct-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/axbase.py
# Author:      Robin Dunn
#
# Created:     13-May-2016
# Copyright:   (c) 2016-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# The wxPyAxBaseWindow class does not come from the parsed Doxygen xml,
# instead it is manufactured entirely in this ETG script.  We're doing it
# here instead of in a raw .sip file so we can run the generators on it
# and get things like documentation and .pyi files generated like any
# normal class.
# First, output some C++ code
# Now create the extractor objects that will be run through the generators
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/bannerwindow.py
# Author:      Robin Dunn
#
# Created:     21-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/bannerwindow.h>')
# We can already do with keyword args what this ctor does for C++ people,
# so ignore it to avoid signature conflicts.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/bitmap.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     25-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO: The wxCursor version of the ctor is not implemented on OSX...
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#endif
# On MSW the bitmap handler classes are different than what is
# documented, and this causes compile errors. Nobody has needed them from
# Python thus far, so just ignore them all for now.
# This one is called from the wx startup code, it's not needed in Python
# so nuke it too since we're nuking all the others.
#module.addItem(tools.wxListWrapperTemplate('wxList', 'wxBitmapHandler', module))
#-----------------------------------------------------------------------
# Declarations, helpers and methods for converting to/from buffer objects
# with raw bitmap access.
#include "bitmap_ex.h"')
# Some bitmap factories added as static methods
#-----------------------------------------------------------------------
# For compatibility:
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/bmpbuttn.py
# Author:      Robin Dunn
#
# Created:     31-Aug-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/bmpcbox.py
# Author:      Robin Dunn
#
# Created:     05-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/bmpcbox.h>")
# The MSW and GTK version of this class derive from wxComboBox, but the
# OSX version derives from wxOwnerDrawnCombo. To make all platforms happy
# with the generated wrapper code switch the declared base with the bases
# that both of those classes have in common.
# Copy any method definitions from wx.ComboBox that are not declared here
#print([i.name for i in items])
# Ignore the old C array verison of the ctor and Create methods, and
# fixup the remaining ctor and Create with the typical default values for
# the args
# Ignore the Append and Insert taking a void* for clientData
# And set the ownership transfer for the other one
# We need to disambiguate GetStringSelection since it is implemented in
# multiple base classes
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/bookctrl.py
# Author:      Robin Dunn
#
# Created:     31-Aug-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Ignore the macro.  We'll add a Python alias in notebook.py instead.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/brush.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Set mustHaveApp on all ctors except the default ctor
#ifdef __WXMAC__
#include <wx/osx/private.h>
#endif
#ifdef __WXMAC__
#else
#endif
# The stock Brush items are documented as simple pointers, but in reality
# they are macros that evaluate to a function call that returns a brush
# pointer, and that is only valid *after* the wx.App object has been
# created. That messes up the code that SIP generates for them, so we need
# to come up with another solution. So instead we will just create
# uninitialized brush in a block of Python code, that will then be
# intialized later when the wx.App is created.
# ??
# These stock brushes will be initialized when the wx.App object is created.\n'
# it is delay-initialized, see stockgdi.sip
# Some aliases that should be phased out eventually, (sooner rather than
# later.) They are already gone (or wrapped by an #if) in the C++ code,
# and so are not found in the documentation...
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/busyinfo.py
# Author:      Robin Dunn
#
# Created:     16-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# context manager methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/button.py
# Author:      Kevin Ollivier
#
# Created:     27-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/calctrl.py
# Author:      Robin Dunn
#
# Created:     09-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# These are deprecated, will be removed later...
# We have convertFromPyObject mapping in place for parameters, so we
# don't need a full wrapper method for these.
#include <wx/generic/calctrlg.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/caret.py
# Author:      Robin Dunn
#
# Created:     17-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/checkbox.py
# Author:      Kevin Ollivier
#
# Created:     6-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Workaround warning for the property name starting with a digit
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/checklst.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     06-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# We already have the Python methods below, so just ignore this new method for now.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/choicdlg.py
# Author:      Robin Dunn
#
# Created:     30-Mar-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Make a new class so we can ignore the clientData parameter in the ctor
# ignore this ctor
# and ignore the clientData param in this one
# ignore a bunch of the standalone functions
# TODO, it might be nice to keep this one
# keep just the overloads of this function that use wxArrayString, and
# ignore the ones that have "int n"
#c = module.find('wxGetSingleChoiceIndex')
#c.mustHaveApp()
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/choice.py
# Author:      Kevin Ollivier
#
# Created:     26-Aug-2011
# Copyright:   (c) 2013 by Wide Open Technologies
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/choicebk.py
# Author:      Robin Dunn
#
# Created:     18-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/choicebk.h>')
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/clipbrd.py
# Author:      Robin Dunn
#
# Created:     09-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO: This delayed initialization wrapper class may also be useful elsewhere...
# Since wxTheClipboard is not really a global variable (it is a macro
# that calls the Get static method) we can't declare it as a global
# variable for the wrapper generator, otherwise it will try to run the
# function at module import and the wxApp object won't exist yet.  So
# we'll use a class that will allow us to delay calling the Get until
# wx.TheClipboard is actually being used for the first time.
# context manager methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/clntdatactnr.py
# Author:      Robin Dunn
#
# Created:     20-Dec-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# The [G|S]etClientData methods deal with untyped void* values, which we
# don't support. The [G|S]etClientObject methods use wxClientData instances
# which we have a MappedType for, so make the ClientData methods just be
# aliases for ClientObjects. From the Python programmer's perspective they
# would be virtually the same anyway.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/cmdproc.py
# Author:      Robin Dunn
#
# Created:     16-Jul-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/cmdproc.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/cmndata.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     15-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO: These two methods should use something other than a PyString for
# holding the data...
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/collheaderctrl.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2019
# Copyright:   (c) 2019 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/collheaderctrl.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/collpane.py
# Author:      Kevin Ollivier
#
# Created:     27-Aug-2011
# Copyright:   (c) 2013 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/collpane.h>")
# deprecated wxEVT alias
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/colordlg.py
# Author:      Robin Dunn
#
# Created:     30-Mar-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/colordlg.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etc/colour.py
# Author:      Robin Dunn
#
# Created:     19-Nov-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Add a ctor/factory for the Mac that can use the theme brush
#ifdef __WXMAC__
#include <wx/osx/private.h>
#endif
#ifdef __WXMAC__
#else
#endif
# Change this macro into a value so we wont have problems when SIP takes its
# address
#undef wxTransparentColour
# Just set mustHaveApp for the copy ctor as it may need to use the colour
# database to look up color names.
# Hide the string ctor so our typemap will be invoked for the copy ctor instead.
# We need to add a typcast
#if defined(__WXGTK3__) || defined(__WXOSX__)
#else
#endif
# Set a flag on the return value and parameter types that are 'unsigned char'
# such that they will be treated as an integer instead of a string.
# The stock Colour items are documented as simple pointers, but in
# reality they are macros that evaluate to a function call that returns a
# Colour pointer, and that is only valid *after* the wx.App object has
# been created. That messes up the code that SIP generates for them. So
# instead we will just create uninitialized colours in a block of Python
# code, that will then be initialized later when the wx.App is created.
# ??
# These stock colours will be initialized when the wx.App object is created.\n'
# Add sequence protocol methods and other goodies
# Types that can be converted to wx.Colour:
#     wxColour (duh)
#     Sequence with 3 or 4 integers
#     String with color name or #RRGGBB or #RRGGBBAA format
#     None  (converts to wxNullColour)
#'
#RRGGBB[AA]
# Just for TESTING, remove it later
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/combo.py
# Author:      Robin Dunn
#
# Created:     31-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# These are protected methods that need to be unignored and also add back
# their virtual flags
# other methods that need the virtual flag turned back on
# 'Cut', 'Copy', 'Paste', ?
# from is a reserved word
# deprecated and removed
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/combobox.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     09-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# When the from,to are set as output parameters the overloaded methods
# will be ambiguous, so let's give this one a new name.
# For SetSelection we want to keep the existing method since it is
# inherited from base classes and has no ambiguities, so just add a new
# method for SetTextSelection instead of renaming.
# The docs say to not use this one.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/commandlinkbutton.py
# Author:      Robin Dunn
#
# Created:     09-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/config.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Python takes ownership of the return value
# C++ takes ownership of the arg
#-----------------------------------------------------------------
#if wxUSE_STREAMS
#else
#endif
#-----------------------------------------------------------------
# In C++ wxConfig is a #define to some other config class. We'll let our
# backend generator believe that it's a real class with that name. It will
# end up using the wxConfig #defined in the C++ code, and will actually be
# whatever is the default config class for the platform.
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/control.py
# Author:      Kevin Ollivier
#
# Created:     26-Aug-2011
# Copyright:   (c) 2013 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/cshelp.py
# Author:      Robin Dunn
#
# Created:     06-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ctrlsub.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
# all classes abstract, no unitests needed
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Ignore the Append and Insert method overloads that we don't want to
# support. This will keep the ones that take a wxString or an
# wxArrayString, and wxClientData.
# The [G|S]etClientData methods deal with untyped void* values, which we
# don't support. The [G|S]etClientObject methods use wxClientData instances
# which we have a MappedType for, so make the ClientData methods just be
# aliases for ClientObjects. From the Python programmer's perspective they
# would be virtually the same anyway.
# Deal with transferring ownership of wxClientData objects
# for compatibility, should they be deprecated?
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/cursor.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     06-Sept-2011
# Copyright:   (c) 2013 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Set mustHaveApp on all ctors except the default ctor
# TODO: This ctor ^^ in Classic has a custom implementation for wxGTK that
# sets the hotspot. Is that still needed?
#ifdef __WXMSW__
#else
#endif""",
#ifdef __WXMSW__
#endif""",
# TODO:  Classic has MSW-only getters and setters for width, height, depth, and size.
# The stock Cursor items are documented as simple pointers, but in reality
# they are macros that evaluate to a function call that returns a cursor
# pointer, and that is only valid *after* the wx.App object has been
# created. That messes up the code that SIP generates for them, so we need
# to come up with another solution. So instead we will just create
# uninitialized cursor in a block of Python code, that will then be
# intialized later when the wx.App is created.
# ??
# These stock cursors will be initialized when the wx.App object is created.\n'
# former renamed constructors
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dataobj.py
# Author:      Kevin Ollivier
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Replace the GetAllFormats method with an implementation that returns
# the formats as a Python list
# This code will be used in the function that calls a Python implementation
# of this method. So we need to translate between the real C++ siganture
# and the Python signature.
# The overloading of SetData in wxDataObjectSimple and derived classes
# really confuses things, so in case SetData is overridden in a Python
# class then assume they want the one in DataObjectSimple without the
# format arg, and make the base class version always call the C++
# implementation instead of trying to call the Python method.
# We need to let SIP know that the pure virtuals in the base class have
# implementations in C even though they will not be used much (if at
# all.)
# Same thing for classes derived from wxDataObjectSimple.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#------------------------------------------------------------
# For initial testing only.  TODO: Remove later
# Replace the GetDataHere method with a version that uses a smarter
# Python buffer object instead of a stupid void pointer.
# This code will be used in the function that calls a Python implementation
# of this method.
# Replace the SetData method with an implementation that uses Python
# buffer objects.
# This code will be used in the function that calls a Python implementation
# of this method.
#------------------------------------------------------------
# As in wxDataObject above replace GetDataHere and SetData with methods
# that use buffer objects instead of void*, but this time we do not pass
# a DataFormat object with it.
#------------------------------------------------------------
# remove the methods having to do with allocating or owning the data buffer
#------------------------------------------------------------
#------------------------------------------------------------
#------------------------------------------------------------
# wxURLDataObject derives from wxDataObjectComposite on some platforms,
# and wxTextDataObject on others, so we need to take a least common
# denominator approach here to be able to work on all platforms.
# It also causes mismatches regarding what virtuals are available
# in the base classes. For now just ignore them for this class. If
# they really are needed then something more creative will need to
# be done.
#addSimpleVirtuals(c)
#------------------------------------------------------------
#------------------------------------------------------------
#------------------------------------------------------------
#------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dataview.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#'wxDataViewChoiceByIndexRenderer',  # only available in generic dvc
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/dataview.h>")
#-----------------------------------------------------------------
#-----------------------------------------------------------------
# Change the GetValue method to return the value instead of passing it
# through a parameter for modification.
# The DataViewItemObjectMapper class helps map from data items to Python
# objects, and is used as a base class of PyDataViewModel as a
# convenience.
# risk of conflict here... May need some more thought.
#-----------------------------------------------------------------
# Change the GetValueByRow method to return the value instead of passing
# it through a parameter for modification.
# declare implementations for base class virtuals
# Add some of the pure virtuals since there are undocumented
# implementations of them in these classes. The others will need to be
# implemented in Python classes derived from these.
# compatibility aliases
#-----------------------------------------------------------------
# TODO: This is only available when wxUSE_ACCESSIBILITY is set to 1
# Change variant getters to return the value
# Change the virtual method handler code to follow the same pattern as the
# tweaked public API, namely that the value is the return value instead of
# an out parameter.
# Add the pure virtuals since there are undocumented implementations of
# them in all these classes
#'wxDataViewChoiceByIndexRenderer',
# The SpinRenderer has a few additional pure virtuals that need to be declared
# since it derives from DataViewCustomRenderer
#-----------------------------------------------------------------
# declare the virtuals from wxSettableHeaderColumn
#-----------------------------------------------------------------
# Ownership of the python object has just been transferred to
# C++, so DecRef the C++ instance associated with this python
# reference.
# Pythonize HitTest
# TODO: add support for wxVector templates
#-----------------------------------------------------------------
# TODO: SetDataBuffer
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/datectrl.py
# Author:      Robin Dunn
#
# Created:     09-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/datectrl.h>")
# Make a copy and call it wxDatePickerCtrlGeneric so we can generate
# wrappers for both classes
# and give it a new Python name to match Classic
# now back to our regular tweaking
#include <wx/generic/datectrl.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dateevt.py
# Author:      Robin Dunn
#
# Created:     09-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/dateevt.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/stattext.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     26-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Keep only the wxSize overloads of these
# TODO: needs wxAffineMatrix2D support.
#c.find('GetTransformMatrix').ignore()
#c.find('SetTransformMatrix').ignore()
# remove wxPoint* overloads, we use the wxPointList ones
# TODO: we'll need a custom method implementation for this since there
# are multiple array parameters involved...
# Add output param annotations so the generated docstrings will be correct
# Deal with the text-extent methods. In Classic we renamed one overloaded
# method with a "Full" name, and the simpler one was left with the
# original name.  I think a simpler approach here will be to remove the
# simple version, rename the Full version as before, and then add a
# CppMethod to reimplement the simple version.
# if these fail then double-check order of parsed methods, etc.
# Set output parameters
# Update the docs to remove references to overloading, pointer values, etc.
# Now add the simpler versions of the extent methods
# Add some alternate implementations for other DC methods, in order to
# avoid using parameters as return values, etc. as well as Classic
# compatibility.
# Return the rect instead of using an output parameter
# a new instance of wxRect is being created
# Return the array instead of using an output parameter
# a new instance is being created
#ifdef __WXMSW__
#else
#endif""")
#ifdef __WXMAC__
#else
#endif""")
#ifdef __WXGTK__
#else
#endif""")
# context manager methods
# This file contains implementations of functions for quickly drawing
# lists of items on the DC. They are called from the CppMethods defined
# below, which in turn are called from the PyMethods below that.
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcbuffer.h
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/dcbuffer.h>")
# wxAutoBufferedPaintDC is documented as a class deriving from
# wxBufferedPaintDC, but on some platforms it derived directly from
# wxPaintDC. This causes compilation errors when the code tries to
# static_cast<> to a possibly incompatible base class, so we'll take a LCD
# approach and pretend that it derives directly from wxDC instead, in
# order to present a hierarchy that is valid and works on all platforms.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcclient.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcgraph.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# FIXME: Do we handle platform-specific classes, and if so, how?
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcmemory.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcmirror.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcprint.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcps.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcscreen.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dcsvg.py
# Author:      Robin Dunn
#
# Created:     2-Sept-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/debug.py
# Author:      Robin Dunn
#
# Created:     21-Dec-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# We only need a couple items from this interface file, so ignore
# everything and just enable the ones we want.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/defs.py
# Author:      Robin Dunn
#
# Created:     19-Nov-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# Just for the wxTextFileType enum
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/textfile.h>")
# tweaks for defs.h to help SIP understand the types better
# See src/wacky_ints.sip
# Correct the types for these as their values are outside the range of int
# Generate the code for these differently because they need to be
# forcibly mashed into an int in the C code
# Add some typedefs for basic wx types and others so the backend
# generator knows what they are
# Forward declarations for classes that are referenced but not defined
# yet.
#
# TODO: Remove these when the classes are added for real.
# TODO: Add these classes for real :-)
# Add some code for getting the version numbers
#include <wx/version.h>
# TODO: these should be removed someday
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dialog.py
# Author:      Kevin Ollivier
#
# Created:     26-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Uses a template, but it would be easier to reimplement it in Python if
# it is ever needed so don't bother complexifying the wrapper for it.
# Release the GIL for potentially blocking or long-running functions
# context manager methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dirctrl.py
# Author:      Robin Dunn
#
# Created:     29-Mar-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/dirctrl.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dirdlg.py
# Author:      Kevin Ollivier
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/display.py
# Author:      Robin Dunn
#
# Created:     27-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/display.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dnd.py
# Author:      Robin Dunn
#
# Created:     29-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/dnd.h>')
# Ignore the ctors taking wxIcon parameters. They are GTK only
# and we don't have an easy way yet to support platform specific
# APIs in the ctors.
# Ignore the cursor parameters. We'll need to use SetCursor or
# SetIcon instead.
# void SetCursor(wxDragResult res, const wxCursor& cursor);
#ifdef __WXGTK__
#else
#endif
# void SetIcon(wxDragResult res, const wxIcon& icon)
#ifdef __WXGTK__
#else
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/dragimag.py
# Author:      Robin Dunn
#
# Created:     09-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# make a copy and rename it to 'wxGenericDragImage'
# now add some tweaks for wxDragImage
# and for wxGenericDragImage
#include <wx/generic/dragimgg.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/editlbox.py
# Author:      Robin Dunn
#
# Created:     21-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/editlbox.h>')
# These are not in the documented C++ API. Should they be?
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/event.py
# Author:      Robin Dunn
#
# Created:     15-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#'wxThreadEvent',
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#if !wxUSE_HOTKEY
#define wxEVT_HOTKEY 0
#endif
# C macros that need to be ignored
#---------------------------------------
# wxEvtHandler
# Ignore the Connect/Disconnect and Bind/Unbind methods (and all overloads) for now.
# Connect and Disconnect methods for wxPython. Hold a reference to the
# event handler function in the event table, so we can fetch it later when
# it is time to handle the event.
# Ignore the C++ version of CallAfter. We have our own.
# TODO: If we want to support this we'll need concrete implementations of
# the template, probably using PyObject* args.
# TODO: If we don't need to use the wxEvtHandler's client data for our own
# tracking then enable these....
# We only care about overriding a few virtuals, ignore the rest.
# Release the GIL for potentially blocking or long-running functions
#---------------------------------------
# wxEvent
#---------------------------------------
# wxCommandEvent
# The [G|S]etClientData methods deal with untyped void* values, which we
# don't support. The [G|S]etClientObject methods use wxClientData instances
# which we have a MappedType for, so make the ClientData methods just be
# aliases for ClientObjects. From the Python programmer's perspective they
# would be virtually the same anyway.
#---------------------------------------
# wxKeyEvent
#---------------------------------------
# wxScrollEvent
#---------------------------------------
# wxScrollWinEvent
#---------------------------------------
# wxMouseEvent
#---------------------------------------
# wxSetCursorEvent
#---------------------------------------
# wxSizeEvent
#---------------------------------------
# wxMoveEvent
#---------------------------------------
# wxEraseEvent
#---------------------------------------
# wxFocusEvent
#---------------------------------------
# wxChildFocusEvent
#---------------------------------------
# wxActivateEvent
#---------------------------------------
# wxMenuEvent
#---------------------------------------
# wxShowEvent
# deprecated
#---------------------------------------
# wxDropFilesEvent
# wxDropFilesEvent assumes that the C array of wxString objects will
# continue to live as long as the event object does, and does not take
# ownership of the array. Unfortunately the mechanism used to turn the
# Python list into a C array will also delete it after the API call, and
# so when wxDropFilesEvent tries to access it later the memory pointer is
# bad. So we'll copy that array into a special holder class and give that
# one to the API, and also assign a Python reference to it to the event
# object, so it will get garbage collected later.
#include "arrayholder.h"')
#---------------------------------------
# wxUpdateUIEvent
#---------------------------------------
# wxMouseCaptureChangedEvent
#---------------------------------------
# wxPaletteChangedEvent
#---------------------------------------
# wxQueryNewPaletteEvent
#---------------------------------------
# wxNavigationKeyEvent
#---------------------------------------
# wxWindowCreateEvent
#---------------------------------------
# wxWindowDestroyEvent
#---------------------------------------
# wxContextMenuEvent
#---------------------------------------
# wxIconizeEvent
# deprecated and removed
# Apply common fixups for all the event classes
#---------------------------------------
# wxEventBlocker
#---------------------------------------
# wxPropagationDisabler
#---------------------------------------
# wxPropagateOnce
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/eventfilter.py
# Author:      Robin Dunn
#
# Created:     01-Dec-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/evtloop.py
# Author:      Robin Dunn
#
# Created:     22-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
# wxEventLoop is well tested in
# myYield used by other tests...
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# context manager methods
# Add declaration of the base class pure virtuals so sip knows they have
# implementations here
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/fdrepdlg.py
# Author:      Robin Dunn
#
# Created:     30-Mar-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/filectrl.py
# Author:      Robin Dunn
#
# Created:     12-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/filectrl.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/filedlg.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO: add this back. We'll need a way to pass it a callable that can be
# called from a C ExtraControlCreatorFunction function
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/filehistory.py
# Author:      Robin Dunn
#
# Created:     16-Jul-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# There is already a wxMenuList class so we have to name this one something else.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/filesys.py
# Author:      Robin Dunn
#
# Created:     25-Feb-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Make some more python-friendly versions of the AddFile methods accepting text or raw data
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/font.py
# Author:      Robin Dunn
#
# Created:     27-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Set mustHaveApp on all ctors except the default ctor
# Tweak the documentation in this constructor a little, replacing the
# link to another constructor with a simpler version of the text.
# TODO: should implement an easier way to findDocNode() the node containing what we're looking for...
# FFont factory function for backwards compatibility
# TODO, there is now an Underlined method so we can't have a
# property of the same name.
#c.addProperty('Underlined GetUnderlined SetUnderlined')
#c.addProperty('Strikethrough GetStrikethrough SetStrikethrough')
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMAC__
#else
#endif
#ifdef __WXGTK__
#else
#endif
#if wxUSE_PRIVATE_FONTS
#else
#endif
# The stock Font items are documented as simple pointers, but in reality
# they are macros that evaluate to a function call that returns a font
# pointer, and that is only valid *after* the wx.App object has been
# created. That messes up the code that SIP generates for them, so we need
# to come up with another solution. So instead we will just create
# uninitialized fonts in a block of Python code, that will then be
# initialized later when the wx.App is created.
# ??
# These stock fonts will be initialized when the wx.App object is created.\n'
# it is delay-initialized, see stockgdi.sip
# Some aliases that should be phased out eventually, (sooner rather than
# later.) They are already gone (or wrapped by an #if) in the C++ code,
# and so are not found in the documentation...
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/fontdlg.py
# Author:      Robin Dunn
#
# Created:     19-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/fontdlg.h>')
# there are two of these, ignore one of them
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/fontenum.py
# Author:      Robin Dunn
#
# Created:     19-Jun-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/fontmap.py
# Author:      Robin Dunn
#
# Created:     19-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/fontutil.py
# Author:      Robin Dunn
#
# Created:     8-Oct-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# linker errors on all but MSW...
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/frame.py
# Author:      Robin Dunn
#
# Created:     6-Dec-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# We already have a MappedType for wxArrayInt, so just tweak the
# interface to use that instead of an array size and a const int pointer.
# Add back the virtual flag for these methods.
# TODO: maybe these should go into a tools.addFrameVirtuals function?
# TODO: support this
#c.addCppMethod('wxTaskBarButton*', 'MSWGetTaskBarButton', '()',
#    doc="""\
#    MSW-specific function for accessing the taskbar button under Windows 7 or later.
#
#    Returns a :class:`wx.TaskBarButton` pointer representing the taskbar button of the
#    window under Windows 7 or later. The returned ``wx.TaskBarButton`` may be
#    used, if not ``None``, to access the functionality including thumbnail
#    representations, thumbnail toolbars, notification and status overlays,
#    and progress indicators.
#
#    This method will raise a ``NotImplemetedError`` on platforms other than MSW.
#    """,
#    body="""\
#    #ifdef __WXMSW__
#        return self->MSWGetTaskBarButton();
#    #else
#        wxPyRaiseNotImplemented();
#        return NULL;
#    #endif
#    """)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/fswatcher.py
# Author:      Robin Dunn
#
# Created:     29-Jul-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# In the C++ code the wxFSW_EVENT_UNMOUNT item is only part of the enum
# for platforms that have INOTIFY so we need to fake it elsewhere.
#include <wx/fswatcher.h>
#if wxUSE_FSWATCHER && !defined(wxHAS_INOTIFY) && !defined(wxHAVE_FSEVENTS_FILE_NOTIFICATIONS)
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/gauge.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/gbsizer.py
# Author:      Robin Dunn
#
# Created:     06-Dec-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# allow a 2 element sequence to be auto converted
# Add sequence protocol methods and other goodies
# In addition to the normal Row and Col properties let's also have lower
# case versions.
#-----------------------------------------------------------------
# allow a 2 element sequence to be auto converted
# Add sequence protocol methods and other goodies
# In addition to the normal Rowspan and Colspan properties let's also have lower
# case versions.
#-----------------------------------------------------------------
# transfer ownership of a sizer if the item is managing one
# deal with userData args in the ctors
# ignore some overloads that would be ambiguous from Python
#-----------------------------------------------------------------
# TODO: In Classic we had GetChildren return a list of wxGBSizerItems (in
# a faked out way). Figure out how to do that here too....
#module.addItem(
#    tools.wxListWrapperTemplate('wxGBSizerItemList', 'wxGBSizerItem', module, 'wxSizerItem'))
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/gdicmn.py
# Author:      Robin Dunn
#
# Created:     4-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# ignore some of these enum values
#if !defined(__WXMAC__)
#define wxCURSOR_COPY_ARROW wxCURSOR_ARROW
#endif
# these are X11 only
#---------------------------------------
# wxPoint tweaks
# Some operators are documented within the class that shouldn't be, so just
# ignore them all.
# Undo a few of those ignores for legitimate items that were
# documented correctly
# Add some method declarations for operators that really do exist. Note
# that these actually use C++ global operator functions, but we treat
# them as methods to help disambiguate implementations due to how
# multiple classes can be converted automatically to/from 2-element
# sequences.
# wxPoint typemap
# Add sequence protocol methods and other goodies
#---------------------------------------
# wxSize tweaks
# Used for testing releasing or holding the GIL in giltest.py
#c.find('wxSize').findOverload('int width, int height').releaseGIL()
#c.find('DecBy').findOverload('int dx, int dy').releaseGIL()
#c.find('IncBy').findOverload('int dx, int dy').releaseGIL()
# TODO:  How prevalent is the use of x,y properties on a size object?  Can we deprecate them?
# Take care of the same issues as wxPoint
# wxSize typemap
# Add sequence protocol methods and other goodies
#---------------------------------------
# wxRect tweaks
# take care of the same issues as wxPoint
# Because of our add-ons that make wx.Point and wx.Size act like 2-element
# sequences, and also the typecheck code that allows 2-element sequences, then
# we end up with a bit of confusion about the (Point,Point) and the
# (Point,Size) overloads of the wx.Rect constructor. The confusion can be
# dealt with by using keyword args, but I think that the (Point,Size) version
# will be used more, so reorder the overloads so it is found first.
# These methods have some overloads that will end up with the same signature
# in Python, so we have to remove one.
# wxRect typemap
# Add sequence protocol methods and other goodies
#---------------------------------------
# wxRealPoint tweaks
# take care of the same issues as wxPoint
# wxRealPoint::operator* truncates to int before assigning to the new point
# object, which seems dumb. So let's make our own implementation which
# preserves the floating point result.
# wxRealPoint typemap
# Add sequence protocol methods and other goodies
#-----------------------------------------------------------------
#'wxGetXDisplay',
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/gdiobj.py
# Author:      Robin Dunn
#
# Created:
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/geometry.py
# Author:      Robin Dunn
#
# Created:     4-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/wx.h>')
#---------------------------------------
# wxPoint2D and wxRect2D tweaks
# these have link errors
# Add sequence protocol methods and other goodies
# ignore these operator methods, since we are not wrapping the Int version
# ignore all the global operators too, there is no equivallent in Python
# Add sequence protocol methods and other goodies
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/graphics.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/gdicmn.h>')
#---------------------------------------------
#---------------------------------------------
#ifdef __WXMSW__
#if wxUSE_ENH_METAFILE
#endif
#endif
# Ensure that the target DC or image passed to Create lives as long as the
# GC does. NOTE: Since the Creates are static methods there is no self to
# associate the extra reference with, but since they are factories then
# that extra reference will be held by the return value of the factory
# instead.
# a new instance is being created
# we'll reimplement this overload as StrokeLineSegments
# Also reimplement the main StrokeLines method to reuse the same helper
# function as StrokeLineSegments
# and once more for DrawLines
# TODO: support this?
#---------------------------------------------
#---------------------------------------------
# The KeepReference annotation doesn't work for us in this case, as it will
# hold the reference in the renderer object, but it is better to hold the
# reference in the returned context object instead. Otherwise there is still
# some possibility that the held DC will be destroyed before the context.
# TODO: support this?
# TODO: support this?
#ifdef __WXMSW__
#else
#endif
#if wxUSE_GRAPHICS_DIRECT2D
#else
#endif
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
# Ignore Dashes for now
# TODO: we need to do something like wx.Pen.SetDashes, but since
# GraphicsPenInfo is transitory we can't save the reference in it to the
# holder, and the pen will not have been created yet...
#---------------------------------------------
# Use the pyNames we set for these classes in geometry.py so the old
# names do not show up in the docstrings, etc.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/grid.py
# Author:      Robin Dunn
#
# Created:     20-Dec-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
# Add a typemap for 2 element sequences
# Add sequence protocol methods and other goodies
#-----------------------------------------------------------------
# TODO: Add support for wxUnsignedToIntHashMap??
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#('EndEdit',    "virtual bool EndEdit(int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval);"),
# Fix up EndEdit so it returns newval on success or None on failure
# The Python version of EndEdit has a different signature than the
# C++ version, so we need to take care of mapping between them so the
# C++ compiler still recognizes this as a match for the virtual
# method in the base class.
# Code for Python --> C++ calls.  Make it return newval or None.
# Code for C++ --> Python calls. This is used when a C++ method
# call needs to be reflected to a call to the overridden Python
# method, so we need to translate between the real C++ signature
# and the Python signature.
# only used with the base class
#-----------------------------------------------------------------
# these are probably redundant now...
#-----------------------------------------------------------------
# The instanceCode attribute is code that is used to make a default
# instance of the class. We can't create them using the same class in
# this case because they are abstract.
#-----------------------------------------------------------------
#-----------------------------------------------------------------
# Make the GetValue methods easier to use from Python.  For example,
# instead of needing to always return a string, the GetValue in the derived
# class can return any type (as long as the renderer and editor knows how
# to deal with it, and the value can be converted to a string for display).
# SetValue is okay as-is...
# Replace these virtuals in the base class with Python methods, they just
# need to call GetValue or SetValue directly since they must already be
# implemented in the derived Python class because they are pure virtual.
# Should we add support for using generic PyObjects in the *AsCustom
# methods? I don't think it is necessary due to the GetValue
# modifications above, so for now, at least, let.s just ignore them.
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#-----------------------------------------------------------------
# This overload is deprecated, so don't generate code for it.
# The SetTable method can optionally pass ownership of the table
# object to the grid, so we need to optionally update the
# ownership of the Python proxy object to match.
# SIP will normally try to add support for overriding this method since
# it is inherited from super classes, but in this case we want it to be
# ignored (because IRL it is private in one of the intermediate classes)
# so we'll tell SIP that it is private here instead.
# Add a simpler set of names for the wxGridSelectionModes enum
#-----------------------------------------------------------------
# context manager methods
#-----------------------------------------------------------------
# The same as above but with the ability to specify an identifier
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/headercol.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/headercol.h>')
#c.abstract = True
# addAutoProperties doesn't recognize 'IsFoo' as a getter, but it still
# makes sense to use these, so add them manually.
#c.abstract = True
# This class adds some setters to go with the getters (and IsFoo) methods
# in the base class, but we can't make properties without them being in
# the current class, so we'll monkey-patch in the properties from Python
# code instead.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/headerctrl.py
# Author:      Robin Dunn
#
# Created:     29-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/headerctrl.h>')
# Uningnore the protected virtuals that are intended to be overridden in
# derived classes.
#-------------------------------------------------------
# Uningnore the protected virtuals that are indended to be overridden in
# derived classes.
# indicate the the base class virtuals have implementations here
#-------------------------------------------------------
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/help.py
# Author:      Robin Dunn
#
# Created:     06-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#"wxHelpController",        See note below
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# NOTE: Since wxHelpController is an alias for wxHtmlHelpController on
# Mac and GTK, and since we don't want to force the wx.core extension
# module to link to the wxHTML library, then we won't provide a wrapper
# for the wxHelpController 'class'. Later on when we've got all the help
# controller classes that we'll want then we can add a wxHelpController
# or factory of our own in Python code.
#c = module.find('wxHelpController')
#c.mustHaveApp()
#c.addPrivateCopyCtor()
## Add pure virtuals with implemenations here
#c.addItem(etgtools.WigCode("""\
#virtual bool DisplayBlock(long blockNo);
#virtual bool DisplayContents();
#virtual bool DisplaySection(int sectionNo);
#virtual bool KeywordSearch(const wxString& keyWord,
#                           wxHelpSearchMode mode = wxHELP_SEARCH_ALL);
#virtual bool LoadFile(const wxString& file = wxEmptyString);
#virtual bool Quit();
#"""))
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/helpctrl.py
# Author:      Robin Dunn
#
# Created:     30-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/helpdata.py
# Author:      Robin Dunn
#
# Created:     30-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/helpdlg.py
# Author:      Robin Dunn
#
# Created:     30-Oct-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/helpext.py
# Author:      Robin Dunn
#
# Created:     06-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/helpfrm.py
# Author:      Robin Dunn
#
# Created:     30-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/helpwnd.py
# Author:      Robin Dunn
#
# Created:     30-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmlcell.py
# Author:      Robin Dunn
#
# Created:     27-Oct-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmldefs.py
# Author:      Robin Dunn
#
# Created:     30-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#c = module.find('')
#assert isinstance(c, etgtools.ClassDef)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmlfilt.py
# Author:      Robin Dunn
#
# Created:     27-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#c = module.find('')
#assert isinstance(c, etgtools.ClassDef)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmllbox.py
# Author:      Robin Dunn
#
# Created:     18-Mar-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/htmllbox.h>")
# We only need one of these
# let sip know that these pure virtuals have been implemented in this class
# ignore the ctor and Create method taking the C array
# let sip know that these pure virtuals have been implemented in this class
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmlpars.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmlprint.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Ensure sip knows these virtuals are present in this class.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmltag.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmlwin.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Turn the virtual flag back on for some methods
# Declare that the pure virtuals inherited from wxHtmlWindowInterface have
# implementations here
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/htmlwinpars.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#"wxHtmlTagsModule",
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/hyperlink.py
# Author:      Robin Dunn
#
# Created:     09-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/hyperlink.h>")
# deprecated wxEVT alias
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/icon.py
# Author:      Robin Dunn
#
# Created:     14-Nov-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#endif
#ifdef __WXMSW__
#else
#endif
# For compatibility:
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/iconbndl.py
# Author:      Robin Dunn
#
# Created:     14-Nov-2011
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Ignore the overloads that require a WXHINSTANCE
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/iconloc.py
# Author:      Robin Dunn
#
# Created:     14-Nov-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/image.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     25-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#'wxQuantize',
#'wxPalette',
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO
# Ignore the ctors taking raw data buffers, so we can add in our own
# versions that are a little smarter (accept any buffer object, check
# the data length, etc.)
# Do the same for the Create method overloads that need to deal with data buffers
# And also do similar for SetData and SetAlpha
# GetData() and GetAlpha() return a copy of the image data/alpha bytes as
# a bytearray object.
# GetDataBuffer, GetAlphaBuffer provide direct access to the image's
# internal buffers as a writable buffer object.  We'll use memoryview
# objects.
# SetDataBuffer, SetAlphaBuffer tell the image to use some other memory
# buffer pointed to by a Python buffer object.
# For compatibility:
#-------------------------------------------------------
# wxImageHistogramBase doesn't actually exist
#-------------------------------------------------------
#include <wx/imaggif.h>
#include <wx/imagiff.h>
#include <wx/imagjpeg.h>
#include <wx/imagpcx.h>
#include <wx/imagpng.h>
#include <wx/imagpnm.h>
#include <wx/imagtga.h>
#include <wx/imagtiff.h>
#include <wx/imagxpm.h>
#-------------------------------------------------------
# tweak for GIFHandler
# need to include anidecod.h, otherwise use of forward declared class
# compilation errors will occur.
#include <wx/anidecod.h>")
#-------------------------------------------------------
# tweak for IFFHandler
#-------------------------------------------------------
# tweak for JPEGHandler
#-------------------------------------------------------
# tweak for PCXHandler
#-------------------------------------------------------
# tweak for PNGHandler
#-------------------------------------------------------
# tweak for PNMHandler
#-------------------------------------------------------
# tweak for TGAHandler
#-------------------------------------------------------
# tweak for TIFFHandler
#-------------------------------------------------------
# tweak for XPMHandler
#-------------------------------------------------------
# These are defines for string objects, not integers, so we can't
# generate code for them the same way as integer values. Since they are
# #defines we can't just tell SIP that they are global wxString objects
# because it will then end up taking the address of temporary values when
# it makes the getters for them. So instead we'll just make some python
# code to insert into the .py module and hope that the interface file
# always has the correct values of these options.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/imaglist.py
# Author:      Kevin Ollivier
#
# Created:     27-Aug-2011
# Copyright:   (c) 2013 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Wide Open Technologies
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/infobar.py
# Author:      Robin Dunn
#
# Created:     12-Mar-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# turn the virtualness back on for this method
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/intl.py
# Author:      Robin Dunn
#
# Created:     27-Nov-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#----------------------------------------------------------------------------
# Add the directory where the wxWidgets catalogs were installed
# to the default catalog path, if they were put in the pacakge dir.
#----------------------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/joystick.py
# Author:      Robin Dunn
#
# Created:     19-May-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/kbdstate.py
# Author:      Robin Dunn
#
# Created:     15-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# For 2.8 compatibility
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/layout.py
# Author:      Robin Dunn
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/laywin.py
# Author:      Robin Dunn
#
# Created:     26-May-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/laywin.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/listbook.py
# Author:      Robin Dunn
#
# Created:     18-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/listbook.h>')
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/listbox.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Just use the Set() method inherited from wxControlWithItems, it has the
# overload defined that works best for us
# a new instance is being created
#ifdef __WXMSW__
#endif
#ifdef __WXMSW__
#endif
#ifdef __WXMSW__
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/listctrl.py
# Author:      Robin Dunn
#
# Created:     23-Mar-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# TODO: technically this should be in its own etg script...
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Compatibility alias
#-------------------------------------------------------
#-------------------------------------------------------
# Unignore some protected virtual methods that we want to allow to be
# overridden in derived classes
#'OnGetItemColumnAttr',  # MSW only?
# Tweaks to allow passing and using a Python callable object for the sort
# compare function. First provide a sort callback function that can call the
# Python function.
#if SIZEOF_LONG >= SIZEOF_VOID_P
#else
#endif
# Next, provide an alternate implementation of SortItems that will use that callback.
# we will be using it to pass the python callback function
# SetItemData takes a long, so lets return that type from GetItemData too,
# instead of a wxUIntPtr.
# Change the semantics of GetColumn to return the item as the return
# value instead of through a parameter.
# bool GetColumn(int col, wxListItem& item) const;
# Do the same for GetItem
# bool GetItem(wxListItem& info) const;
# bool GetItemPosition(long item, wxPoint& pos) const;
# bool GetItemRect(long item, wxRect& rect, int code = wxLIST_RECT_BOUNDS) const;
# Some deprecated aliases for Classic renames
# Provide a way to determine if column ordering is possble
#ifdef wxHAS_LISTCTRL_COLUMN_ORDER
#else
#endif
# And provide implementation of those methods that will work whether or
# not wx has column ordering support
#ifdef wxHAS_LISTCTRL_COLUMN_ORDER
#else
#endif
#ifdef wxHAS_LISTCTRL_COLUMN_ORDER
#else
#endif
#ifdef wxHAS_LISTCTRL_COLUMN_ORDER
#else
#endif
#ifdef wxHAS_LISTCTRL_COLUMN_ORDER
#else
#endif
# Add some Python helper methods
# preserve all other attributes too
#if defined(__WXMSW__) || defined(__WXMAC__)
#else
#endif
#-------------------------------------------------------
#-------------------------------------------------------
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/log.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     08-Sept-2011
# Copyright:   (c) 2013 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#'wxLogStream',  # needs std::ostream
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# do not use the va_list forms of the functions
# deprecated in 2.8
# Switch the parameters to wxStrings to capitalize on the conversion code
# we already have for them. String formatting can be done in Python if
# needed. Drop the '...' too.
# we need to un-ignore these protected methods as they need to be overridable
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/mdi.py
# Author:      Robin Dunn
#
# Created:     05-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Let the generator know about these intermediate classes even though they
# are undocumented. wxTDIChildFrame is used elsewhere in the class hiearchy
# so it needs to be available.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/metafile.py
# Author:      Robin Dunn
#              Dietmar Schwertberger
#
# Created:     24-Nov-2015
# Copyright:   (c) 2015-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/mediactrl.h>')
#include <wx/uri.h>')
# the C++ class has three overloaded Load(...) methods
# for now we ignore all than the first one for loading a filename
# ignore e.g. the Load with args '(const wxURI &uri)'
# keep e.g. '(const wxString &fileName)'
# Transplant the docstrings from the ignored Load methods into the
# appropriate compatibility method
# See mediactrl.h:
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/menu.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     25-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
# We only need one of these overloads, the non-const/const is not enough
# to distinguish a unique Python signature.
# Ensure that no copy is made of the list object, so we only wrap the
# existing object and keep it owned by C++
# Don't hide the Destroy inherited from wxObject
#-----------------------------------------------------------------
#ifdef __WXMAC__
#endif
#ifdef __WXMAC__
#else
#endif
#ifdef __WXMAC__
#else
#endif
# don't transfer on other platforms, as this is a no-op there.
# deprecated and removed
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/menuitem.py
# Author:      Robin Dunn
#
# Created:     10-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# deprecated and removed
# These are MSW only. Make them be empty stubs for the other ports
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#endif
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#endif
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#endif
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#endif
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#endif
# Not implemented anywere?
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/metafile.py
# Author:      Robin Dunn
#              Dietmar Schwertberger
#
# Created:     01-Nov-2015
# Copyright:   (c) 2015-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#if !wxUSE_METAFILE
#endif
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/metafile.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/mimetype.py
# Author:      Robin Dunn
#
# Created:     16-May-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Change semantics for some methods to return values instead of using
# output parameters. This is for Classic compatibility as well as being a
# bit more pythonic.
#ifdef __WXMSW__
#endif
#-----------------------------------------------------------------
# Ignore the variadic nature of this ctor
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/minifram.py
# Author:      Robin Dunn
#
# Created:     28-Jun-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/modalhook.py
# Author:      Robin Dunn
#
# Created:     06-Jun-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/mousemanager.py
# Author:      Robin Dunn
#
# Created:     28-Jun-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/mousestate.py
# Author:      Robin Dunn
#
# Created:     15-Nov-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/msgdlg.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     24-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Several of the wxMessageDIalog methods take a
# wxMessageDialog::ButtonLabel parameter, which enables either a string or
# a Stock ID to be passed. To facilitate this same ability for Python the
# SIP types are changed to a custom type which is a MappedType which
# handles converting from the two types for us. See msgdlg_btnlabel.sip
# Make a copy of wxMessageDialog so we can generate code for
# wxGenericMessageDialog too.
# the ctor
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/nonownedwnd.py
# Author:      Robin Dunn
#
# Created:     10-Oct-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/notebook.py
# Author:      Kevin Ollivier
#
# Created:     27-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/notebook.h>')
# Aliases for the "best book" control as described in the overview
# deprecated wxEVT aliases
# Add wx.NotebookPage alias, as seen in the documentation
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/notifmsg.py
# Author:      Robin Dunn
#
# Created:     21-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# take care of some methods only available on MSW
#ifdef __WXMSW__
#else
#endif
#ifdef __WXMSW__
#else
#endif
# TODO: Also add wxGenericNotificationMessage
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/numdlg.py
# Author:      Robin Dunn
#
# Created:     21-Jan-2017
# Copyright:   (c) 2017-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/numdlg.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/object.py
# Author:      Robin Dunn
#
# Created:     9-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#--------------------------------------------------
#--------------------------------------------------
#--------------------------------------------------
# EXPERIMENTAL: By turning off the virtualness of the wxObject dtor, and
# since there are no other virtuals that we are exposing here, then all
# classes that derive from wxObject that do not have any virtuals of
# their own (or have the virtual flags turned off by the tweaker code)
# can have simpler wrappers generated for them with no extra derived
# class whose only purpose is to reflect calls to the virtual methods to
# Python implementations. (And since the only virtual is the dtor then
# that is of no real benefit to Python code since we're not overriding
# the dtor anyhow.) In addition it appears so far that none of these
# classes would ever need to have Python derived classes anyway. This
# also makes it easier and less SIP-specific to add or replace ctors in
# those classes with custom C++ code. (See wxFont and wxAcceleratorTable
# for examples.)
# TODO: Check this
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/odcombo.py
# Author:      Robin Dunn
#
# Created:     04-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/odcombo.h>')
# Ignore the old C array version of the ctor and Create methods, and
# fixup the remaining ctor and Create with the typical default values for
# the args
# Unignore the protected methods that should be overridable in Python
# wxItemContainer pure virtuals that have an implementation in this class
# wxComboCtrl virtuals that have an implementation in this class
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/overlay.py
# Author:      Robin Dunn
#
# Created:     18-May-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/palette.py
# Author:      Scott Talbert
#
# Created:     31-Jul-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Add a helper function for use with the Create method and the Ctor
# accepting RGB data.
#-----------------------------------------------------------------
# Replace the constructor accepting the arrays of RGB values with one that
# understands any Python sequence.
# Replace the Create method with one that understands any kind of Python sequence
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/panel.py
# Author:      Kevin Ollivier
#
# Created:     25-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/pen.py
# Author:      Robin Dunn
#
# Created:     31-Aug-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Set mustHaveApp on all ctors except the default ctor
# The stipple bitmap ctor is not implemented on wxGTK
# SetDashes does not take ownership of the array passed to it, yet that
# array must be kept alive as long as the pen lives, so we'll create an
# array holder object that will be associated with the pen, and that will
# delete the dashes array when it is deleted.
#c.find('SetDashes').ignore()
#include "arrayholder.h"')
# ignore the existing parameters
# add a new one
# The stock Pen items are documented as simple pointers, but in reality
# they are macros that evaluate to a function call that returns a pen
# pointer, and that is only valid *after* the wx.App object has been
# created. That messes up the code that SIP generates for them, so we need
# to come up with another solution. So instead we will just create
# uninitialized pens in a block of Python code, that will then be
# intialized later when the wx.App is created.
# ??
# These stock pens will be initialized when the wx.App object is created.\n'
# Ignore Dashes for now
# TODO: we need to do something like SetDashes above, but since PenInfo is
# transitory we can't save the reference in it to the holder, and the pen
# will not have been created yet...
# it is delay-initialized, see stockgdi.sip
# Some aliases that should be phased out eventually, (sooner rather than
# later.) They are already gone (or wrapped by an #if) in the C++ code,
# and so are not found in the documentation...
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/pickers.py
# Author:      Robin Dunn
#
# Created:     10-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#include <wx/clrpicker.h>')
# deprecated wxEVT alias
#-----------------------------------------------------------------
#include <wx/filepicker.h>')
# we'll use the [G|S]etPath methods instead so we don't have to mess with wxFileName
# we'll use the [G|S]etPath methods instead so we don't have to mess with wxFileName
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#include <wx/fontpicker.h>')
# deprecated wxEVT alias
#-----------------------------------------------------------------
# The C++ wxColourPickerCtrl uses a wx.Button for the implementation,
# but that looks and works very badly on Mac because the native
# button can't change color.  So for the Mac we'll implement our own
# picker using a wx.BitmapButton instead.
# ColourData object to be shared by all colour pickers, so they can
# share the custom colours
#--------------------------------------------------
# force a copy, in case the _colorData is shared
#--------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/platinfo.py
# Author:      Robin Dunn
#
# Created:     22-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# to avoid conflicts with wxPython's wx.PlatformInfo
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/popupwin.py
# Author:      Robin Dunn
#
# Created:     15-Dec-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/popupwin.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/position.py
# Author:      Robin Dunn
#
# Created:     20-Dec-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# (r,c) --> wxPosition typemap
# Add sequence protocol methods and other goodies
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/power.py
# Author:      Robin Dunn
#
# Created:     18-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/power.h>')
#ifndef wxHAS_POWER_EVENTS
#endif
# add context manager methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/preferences.py
# Author:      Robin Dunn
#
# Created:     28-Feb-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/printdlg.py
# Author:      Robin Dunn
#
# Created:     20-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# NOTE: They are not really dialog classes, but derive from wx.Object and
#       just happen to quack like a duck...
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/printfw.py
# Author:      Robin Dunn
#
# Created:     20-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#c.find('GetPrintPreview').isVirtual = True
# deprecated classes
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/process.py
# Author:      Robin Dunn
#
# Created:     19-Dec-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/progdlg
# Author:      Robin Dunn
#
# Created:     9-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/progdlg.h>")
#, False)
#tools.removeVirtuals(c)
# Copy methods from the generic to the native class. This is needed
# because none of the methods are declared in the interface files, and
# since on MSW some non-virtual methods are reimplemented in
# wxProgressDialogs they will not be called if SIP doesn't know about
# them. We'll copy all of them and let the C++ compiler sort things out.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propdlg.py
# Author:      Robin Dunn
#
# Created:     30-Sep-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/propdlg.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propgrid.py
# Author:      Robin Dunn
#
# Created:     23-Feb-2015
# Copyright:   (c) 2015-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# sip can't handle wxScrolled<wxControl>. See also below.
# TODO: provide a way to use a Python callable as a sort function
# Add some extra Python code to be executed when a wxPropertyGrid is
# constructed. In Classic with SWIG we did this with %pythonAppend, is
# there any better way to do it with sip than monkey-patching?
# See note in propgridiface.py
# We can't let sip create a wxScrolledControl via a typedef because of the
# differences in the parameters of the Create methods, so instead let's just
# copy the method definitions from wxScrolled<> here and let the compiler
# sort it out.
# Switch all wxVariant types to wxPGVariant, so the propgrid-specific
# version of the MappedType will be used for converting to/from Python
# objects.
# Switch wxPGVFBFlags to unsigned char
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propgridadvprops.py
# Author:      Robin Dunn
#
# Created:     25-Aug-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Fix up the ctor taking a wxArrayString to be the one with the easier and
# expected API
# Switch all wxVariant types to wxPGVariant, so the propgrid-specific
# version of the MappedType will be used for converting to/from Python
# objects.
# Switch all StringToValue and IntToValue methods to return the variant
# value instead of using it as a parameter.
# Deprecated aliases for the various helper classes in Classic
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propgriddefs.py
# Author:      Robin Dunn
#
# Created:     14-Feb-2017
# Copyright:   (c) 2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propgrideditors.py
# Author:      Robin Dunn
#
# Created:     23-Feb-2015
# Copyright:   (c) 2015-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Change the method to return the value instead of passing it
# through a parameter for modification.
# Change the virtual method handler code for GetValueFromControl to follow
# the same pattern as the tweaked public API, namely that the value is the
# return value instead of an out parameter.
# Switch all wxVariant types to wxPGVariant, so the propgrid-specific
# version of the MappedType will be used for converting to/from Python
# objects.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propgridiface.py
# Author:      Robin Dunn
#
# Created:     23-Feb-2015
# Copyright:   (c) 2015-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# These are duplicates, ignore the ones in this module
#----------------------------------------------------------
# Make a string ctor that uses the wxPython-specific version of
# the C++ class' ctor
# Make it be the first overload instead of the last
#----------------------------------------------------------
# Reorder SetPropertyValue overloads so the one taking a long int is not
# first. Mark others that could be auto-converted from int as
# "constrained" so they will only be used for that specific type. This
# should result in SetPropertyValue(id, double) only used for floats and
# not ints, or other things that can convert to int.
# Ensures an ignored item is not first,
# and then we can unignore it.
# Fix some syntax that sip doesn't like
# Tons of Python method implementations ported from Classic...
#_type2property[wx.Size] = SizeProperty
#_type2property[wx.Point] = PointProperty
#_type2property[wx.FontData] = FontDataProperty
# TODO: is this still needed?
# TODO: should these be marked as deprecated?
# Skip the parent
#----------------------------------------------------------
# wxPGPropArg is a typedef for "const wxPGPropArgCls&" so having the
# wrappers treat it as a normal type can be problematic. ("new cannot be
# applied to a reference type", etc.) Let's just ignore it and replace it
# everywhere for the real type.
# Switch all wxVariant types to wxPGVariant, so the propgrid-specific
# version of the MappedType will be used for converting to/from Python
# objects.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propgridmanager.py
# Author:      Robin Dunn
#
# Created:     31-Aug-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Add some extra Python code to be executed when a wxPropertyGridManager
# is constructed. In Classic with SWIG we did this with %pythonAppend, is
# there any better way to do it with sip than monkey-patching?
# Make sure sip knows there is an implementation of this method
# wxPGPropArg is a typedef for "const wxPGPropArgCls&" so having the
# wrappers treat it as a normal type can be problematic. ("new cannot be
# applied to a reference type", etc.) Let's just ignore it an replace it
# everywhere for the real type.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propgridpagestate.py
# Author:      Robin Dunn
#
# Created:     23-Feb-2015
# Copyright:   (c) 2015-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO: Add python iterator methods to this and other iterator classes
# Switch all wxVariant types to wxPGVariant, so the propgrid-specific
# version of the MappedType will be used for converting to/from Python
# objects.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/property.py
# Author:      Robin Dunn
#
# Created:     23-Feb-2015
# Copyright:   (c) 2015-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#---------------------------------------------------------
#---------------------------------------------------------
#---------------------------------------------------------
#---------------------------------------------------------
# The ctors are protected, so unignore them
# SIP needs to be able to make a copy of the wxPGAttributeStorage value
# but the C++ class doesn't have a copy ctor and the default will cause it
# to lose references to the variants it contains, so let's just override
# the use of the MappedType and convert it to a Python dictionary here
# instead.
# SetAttributes uses wxPGAttributeStorage too, but we'll just replace it
# with a simple Python method.
# The [G|S]etClientData methods deal with untyped void* values, which we
# don't support. The [G|S]etClientObject methods use wxClientData instances
# which we have a MappedType for, so make the ClientData methods just be
# aliases for ClientObjects. From the Python programmer's perspective they
# would be virtually the same anyway.
# deprecated and removed
#---------------------------------------------------------
#---------------------------------------------------------
#---------------------------------------------------------
# Ignore some string constants (#defines) coming from dox, and add them
# back in Python code. They are wchar_t* values and this seemed the
# simplest way to deal with them.
# 'wxPG_FILE_DIALOG_TITLE',
# 'wxPG_DIR_DIALOG_MESSAGE',
# and some other #defines with similar issues
# Switch all wxVariant types to wxPGVariant, so the propgrid-specific
# version of the MappedType will be used for converting to/from Python
# objects.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/propgridprops.py
# Author:      Robin Dunn
#
# Created:     25-Aug-2016
# Copyright:   (c) 2016-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Ignore problematic ctors, that we don't need anyway.
# Yes, there are two of them
# Ignore problematic ctors, that we don't need anyway.
# clear the parts of the docstrings that are not really applicable to Python
# Switch all wxVariant types to wxPGVariant, so the propgrid-specific
# version of the MappedType will be used for converting to/from Python
# objects.
# Switch all StringToValue and IntToValue methods to return the variant
# value instead of using it as a parameter.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/pseudodc.py
# Author:      Robin Dunn
#
# Created:     26-Jul-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# The PseudoDC class is not in wxWidgets, so there is no Doxygen XML for
# them. That means we'll have to construct the extractor objects here,
# from scratch.
#include "pseudodc.h"')
# ----------------------------------------------
# Constructor and Destructor
# ----------------------------------------------
# PseudoDC-specific functionality
#----------------------------------------------
# Methods which mirror the wxDC API
# add deprecation warnings for the old method names
# Other stuff not wrapped yet
# // Figure out a good typemap for this...
# //        Convert the first 3 args from a sequence of sequences?
# //     void DrawPolyPolygon(int n, int count[], wxPoint points[],
# //                           wxCoord xoffset = 0, wxCoord yoffset = 0,
# //                           int fillStyle = wxODDEVEN_RULE);
#
#
# DocDeclStr(
#     virtual void , SetPalette(const wxPalette& palette),
#     "If this is a window DC or memory DC, assigns the given palette to the
#     window or bitmap associated with the DC. If the argument is
#     ``wx.NullPalette``, the current palette is selected out of the device
#     context, and the original palette restored.", "
#
#     :see: `wx.Palette`");
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/pyevent.py
# Author:      Robin Dunn
#
# Created:     02-Nov-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Create a new instance of the same type as this instance and
# then invoke the C++ copy constructor to copy the C++ parts and
# any custom attributes.
#include "pyevent.h"')
# Create a new instance of the same type as this instance and
# then invoke the C++ copy constructor to copy the C++ parts and
# any custom attributes.
#include "pyevent.h"')
# TODO: Temporary testing code, get rid of this later
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/radiobox.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     16-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Avoid name clashes with base class methods with different signatures
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/radiobut.py
# Author:      Kevin Ollivier
#
# Created:     16-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/rawbmp.py
# Author:      Robin Dunn
#
# Created:     14-Aug-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# NOTE: It is intentional that there are no items in the ITEMS list. This is
# because we will not be loading any classes from the doxygen XML files here,
# but rather will be constructing the extractor objects here in this module
# instead.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/rawbmp.h>")
#addPixelDataClass(module, 'wxImagePixelData', 'wxImage', bpp=32,
#    doc="""\
#    ImagePixelData: A class providing direct access to a wx.Image's
#    internal data usign the same api as the other PixelData classes.
#    """)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
# wxPixelDataBase is the common base class of the other pixel data classes
# TODO: Try to remember why I chose to do it this way instead of directly
# returning an instance of the Iterator and giving it the methods needed
# to be a Python iterator...
# TODO: Determine how much of a performance difference not using the
# PixelFacade class would make. Not using the __iter__ makes about 0.02
# seconds difference per 100x100 bmp in samples/rawbmp/rawbmp1.py...
# this is the C++ iterator
# This class is a facade over the pixels object (using the one
# in the enclosing scope) that only allows Get() and Set() to
# be called.
# We always generate the same pf instance, but it
# accesses the pixels object which we use to iterate
# over the pixel buffer.
# This function creates a ClassDef for a PixelData class defined in C++.
# The C++ versions are template instantiations, so this allows us to
# create nearly identical classes and just substitute the image class
# name and the pixel data class name.
#itrName = 'Iterator'
# First generate the class and methods for the PixelData class
# add this class to the module
# Now do the class and methods for its C++ Iterator class
# Constructors
# Methods
# should this return the iterator?
# NOTE: For now I'm not wrapping the Red, Green, Blue and Alpha
# functions because I can't hide the premultiplying needed on wxMSW
# if only the individual components are wrapped, plus it would mean 3
# or 4 trips per pixel from Python to C++ instead of just one.
# Instead I'll add the Set and Get functions below and put the
# premultiplying in there.
# add it to the main pixel data class as a nested class
#cls.insertItem(0, icls)
# It's really a nested class, but we're pretending that it isn't (see the
# typedef above) so add it at the module level instead.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/rearrangectrl.py
# Author:      Robin Dunn
#
# Created:     25-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/rearrangectrl.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/region.py
# Author:      Robin Dunn
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Replace one of the constructors with one having a more python-friendly API
# Iterator stuff
# for Python 3
# SIP maps operator bool() to __int__, but Classic used __nonzero__. Does
# it make any difference either way?
# This is defined in the docs, but not in any of the real headers!
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/renderer.py
# Author:      Robin Dunn
#
# Created:     27-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# DrawTitleBarBitmap is not implemented on wxGTK (not even an
# empty stub) so we need to graft it into the classes in a way
# that is compilable on all platforms.
#ifdef wxHAS_DRAW_TITLE_BAR_BITMAP
#else
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ribbon_art.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ribbon_bar.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/ribbon/bar.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ribbon_buttonbar.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/ribbon/buttonbar.h>')
# Ignore the methods setting and fetching client data as a void*.  We have
# a mapped type for the wxClientData alternatives that work well and are
# hack free.
# Methods assigning wxClientData objects need to transfer ownership
# And let's change the names of the "Object" version of the methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ribbon_control.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/ribbon/control.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ribbon_gallery.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/ribbon/gallery.h>')
# Ignore the methods setting and fetching client data as a void*.  We have
# a mapped type for the wxClientData alternatives that work well and are
# hack free.
# Methods assigning wxClientData objects need to transfer ownership
# And let's change the names of the "Object" version of the methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ribbon_page.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/ribbon/page.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ribbon_panel.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/ribbon/panel.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/ribbon_toolbar.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/ribbon/toolbar.h>')
# Use wxPyUserData for the clientData values instead of a plain wxObject
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richmsgdlg.py
# Author:      Robin Dunn
#
# Created:     19-Nov-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtextbuffer.py
# Author:      Robin Dunn
#
# Created:     23-Mar-2013
# Copyright:   (c) 2013-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/richtext/richtextbuffer.h>')
# Can this even work?  Apparently it does.
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
# wxRichTextRange typemap
# Add sequence protocol methods and other goodies
#-------------------------------------------------------
# TODO: should it be an inOut?
# These are the pure virtuals in the base class. SIP needs to see that
# all the derived classes have an implementation, otherwise it will
# consider them to be ABCs.
# TODO: Some of these args are output parameters.  How should they be dealt with?
#-------------------------------------------------------
#c.find('ImportFromXML').ignore()
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
# These methods use an untyped wxList, but since we know what is in it
# we'll make a fake typed list for wxPython so we can know what kinds of
# values to get from it.
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
# More untyped wxLists
# TODO: Need a template to wrap STRING_HASH_MAP
# TODO:  Transfer ownership with AddEventHandler?  TransferBack with Remove?
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
# Ignore all Dump() methods since we don't wrap wxTextOutputStream.
# TODO: try swithcing the parameter type to wxOutputStream and then in
# the wrapper code create a wxTextOutputStream from that to pass on to
# Dump.
# Correct the type for this define as it is a float
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtextctrl.py
# Author:      Robin Dunn
#
# Created:     13-May-2013
# Copyright:   (c) 2013-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
# ignore some macros since most of this set are not simple numbers
#-----------------------------------------------------------------
#-----------------------------------------------------------------
# wxTextCtrlIface, wxScrollHelper are also bases...
# Make sure that all the methods from wxTextEntry are included. This is
# needed because we are pretending that this class only derives from
# wxControl but the real C++ class also derives from wxTextCtrlIface
# which derives from wxTextEntryBase.
# TODO: What about the wxScrollHelper base class
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtextformatdlg.py
# Author:      Robin Dunn
#
# Created:     16-May-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtexthtml.py
# Author:      Robin Dunn
#
# Created:     13-May-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Let SIP know that the pure virtuals have implementations in this class
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtextprint.py
# Author:      Robin Dunn
#
# Created:     14-May-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtextstyledlg.py
# Author:      Robin Dunn
#
# Created:     16-May-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/richtext/richtextstyledlg.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtextstyles.py
# Author:      Robin Dunn
#
# Created:     16-May-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Change def --> styleDef
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtextsymboldlg.py
# Author:      Robin Dunn
#
# Created:     16-May-2013
# Copyright:   (c) 2013-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtextxml.py
# Author:      Robin Dunn
#
# Created:     13-May-2013
# Copyright:   (c) 2013-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Let SIP know that the pure virtuals have implementations in this class
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/richtooltip.py
# Author:      Robin Dunn
#
# Created:     06-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/richtooltip.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/sashwin.py
# Author:      Robin Dunn
#
# Created:     26-May-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/sashwin.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/scrolbar.py
# Author:      Robin Dunn
#
# Created:     22-Dec-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/scrolwin.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     16-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Just ignore this one and let the already tweaked versions be inherited from wx.Window.
# Add back some virtuals that were removed in fixWindowClass
# The wxScrolledCanvas typedef will be output normally and SIP will treat
# it like a class that has a wxScrolled mix-in as one of the base classes.
# Let's add some more info to them for the doc generators.
# move it ahead of wxScrolledWindow
# wxScrolledWindow is documented as a typedef but it's actually a class.
# So we need to implement it that way here too in order to keep
# static_casts and such happy.
# First, let's add a typedef to serve as the base class of
# wxScrolledWindow, since SIP doesn't yet understand using template
# instantiations as base classes.  Setting noTypeName tells SIP to not use
# the typedef name in the actual generated code, but the typedef's type
# instead.
# Now implement the class definition
# TODO: Can/should this be used from Python? If so then fix the declaration
# so sip can understand it.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/settings.py
# Author:      Robin Dunn
#
# Created:     07-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/simplebook.py
# Author:      Robin Dunn
#
# Created:     05-Sep-2017
# Copyright:   (c) 2017-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/simplebook.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/sizer.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     26-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# ctors taking a sizer transfer ownership
# userData args transfer ownership too, and we'll use wxPyUserData
# instead of any wxObject
# these have been deprecated for a while so go ahead and get rid of them
#---------------------------------------------
# Needs wxWin 2.6 compatibility
# deprecated and removed
# For Python 3
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
#---------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/slider.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     16-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/snglinst.py
# Author:      Kevin Ollivier
#
# Created:     6-Sept-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/sound.py
# Author:      Robin Dunn
#
# Created:     15-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/sound.h>')
#include "wxpybuffer.h"')
#c.addCppCtor_sip('(wxPyBuffer* data)',
#    useDerivedName=True,
#    doc="Create a sound object from data in a memory buffer in WAV format.",
#    body="""\
#        sipCpp = new sipwxSound();
#        sipCpp->Create((size_t)data->m_len, data->m_ptr);
#        """)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/spinbutt.py
# Author:      Robin Dunn
#
# Created:     01-Nov-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/spinctrl.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     16-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/spinctrl.h>")
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/splash.py
# Author:      Robin Dunn
#
# Created:     21-May-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/splash.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/splitter.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     27-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#include <wx/splitter.h>")
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# We can do these with events so we may as well save the overhead of
# virtual methods
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/srchctrl.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     9-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/srchctrl.h>')
#ifdef __WXMAC__
#else
#endif
#ifdef __WXMAC__
#else
#endif
#ifdef __WXMAC__
#else
#endif
# The safest way to reconcile the differences in the class hierachy
# between the native wxSearchCtrl on Mac and the generic one on the other
# platforms is to just say that this class derives directly from
# wxControl (the first common ancestor) instead of wxTextCtrl, and then
# redeclare all the wxTextEntry and/or wxTextCtrlIface methods that we
# are interested in having here. That way the C++ compiler can sort out
# the proper way to call those methods and avoid calling the wrong
# implementations like would happen if try to force it another way...
# Instead of duplicating those declarations here, let's use the parser
# and tweakers we already have and then just transplant those MethodDefs
# into this ClassDef. That will then preserve things like the
# documentation and custom tweaks that would be real tedious to duplicate
# and maintain.
# Do the same with wxTextCtrl, but also remove things like the
# Constructors and Create methods first.
# get just the methods that are not ctors, dtor or Create
# Add some properties that autoProperties would not see because they are
# not using 'Get' and 'Set'
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/statbmp.py
# Author:      Kevin Ollivier
#
# Created:     26-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/statbox.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO: The window-label ctor is only available on MSW and GTK so disable
# for now. Maybe replace it with a factory function that returns None on
# OSX??
# "unfix" the 2nd ctor and Create method so the required parameter lists
# are different enough for them to be overloaded.
#for name in ['wxStaticBox', 'Create']:
#    m = c.find(name).findOverload('wxWindow *label')
#    m.find('id').default = ''
# This is intentionally not documented, but I think it would be handy to
# use from wxPython.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/statline.py
# Author:      Kevin Ollivier
#
# Created:     26-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/statline.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/stattext.py
# Author:      Kevin Ollivier
#
# Created:     26-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2017 by Totcal Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/statusbar.py
# Author:      Kevin Ollivier
#
# Created:     16-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# We already have a MappedType for wxArrayInt, so just tweak the
# interface to use that instead of an array size and a const int pointer.
# Same thing for SetStatusStyles
# For SetFieldsCount just accept the number arg, and let the user set the
# widths with SetStatusWidths like in Classic
# TODO:
#c.find('SetFieldsCount.widths').ignore()
# Change GetFieldRect to return the rectangle (for Pythonicity and Classic compatibility)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/stdpaths.py
# Author:      Kevin Ollivier
#
# Created:     27-Aug-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Since the ctor is protected we need to tell SIP how to get a default
# instance of this class
#ifdef __WXMSW__
#else
#endif
#ifndef wxHAS_STDPATHS_INSTALL_PREFIX
#else
#endif
#ifndef wxHAS_STDPATHS_INSTALL_PREFIX
#else
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/stockitem.py
# Author:      Robin Dunn
#
# Created:     28-Oct-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/stopwatch.py
# Author:      Robin Dunn
#
# Created:     21-Dec-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#c = module.find('')
#assert isinstance(c, etgtools.ClassDef)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/stream.py
# Author:      Robin Dunn
#
# Created:     18-Nov-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# These enums are declared in files that we will not be using because
# wxPython does not need the classes that are in those files. So just
# inject the enums here instead.
#-----------------------------------------------------------------
#-----------------------------------------------------------------
# Include a C++ class that can wrap a Python file-like object so it can
# be used as a wxInputStream
# Use that class for the convert code
# Add Python file-like methods so a wx.InputStream can be used as if it
# was any other Python file object.
#-----------------------------------------------------------------
# Include a C++ class that can wrap a Python file-like object so it can
# be used as a wxOutputStream
# Use that class for the convert code
# Add Python file-like methods so a wx.OutputStream can be used as if it
# was any other Python file object.
# TODO: Add a writelines(sequence) method
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/sysopt.py
# Author:      Robin Dunn
#
# Created:     07-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#c = module.find('')
#assert isinstance(c, etgtools.ClassDef)
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/taskbar.py
# Author:      Robin Dunn
#
# Created:     19-Apr-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/taskbar.h>')
#ifdef __WXMSW__
#else
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/textcompleter.py
# Author:      Robin Dunn
#
# Created:     03-Nov-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Change GetCompletions to return the wxArrayString instead of passing it
# as a parameter
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/textctrl.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     9-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Split the HitTest overloads into separately named methods since once
# the output parameters are applied they will have the same function
# signature.
#ifdef __WXMAC__
#endif
#ifdef __WXMSW__
#endif
#ifdef __WXMSW__
#endif
# Methods for "file-like" compatibility
# OSX methods for controlling native features
#ifdef __WXMAC__
#else
#endif
#ifdef __WXMAC__
#else
#endif
#ifdef __WXMAC__
#else
#endif
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/textdlg.py
# Author:      Robin Dunn
#
# Created:     10-Aug-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/textdlg.h>")
# We don't wrap wxTextValidator
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/textentry.py
# Author:      Robin Dunn
#
# Created:     03-Nov-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Re-enable virtualness for (Can)Cut/Copy/Paste/Undo/Redo
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/togglebtn.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     16-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/tglbtn.h>")
# deprecated wxEVT alias
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/timectrl.py
# Author:      Robin Dunn
#
# Created:     06-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/timectrl.h>')
# ignore the return value and set the parameters to be outputs
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/timer.py
# Author:      Robin Dunn
#
# Created:     21-Sept-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/tipdlg.py
# Author:      Robin Dunn
#
# Created:     12-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/tipdlg.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/tipwin.py
# Author:      Robin Dunn
#
# Created:     15-Dec-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# We're not going to allow the use of the windowPtr arg in the ctor
# TODO: find a way to include the rectBounds parameter while still ignoring windowPtr
# ignore this method too
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/toolbar.py
# Author:      Robin Dunn
#
# Created:     07-Mar-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Use wxPyUserData for the clientData values instead of a plain wxObject
#---------------------------------------------
# Switch all wxToolBarBase to wxToolBar
#---------------------------------------------
# Conform the help text parameters.
# Add some deprecated methods to aid with Classic compatibility.
# TODO: Which others are commonly enough used that they should be here too?
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/toolbook.py
# Author:      Robin Dunn
#
# Created:     18-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/toolbook.h>')
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/tooltip.py
# Author:      Robin Dunn
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# TODO: This is MSW only
#ifdef __WXMSW__
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/toplevel.py
# Author:      Robin Dunn
#
# Created:     4-Dec-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# what is this?
#ifdef __WXMAC__
#else
#endif
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etc/tracker.py
# Author:      Robin Dunn
#
# Created:     15-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/translation.py
# Author:      Robin Dunn
#
# Created:     07-Apr-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#"wxMsgCatalog",              TODO: Getting link errors on this
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#c = module.find('wxMsgCatalog')
#c.find('CreateFromFile').factory = True
#c.find('CreateFromData').ignore()          # Needs wxScopedCharBuffer
##c.find('CreateFromData').factory = True
#c.addPrivateCopyCtor()
# Just add a forward declaration for now
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/treebook.py
# Author:      Robin Dunn
#
# Created:     18-Jun-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/treebook.h>')
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/treectrl.py
# Author:      Robin Dunn
#
# Created:     26-Mar-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
##"wxTreeItemData",  We're using a MappedType instead
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-------------------------------------------------------
# add the void* ctor missing from the interface
# add it as an overload to the existing ctor
#-------------------------------------------------------
#-------------------------------------------------------
# Set all wxTreeItemData parameters to transfer ownership.  Is this still needed with MappedTypes?
# We can't use wxClassInfo
# Replace GetSelections with a method that returns a Python list
# size_t GetSelections(wxArrayTreeItemIds& selection) const;
# Change GetBoundingRect to return the rectangle instead of modifying the parameter.
#bool GetBoundingRect(const wxTreeItemId& item, wxRect& rect, bool textOnly = false) const;
# switch the virtualness back on for those methods that need to have it.
# transfer imagelist ownership
# Make the cookie values be returned, instead of setting it through the parameter
# TODO: These don't exist on MSW, Are they important enough that we
# should provide them for the other platforms anyway?
#-------------------------------------------------------
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/treelist.py
# Author:      Robin Dunn
#
# Created:     06-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/treelist.h>')
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#-----------------------------------------------------------------
# Change NO_IMAGE default arg values to just -1, as the pi code has
# problems when using the class name before the class is fully defined.
# transfer ownership of some parameters
# Replace GetSelections with an implementation that returns a Python list
# Set output parameter flags
# Replace NO_IMAGE with wxTreeListCtrl::NO_IMAGE in parameter default values
#-----------------------------------------------------------------
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/uiaction.py
# Author:      Robin Dunn
#
# Created:     09-Feb-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/unichar.py
# Author:      Robin Dunn
#
# Created:     25-Aug-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/unichar.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/utils.py
# Author:      Robin Dunn
#
# Created:     19-Dec-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/utils.h>')
#include <wx/power.h>')
# add context manager methods
# TODO: Can this be added back? It was removed because of compiler errors.
# deprecated and removed
# ignore all the environment related functions
# Keep just the first wxExecute overload
# add context manager methods
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/validate.py
# Author:      Robin Dunn
#
# Created:     29-Nov-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/valtext.py
# Author:      Robin Dunn
#
# Created:     25-Aug-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#module.addHeaderCode('#include <wx/some_header_file.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/vidmode.py
# Author:      Robin Dunn
#
# Created:
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/vlbox.py
# Author:      Robin Dunn
#
# Created:     14-Aug-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/vlbox.h>')
# Let the wrapper generator know that there is an implementation for this
# pure virtual inherited from the base class.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/vscrol.py
# Author:      Robin Dunn
#
# Created:     20-Dec-2011
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Ensure that SIP knows that there are implementations of these base
# class virtual methods in each of the two helper classes below.
# For this class those base methods shouldn't be overridden, (since there
# are orientation-specfic versions in the 2 superclasses) so tell SIP
# that they are private so it won't add support for them and end up with
# multiple inheritance ambiguities.
# These methods are listed in the docs for wxVScrolledWindow as present
# but deprecated, but are not actually documented so we don't see them in
# the incoming XML. Since they're deprecated lets just add simple wrappers
# here instead of formally documenting them.
# NOTE: Some of these are virtual, and there are also OnGetLineHeight and
# OnGetLinesHint protected virtual methods, but trying to support them as
# virtuals from here is causing more troubles than it is probably worth
# due to ambiguities, etc... Revisit later if people complain.
#body="return self->wxVarVScrollLegacyAdaptor::ScrollLines(lines);")
#body="return self->wxVarVScrollLegacyAdaptor::ScrollPages(pages);")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/webkit.py
# Author:      Robin Dunn
#
# Created:     22-Aug-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/html/webkit.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/webview.py
# Author:      Robin Dunn
#
# Created:     20-Nov-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/webview.h>
#if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
#include <wx/msw/webview_ie.h>
#endif
#include <wx/filesys.h>')
#if wxUSE_WEBVIEW && !defined(wxWebViewIE_H)
#endif
# Pull out the obj for wxWebViewIE so we can use it later, but not include it in the stubs
# This tweak is needed only for the stub code
# Custom code to deal with the
# wxVector<wxSharedPtr<wxWebViewHistoryItem>> return type of these two
# methods. We'll just convert them to a Python list of history items.
# Since LoadHistoryItem expects to get an actual item in the history
# list, and since we make copies of the items in the cppCode above, then
# this won't be possible to do from the Python wrappers. However, it's
# just as easy to use LoadURL to reload a history item so it's not a
# great loss.
##c.find('LoadHistoryItem.item').type = 'wxWebViewHistoryItem*'
##c.find('LoadHistoryItem.item').transfer = True
##c.find('LoadHistoryItem').setCppCode_sip(
##    "sipCpp->LoadHistoryItem(wxSharedPtr<wxWebViewHistoryItem>(item));")
# Add the MSW methods in wxWebViewIE into the main WebView class like they were before.
# Give them an implementation that doesn't matter which class they are actually located in.
#if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
#else
#endif
#if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
#else
#endif
# The emulation level is set as a per-application value in the Windows
# Registry. The way this is implemented in the C++ code we end up with the
# name of the _core extransion module in the Reistry instead of the .exe
# name, which is what is really needed.
#
# So instead of doing simple wrappers with #if checks like normal, replace
# these methods with a new implementation that does the RightThing using
# sys.executable.
#if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
#include <wx/msw/webview_ie.h>
#include <wx/msw/registry.h>
#endif
# deprecated wxEVT aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/window.py
# Author:      Robin Dunn
#
# Created:     27-Nov-2010
# Copyright:   (c) 2010-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# some helper C++ code
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Mark the stucture memebers as read-only, and make copies of the values
# when fetching them. This is to protect against cases where the
# VisualAttributes object is transient and may be GC'd while we still are
# using a reference to a C++ member value.
# First we need to let the wrapper generator know about wxWindowBase since
# AddChild and RemoveChild need to use that type in order to be virtualized.
# Now change the base class of wxWindow
# And fix the arg types we get from Doxy
# We now return you to our regularly scheduled programming...
# ignore some overloads that will be ambiguous after wrapping
# Fix ClientToScreen/ScreenToClient int * overloads
# Like the above, but these also need to transplant the docs from the
# ignored item to the non-ignored overload.
# Release the GIL for potentially blocking or long-running functions
# Add a couple wrapper functions for symmetry with the getters of the same name
# Split the overloaded GetTextExtent into two distinct methods, because the
# resulting method signatures are not different enough from the Python
# perspective.
#.findOverload('int *')
# Now do the needed tweaks for the full GetFullTextExtent
#ifdef __WXGTK__
#else
#endif
# Add some new methods
#ifdef __WXMAC__
#else
#endif
# Make the Register/UnregisterHotKey functions be available on Windows,
# and empty stubs otherwise
#if wxUSE_HOTKEY
#else
#endif
#if wxUSE_HOTKEY
#else
#endif
#if defined(__WXGTK20__) || defined(__WXGTK3__) || defined(__WXMSW__)
#endif
# For Python 3
# wxAccessbile is MSW only. Provide a NotImplemented fallback for the
# other platforms.
#if wxUSE_ACCESSIBILITY
#else
#endif
#if wxUSE_ACCESSIBILITY
#else
#endif
# Make some of the protected methods visible and overridable from Python
# transfer ownership of these parameters to the C++ object
# Change some =0 default values to =NULL so the docs will make more sense
# Transfer ownership of the wx.EvtHandler when pushing/popping them...
# ...and for Set/RemoveEventHandler too
# Define some properties using the getter and setter methods
##c.addProperty('GtkWidget GetGtkWidget')
# for compatibility with Classic
# TODO: the C++ DoEraseBackground is protected in wxMSW. We need a way to
# unprotect it, like adding a shim in the sip class...
#c.addHeaderCode("""\
#    #ifdef __WXMSW__
#    #include <wx/msw/dc.h>
#    #endif
#    """)
#c.addCppMethod('bool', 'DoEraseBackground', '(wxDC* dc)',
#    doc="Default erase background implementation.",
#    body="""\
#    #ifdef __WXMSW__
#        return self->DoEraseBackground(((wxMSWDCImpl*)dc->GetImpl())->GetHDC());
#    #else
#        dc->SetBackground(wxBrush(self->GetBackgroundColour()));
#        dc->Clear();
#        return true;
#    #endif
#    """)
# this is a nested class
#-----------------------------------------------------------------------
# Other stuff
# Add a wrapper for wxWindowList and a new iterator class for it that
# makes wxWindowList quack like a read-only Python sequence.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/windowid.py
# Author:      Robin Dunn
#
# Created:     15-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# no tweaks needed for this class
# wxWindowIDRef is not documented (and probably rightly so) but we're going
# to use it from Python anyway to help with preallocating IDs in a way that
# allows them to be reused and be also be protected from conflicts from
# other auto allocated IDs.
# First, add defintions of the existing C++ class and its elements
# Now tweak it a bit
# and finish it up by adding it to the module
# Now, let's add a new Python function to the global scope that reserves an 
# ID (or range) and returns a ref object for it. 
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/withimage.py
# Author:      Robin Dunn
#
# Created:     9-Sept-2011
# Copyright:   (c) 2011 by Wide Open Technologies
# Copyright:   (c) 2011-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#define NO_IMAGE wxWithImages::NO_IMAGE")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/wizard.py
# Author:      Robin Dunn
#
# Created:     06-Jun-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# ShowPage is undocumented and labeled "implementation only" but it seems
# too useful to ignore, so add a MethodDef for it here.
# Same for IsRunning
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/wrapsizer.py
# Author:      Robin Dunn
#
# Created:     29-Oct-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wx/wrapsizer.h>")
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/datetime.py
# Author:      Robin Dunn
#
# Created:     27-Feb-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
#"wxDateTimeHolidayAuthority",
#"wxDateTimeWorkDays",
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
# Lots of the uses of wxDateTime_t have been changed to "unsigned short"
# in the interface file, so lets go ahead and translate the rest of them
# too so there will not be any "wxDateTime_t" in Phoenix confusingly
# mixed with "unsigned short"s.
#
# Also add the class scope specifier to nested enum types for parameters
# and return values.
# ignore the #define and add it as a Python alias instead
#---------------------------------------------
# Tweaks for the wxDateTime class
# Ignore ctors with unknown types or that have overload conflicts that
# can't be distingished in Python
# careful, the one we want to keep has an 'hour' param too
# Add static factories for some of the ctors we ignored
# and give them some simple wrappers for Classic compatibility
# Fixup similar conflicts in the Set method overloads
# Unknown parameter and return types
# this overload is static, the other isn't.  Rename it?
# output the am/pm parameter values
# remove the const version of the overloaded Add's and Subtract's
# Ignore the end parameter for the Parse*() methods, and provide
# replacement implementations that don't need them. Change them to be
# like they were in Classic, returning a -1 on failure, or the number of
# characters parsed otherwise.
# Fiddle with the docstrings for ParseFormat to make them reflect the new
# reality. The other Parse*() docs refer the reader to this one, so we
# don't have to change all of them.
# find the <simplesect kind="return"> node in the last paragraph
# it has a child paragraph containing the text we need to replace
# use lowercase to avoid conflicts
# Add some code to automatically convert from a Python datetime.date or a
# datetime.datetime object
#---------------------------------------------
# Tweaks for the wxDateSpan class
#---------------------------------------------
# Tweaks for the wxTimeSpan class
#---------------------------------------------
# Convert to/from Python date objects
# the built-in typemap will convert it for us
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_adv.py
# Author:      Robin Dunn
#
# Created:     22-Mar-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "adv" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#include <wx/help.h>')
# Redo the initialization of wxModules in the case where this extension
# module is not imported until *after* the wx.App has been created.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_aui.py
# Author:      Robin Dunn
#
# Created:     25-Oct-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "aui" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#include <wx/aui/aui.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_core.py
# Author:      Robin Dunn
#
# Created:     8-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These items are in their own etg scripts
# for easier maintainability, but their class and function definitions are
# intended to be part of this module, not their own module. This also makes it
# easier to promote one of these to module status later if desired, simply
# remove it from this list of Includes, and change the MODULE value in the
# promoted script to be the same as its NAME.
# base and core stuff
# GDI and graphics
# more core
# basic windows and stuff
# controls
# toplevel and dialogs
# misc
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
# Maintain a reference to avoid GC
# if it wasn't restarted, then cleanup
# This code is inserted into the module initialization function
# Here is the function it calls
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_dataview.py
# Author:      Kevin Ollivier
#              Robin Dunn
#
# Created:     12-Sept-2011
# Copyright:   (c) 2011 by Kevin Ollivier
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These items are in their own etg scripts
# for easier maintainability, but their class and function definitions are
# intended to be part of this module, not their own module. This also makes it
# easier to promote one of these to module status later if desired, simply
# remove it from this list of Includes, and change the MODULE value in the
# promoted script to be the same as its NAME.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from setup.py for a list of sources and a list
# of additional dependencies when building this extension module
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_glcanvas.py
# Author:      Robin Dunn
#
# Created:     3-Nov-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "gl" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#-----------------------------------------------------------------
#include <wx/glcanvas.h>')
# We already have a MappedType for wxArrayInt, so just tweak the
# interfaces to use that instead of a const int pointer.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_grid.py
# Author:      Robin Dunn
#
# Created:     20-Dec-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These items are in their own etg scripts
# for easier maintainability, but their class and function definitions are
# intended to be part of this module, not their own module. This also makes it
# easier to promote one of these to module status later if desired, simply
# remove it from this list of Includes, and change the MODULE value in the
# promoted script to be the same as its NAME.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from setup.py for a list of sources and a list
# of additional dependencies when building this extension module
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_html.py
# Author:      Robin Dunn
#
# Created:     27-Oct-2012
# Copyright:   (c) 2012-2017 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "html" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#include <wx/html/htmlwin.h>
#include <wx/html/htmprint.h>
#include <wx/html/helpctrl.h>
#include <wx/html/helpwnd.h>
#include <wx/html/helpfrm.h>
#include <wx/html/helpdlg.h>
# Redo the initialization of wxModules in the case where this extension
# module is not imported until *after* the wx.App has been created.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_html2.py
# Author:      Robin Dunn
#
# Created:     20-Nov-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "webview" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_media.py
# Author:      Dietmar Schwertberger
#
# Created:     13-Nov-2015
# Copyright:   (c) 2015-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These items are in their own etg scripts
# for easier maintainability, but their class and function definitions are
# intended to be part of this module, not their own module. This also makes it
# easier to promote one of these to module status later if desired, simply
# remove it from this list of Includes, and change the MODULE value in the
# promoted script to be the same as its NAME.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# Name:        etg/_msw.py
# Author:      Dietmar Schwertberger
#
# Created:     13-Nov-2015
# Copyright:   (c) 2015-2018 by Total Control Software
# License:     wxWindows License
# ---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These items are in their own etg scripts
# for easier maintainability, but their class and function definitions are
# intended to be part of this module, not their own module. This also makes it
# easier to promote one of these to module status later if desired, simply
# remove it from this list of Includes, and change the MODULE value in the
# promoted script to be the same as its NAME.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
# ---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
# -----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
# -----------------------------------------------------------------
# -----------------------------------------------------------------
# ---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_propgrid.py
# Author:      Robin Dunn
#
# Created:     23-Feb-2015
# Copyright:   (c) 2015-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "propgrid" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#include <wx/propgrid/propgrid.h>')
#module.addItem(etgtools.DefineDef(name='wxPG_INVALID_VALUE', value='INT_MAX'))
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_ribbon.py
# Author:      Robin Dunn
#
# Created:     20-Jun-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "ribbon" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_richtext.py
# Author:      Robin Dunn
#
# Created:     27-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "richtext" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
# Redo the initialization of wxModules in the case where this extension
# module is not imported until *after* the wx.App has been created.
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_stc.py
# Author:      Robin Dunn
#
# Created:     24-Oct-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "stc" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
# Needed for some parameter defaults in this module
#-----------------------------------------------------------------
#include <wx/stc/stc.h>')
#include "wxpybuffer.h"')
# wxTextCtrlIface is also a base...
# Split the HitTest overloads into separately named methods since once
# the output parameters are applied they will have the same function
# signature.
# Replace the *Pointer methods with ones that return a memoryview object instead.
# Generate the code for this differently because it needs to be
# forcibly mashed into an int in the C code
# Make sure that all the methods from wxTextEntry and wxTextCtrl are
# included. This is needed because we are pretending that this class only
# derives from wxControl but the real C++ class also derives from
# wxTextCtrlIface which derives from wxTextEntryBase.
# Change the *RGBAImage methods to accept any buffer object
# TODO:  Add the UTF8 PyMethods from classic (see _stc_utf8_methods.py)
#-----------------------------------------------------------------
#-----------------------------------------------------------------
# Keep some of the old names
# compatibility aliases
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_webkit.py
# Author:      Robin Dunn
#
# Created:     22-Aug-2013
# Copyright:   (c) 2013-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "webview" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#-----------------------------------------------------------------
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_xml.py
# Author:      Robin Dunn
#
# Created:     28-Nov-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "xml" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
#-----------------------------------------------------------------
# we like the other overload better
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etg/_xrc.py
# Author:      Robin Dunn
#
# Created:     28-Nov-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Base name of the file to generate to for this script
# The classes and/or the basename of the Doxygen XML files to be processed by
# this script.
# The list of other ETG scripts and back-end generator modules that are
# included as part of this module. These should all be items that are put in
# the wxWidgets "xrc" library in a multi-lib build.
# Separate the list into those that are generated from ETG scripts and the
# rest. These lists can be used from the build scripts to get a list of
# sources and/or additional dependencies when building this extension module.
#---------------------------------------------------------------------------
# Parse the XML file(s) building a collection of Extractor objects
#-----------------------------------------------------------------
# Tweak the parsed meta objects in the module object as needed for
# customizing the generated code and docstrings.
#include <wxPython/wxpy_api.h>')
# Needed for some parameter defaults in this module
#include <wx/xrc/xmlres.h>')
#include <wx/fs_mem.h>')
#include "wxpybuffer.h"')
#-----------------------------------------------------------------
# Add a bit of code to the ctors to call InitAllHandlers(), for
# compatibility with Classic
#protection='public',
#-----------------------------------------------------------------
# un-ignore all the protected methods
# TODO: It looks like there may be a bug in wx here.
# Just ignore it for now.
#-----------------------------------------------------------------
# Create a factory for handling the subclass property of XRC's
# object tag.  This factory will search for the specified
# package.module.class and will try to instantiate it for XRC's
# use.  The class must support instantiation with no parameters and
# delayed creation of the UI widget (aka 2-phase create).
#-----------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etgtools/extractors.py
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# These classes simply hold various bits of information about the classes,
# methods, functions and other items in the C/C++ API being wrapped.
#---------------------------------------------------------------------------
# name of the item
# rename to this name
# skip this item
# skip this item when generating docs
# either a string or a single para Element
# collection of para Elements
# is this item deprecated
# The items list is used by some subclasses to collect items that are
# part of that item, like methods of a ClassDef, parameters in a
# MethodDef, etc.
# Pull info from the ElementTree element that is pertinent to this
# class. Should be overridden in derived classes to get what each one
# needs in addition to the base.
# Should be just one <para> element
# Don't iterate all items, just the para items found in detailedDoc,
# so that classes with a deprecated method don't likewise become deprecated.
# TODO: exclude ignored items?
# got though all items with no match
# If there are more items to be searched than what is in self.items, a
# subclass can override this to give a different list.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# These need the same attributes as VariableDef, but we use separate classes
# so we can identify what kind of element it came from originally.
#---------------------------------------------------------------------------
# TODO: Should protected items be ignored by default or should we
#       leave that up to the tweaker code or the generators?
#---------------------------------------------------------------------------
# a factory function that creates a new instance of the return value
# release the Python GIL for this function call
# hold the Python GIL for this function call
# don't make a copy of the return value, just wrap the original
# treat char types as integers
# transfer ownership of return value to C++?
# transfer ownership of return value from C++ to Python?
# ownership of 'this' pointer transfered to C++
# Use this code instead of the default wrapper
# set the NoargParser annotation
# TODO: Look at self.detailedDoc and pull out any matching
# parameter description items and assign that value as the
# briefDoc for this ParamDef object.
# We're done, there actually is only one instance of this method
# Make the first overload take the place of this node in the
# parent, and then insert this item into the parent's list again
# Just remove from the overloads list and insert it into the parent.
# In addition to ignoring this item, reorder any overloads to ensure
# the primary overload is not ignored, if possible.
# Reorder a set of overloaded functions such that the primary
# FunctionDef is one that is not ignored.
# rip appart the argsString instead of using the (empty) list of parameters
# is there a default value?
# now grab just the last word, it should be the variable name
#---------------------------------------------------------------------------
# use this ctor as the default one
# don't generate a ctor in the derived class for this ctor
# TODO: Should protected items be ignored by default or should we
#       leave that up to the tweaker code or the generators?
#---------------------------------------------------------------------------
# data type
# default value
# is it an output arg?
# is it both input and output?
# treat char types as integers
# the param is to be treated as an array
# the param is the size of the array
# transfer ownership of arg to C++?
# transfer ownership of arg from C++ to Python?
# ownership of 'this' pointer transferred to this arg
# an extra reference to the arg is held
# limit auto-conversion of similar types (like float -> int)
# we've got varags
#---------------------------------------------------------------------------
# class is a template
# base class names
# sub classes
# for the inheritance diagram
# To link sphinx output classes to enums
# .h file for this class
# is it an abstract base class?
# class is in another module
# do not generate a default constructor
# class is a singleton so don't call the dtor until the interpreter exits
# Allow the convertFrom code to handle None too.
# Code to be used to create new instances of this class
# Is this a nested class?
# if so, then this is the outer class
# Stuff that needs to be generated after the class instead of within
# it. Some back-end generators need to put stuff inside the class, and
# others need to do it outside the class definition. The generators
# can move things here for later processing when they encounter those
# items.
# This makes a reference cycle but it's okay
# TODO: Is it possible for there to be memberdef's w/o a sectiondef?
# skip any private items
# look at all overloads
# don't use ignored or static methods for propertiess
# Getters must be able to be called with no args, ensure
# that item has exactly zero args without a default value
# Setters must be able to be called with 1 arg, ensure
# that item has at least 1 arg and not more than 1 without
# a default value.
# properties must have at least a getter
# only create the prop if a method with that name does not exist, and it is a valid name
# As a convenience allow the name, getter and (optionally) the setter
# to be passed as a single string. Otherwise the args will be passed
# as-is to PropertyDef
# Read the nice comment in the method above.  Ditto.
#------------------------------------------------------------------
#------------------------------------------------------------------
# add declaration of a default constructor to this class
# add declaration of a copy constructor to this class
# add declaration of an assignment opperator to this class
# add declaration of a destructor to this class
# add declaration of a default constructor to this class
#---------------------------------------------------------------------------
# TODO: Should protected items be ignored by default or should we
#       leave that up to the tweaker code or the generators?
#---------------------------------------------------------------------------
#define with a name and a value.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Reorder the items in the module to be a little more sane, such as
# enums and other constants first, then the classes and functions (since
# they may use those constants) and then the global variables, but perhaps
# only those that have classes in this module as their type.
# template instantiations go at the end
# give everything an isCore flag
# if it doesn't have a value, it must be a macro.
# NOTE: This assumes that the #defines are numeric values.
# There will have to be some tweaking done for items that are
# not numeric...
#" + '-=' * 38 + '\n' +
# This code block was included from %s\n%s\n" % (filename, text)) +
# End of included code block\n"
#" + '-=' * 38 + '\n'            ,
#---------------------------------------------------------------------------
# Some helper functions and such
#---------------------------------------------------------------------------
# TODO: can we just use ElementTree.tostring for this function?
# will work for either briefDoc (an Element) or detailedDoc (a list)
# If the node has text then just insert the new bti as a string
# otherwise insert it as an element
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etgtools/generators.py
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# helpers
#---------------------------------------------------------------------------
# io.StringIO reads/writes unicode objects for both Python 2.7 and 3.x. For
# 2.7 we'll convert any string values to unicode objects before storing them
# in the StringIO
#---------------------------------------------------------------------------
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Name:        etgtools/map_generator.py
# Author:      Robin Dunn
#
# Created:     20-May-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
# ---------------------------------------------------------------------------
# Standard library imports
# Phoenix imports
# ---------------------------------------------------------------------------
# This is the Borg pattern, so all instances of this class actually share
# the same data attributes
# Borg part 2
# lazy load the items on first use
# Methods for reading/writing the data from/to persistent storage.
# TODO: catch JSON exception...
# Dump the data to a file in json, using a format that minimizes
# excess whitespace.
# Methods for a dictionary Facade, for convenience
# ---------------------------------------------------------------------------
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Name:        etgtools/map_generator.py
# Author:      Robin Dunn
#
# Created:     20-May-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# License:     wxWindows License
# ---------------------------------------------------------------------------
# Phoenix-specific imports
# ---------------------------------------------------------------------------
# Map names for classes, nested classes and nested enums
# are there nested classes?
# Check for nested enums too
# map names of enum types and enum elements
# TODO: Investigate if there are cases where nested enum elements
# should be tracked too.
# Also add an entry for the elements of the enum, as they are also
# names accessible from the top-level namespace.
# this handles all types that don't need special attention
# ---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etgtools/pi_generator.py
# Author:      Robin Dunn
#
# Created:     18-Oct-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# This file is generated by wxPython's PI generator.  Do not edit by hand.
#
# The *.pi files are used by WingIDE to provide more information than it is
# able to glean from introspection of extension types and methods.  They are
# not intended to be imported, executed or used for any other purpose other
# than providing info to the IDE.  If you don't use WingIDE you can safely
# ignore this file.
#
# See: https://wingware.com/doc/edit/helping-wing-analyze-code
#
# Copyright: (c) 2018 by Total Control Software
# License:   wxWindows License
#---------------------------------------------------------------------------
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# This file is generated by wxPython's PI generator.  Do not edit by hand.
#
# The *.pyi files are used by PyCharm and other development tools to provide
# more information, such as PEP 484 type hints, than it is able to glean from
# introspection of extension types and methods.  They are not intended to be
# imported, executed or used for any other purpose other than providing info
# to the tools. If you don't use use a tool that makes use of .pyi files then
# you can safely ignore this file.
#
# See: https://www.python.org/dev/peps/pep-0484/
#      https://www.jetbrains.com/help/pycharm/2016.1/type-hinting-in-pycharm.html
#
# Copyright: (c) 2018 by Total Control Software
# License:   wxWindows License
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# process the module object and its child objects
# Write the contents of the stream to the destination file
# create the file and write the header
#-- begin-%s --#' % sectionName
#-- end-%s --#' % sectionName
# not there already, add to the end
# replace the existing lines
#-----------------------------------------------------------------------
# Move all PyCode items with an order value to the beginning of the
# list as they most likely should appear before everything else.
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# we're assuming that all #defines that are not ignored are integer or string values
#-----------------------------------------------------------------------
# If it's not a template instantiation, or has not been flagged by
# the tweaker script that it should be treated as a class, then just
# ignore the typedef and return.
# Otherwise write a mock class for it that combines the template and class.
# First, extract the info we need.
# Now write the Python equivalent class for the typedef
# this should not happpen, but just in case...
#-----------------------------------------------------------------------
# write nothing for this one
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# write the class declaration and docstring
# these are the only kinds of items allowed to be items in a PyClass
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# check if there is a pi-customized version of the base class names
# check if it's a template with the template parameter as the base class
# write class declaration
# docstring
# generate nested classes
# Split the items into public and protected groups
# end of class %s\n\n' % (indent, klassName))
# use the first not ignored if there are overloads
# write the method declaration
# docstring
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etgtools/sip_generator.py
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# This is a list of types that are used as return by value or by reference
# function return types that we need to ensure are actually using pointer
# types in their CppMethodDef or cppCode wrappers.
#---------------------------------------------------------------------------
# generate SIP code from the module and its objects
# Write the contents of the stream to the destination file
#-----------------------------------------------------------------------
# write the file header
# This file is generated by wxPython's SIP generator.  Do not edit by hand.
#
# Copyright: (c) 2018 by Total Control Software
# License:   wxWindows License
# C++ code to be written to the module's header
# %Imports and %Includes
# C++ code to be written out to the generated module
# Now generate each of the items in the module
# Add code for the module initialization sections.
#-----------------------------------------------------------------------
# We only write a docstring for the first overload, otherwise
# SIP appends them all together.
# TODO: See generateMethod for an example, refactor to share code...
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# We're assuming that the #define is either an integer or a string value,
# so tell sip that's what it is.
#stream.write('printf("**** %s: %%d\\n", %s);\n' % (define.name, define.name))
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# write the class declaration and docstring
# these are the only kinds of items allowed to be items in a PyClass
#-----------------------------------------------------------------------
# Propagate mustHaveApp setting to the ctors
# write the class header
#include <%s>\n' % (indent2, inc))
# C++ code to be written to the Type's header
# C++ code to be written out to the this Type's wrapper code module
# C++ code to create a new instance of this class
# is the generator currently inside the class or after it?
# Split the items into public and protected groups
# Write enums first since they may be used as default values in
# methods or in nested classes
# Next do inner classes
# and then the ctors and the rest of the items in the class
# Now generate anything that was deferred until after the class is finished
# Apparently sip doesn't like operators to have docstrings...
# get the docstring text
#if isinstance(item, extractors.ClassDef):
#    # append the function signatures for the class constructors (if any) to the class' docstring
#    try:
#        ctor = item.find(item.name)
#        sigs = ctor.collectPySignatures()
#        if sigs:
#            text += '\n' + '\n'.join(sigs)
#    except extractors.ExtractorError:
#        pass
#else:
#    # Prepend function signature string(s) for functions and methods
#    sigs = item.collectPySignatures()
#    if sigs:
#        if text:
#            text = '\n\n' + text
#        text = '\n'.join(sigs) + text
# write the docstring directive and the text
# and save the docstring back into item in case it is needed by other
# generators later on
# We only write a docstring for the first overload, otherwise
# SIP appends them all together.
#checkOverloads = False   ## SIP now allows overloads to have %MethodCode
# generateCppMethod will have already done the overloads
# and virtual catcher code, so we can just return from
# here.
# Add a new C++ method to a class. This one adds the code as a
# separate function and then adds a call to that function in the
# MethodCode directive.
# if there are ignored parameters adjust the argsString to match
# take only the part before the =, if there is one
# remove annotations
# now get just the part after any space, * or &, which should be
# the parameter name
# First insert the method declaration
# write the docstring
# We only write a docstring for the first overload, otherwise
# SIP appends them all together.
# create the new function
# using a new stream so we can do the actual write a little later
# take only the part before the =, if there is one
# SIP will always want to use pointers for parameters
# remove annotations
# forward declare the derived class
# If the method is static then there is no sipCpp to send to
# the new function, so it should not have a self parameter.
# If the return type is in the forcePtrTypes list then make sure
# that it is a pointer, not a return by value or reference, since
# SIP almost always deals with pointers to newly allocated
# objects.
# Write the code that will call the new function
# _THREAD macros are intentionally not used in this case
# If the method is static then there is no sipCpp to send to
# the new function, so it should not have a self parameter.
# and finally, add the new function itself
# Add a new C++ method to a class without the extra generated
# function, so SIP specific stuff can be done in the function body.
#-----------------------------------------------------------------------
#---------------------------------------------------------------------------
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# Name:        etgtools/sphinx_generator.py
# Author:      Andrea Gavana
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Standard library stuff
# Phoenix-specific stuff
# Sphinx-Phoenix specific stuff
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# If it is an overloaded method and the docstrings are shared, we only return
# information about the parameter list and admonition sections
# Health check
# Health check
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
##        for param in py_parameters:
##            if param not in theargs:
##                class_name = ''
##                if hasattr(xml_item, 'className') and xml_item.className is not None:
##                    class_name = wx2Sphinx(xml_item.className)[1] + '.'
##
##                print '\n      |||  %s;%s;%s  |||\n'%(class_name[0:-1], signature, param)
##                fid = open('mismatched.txt', 'a')
##                fid.write('%s;%s;%s\n'%(class_name[0:-1], signature, param))
##                fid.close()
# -----------------------------------------------------------------------
##            print name
##            print parameter.Join()
##            print
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# Empty text or just trailing commas
# Special treatment for the versionadded
# Show both the wxPython and the wxWidgets version numbers for
# versions >= 3. That's not entirely accurate, but close enough.
# Special treatment for deprecated, wxWidgets devs do not put the version number
# Horrible hack... Why is there a </para> end tag inside the @par tag???
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# Work around for the buildbot sphinx generator which seems unable
# to find the tables...
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
#')
# end of file
#', '').strip()
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# it was :meth:
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# Sub-title in a @par doxygen tag
# Normal big title
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# -----------------------------------------------------------------------
# Some of the Extractors (xml item) will set deprecated themselves, in which case it is set as a
# non-empty string. In such cases, this branch will insert a deprecated section into the xml tree
# so that the Node Tree (see classes above) will generate the deprecated  tag on their own in self.RecurseXML
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# Only one overload, don't act like there were more
# -----------------------------------------------------------------------
# doxygen @par stuff
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# class declaration
# if '.' in fullname:
#     module = self.current_module[:-1]
#     stream.write('\n\n.. currentmodule:: %s\n\n' % module)
# ***
# ***
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# write the method declaration
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# if self.current_module.strip():
#     module = self.current_module.strip()[:-1]
#     stream.write('\n\n.. currentmodule:: %s\n\n' % module)
# -----------------------------------------------------------------------
# Crappy wxWidgets docs!!! They put the Window Styles inside the
# constructor!!!
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ---------------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# docstring
# -----------------------------------------------------------------------
# docstring
# -----------------------------------------------------------------------
# these are the only kinds of items allowed to be items in a PyClass
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# generate nested classes
#   Inspected class               Method to call           Sort order
# Build a list to check if there are any properties
# Split the items documenting the __init__ methods first
# -----------------------------------------------------------------------
# convert the names in nodeBases to fullnames
# -----------------------------------------------------------------------
##        if name.startswith("__") and "__init__" not in name:
##            return
# docstring
# -----------------------------------------------------------------------
# Skip simple wrappers unless they have a brief or a detailed doc
# -----------------------------------------------------------------------
#docstring.current_module = self.current_module
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# write nothing for this one
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# write nothing for this one
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# helpers
# ---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etgtools/swig_generator.py
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etgtools/tweaker_tools.py
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Why not __nonzero__?
# TODO: add more
# TODO: Any others?
# give these their actual name so the auto-renamer won't touch them
# By default remove the wx prefix like normal
# Otherwise, if we're not processing the core module currently then check
# if the name is local or if it resides in core. If it does then return
# the name as 'wx.Name'
# Since the real wx.core module may not exist yet, and since actually
# executing code at this point is probably a bad idea, try parsing the
# core.pyi file and pulling the top level names from it.
# Clone() in wxEvent is pure virtual, so we need to let the back-end
# know that the other event classes have an implementation for it so
# it won't think that they are abstract classes too.
# Add a private assignment operator so the back-end (if it's watching out
# for this) won't try to make copies by assignment.
# NOTE: it may be okay to just do mustHaveApp for top-level windows
# TODO: look into that possibility
# The ctor and Create method transfer ownership of the this pointer to the parent
# if a class has an empty ctor it might not have this
# if there is an id param give it a default
# if there is a pos or size parameter without a default then give it one.
# There is no need to make all the C++ virtuals overridable in Python, and
# hiding the fact that they are virtual from the backend generator will
# greatly reduce the amount of code that needs to be generated. Remove all
# the virtual flags, and then add it back to a select few.
# TLW tweaks are a little different. We use the function annotation for
# TransferThis instead of the argument annotation.
# give the id param a default value
# give title param a default too if it needs it
# in the wxSizer class it is pure-virtual
# Use wxArrayInt instead of a C array of ints.
# We already have a MappedType for wxArrayInt, so just tweak the
# interface to use that instead of an array size and a const int pointer.
# Set the Transfer annotation on the ctors, because the C++ objects
# own themselves and will delete themselves when their C++ refcount
# drops to zero.
## What about these?
#bool HasMultiplePages() const
#void UpdateWindowUI(long flags = wxUPDATE_UI_NONE);
#void DoUpdateWindowUI(wxUpdateUIEvent& event) ;
## What about these?
#('DoGetScreenPosition', 'void DoGetScreenPosition(int *x, int *y) const'),
#('DoSetVirtualSize',    'void DoSetVirtualSize( int x, int y )'),
#('DoGetVirtualSize',    'wxSize DoGetVirtualSize() const'),
#---------------------------------------------------------------------------
# The default is sip
# the current default is sphinx
# Create the code generator selected from command line args
# Toss in the PI generator too
# Now the item map generator
# And finally add the documentation generator
# run the generators
# This creates the object, but not the window
# Disable the system theme
# Now create the window
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Note: The GIL is already acquired where this code is used.
# Note: The GIL is already acquired where this code is used.
# Note: The GIL is already acquired where this code is used.
# Note: The GIL is already acquired where this code is used.
#---------------------------------------------------------------------------
# Templates for creating wrappers for type-specific wxList and wxArray classes
# *** TODO: This can probably be done in a way that is not SIP-specfic.
# Try creating extractor objects from scratch and attach cppMethods to
# them as needed, etc..
# *** TODO: This can probably be done in a way that is not SIP-specific.
# Try creating extractor objects from scratch and attach cppMethods to
# them as needed, etc..
# Same as the above, but for use with  WX_DEFINE_ARRAY_PTR
# *** TODO: This can probably be done in a way that is not SIP-specfic.
# Try creating extractor objects from scratch and attach cppMethods to
# them as needed, etc..
#---------------------------------------------------------------------------
# type helpers
#---------------------------------------------------------------------------
# Tweakers to generate C++ stubs for cases where a feature is optional. By
# generating stubs then we can still provide the wrapper classes but simply
# have them raise NotImplemented errors or whatnot.
# First add a define for the cppFlag (like wxUSE_SOME_FEATURE) so the user
# code has a way to check if an optional classis available before using it
# and getting an exception.
# Copy incoming typeValMap so it can be updated with some stock types
# Next add forward declarations of all classes in case they refer to
# each other.
# Now write code for all the items in the module.
# Add the code to the module header
# and possibly the module's C++ file
# A simple class for holding lists of code snippets for the header and
# possibily the C++ file.
#if !{}\n'.format(self.flag) +
#endif //!{}\n'.format(self.flag))
#define {}  {}'.format(define.name, define.value))
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        etgtools/__init__.py
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Mac Python actually has a buildtools module, so we need
# to make sure ours is picked up when we're not run from the
# Phoenix root dir.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# extract and add top-level elements from the XML document
# Also automatically parse the XML for the include file to get related
# typedefs, functions, enums, etc.
# Make sure though, that for interface files we only parse the one
# that belongs to this class. Otherwise, enums, etc. will be defined
# in multiple places.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        setup.py
# Purpose:     Distutils build script for wxPython (phoenix)
#
# Author:      Robin Dunn
#
# Created:     27-Mar-2013
# Copyright:   (c) 2013-2016 by Total Control Software
# License:     wxWindows License
#----------------------------------------------------------------------
#---------------------------------------------------------------------------
# This setup file is placed in the root folder of the source dist tarball,
# and will be used to help do automated builds from tools like easy_install
# or pip.  These tools expect to find at least the setup.py in the root
# folder, so let's accommodate them...
#---------------------------------------------------------------------------
# Restructure the content of the tarball so things like pip or easy_install
# know how to build stuff. To be compatible with those tools the main source
# dir needs to be the root, so move all of Phoenix/* here.
# Somewhere along the way (probably when pip untars the source tar file) any
# executable permissions set on files in the tarball gets lost. Some of them
# will break our build if they are not executable, so turn them back on.
# Now execute the real setup.py that was copied here in order to do whatever
# command was trying to be done before.
#---------------------------------------------------------------------------
# Name:        samples/combo/combo1.py
# Author:      Robin Dunn
#
# Created:     1-June-2012
# Copyright:   (c) 2012-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
#print(' '.join(args))
#----------------------------------------------------------------------
# This class is used to provide an interface between a ComboCtrl and the
# ListCtrl that is used as the popoup for the combo widget.
# The following methods are those that are overridable from the
# ComboPopup base class.  Most of them are not required, but all
# are shown here for demonstration purposes.
# This is called immediately after construction finishes.  You can
# use self.GetCombo if needed to get to the ComboCtrl instance.
# Create the popup child control.  Return true for success.
# Return the widget that is to be used for the popup
#self.log.write("ListCtrlComboPopup.GetControl")
# Called just prior to displaying the popup, you can use it to
# 'select' the current item.
# Return a string representation of the current item.
# Called immediately after the popup is shown
# Called when popup is dismissed
# This is called to custom paint in the combo control itself
# (ie. not the popup).  Default implementation draws value as
# string.
# Receives key events from the parent ComboCtrl.  Events not
# handled should be skipped, as usual.
# Implement if you need to support special action when user
# double-clicks on the parent wxComboCtrl.
# Return final size of popup. Called on every popup, just prior to OnPopup.
# minWidth = preferred minimum width for window
# prefHeight = preferred height. Only applies if > 0,
# maxHeight = max height for window, as limited by screen size
#   and should only be rounded down, if necessary.
# Return true if you want delay the call to Create until the popup
# is shown for the first time. It is more efficient, but note that
# it is often more convenient to have the control created
# immediately.
# Default returns false.
#----------------------------------------------------------------------
# Create a ComboCtrl
# Create a Popup
# Associate them with each other.  This also triggers the
# creation of the ListCtrl.
# Add some items to the listctrl.
#----------------------------------------------------------------------
#import os; print('PID:'+str(os.getpid())); raw_input("Press enter...")
#----------------------------------------------------------------------
#self.log.write('MyCustomRenderer.SetValue: %s\n' % value)
#self.log.write('MyCustomRenderer.GetValue\n')
# Return the size needed to display the value.  The renderer
# has a helper function we can use for measuring text that is
# aware of any custom attributes that may have been set for
# this item.
# we'll draw a shaded background to see if the rect correctly
# fills the cell
# And then finish up with this helper function that draws the
# text for us, dealing with alignment, font and color
# attributes, etc
# x-offset, to compensate for the rounded rectangles
# wxDataViewCellRenderState flags
# The HasEditorCtrl, CreateEditorCtrl and GetValueFromEditorCtrl
# methods need to be implemented if this renderer is going to
# support in-place editing of the cell value, otherwise they can
# be omitted.
# select the text and put the caret at the end
# The LeftClick and Activate methods serve as notifications
# letting you know that the user has either clicked or
# double-clicked on an item.  Implementing them in your renderer
# is optional.
#----------------------------------------------------------------------
# To help focus this sample on the custom renderer, we'll reuse the
# model class from another sample.
# Create a dataview control
#| dv.DV_HORIZ_RULES
# Create an instance of the model
# Now we create some columns.
# We'll use our custom renderer for these columns
# Layout
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Just a little helper function to make an empty image for our
# model to use.
#----------------------------------------------------------------------
# We'll use instaces of these classes to hold our music data. Items in the
# tree will get associated back to the coresponding Song or Genre object.
# get a random date value
#----------------------------------------------------------------------
# This model acts as a bridge between the DataViewCtrl and the music data, and
# organizes it hierarchically as a collection of Genres, each of which is a
# collection of songs.
# This model provides these data columns:
#
#     0. Genre:   string
#     1. Artist:  string
#     2. Title:   string
#     3. id:      integer
#     4. Aquired: date
#     5. Liked:   bool
#
# The PyDataViewModel derives from both DataViewModel and from
# DataViewItemObjectMapper, which has methods that help associate
# data view items with Python objects. Normally a dictionary is used
# so any Python object can be used as data nodes. If the data nodes
# are weak-referencable then the objmapper can use a
# WeakValueDictionary instead.
# Report how many columns this model provides data for.
# The view calls this method to find the children of any node in the
# control. There is an implicit hidden root node, and the top level
# item(s) should be reported as children of this node. A List view
# simply provides all items as children of this hidden root. A Tree
# view adds additional items as children of the other items, as needed,
# to provide the tree hierachy.
# If the parent item is invalid then it represents the hidden root
# item, so we'll use the genre objects as its children and they will
# end up being the collection of visible roots in our tree.
# Otherwise we'll fetch the python object associated with the parent
# item and make DV items for each of it's child objects.
# Return True if the item has children, False otherwise.
# The hidden root is a container
# and in this model the genre objects are containers
# but everything else (the song objects) are not
# Return the item which is this item's parent.
##self.log.write("GetParent\n")
# Return the value to be displayed for this item and column. For this
# example we'll just pull the values from the data objects we
# associated with the items in GetChildren.
# Fetch the data object for this item.
# We'll only use the first column for the Genre objects,
# for the other columns lets just return empty values
# TODO: There should be some way to indicate a null value...
##self.log.write('GetAttr')
# We're not allowing edits in column zero (see below) so we just need
# to deal with Song objects and cols 1 - 5
#----------------------------------------------------------------------
# Create a dataview control
# nice alternating bg colors
#| dv.DV_HORIZ_RULES
# Create an instance of our model...
# Tel the DVC to use the model
# Define the columns that we want in the view.  Notice the
# parameter which tells the view which col in the data model to pull
# values from for each view column.
# title
# renderer
# data model column
# Notice how we pull the data from col 3, but this is the 6th col
# added to the DVC. The order of the view columns is not dependent on
# the order of the model columns at all.
# Set some additional attributes for all the columns
#----------------------------------------------------------------------
# our data structure will be a collection of Genres, each of which is a
# collection of Songs
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This model class provides the data to the view when it is asked for.
# Since it is a list-only model (no hierachical data) then it is able
# to be referenced by row rather than by item object, so in this way
# it is easier to comprehend and use than other model types.  In this
# example we also provide a Compare function to assist with sorting of
# items in our model.  Notice that the data items in the data model
# object don't ever change position due to a sort or column
# reordering.  The view manages all of that and maps view rows and
# columns to the model's rows and columns as needed.
#
# For this example our data is stored in a simple list of lists.  In
# real life you can use whatever you want or need to hold your data.
# This method is called to provide the data object for a
# particular row,col
# This method is called when the user edits a data item in the view.
# Report how many columns this model provides data for.
# Specify the data type for a column
# Report the number of rows in the model
#self.log.write('GetCount')
# Called to check if non-standard attributes should be used in the
# cell at (row, col)
##self.log.write('GetAttrByRow: (%d, %d)' % (row, col))
# This is called to assist with sorting the data in the view.  The
# first two args are instances of the DataViewItem class, so we
# need to convert them to row numbers with the GetRow method.
# Then it's just a matter of fetching the right values from our
# data set and comparing them.  The return value is -1, 0, or 1,
# just like Python's cmp() function.
# swap sort order?
# make a copy since we'll be sorting(mutating) the list
# use reverse order so the indexes don't change as we remove items
# remove it from our data structure
# notify the view(s) using this model that it has been removed
# update data structure
# notify views
# Create a dataview control
# nice alternating bg colors
#| dv.DV_HORIZ_RULES
# Create an instance of our simple model...
# ...and associate it with the dataview control.  Models can
# be shared between multiple DataViewCtrls, so this does not
# assign ownership like many things in wx do.  There is some
# internal reference counting happening so you don't really
# need to hold a reference to it either, but we do for this
# example so we can fiddle with the model from the widget
# inspector or whatever.
# Now we create some columns.  The second parameter is the
# column number within the model that the DataViewColumn will
# fetch the data from.  This means that you can have views
# using the same model that show different columns of data, or
# that they can be in a different order than in the model.
# There are Prepend methods too, and also convenience methods
# for other data types but we are only using strings in this
# example.  You can also create a DataViewColumn object
# yourself and then just use AppendColumn or PrependColumn.
# The DataViewColumn object is returned from the Append and
# Prepend methods, and we can modify some of it's properties
# like this.
# Through the magic of Python we can also access the columns
# as a list via the Columns property.  Here we'll mark them
# all as sortable and reorderable.
# Let's change our minds and not let the first col be moved.
# set the Sizer property (same as SetSizer)
# Add some buttons to help out with the tests
# Bind some events so we can see what the DVC sends us
# Remove the selected row(s) from the model. The model will take care
# of notifying the view (and any other observers) that the change has
# happened.
# Add some bogus data to a new row in the model's data
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# doodle.py
#----------------------------------------------------------------------
# hook some mouse events
# the window resize event and idle events for managing the buffer
# and the refresh event
# When the window is destroyed, clean up resources.
# These two event handlers are called before the menu is displayed
# to determine which items should be checked.
# Create a buffered paint DC.  It will create the real
# wx.PaintDC and then blit the bitmap to it when dc is
# deleted.  Since we don't need to draw anything else
# here that's all there is to it.
# Event handlers for the popup menu, uses the event ID to determine
# the colour or the thickness to set.
# Observer pattern.  Listeners are registered and then notified
# whenever doodle settings change.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#---------------------------------------------------------------------------
# This setup file serves as a model for how to structure your
# distutils setup files for making self-updating applications using
# Esky.  When you run this script use
#
#    python setup.py bdist_esky
#
# Esky will then use py2app or py2exe as appropriate to create the
# bundled application and also its own shell that will help manage
# doing the updates.  See wx.lib.softwareupdate for the class you can
# use to add self-updates to your applications, and you can see how
# that code is used here in the superdoodle.py module.
#---------------------------------------------------------------------------
# platform specific settings for Windows/py2exe
# platform specific settings for Mac/py2app
# Common settings    
# Build the app and the esky bundle
# superdoodle.py
# for generic button classes
#----------------------------------------------------------------------
# There are standard IDs for the menu items we need in this app, or we
# could have used wx.NewId() to autogenerate some new unique ID values
# instead.
# Create a sizer to layout the two windows side-by-side.
# Both will grow vertically, the doodle window will grow
# horizontally as well.
# Tell the frame that it should layout itself in response to
# size events using this sizer.
# create the file menu
# Using the "\tKeyName" syntax automatically creates a
# wx.AcceleratorTable for this frame and binds the keys to
# the menu items.
# and the help menu
# and add them to a menubar
#----------------------------------------------------------------------
# Make a grid of buttons for each colour.  Attach each button
# event to self.OnSetColour.  The button ID is the same as the
# key in the colour dictionary.
# Make a grid of buttons for the thicknesses.  Attach each button
# event to self.OnSetThickness.  The button ID is the same as the
# thickness value.
# Make a colour indicator window, it is registerd as a listener
# with the doodle window so it will be notified when the settings
# change
# Make a box sizer and put the two grids and the indicator
# window in it.
# Resize this window so it is just large enough for the
# minimum requirements of the sizer.
# untoggle the old colour button
# set the new colour
# untoggle the old thickness button
# set the new colour
#----------------------------------------------------------------------
# generate a paint event
#----------------------------------------------------------------------
#60acac">
#455481" width="100%%" cellspacing="0"
# Set up the layout with a Sizer
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# for InspectionMixin
#----------------------------------------------------------------------
# super makes the same as wx.Panel.__init__(self, parent, etc..)
# but prepares for Python 3.0 among other things...
# the Pycrust shell object
# pycrust = wx.TextCtrl(self, -1, intro)
#!/usr/bin/env python
## import local version:
#ver = 'local'
## import the installed version
## import a local version
## Set up the MenuBar
# Other event handlers:
# Add the Canvas
# Some Polygons in the background:
#        for i in range(500):
#            points = RandomArray.uniform(-100,100,(10,2))
#        for i in range(1):
## Pointset
#shift = RandomArray.randint(0,0,(2,))
# -b": #New segment begining
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
#MaxValue = 2**24
# center gets ignored in this case
# Add the Canvas
#self.Canvas.ScaleWorldToPixel = ScaleWorldToPixel
# add an X axis
# Add a couple a button the Toolbar
#        PlayButton = wx.Button(tb, wx.ID_ANY, "Run")
#        tb.AddControl(PlayButton)
#        PlayButton.Bind(wx.EVT_BUTTON, self.RunTest)
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
# loop though the objects associated with this event
#Create object list for holding multiple objects
#Create list for holding the indexes
#Convert to the correct coords
#Get Mouse Event Position
#First try the foreground index and add the length of the background index
#to account for the two 'layers' that already exist in the code
#Now check background if not found in foreground
#append the index found
#If no objects then do nothing
#Get the highest index object
# Add the Canvas
# the default is 1
#the default is True
#!/usr/bin/env python
#### import local version:
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
## import the installed version
### These utilities are required to load and save BNA data.
#print("Loading:", filename)
## Set up the MenuBar
# Add the Canvas
#fixme: This feels very inelegant!
# Draw points on the Vertices of the Selected Poly:
# make it a bit easier to hit
#raise
##frame.LoadBNA("Tests/Small.bna")
# put in True if you want output to go to it's own window.
#!/usr/bin/env python
## import local version:
#ver = 'local'
## import the installed version
## import a local version
# Borrowed from MovingElements.py
## Set up the MenuBar
# Add the  buttons
# Add the Canvas
# lay it out:
#Add the floor
# add the wall:
# add the ball:
# to capture the mouse to move the ball
# radius in cm
# don't do this if the user is moving it
# apply drag
# apply gravity
# move the ball
# check if it's on the wall
#reverse velocity
# check if it's hit the floor
#reverse velocity
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
#        Canvas = FloatCanvas.FloatCanvas(self,-1,
#                                     size = (500,500),
#                                     ProjectionFun = None,
#                                     Debug = 0,
#                                     BackgroundColor = "White",
#                                     )
# Some default sizes:
# put in the rows:
# put a dashed line in every 1 unit:
# or "Dot", "ShortDash", "LongDash","ShortDash", "DotDash"
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import FloatCanvas as FC
# Add the Canvas
# build the squares:
# set a random color
#!/usr/bin/env python
# see if there is a local FloatCanvas to use
# Use the wxPython lib one
# Add the Canvas
#!/usr/bin/env python
## import a local version
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas, Resources, Utilities, GUIMode
#from floatcanvas.Utilities import GUI
## import the installed version
# Add the Canvas
# Add some buttons to the Toolbar
# Initialize a few values
# huh?
#!/usr/bin/env python
# See if there is a local copy
# Add the Canvas
# Crosses:
#Dots:
#Grid = FloatCanvas.DotGrid( (0.5, 1), Size=3, Color="Red")
#Canvas.GridOver = Grid
# true to get its own output window.
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
## create a few Objects:
## create another Groups of objects
# Add a couple of tools to the Canvas Toolbar
#        tb.AddSeparator()
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
## create a few Objects:
## create another Groups of objects
# Add a couple of tools to the Canvas Toolbar
#        tb.AddSeparator()
#!/usr/bin/env python
## import local version:
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
## import installed version
# Add the Canvas
# get a list of colors for random colors
# scale the hexagon
#print(Points)
# shift the hexagon
#print(Points)
#cf = 55
#print("BrushList is: %i long"%len(H.BrushList))
#!/usr/bin/env python
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
# the default is 1
#the default is True
# default is 1
# defualt is True
#!/usr/bin/env python
## import local version:
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
## import installed version
## Set up the MenuBar
# Add the Canvas
# get a list of colors for random colors
# Set some zoom limits:
#### Draw a few Random Objects ####
# Rectangles
# Ellipses
# Circles
# %i"%(i),
# Lines
# Polygons
# Clear the  zoom limits:
#Add a Hitable rectangle
## A set of Rectangles that move together
## NOTE: In a real app, it might be better to create a new
## custom FloatCanvas DrawObject
## Here is how you catch FloatCanvas mouse events
#!/usr/bin/env python
# See if there is a local copy
# Layout
#self.SetTopWindow(frame)
#!/usr/bin/env python
#ver = 'local'
## import the installed version
## import a local version
## here we create some new mixins:
## All we need to do is is inherit from:
##  ScaledBitmap, MovingObjectMixin and ConnectorObjectMixin
## All we need to do is is inherit from:
##  ScaledBitmap, MovingObjectMixin and ConnectorObjectMixin
## All we need to do is is inherit from:
##  ScaledBitmap, MovingObjectMixin and ConnectorObjectMixin
##fixme: this should be added to the Main FloatCanvas Objects some day.
## Override the default OutlinePoints
# Add the Canvas
## create the bitmaps first
## then add them to the Canvas, so they are on top of the line
# Draw the Moving Object:
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
## Set up the MenuBar
# Add the Canvas
# Add a couple of tools to the Canvas Toolbar
# Draw the Axis
# Note: the AddRectangle Parameters all have sensible
# defaults. I've put them all here explicitly, so you can see
# what the options are.
# Add a phantom rectangle to get the bounding box right
#  (the bounding box doesn't get unscaled text right)
#fake move
#!/usr/bin/env python
#ver = 'local'
## import the installed version
## import a local version
## here we create a new DrawObject:
##  code borrowed and adapted from Werner Bruhin
# Add the Canvas
# Draw the Moving Triangle:
## The Move function has jsut been added
## to the FloatCanvas PointsObject
## It does the next three lines for you.
#self.Tri.Points += dxy
#self.Tri.BoundingBox += dxy
#self.Canvas.BoundingBoxDirty = True
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
#!/usr/bin/env python
# See if there is a local copy
## maybe inpliment this...
#if self.TextWidth is None or self.TextHeight is None:
#    (self.TextWidth, self.TextHeight) = dc.GetTextExtent(self.String)
#XY = self.ShiftFun(XY[0], XY[1], self.TextWidth, self.TextHeight)
# Add the Canvas
# true to get its own output window.
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
#from floatcanvas.SpecialObjects import PieChart
# Add the Canvas
# test default colors
# missng slice!
# Test the styles
#!/usr/bin/env python
# See if there is a local copy
# Add the Canvas
# true to get its own output window.
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
#!/usr/bin/env python
# import a local copy:
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
## Set up the MenuBar
# Add the Canvas
#fixme: This feels very inelegant!
## if a point was selected, it's not anymore
## If a click happens outside the polygon, it's no longer selected
# Create a couple of random Polygons
# Draw points on the Vertices of the Selected Poly:
#%i hit"%PointSet.Index)
#Index = PointSet.Index
# put in True if you want output to go to it's own window.
#!/usr/bin/env python
#ver = 'local'
## import the installed version
## import a local version
## here we create some new mixins:
## fixme: These really belong in floatcanvas package -- but I kind of want to clean it up some first
## All we need to do is is inherit from:
##  ScaledBitmap, MovingObjectMixin and ConnectorObjectMixin
## All we need to do is is inherit from:
##  Circle MovingObjectMixin and ConnectorObjectMixin
## All we need to do is is inherit from:
##  ScaledBitmap, MovingObjectMixin and ConnectorObjectMixin
## All we need to do is is inherit from:
##  ScaledBitmap, MovingObjectMixin and ConnectorObjectMixin
##fixme: this should be added to the Main FloatCanvas Objects some day.
## Override the default OutlinePoints
### Tree Utilities
### And some hard coded data...
#self.parent = None -- Is this needed?
# The coords of the node.
## Build Tree:
# Add the Canvas
## create the Objects
## create the Connectors
## Add the conenctos to the Canvas first, so they are undernieth the nodes
## now add the nodes
# Now bind the Nodes -- DrawObjects must be Added to a Canvas before they can be bound.
#pass
# Draw the Moving Object:
#!/usr/bin/env python
## Set a path to an Image file here:
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
# sets the maximum zoom level
# create the image:
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
# center gets ignored in this case
# Add the Canvas
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
#Adding the SplitterWindow
# add the left Panel
# add the Canvas
# put something on the Canvas
# set up the Splitter
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
# create the image:
# so it will get called after everything is created and sized
#!/usr/bin/env python
#### import local version:
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas
#from floatcanvas import FloatCanvas as FC
## Set up the MenuBar
# Add the Canvas
## A regular old spline:
# put in True if you want output to go to it's own window.
#!/usr/bin/env python
## import the installed version
## import the local version
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
# All defaults
#        Point = N.array((0, 0), N.float_)
#        for Position in ["br"]:
#'LightBlue',
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas, Resources
##LongString = (
##""" This is a not so long string
##Another line""")
# Add the Canvas
#Family = wx.TELETYPE,
#Alignment = "center",
#Alignment = "right",
# don't allow the box to get narrower than 20 pixels
# draw the RB box
# draw the RB box
# self.Box.SetPoint(Point1)
#!/usr/bin/env python
#ver = 'local'
## import the installed version
## import a local version
## here we create some new mixins:
## fixme: These really belong in floatcanvas package -- but I kind of want to clean it up some first
## All we need to do is is inherit from:
##  ScaledBitmap, MovingObjectMixin and ConnectorObjectMixin
## All we need to do is is inherit from:
##  Circle MovingObjectMixin and ConnectorObjectMixin
## All we need to do is is inherit from:
##  ScaledBitmap, MovingObjectMixin and ConnectorObjectMixin
##fixme: this should be added to the Main FloatCanvas Objects some day.
## Override the default OutlinePoints
### Tree Utilities
### And some hard coded data...
#self.parent = None -- Is this needed?
# The coords of the node.
## Build Tree:
# Add the Canvas
## create the Objects
## create the Connectors
## Add the conenctos to the Canvas first, so they are undernieth the nodes
## now add the nodes
# Now bind the Nodes -- DrawObjects must be Added to a Canvas before they can be bound.
#pass
# Draw the Moving Object:
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("../")
#from floatcanvas import NavCanvas, FloatCanvas
## Set up the MenuBar
# Add the Canvas
# Draw the Axis
# Note: the AddRectangle Parameters all have sensible
# defaults. I've put them all here explicitly, so you can see
# what the options are.
# Add a phantom rectangle to get the bounding box right
#  (the bounding box doesn't get unscaled text right)
#Canvas.ZoomToBB()
#Canvas.Draw()
#!/usr/bin/env python
## import the installed version
## import a local version
#import sys
#sys.path.append("..")
#from floatcanvas import NavCanvas, FloatCanvas
# Add the Canvas
#----------------------------------------------------------------------
# set viewing projection
# position viewer
# position object
# clear color and depth buffers
# draw six faces of a cube
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#---------------------------------------------------------------------------
# test all the events
# Show how to stay in a cell that has bad data.  We can't just
# call SetGridCursor here since we are nested inside one so it
# won't have any effect.  Instead, set coordinates to move to in
# idle time.
# Another way to stay in a cell that has a bad value...
# cancels the cell selection
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Show some simple cell formatting
# Attribute objects let you keep a set of formatting values
# in one spot, and reuse them if needed
# you can set cell attributes for the whole row (or column)
# overflow cells
# We need to be in the HERE folder for the archive link to work since the sample
# page does not use a full path
#--------------------------------------------------------------------------
# add a statusbar
# Add a menubar with just a quit item
# Create the main panel
# Menu event handler to close the frame
#--------------------------------------------------------------------------
# Ensure that a newer version of the IE/Edge control will be used
#  on Windows
# Create the webView control
# Register a handler for the memory: file system
# This handler takes care of links that are in zip files
# And this one is for the custom: file system implemented by the
# CustomWebViewHandler class below
# WebView events
# this event happens prior to trying to get a resource
# This is how you can cancel loading a page.
# The full document has loaded
# Set the frame's title to include the document's title
# Control bar events
#for i in self.wv.GetBackwardHistory():
#    print("%s %s" % (i.Url, i.Title))
#for i in self.wv.GetForwardHistory():
#    print("%s %s" % (i.Url, i.Title))
#--------------------------------------------------------------------------
# Set up an in-memory file system with virtual "files" that can be
# loaded into the webview just like network or local file sources.
# These "files" can be access using a protocol specifier of "memory:"
#--------------------------------------------------------------------------
# This shows how to make a custom handler for providing content to the
# WebView for a specific scheme ("custom:" in this case).  This handler
# class simply needs to implement the GetFile method, which will be called
# whenever a resource with a matching scheme is to be loaded, and it needs
# to respond by returning a wx.FSFile object.  This means that, unlike the
# wx.MemoryFSHandler, content can be generated on the fly rather than
# needing to be preloaded into a filesystem.
#
# We'll just provide the same content for every URI in this example, but
# normally you would generate or fetch appropriate content that is
# referenced by the given URI.
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#!/usr/bin/env python
##import os; raw_input('PID: %d\nPress enter...' % os.getpid())
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Do whatever you want to have done for each iteration of the event
# loop. In this example we'll just sleep a bit to simulate something
# real happening.
# Set this loop as the active one. It will automatically reset to the
# original evtloop when the context manager exits.
# Generate and process idles events for as long as there
# isn't anything else to do
# Dispatch all the pending events
# Currently on wxOSX Pending always returns true, so the
# ProcessIdle above is not ever called. Call it here instead.
# Proces remaining queued messages, if any
#self.keepGoing = True
# Just some simple stuff to paint in the window for an example
# Capture the mouse and save the starting position for the
# rubber-band
# Draw the rubber-band rectangle using an overlay so it
# will manage keeping the rectangle and the former window
# contents separate.
# Mac's DC is already the same as a GCDC, and it causes
# problems with the overlay if we try to use an actual
# wx.GCDC so don't try it.
# When the mouse is released we reset the overlay and it
# restores the former content to the window.
#frm.SetDoubleBuffered(True)
# Scale the DC such that the printout is roughly the same as
# the screen scaling.
# Now adjust if the real page size is reduced (such as when
# drawing on a scaled wx.MemoryDC in the Print Preview.)  If
# page width == DC width then nothing changes, otherwise we
# scale down for the DC.
# Set the DC's scale.
# Find the logical units per millimeter (for calculating the
# margins)
# Determine the position of the margins and the
# page/line height
# use a 1mm buffer around the inside of the box, and a few
# pixels between each line
# calculate the number of pages
# draw a page outline at the margin points
# Draw the text lines for this page
# A text widget to display the doc and let it be edited
# Create the menu and menubar
##         item = menu.Append(-1, "Test other stuff...\tF9", "")
##         self.Bind(wx.EVT_MENU, self.OnPrintTest, item)
##         menu.AppendSeparator()
# initialize the print data and set some default values
# force a copy
#print_("paperID %r, paperSize %r" % (self.pdata.GetPaperId(), self.pdata.GetPaperSize()))
# create the preview frame such that it overlays the app frame
# force a copy
# use the numpy code instead of the raw access code for comparison
# time the execution of making a bitmap?
# how big to make the bitmaps
# should we use a wx.GraphicsContext for painting?
#----------------------------------------------------------------------
# attempt to import a numeric module if requested to
#----------------------------------------------------------------------
# Put self in timeit's global namespace as
# 's' so it can be found in the code
# snippets being tested.
# Create the bitmap that we will stuff pixel values into using
# the raw bitmap access classes.
# Create an object that facilitates access to the bitmap's
# pixel buffer
# We have two ways to access each pixel, first we'll use an
# iterator to set every pixel to the colour and alpha values
# passed in.
# This block of code is another way to do the same as above,
# but with the accessor interface instead of the Python
# iterator.  It is a bit faster than the above because it
# avoids the iterator/generator magic, but it is not nearly as
# 'clean' looking ;-)
#pixels = pixelData.GetPixels()
#for y in range(DIM):
#    pixels.MoveTo(pixelData, 0, y)
#    for x in range(DIM):
#        pixels.Set(red, green, blue, alpha)
#        pixels.nextPixel()
# Next we'll use the pixel accessor to set the border pixels
# to be fully opaque
# Make an array of bytes that is DIM*DIM in size, with enough
# slots for each pixel to have a RGB and A value
# just some indexes to keep track of which byte is which
# initialize all pixel values to the values passed in
# Set the alpha for the border pixels to be fully opaque
# first row
# last row
# first col
# last col
# finally, use the array to create a bitmap
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# This file was generated by encode_bitmaps.py
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!/usr/bin/env python
# --------------------------------------------------- #
# Some constants for ribbon buttons
# --------------------------------------------------- #
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# not using wx.WrapSizer(wx.HORIZONTAL) as it reports an incorrect min height
# Set the background of the gallery to the hovered colour, or back to the
# default if there is no longer a hovered item.
# Foreground too similar to background - use a different
# strategy to find a contrasting colour
# Try to find colour in gallery
# Colour not in gallery - add it
# Set selection
# Send an event to respond to the selection change
#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         clroses.py
# Purpose:      Class definitions for Roses interactive display programs.
#
# Author:       Ric Werme
# WWW:          http://WermeNH.com/roses
#
# Created:      June 2007
# CVS-ID:       $Id$
# Copyright:    Public Domain, please give credit where credit is due.
# License:      Sorry, no EULA.
#----------------------------------------------------------------------------
# This is yet another incarnation of an old graphics hack based around
# misdrawing an analytic geometry curve called a rose.  The basic form is
# simply the polar coordinate function r = cos(a * theta).  "a" is the
# "order" of the rose, a zero value degenerates to r = 1, a circle.  While
# this program is happy to draw that, much more interesting things happen when
# one or more of the following is in effect:
# 1) The "delta theta" between points is large enough to distort the curve,
#    e.g. 90 degrees will draw a square, slightly less will be interesting.
# 2) The order of the rose is too large to draw it accurately.
# 3) Vectors are drawn at less than full speed.
# 4) The program is stepping through different patterns on its own.
# While you will be able to predict some aspects of the generated patterns,
# a lot of what there is to be found is found at random!
# The rose class has all the knowledge to implement generating vector data for
# roses and handles all the timing issues.  It does not have the user interface
# for changing all the drawing parameters.  It offers a "vision" of what an
# ideal Roses program should be, however, callers are welcome to assert their
# independence, override defaults, ignore features, etc.
# Rose class knows about:
# > Generating points and vectors (returning data as a list of points)
# > Starting a new rose (e.g. telling user to erase old vectors)
# > Stepping from one pattern to the next.
# The following data is accessible by callers, but there are set
# methods for most everything and various method calls to client methods
# to display current values.
# Angular distance along curve between points
# Amount to increment style by in auto mode
# Lobes on the rose (even values have 2X lobes)
# Amount to increment petals by in auto mode
# Number of vectors to draw the rose
# Minimum number acceptable in automatic mode
# Maximum number acceptable in automatic mode
# Don't draw this many at the start (cheap animations)
# Draw only this many (cheap animations)
# Number of vectors to draw each clock tick
# Time between roselet calls to watch pattern draw
# Time between roses in automatic mode
# Other variables that the application shouldn't access.
# No good way to set this at the moment.
# Next position to draw on next clock tick
# Internal states:
# Command states
# Return full rose line (a tuple of (x, y) tuples).  Not used by interactive
# clients but still useful for command line and batch clients.
# This is the "purest" code and doesn't require the App* methods defined
# by the caller.
# Generate vectors for the next chunk of rose.
# This is not meant to be called from an external module, as it is closely
# coupled to parameters set up within the class and limits set up by
# restart().  Restart() initializes all data this needs to start drawing a
# pattern, and clock() calls this to compute the next batch of points and
# hear if that is the last batch.  We maintain all data we need to draw each
# batch after the first.  theta should be 2.0*pi * style*i/self.nvec
# radians, but we deal in terms of the lookup table so it's just the index
# that refers to the same spot.
# Generate sine and cosine lookup tables.  We could create data for just
# 1/4 of a circle, at least if vectors was a multiple of 4, and share a
# table for both sine and cosine, but memory is cheaper than it was in
# PDP-11 days.  OTOH, small, shared tables would be more cache friendly,
# but if we were that concerned, this would be in C.
# Rescale (x,y) data to match our window.  Note the negative scaling in the
# Y direction, this compensates for Y moving down the screen, but up on
# graph paper.
# Euler's Method for computing the greatest common divisor.  Knuth's
# "The Art of Computer Programming" vol.2 is the standard reference,
# but the web has several good ones too.  Basically this sheds factors
# that aren't in the GCD and returns when there's nothing left to shed.
# N.B. Call with a >= b.
# Erase any old vectors and start drawing a new rose.  When the program
# starts, the sine and cosine tables don't exist, build them here.  (Of
# course, if an __init__() method is added, move the call there.
# If we're in automatic mode, check to see if the new pattern has neither
# too few or too many vectors and skip it if so.  Skip by setting up for
# a one tick wait to let us get back to the main loop so the user can
# update parameters or stop.
# Clock not running
# May be long delay, restart
# If called by clock(), return and start clock
# We're in INT_IDLE or INT_WAIT, clock running
# Called from App.  Recompute the center and scale values for the subsequent pattern.
# Force us into INT_RESIZE state if not already there so that in 100 ms we'll start
# to draw something to give an idea of the new size.
# Called from App or above.  From App, called with small delay because
# some window managers will produce a flood of expose events or call us
# before initialization is done.
# print_('repaint after', delay)
# Method that returns the next style and petal values for automatic
# mode and remembers them internally.  Keep things scaled in the
# range [0:nvec) because there's little reason to exceed that.
# Don't bother defending against 0
# Resume pattern drawing with the next one to display.
# Go/Stop button.
# Draw next pattern
# Centralize button naming to share with initialization.
# Leave colors to the application (assuming it cares), we can't guess
# what's available.
# Must be in state CMD_GO
# Redraw/Redraw button
# Redraw current pattern
# Backward/Reverse button
# Useful for when you see an interesting pattern and want
# to go back to it.  If running, just change direction.  If stopped, back
# up one step.  The resume code handles the step, then we change the
# incrementers back to what they were. (Unless resume changed them too.)
# Go forward again
# Forward/Skip button.  CMD_STOP & CMD_GO both just call resume.
# Draw next pattern
# Handler called on each timer event.  This handles the metered drawing
# of a rose and the delays between them.  It also registers for the next
# timer event unless we're idle (rose is done and the delay between
# roses is 0.)
# print_('clock called in idle state')
# May call us to start drawing
# but not if searching.
# Calls us to start drawing
# Waiting for resize event stream to settle
# Calls us to start drawing
# Methods to allow App to change the parameters on the screen.
# These expect to be called when the associated paramenter changes,
# but work reasonably well if several are called at once.  (E.g.
# tkroses.py groups them into things that affect the visual display
# and warrant a new start, and things that just change and don't affect
# the ultimate pattern.  All parameters within a group are updated
# at once even if the value hasn't changed.
# We restrict the style and petals parameters to the range [0: nvec)
# since numbers outside of that range aren't interesting. We don't
# immediately update the value in the application, we probably should.
# NW control window - key parameters
# SW control window - vectors
# SE control window - timings
# Method for client to use to have us supply our defaults.
#----------------------------------------------------------------------------
# Name:         wxroses.py
# Purpose:      wxPython GUI using clroses.py to display a classic graphics
#               hack.
#
# Author:       Ric Werme, Robin Dunn.
# WWW:          http://WermeNH.com/roses
#
# Created:      June 2007
# CVS-ID:       $Id$
# Copyright:    Public Domain, please give credit where credit is due.
# License:      Sorry, no EULA.
#----------------------------------------------------------------------------
# This module is responsible for everything involving GUI usage
# as clroses knows nothing about wxpython, tkintr, etc.
# There are some notes about how the Roses algorithm works in clroses.py,
# but the best reference should be at http://WermeNH.com/roses/index.html .
# There are a number of enhancements that could be done to wxRoses, and
# contributions are welcome as long as you don't destory the general
# structure, flavor, and all that.  The following list is in the order
# I'd like to see done.  Some are easy, some aren't, some are easy if
# you have experience in the right parts of external code.
# Brighter crossing points.
# Where many vectors cross, the display becomes washed out as a solid shape
# of light.  On (antique) refresh vector graphics systems, crossing points
# are brighter because the electron beam paints the pixels multiple times.
# This gives complex patterns a lacy feel to some, and a 3-D sense to
# fluted shapes where vectors lie tangent to some curve.  It would be
# nice to do the same in a bitmap buffer, the code to draw a vector is
# pretty simple, adding something that adds brightness to it via math or
# a lookup table ought to be a simple addition.
# Monochrome is so 20th century.
# There are a number of things that could be done with color.  The simplest
# is to step through colors in a color list, better things to do would be
# for clroses.py to determine the length of an interesting "generator pattern,"
# e.g. the square in the opening display.  Then it could change colors either
# every four vectors or cycle through the first four colors in the list.
# Bookmark that Rose!
# As you play with wxRoses, you'll come across some patterns that are
# "keepers."  A bookmark mechanism would be handy.
# Save that Rose!
# It would be nice to have a Menu-bar/File/Save-as dialog to save a pattern
# as a jpg/png/gif file.
# Themes
# A pulldown option to select various themes is worthwhile.  E.g.:
#  Start an interesting animation,
#  Select complex, lacy Roses,
#  Select the author's favorites,
#  Return to the initial Rose.
# Actually, all that's necessary are some pre-loaded bookmarks.
# Help text
# Standard fare, or:
# Slide show
# At CMU I created an interactive slide show that walked people through
# all the options and made suggestions about how to choose Style and Petal.
# I forget exactly what I said and may not have listings for it.  At any rate,
# making the help mechanism start one of several "lessons" where it could
# control the display (without blocking the user's control) would be pretty
# straightforward.
# Class SpinPanel creates a control that includes both a StaticText widget
# which holds the the name of a parameter and a SpinCtrl widget which
# displays the current value.  Values are set at initialization and can
# change via the SpinCtrl widget or by the program.  So that the program
# can easily access the SpinCtrl, the SpinPanel handles are saved in the
# spin_panels dictionary.
# Called (generally through spin_panels{}) to set the SpinCtrl value.
# Called when user changes the SpinCtrl value.
# Call MyFrame.OnSpinback to call clroses
# This class is used to display the current rose diagram.  It keeps a
# buffer bitmap of the current display, which it uses to refresh the
# screen with when needed.  When it is told to draw some lines it does
# so to the buffer in order for it to always be up to date.
# set default colors
# gray20
# lightskyblue2
# connect the size and paint events to handlers
# A panel used to collect options on how the rose is drawn
# MyFrame is the traditional class name to create and populate the
# application's frame.  The general GUI has control/status panels on
# the right side and a panel on the left side that draws the rose
#
# This class also derives from clroses.rose so it can implement the
# required interfaces to connect the GUI to the rose engine.
# Color matching dictionary, convert label name to color:
# Stop and Go ala traffic lights,
# Skip and Forward look ahead to the purple mountain majesties (really bluish),
# Reverse and Backward look morosely behind to maroon memories,
# Redraw looks at the brown earth right below your feet.
# Yeah, so it's lame.  All I really wanted was to color Stop and Go.
# Supposed to be a SpinPanel....
# The cmd panel is four buttons whose names and foreground colors
# change.  Plop them in a StaticBox like the SpinPanels.  Use
# a 2x2 grid, but StaticBoxSizer can't handle that.  Therefore,
# create a sub panel, layout the buttons there, then give that to
# a higher panel that has the static box stuff.
# Set up cmd_panel with StaticBox stuff
# Now make the rest of the control panels...
# The order of creation of SpinCtrls and Buttons is the order that
# the tab key will step through, so the order of panel creation is
# important.
# In the SpinPanel data (name, min, value, max), value will be
# overridden by clroses.py defaults.
# put them all on in a sizer attached to the side_panel
# and now arrange the two main panels in another sizer for the frame
# bind event handlers
# Determine appropriate image size.
# At this point, the rose_panel and side_panel will both report
# size (20, 20).  After mainSizer.Fit(self) they will report the
# same, but the Frame size, self.GetSize(), will report the desired
# side panel dimensions plus an extra 20 on the width.  That lets
# us determine the frame size that will display the side panel and
# a square space for the diagram.  Only after Show() will the two
# panels report the accurate sizes.
# Change 600 to desired minimum size
# Ask clroses to tell us all the defaults
# Command button event handlers.  These are relabled when changing between auto
# and manual modes.  They simply reflect the call to a method in the base class.
#
# Go/Stop button
# Redraw/Redraw
# Backward/Reverse
# Forward/Skip
# The clroses.roses class expects to have methods available that
# implement the missing parts of the functionality needed to do
# the actual work of getting the diagram to the screen and etc.
# Those are implemented here as the App* methods.
# print('AppCreateLine, len', len(line), 'next', self.nextpt)
# Here when clroses has set a new style and/or petal value, update
# strings on display.
# clroses doesn't change this data, so it's not telling us something
# we don't already know.
# Command buttons change their names based on the whether we're in auto
# or manual mode.
# Timer methods.  The paranoia about checking up on the callers is
# primarily because it's easier to check here.  We expect that calls to
# AppAfter and OnTimer alternate, but don't verify that AppCancelTimer()
# is canceling anything as callers of that may be uncertain about what's
# happening.
# Method to provide a single callback after some amount of time.
# print_('AppAfter:', callback)
# Method to cancel something we might be waiting for but have lost
# interest in.
# print_('AppCancelTimer')
# When the timer happens, we come here and jump off to clroses internal code.
# print_('OnTimer,', callback)
# Often calls AppAfter() and sets the callback
# Called when data in spin boxes changes.
# Need some command line options...
# Hooks to get from rose to panel labels
# Button widgets for command (NE) panel
# You should see a deprecation warning here
#66CDAA"
# You should see a deprecation warning here
# Widgets
# Layout
# using the Sizer property
# make a new sizer to hold the buttons
# a spacer that gets a portion of the free space
# add that sizer to the main sizer
# size the dialog to fit the content managed by the sizer
#import os; print_('PID:', os.getpid()); raw_input('Ready to start, press enter...')
#
# A simple test to verify that the GIL is released while in long running
# wrappers like MainLoop, ShowModal, and PopupMenu so background threads can
# be allowed to run at those times.
#
# A simplistic benchmark test that times many repititions of some
# simple operations so they can be tested with and without releasing
# the GIL
#----------------------------------------------------------------------
# A very simple wxPython example.  Just a wx.Frame, wx.Panel,
# wx.StaticText, wx.Button, and a wx.BoxSizer, but it shows the basic
# structure of any wxPython application.
#----------------------------------------------------------------------
# Create the menubar
# and a menu
# add an item to the menu, using \tKeyName automatically
# creates an accelerator, the third param is some help text
# that will show up in the statusbar
# bind the menu event to an event handler
# and put the menu on the menubar
# Now create the Panel to put the other controls on.
# and a few controls
# bind the button events to handlers
# Use a sizer to layout the controls, stacked vertically and with
# a 10 pixel border around each
# And also use a sizer to manage the size of the panel such
# that it fills the frame
/*
/*
/* The name of the API. */
/*
/* The next in the list of APIs. */
/*
/*
/*
/*
/* See if the module defines any APIs. */
/*
/* Use the default version if not already set explicitly. */
/* Add any versioned global functions to the module dictionary. */
/* Update the types table according to any version information. */
/* Update the type with the enabled version. */
/*
/*
/*
/* Make a deep copy of the name. */
/*
/*
/*
/*
/* The object data structure. */
/*
/*
/*
/*
/*
/* The sequence methods data structure. */
/* sq_length */
/* sq_concat */
/* sq_repeat */
/* sq_item */
/* sq_slice */
/* sq_ass_item */
/* sq_ass_slice */
/* sq_slice */
/* sq_ass_item */
/* sq_ass_slice */
/* sq_contains */
/* sq_inplace_concat */
/* sq_inplace_repeat */
/*
/*
/* The mapping methods data structure. */
/* mp_length */
/* mp_subscript */
/* mp_ass_subscript */
/*
/*
/*
/*
/* The buffer methods data structure. */
/* bf_getbuffer */
/* bf_releasebuffer */
/* bf_getreadbuffer */
/* bf_getwritebuffer */
/* bf_getsegcount */
/* bf_getcharbuffer */
/* bf_getbuffer */
/* bf_releasebuffer */
/* bf_getcharbuffer */
/* The instance deallocation function. */
/* The type data structure. */
/* tp_name */
/* tp_basicsize */
/* tp_itemsize */
/* tp_dealloc */
/* tp_print */
/* tp_getattr */
/* tp_setattr */
/* tp_reserved (Python v3), tp_compare (Python v2) */
/* tp_repr */
/* tp_as_number */
/* tp_as_sequence */
/* tp_as_mapping */
/* tp_as_mapping */
/* tp_hash */
/* tp_call */
/* tp_str */
/* tp_getattro */
/* tp_setattro */
/* tp_as_buffer */
/* tp_flags */
/* tp_flags */
/* tp_doc */
/* tp_traverse */
/* tp_clear */
/* tp_richcompare */
/* tp_weaklistoffset */
/* tp_iter */
/* tp_iternext */
/* tp_methods */
/* tp_members */
/* tp_getset */
/* tp_base */
/* tp_dict */
/* tp_descr_get */
/* tp_descr_set */
/* tp_dictoffset */
/* tp_init */
/* tp_alloc */
/* tp_new */
/* tp_free */
/* tp_is_gc */
/* tp_bases */
/* tp_mro */
/* tp_cache */
/* tp_subclasses */
/* tp_weaklist */
/* tp_del */
/* tp_version_tag */
/* tp_finalize */
/* tp_vectorcall */
/*
/*
/*
/*
/*
/*
/*
/*
/* This is a borrowed reference to itself. */
/*
/*
/*
/*****************************************************************************
/* Forward declarations of slots. */
/*
/* The method definition. */
/* The mixin name, if any. */
/*
/* tp_name */
/* tp_basicsize */
/* tp_itemsize */
/* tp_dealloc */
/* tp_print */
/* tp_getattr */
/* tp_setattr */
/* tp_compare */
/* tp_repr */
/* tp_as_number */
/* tp_as_sequence */
/* tp_as_mapping */
/* tp_hash */
/* tp_call */
/* tp_str */
/* tp_getattro */
/* tp_setattro */
/* tp_as_buffer */
/* tp_flags */
/* tp_doc */
/* tp_traverse */
/* tp_clear */
/* tp_richcompare */
/* tp_weaklistoffset */
/* tp_iter */
/* tp_iternext */
/* tp_methods */
/* tp_members */
/* tp_getset */
/* tp_base */
/* tp_dict */
/* tp_descr_get */
/* tp_descr_set */
/* tp_dictoffset */
/* tp_init */
/* tp_alloc */
/* tp_new */
/* tp_free */
/* tp_is_gc */
/* tp_bases */
/* tp_mro */
/* tp_cache */
/* tp_subclasses */
/* tp_weaklist */
/* tp_del */
/* tp_version_tag */
/* tp_finalize */
/* tp_vectorcall */
/*
/*
/*
/*
/*
/*
/*
/*****************************************************************************
/* Forward declarations of slots. */
/*
/* The getter/setter definition. */
/* The generated type definition. */
/* The generated container definition. */
/* The mixin name, if any. */
/*
/* tp_name */
/* tp_basicsize */
/* tp_itemsize */
/* tp_dealloc */
/* tp_print */
/* tp_getattr */
/* tp_setattr */
/* tp_compare */
/* tp_repr */
/* tp_as_number */
/* tp_as_sequence */
/* tp_as_mapping */
/* tp_hash */
/* tp_call */
/* tp_str */
/* tp_getattro */
/* tp_setattro */
/* tp_as_buffer */
/* tp_flags */
/* tp_doc */
/* tp_traverse */
/* tp_clear */
/* tp_richcompare */
/* tp_weaklistoffset */
/* tp_iter */
/* tp_iternext */
/* tp_methods */
/* tp_members */
/* tp_getset */
/* tp_base */
/* tp_dict */
/* tp_descr_get */
/* tp_descr_set */
/* tp_dictoffset */
/* tp_init */
/* tp_alloc */
/* tp_new */
/* tp_free */
/* tp_is_gc */
/* tp_bases */
/* tp_mro */
/* tp_cache */
/* tp_subclasses */
/* tp_weaklist */
/* tp_del */
/* tp_version_tag */
/* tp_finalize */
/* tp_vectorcall */
/* Forward declarations. */
/*
/*
/*
/*
/* Check that the value isn't const. */
/*
/* Check that access was via an instance. */
/* Get the C++ instance. */
/*
/*
/*
/*
/*
/* Wrappers to deal with lack of long long support. */
/* Check for overflows. */
/*
/*
/*
/* Convert the object to an int while checking for overflow. */
/* The value must have been non-zero. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* Provide a better exception message. */
/*
/* Provide a better exception message. */
/*
/* Provide a better exception message. */
/*
/*
/*
/*
/* Prime numbers to use as hash table sizes. */
/*
/*
/*
/*
/*
/* Go through each wrapped object at this address. */
/*
/* Ignore it if the C/C++ address is no longer valid. */
/*
/*
/* Add the object. */
/* Add any aliases. */
/*
/* See if there are any super-classes. */
/* Recurse up the hierachy for the first super-class. */
/*
/* Recurse up the hierachy for the remaining super-classes. */
/* Note that we silently ignore errors. */
/*
/*
/*
/*
/*
/* See if the bucket was unused or stale. */
/* Add the rest of the new value. */
/*
/* Don't bother if it still has more than 12% available. */
/*
/* Transfer the entries from the old table to the new one. */
/*
/* Handle the trivial case. */
/* Remove any aliases. */
/* Remove the object. */
/*
/* See if there are any super-classes. */
/* Recurse up the hierachy for the first super-class. */
/*
/* Recurse up the hierachy for the remaining super-classes. */
/*
/*
/*
/*
/* This is how Qt "types" signals and slots. */
/*
/*
/*
/*
/*
/* Keep some compilers quiet. */
/* Fan out Qt signals.  (Only PyQt3 would do this.) */
/* Get the object to call, resolving any weak references. */
/*
/*
/*
/*
/*
/* Remove any previous exception. */
/* Get the exception. */
/*
/*
/*
/* If this is the first attempt, save the exception. */
/* Create the new argument tuple. */
/* Tidy up. */
/*
/* See if they are signals or Qt slots, ie. they have a name. */
/* See if they are pure Python methods. */
/* See if they are wrapped C++ methods. */
/* The objects must be the same. */
/*
/*
/*
/* The slot is a Python signal so we need a universal slot to catch it. */
/*
/* Handle Qt signals. */
/* Handle Python signals.  Only PyQt3 would get this far. */
/*
/* Handle Qt signals. */
/* Handle Python signals. */
/*
/* Handle Python signals.  Only PyQt3 would get this far. */
/*
/* Remove any weak reference. */
/*
/*
/*
/* Notice if the class instance disappears. */
/* This acts a flag to say that the slot is a method. */
/*
/*
/* Get the method name. */
/*
/*
/*
/* Remove any arguments. */
/*
/* Notice if the class instance disappears. */
/* It's a Qt signal. */
/*
/*
/* There doesn't seem to be a standard way of checking for C99 support. */
/*
/*
/* tp_name */
/* tp_basicsize */
/* tp_itemsize */
/* tp_dealloc */
/* tp_print */
/* tp_getattr */
/* tp_setattr */
/* tp_as_async (Python v3.5), tp_compare (Python v2) */
/* tp_repr */
/* tp_as_number */
/* tp_as_sequence */
/* tp_as_mapping */
/* tp_hash */
/* tp_call */
/* tp_str */
/* tp_getattro */
/* tp_setattro */
/* tp_as_buffer */
/* tp_flags */
/* tp_doc */
/* tp_traverse */
/* tp_clear */
/* tp_richcompare */
/* tp_weaklistoffset */
/* tp_iter */
/* tp_iternext */
/* tp_methods */
/* tp_members */
/* tp_getset */
/* tp_base */
/* tp_dict */
/* tp_descr_get */
/* tp_descr_set */
/* tp_dictoffset */
/* tp_init */
/* tp_alloc */
/* tp_new */
/* tp_free */
/* tp_is_gc */
/* tp_bases */
/* tp_mro */
/* tp_cache */
/* tp_subclasses */
/* tp_weaklist */
/* tp_del */
/* tp_version_tag */
/* tp_finalize */
/* tp_vectorcall */
/*
/* tp_name */
/* tp_basicsize */
/* tp_itemsize */
/* tp_dealloc */
/* tp_print */
/* tp_getattr */
/* tp_setattr */
/* tp_as_async (Python v3.5), tp_compare (Python v2) */
/* tp_repr */
/* tp_as_number */
/* tp_as_sequence */
/* tp_as_mapping */
/* tp_hash */
/* tp_call */
/* tp_str */
/* tp_getattro */
/* tp_setattro */
/* tp_as_buffer */
/* tp_flags */
/* tp_doc */
/* tp_traverse */
/* tp_clear */
/* tp_richcompare */
/* tp_weaklistoffset */
/* tp_iter */
/* tp_iternext */
/* tp_methods */
/* tp_members */
/* tp_getset */
/* tp_base */
/* tp_dict */
/* tp_descr_get */
/* tp_descr_set */
/* tp_dictoffset */
/* tp_init */
/* tp_alloc */
/* tp_new */
/* tp_free */
/* tp_is_gc */
/* tp_bases */
/* tp_mro */
/* tp_cache */
/* tp_subclasses */
/* tp_weaklist */
/* tp_del */
/* tp_version_tag */
/* tp_finalize */
/* tp_vectorcall */
/* am_await */
/* am_aiter */
/* am_anext */
/* nb_add */
/* nb_subtract */
/* nb_multiply */
/* nb_divide */
/* nb_remainder */
/* nb_divmod */
/* nb_power */
/* nb_negative */
/* nb_positive */
/* nb_absolute */
/* nb_bool (Python v3), nb_nonzero (Python v2) */
/* nb_invert */
/* nb_lshift */
/* nb_rshift */
/* nb_and */
/* nb_xor */
/* nb_or */
/* nb_coerce */
/* nb_int */
/* nb_reserved (Python v3), nb_long (Python v2) */
/* nb_float */
/* nb_oct */
/* nb_hex */
/* nb_inplace_add */
/* nb_inplace_subtract */
/* nb_inplace_multiply */
/* nb_inplace_divide */
/* nb_inplace_remainder */
/* nb_inplace_power */
/* nb_inplace_lshift */
/* nb_inplace_rshift */
/* nb_inplace_and */
/* nb_inplace_xor */
/* nb_inplace_or */
/* nb_floor_divide */
/* nb_true_divide */
/* nb_inplace_floor_divide */
/* nb_inplace_true_divide */
/* nb_index */
/* nb_matrix_multiply */
/* nb_inplace_matrix_multiply */
/* mp_length */
/* mp_subscript */
/* mp_ass_subscript */
/* sq_length */
/* sq_concat */
/* sq_repeat */
/* sq_item */
/* was_sq_slice */
/* sq_ass_item */
/* was_sq_ass_slice */
/* sq_contains */
/* sq_inplace_concat */
/* sq_inplace_repeat */
/* bf_getbuffer */
/* bf_releasebuffer */
/* bf_getreadbuffer */
/* bf_getwritebuffer */
/* bf_getsegcount */
/* bf_getcharbuffer */
/* bf_getbuffer */
/* bf_releasebuffer */
/* ht_name */
/* ht_slots */
/* ht_qualname */
/* ht_cached_keys */
/* wt_user_type */
/* wt_dict_complete */
/* wt_unused */
/* wt_td */
/* wt_iextend */
/* wt_new_user_type_handler */
/* wt_user_data */
/*
/* This must be first. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* Marks an auto class docstring. */
/*
/* The pointer will be dereferenced. */
/* Implement /Transfer/. */
/* Implement /TransferBack/. */
/* Suppress any convertors. */
/* Support for /TransferThis/. */
/*
/* The pointer will be dereferenced. */
/* /Factory/ or /TransferBack/. */
/* Return a copy of the value. */
/* Don't return the C/C++ state. */
/*
/*
/* The reason for the failure. */
/* The detail if a string. */
/* The detail if a Python object. */
/* The wrong positional argument. */
/* The wrong keyword argument. */
/* The overflowed positional argument. */
/* The overflowed keyword argument. */
/*
/* The name. */
/* The symbol. */
/* The next in the list. */
/*
/* The Python object. */
/* The next in the list. */
/*
/* The Python type being handled. */
/* The getter. */
/* The next in the list. */
/*
/* The type the resolver handles. */
/* The resolver. */
/* The next in the list. */
/*
/* The type the handler handles. */
/* The handler. */
/* The next in the list. */
/*****************************************************************************
/*
/* tp_name */
/* tp_basicsize */
/* tp_itemsize */
/* tp_dealloc */
/* tp_print */
/* tp_getattr */
/* tp_setattr */
/* tp_as_async (Python v3.5), tp_compare (Python v2) */
/* tp_repr */
/* tp_as_number */
/* tp_as_sequence */
/* tp_as_mapping */
/* tp_hash */
/* tp_call */
/* tp_str */
/* tp_getattro */
/* tp_setattro */
/* tp_as_buffer */
/* tp_flags */
/* tp_doc */
/* tp_traverse */
/* tp_clear */
/* tp_richcompare */
/* tp_weaklistoffset */
/* tp_iter */
/* tp_iternext */
/* tp_methods */
/* tp_members */
/* tp_getset */
/* tp_base */
/* tp_dict */
/* tp_descr_get */
/* tp_descr_set */
/* tp_dictoffset */
/* tp_init */
/* tp_alloc */
/* tp_new */
/* tp_free */
/* tp_is_gc */
/* tp_bases */
/* tp_mro */
/* tp_cache */
/* tp_subclasses */
/* tp_weaklist */
/* tp_del */
/* tp_version_tag */
/* tp_finalize */
/* tp_vectorcall */
/*
/*
/* The C/C++ to Python map. */
/* List of registered modules. */
/* The current trace mask. */
/* The type being created. */
/* For passing dict of unused arguments. */
/* '__init__'. */
/* The empty tuple. */
/* The type unpickler function. */
/* The enum unpickler function. */
/* The list of published symbols. */
/* The list of attribute getters. */
/* The list of proxy resolvers. */
/* Registered Python types. */
/* Python types whose auto-conversion is disabled. */
/* The interpreter. */
/* Destroy owned objects on exit. */
/* The event handler lists. */
/*
/* m_name */
/* m_doc */
/* m_size */
/* m_methods */
/* m_reload */
/* m_traverse */
/* m_clear */
/* m_free */
/*
/* Initialise the types. */
/* Get a reference to the pickle helpers. */
/* Publish the SIP API. */
/* These will always be needed. */
/* Add the SIP version number, but don't worry about errors. */
/* Add the type objects, but don't worry about errors. */
/* Initialise the module if it hasn't already been done. */
/* Initialise the object map. */
/*
/* Make sure we are notified when starting to exit. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* Get the assignment helper. */
/* Check the types are compatible. */
/* Get the addresses. */
/* Do the assignment. */
/*
/*
/*
/*
/*
/* sipIsDerived() is a misnomer. */
/*
/*
/*
/*
/*
/*
/*
/*
/* Check that we can support it. */
/* Import any required modules. */
/* SIP clients must have unique names. */
/* Only one module can claim to wrap QObject. */
/* Convert the module name to an object. */
/* Add it to the list of client modules. */
/* Get any keyword handler.  Remove this in SIP v5. */
/*
/* Handle any API. */
/* Create the module's types. */
/* Skip external classes. */
/* Skip if already initialised. */
/* If it is a stub then just set the module so we can get its name. */
/*
/* If there is a name then we need a namespace. */
/* See if this is a namespace extender. */
/* Append this type to the real one. */
/*
/* Set any Qt support API. */
/* Append any initialiser extenders to the relevant classes. */
/* Set the base class object for any sub-class convertors. */
/* Create the module's enum members. */
/*
/* Add any global static instances. */
/* Add any license. */
/* See if the new module satisfies any outstanding external types. */
/*
/*
/* Handle any delayed dtors. */
/* Free the list. */
/* Release all memory we've allocated directly. */
/* Re-initialise those globals that (might) need it. */
/*
/*
/*
/* Find the defining module. */
/* Add to the list. */
/*
/*
/*
/* Go through each module. */
/* Skip the module that couldn't handle the arguments. */
/* Skip if the module doesn't have any extenders. */
/* Go through each extender. */
/* Skip if not the right slot type. */
/* Check against the type if one was given. */
/* The arguments couldn't handled anywhere. */
/*
/* Initialise the rest of an instance of a derived class. */
/*
/*
/*
/*
/* Basic validation of the format string. */
/*
/*
/* This is deprecated. */
/* This is deprecated. */
/* This is deprecated. */
/*
/*
/*
/*
/* We rely on PyErr_Occurred(). */
/* Get self if it is provided as an argument. */
/* Basic validation of the format string. */
/* Some format characters have a sub-format. */
/* This is deprecated. */
/* This is deprecated. */
/* This is deprecated. */
/* This is deprecated. */
/*
/*
/*
/* Release any unused arguments if the parse failed. */
/*
/* Previous second pass errors stop subsequent parses. */
/*
/* Stop all parsing and indicate an exception has been raised. */
/*
/*
/* Remove any previous failed parses. */
/* Indicate that an exception has been raised. */
/*
/*
/*
/* Get the value of the exception. */
/*
/*
/* Create the list if necessary. */
/*
/* Ownership of any detail object is now with the wrapped failure. */
/*
/* Previous second pass errors stop subsequent parses. */
/* Stop all parsing and indicate an exception has been raised. */
/*
/*
/* Remove any previous failed parses. */
/* Indicate that an exception has been raised. */
/*
/*
/*
/* See if the following arguments are optional. */
/* See if we don't expect anything else. */
/* There are still positional arguments. */
/*
/*
/* Get the argument's index if it is one. */
/*
/*
/*
/*
/* Get the next argument. */
/*
/* An argument was required. */
/*
/* Get the argument's index if it is one. */
/*
/* Ellipsis. */
/* Implement /GetWrapper/. */
/* Process the same argument next time round. */
/* String from a Python bytes or None. */
/* String from a Python string or None. */
/* Character from a Python string. */
/* Wide string or None. */
/* Slot name or callable, return the name or callable. */
/* Slot name, return the name. */
/* Signal name, return the name. */
/* Sequence of class or mapped type instances. */
/* Class or mapped type instance. */
/* Python object of given type or None. */
/* Python object of any type with a sub-format. */
/* Skip the sub-format. */
/* Python object of given type. */
/* Sub-class of QObject. */
/* Python callable object. */
/* Python callable object or None. */
/* Python object that implements the buffer protocol. */
/*
/* Qt receiver to connect. */
/* Qt receiver to disconnect. */
/* Python slot to connect. */
/* Python slot to disconnect. */
/* Char array or None. */
/* Wide char array or None. */
/* Character from a Python bytes. */
/* Wide character. */
/* Bool. */
/* Named enum or integer. */
/* Anonymous enum. */
/* Integer. */
/* Unsigned integer. */
/* size_t integer. */
/* Signed char. */
/* Unsigned char. */
/* Short integer. */
/* Unsigned short integer. */
/* Long integer. */
/* Unsigned long integer. */
/* Long long integer. */
/* Unsigned long long integer. */
/* Float. */
/* Constrained types. */
/* Named enum. */
/* Boolean. */
/* Double float. */
/* Float. */
/* Integer. */
/* Double float. */
/* Void pointer. */
/* Void pointer as a capsule. */
/* An ellipsis matches everything and ends the parse. */
/* Handle parse failures appropriately. */
/*
/* The overflow exception has now been raised. */
/*
/*
/* Remove any previous overflow exception. */
/*
/* Handle the converions of "self" first. */
/*
/*
/* Skip the optional character. */
/* Get the next argument. */
/*
/* Implement /GetWrapper/. */
/* Process the same argument next time round. */
/* Qt receiver to connect. */
/* Qt receiver to disconnect. */
/* Python single shot slot to connect. */
/* Python slot to connect. */
/* Python slot to disconnect. */
/* Sequence of class or mapped type instances. */
/* Class or mapped type instance. */
/* Python object of any type with a sub-format. */
/* Constrained types. */
/* String from a Python string or None. */
/* Character from a Python string. */
/*
/* Drop through. */
/* Handle any ellipsis argument. */
/* Create a tuple for any remaining arguments. */
/* Add the remaining argument to the tuple. */
/* Return the tuple. */
/*
/*
/*
/* Get the type's helpers. */
/*
/*
/* Get the type's copy helper. */
/*
/*
/* If there is no interpreter just to the minimum and get out. */
/* We may be tidying up after an exception so preserve it. */
/*
/*
/*
/*
/*
/* Discard any result. */
/* Handle any error the best we can. */
/*
/*
/*
/*
/*
/*
/* Negative indices start from the other end. */
/*
/* Only do this once. */
/*
/* Only do this once. */
/*
/*
/* Check that the mapped type can act as a container. */
/*
/* Get the dictionary to place the type in. */
/* Create an object corresponding to the type name. */
/* Create the type by calling the metatype. */
/* Pass the type via the back door. */
/* Fix __qualname__ if there is a scope. */
/* Add the type to the "parent" dictionary. */
/* Unwind on error. */
/*
/* Handle the trivial case where we have already been initialised. */
/* Set this up now to gain access to the string pool. */
/* Create the tuple of super-types. */
/*
/*
/*
/* Create the type dictionary and populate it with any non-lazy methods. */
/* Handle the pickle function. */
/* We can now release our references. */
/* Unwind after an error. */
/*
/* Handle the trivial case where we have already been initialised. */
/* Set this up now to gain access to the string pool. */
/* Create the tuple of super-types. */
/* Create the type dictionary. */
/* We can now release our references. */
/* Unwind after an error. */
/*
/* Make sure the module is imported. */
/* Find the module definition. */
/*
/* Get the module definition. */
/* Find the class type object. */
/*
/* Find the type definition and defining module. */
/*
/* We should never get here. */
/*
/* Get the module definition. */
/* Find the enum type object. */
/*
/*
/* Create the method descripter. */
/*
/*
/* Get the dictionary into which the type will be placed. */
/* Create an object corresponding to the type name. */
/* Create the enum. */
/* Add the enum to the "parent" dictionary. */
/* We can now release our remaining references. */
/*
/* Create the base type tuple if it hasn't already been done. */
/* Create the type dictionary. */
/* Create the type by calling the metatype. */
/* Pass the type via the back door. */
/*
/* Append the name of the enum to the scope's __qualname__. */
/*
/* Get the enum type if we haven't done so already. */
/* Create a dict of the members. */
/*
/*
/* Note that it isn't actually a PyTypeObject. */
/* Unwind on errors. */
/*
/* Create the dictionary. */
/* We need to set the module name as an attribute for dynamic types. */
/*
/*
/*
/* Get self from the argument tuple. */
/*
/*
/*
/* Do the methods. */
/* Non-lazy methods will already have been handled. */
/* Do the unscoped enum members. */
/* It's an unnamed unscoped enum. */
/* Do the variables. */
/*
/*
/*
/* Handle the trivial case. */
/* Search the possible linked list of namespace extenders. */
/*
/* TODO: Deprecate this mechanism in favour of an event handler. */
/*
/*
/*
/*
/* If the object is an enum then it must be the right enum. */
/*
/*
/* This will never overflow. */
/* This will never overflow. */
/*
/* Convert to a C/C++ int while checking for overflow. */
/*
/*
/*
/*
/*
/*
/* There is an entry for each overload that was tried. */
/*
/*
/*
/* Find the last closing parenthesis. */
/*
/* Drop through. */
/*
/*
/*
/* Try and get the text to match a Python exception. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* There is no owner. */
/*
/*
/*
/* Convert the strings we use to objects if not already done. */
/* We use a dictionary to hold the license information. */
/* The license type is compulsory, the rest are optional. */
/* Create a read-only proxy. */
/*
/*
/*
/* The hack for wchar_t. */
/* The hack for wchar_t*. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* We might still have C++ going after the interpreter has gone. */
/*
/*
/* Get any reimplementation. */
/*
/* Check the instance dictionary in case it has been monkey patched. */
/* Allow for classic classes as mixins. */
/*
/*
/* It's already a method but make sure it is bound. */
/* It is a descriptor, so assume it will do the right thing. */
/*
/* Use the fast track in future. */
/* Note that this will only be raised once per method. */
/*
/*
/*
/*
/*
/*
/*
/*
/* C structures and base classes don't have cast functions. */
/*
/*
/*
/* Create the extra references dictionary if needed. */
/* This can happen if the argument was optional. */
/*
/* Get the extra references dictionary if there is one. */
/*
/*
/*
/*
/*
/*
/* If the type explicitly handles None then ignore the flags. */
/*
/* Don't convert if there has already been an error. */
/* Do the conversion. */
/*
/* Don't even try if there has already been an error. */
/* See if the object's type can be converted. */
/* Do the conversion. */
/*
/* See if there is something to release. */
/*
/*
/*
/* Handle None. */
/*
/* Apply the sub-class convertor. */
/*
/* Handle any ownership transfer. */
/*
/* Handle None. */
/*
/* Apply any sub-class convertor. */
/* Handle any ownership transfer. */
/*
/*
/*
/* Allow for unresolved externally defined types. */
/* Find which external type it is. */
/*
/* We might be looking for a pointer or a reference. */
/*
/* The backdoor to the comparison helper. */
/*
/*
/*
/*
/*
/*
/* Get the dictionary of modules. */
/* Get the builtins module. */
/* Get the __builtin__ module. */
/* Get it's dictionary. */
/* Get the function hook. */
/* Call the hook and discard any result. */
/*
/* Handle the trivial case. */
/* Try the conversions until told to stop. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* See if it is a wrapper. */
/* If it is not a wrapper then it must be an enum. */
/*
/* Search any super-types. */
/*
/*
/*
/*
/*
/*
/*
/* Call the standard super-metatype alloc. */
/*
/*
/* Patch any mixin initialiser. */
/*
/* Call the standard super-metatype init. */
/*
/*
/* TODO: Deprecate this mechanism in favour of an event handler. */
/* Call any new type handler. */
/*
/*
/*
/*
/* Check the base types are not being used directly. */
/* See if it is a mapped type. */
/* See if it is a namespace. */
/*
/*
/* See if it is an abstract type. */
/* Call the standard super-type new. */
/*
/* Check for an existing C++ instance waiting to be wrapped. */
/* See if we are interested in any unused keyword arguments. */
/* Call the C++ ctor. */
/*
/*
/*
/* This is the hack that means that C++ owns the new instance. */
/* The instance was created from Python. */
/* Handler any owner if the type supports the concept. */
/*
/* Set the access function. */
/* If we are wrapping an instance returned from C/C++ then we are done. */
/*
/* Call any finalisation code. */
/*
/*
/* Call the handler if we have one.  Remove this in SIP v5. */
/*
/* See if we should call the equivalent of super().__init__(). */
/* Find the next type in the MRO. */
/*
/*
/* We shouldn't have any unused keyword arguments. */
/* Just report one of the unused arguments. */
/*
/*
/* If we are not a mixin to another wrapped class then behave as normal. */
/*
/* Make sure the mixin can find the main instance. */
/* Add the mixin's useful attributes to the main class. */
/* Don't replace existing values. */
/* Skip values with names that start with double underscore. */
/*
/* Call the super-class's __init__ with any remaining arguments. */
/*
/* Assert that we have found ourself and that we are not the last. */
/*
/*
/*
/*
/* Call any handwritten traverse code. */
/*
/* Call any handwritten clear code. */
/* Remove the instance dictionary. */
/* Remove any extra references dictionary. */
/* Remove any user object. */
/* Remove any mixin main. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* Call the standard super-type dealloc. */
/*
/*
/*
/*
/*
/* Convert the operation to a slot type. */
/* It might not exist if not all the above have been implemented. */
/*
/* Create the dictionary if needed. */
/*
/* Check that any new value really is a dictionary. */
/*
/*
/* tp_name */
/* tp_basicsize */
/* tp_itemsize */
/* tp_dealloc */
/* tp_print */
/* tp_getattr */
/* tp_setattr */
/* tp_as_async (Python v3.5), tp_compare (Python v2) */
/* tp_repr */
/* tp_as_number */
/* tp_as_sequence */
/* tp_as_mapping */
/* tp_hash */
/* tp_call */
/* tp_str */
/* tp_getattro */
/* tp_setattro */
/* tp_as_buffer */
/* tp_flags */
/* tp_doc */
/* tp_traverse */
/* tp_clear */
/* tp_richcompare */
/* tp_weaklistoffset */
/* tp_iter */
/* tp_iternext */
/* tp_methods */
/* tp_members */
/* tp_getset */
/* tp_base */
/* tp_dict */
/* tp_descr_get */
/* tp_descr_set */
/* tp_dictoffset */
/* tp_init */
/* tp_alloc */
/* tp_new */
/* tp_free */
/* tp_is_gc */
/* tp_bases */
/* tp_mro */
/* tp_cache */
/* tp_subclasses */
/* tp_weaklist */
/* tp_del */
/* tp_version_tag */
/* tp_finalize */
/* tp_vectorcall */
/* am_await */
/* am_aiter */
/* am_anext */
/* nb_add */
/* nb_subtract */
/* nb_multiply */
/* nb_divide */
/* nb_remainder */
/* nb_divmod */
/* nb_power */
/* nb_negative */
/* nb_positive */
/* nb_absolute */
/* nb_bool (Python v3), nb_nonzero (Python v2) */
/* nb_invert */
/* nb_lshift */
/* nb_rshift */
/* nb_and */
/* nb_xor */
/* nb_or */
/* nb_coerce */
/* nb_int */
/* nb_reserved (Python v3), nb_long (Python v2) */
/* nb_float */
/* nb_oct */
/* nb_hex */
/* nb_inplace_add */
/* nb_inplace_subtract */
/* nb_inplace_multiply */
/* nb_inplace_divide */
/* nb_inplace_remainder */
/* nb_inplace_power */
/* nb_inplace_lshift */
/* nb_inplace_rshift */
/* nb_inplace_and */
/* nb_inplace_xor */
/* nb_inplace_or */
/* nb_floor_divide */
/* nb_true_divide */
/* nb_inplace_floor_divide */
/* nb_inplace_true_divide */
/* nb_index */
/* nb_matrix_multiply */
/* nb_inplace_matrix_multiply */
/* mp_length */
/* mp_subscript */
/* mp_ass_subscript */
/* sq_length */
/* sq_concat */
/* sq_repeat */
/* sq_item */
/* was_sq_slice */
/* sq_ass_item */
/* was_sq_ass_slice */
/* sq_contains */
/* sq_inplace_concat */
/* sq_inplace_repeat */
/* bf_getbuffer */
/* bf_releasebuffer */
/* bf_getreadbuffer */
/* bf_getwritebuffer */
/* bf_getsegcount */
/* bf_getcharbuffer */
/* bf_getbuffer */
/* bf_releasebuffer */
/* ht_name */
/* ht_slots */
/* ht_qualname */
/* ht_cached_keys */
/* wt_user_type */
/* wt_dict_complete */
/* wt_unused */
/* wt_td */
/* wt_iextend */
/* wt_new_user_type_handler */
/* wt_user_data */
/*
/* Remove any slots connected via a proxy. */
/* Detach any children (which will be owned by C/C++). */
/*
/*
/* Skip the super-type's dealloc. */
/*
/*
/*
/*
/* Add the buffer interface. */
/* Add the slots for this type. */
/*
/* Suppress a compiler warning. */
/*
/* Invoke any event handlers. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* See if the slot has an extra reference. */
/*
/*
/*
/*
/*
/*
/* Use the exception set if it was an encoding error. */
/*
/*
/* Use the exception set if it was an encoding error. */
/*
/*
/* Use the exception set if it was an encoding error. */
/*
/*
/* Use the exception set if it was an encoding error. */
/*
/*
/* Use the exception set if it was an encoding error. */
/*
/*
/* Use the exception set if it was an encoding error. */
/*
/*
/* Don't try anything else if there was an encoding error. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* Call the standard super-metatype alloc. */
/*
/*
/*
/*
/* Get the member name. */
/* We don't handle Unicode names. */
/* Find the number of this enum. */
/* Get the enum members in the same scope. */
/* Find the enum member. */
/*
/*
/* Disable all Python reimplementations of virtuals. */
/*
/*
/*
/* See if there is anything to do. */
/* Remove it from the list. */
/* Add it to the list. */
/*
/*
/*
/*
/*
/*
/* TODO: Deprecate this mechanism in favour of an event handler. */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* Assume there will be an error. */
/*
/*
/*
/*
/* Ignore unresolved external types. */
/*
/*
/*
/*
/* Get the functions if we haven't already got them. */
/* Get the current state. */
/* See if the state needs changing. */
/* Enable or disable as required. */
/*
/*
/*
/* Handle the trivial cases. */
/* Search the super-types. */
/*
/*
/*
/* Get the type that is the scope. */
/*
/*
/*
/*
/* The C/C++ object ot be wrapped. */
/* The owner of the object. */
/* The flags. */
/*
/* The thread identifier. */
/* An object waiting to be wrapped. */
/* Next in the list. */
/* Linked list of threads. */
/*
/* Clear in case we execute Python code before finishing this wrapping. */
/*
/*
/*
/*
/*
/*
/* See if we already know about the thread. */
/* This is not an error. */
/* Use an empty entry in the list. */
/*
/* The object data structure. */
/* The structure used to hold the results of a voidptr conversion. */
/*
/*
/*
/*
/*
/*
/*
/*
/* The methods data structure. */
/*
/*
/*
/* The number methods data structure. */
/* nb_add */
/* nb_subtract */
/* nb_multiply */
/* nb_divide */
/* nb_remainder */
/* nb_divmod */
/* nb_power */
/* nb_negative */
/* nb_positive */
/* nb_absolute */
/* nb_bool (Python v3), nb_nonzero (Python v2) */
/* nb_invert */
/* nb_lshift */
/* nb_rshift */
/* nb_and */
/* nb_xor */
/* nb_or */
/* nb_coerce */
/* nb_int */
/* nb_reserved (Python v3), nb_long (Python v2) */
/* nb_float */
/* nb_oct */
/* nb_hex */
/* nb_inplace_add */
/* nb_inplace_subtract */
/* nb_inplace_multiply */
/* nb_inplace_divide */
/* nb_inplace_remainder */
/* nb_inplace_power */
/* nb_inplace_lshift */
/* nb_inplace_rshift */
/* nb_inplace_and */
/* nb_inplace_xor */
/* nb_inplace_or */
/* nb_floor_divide */
/* nb_true_divide */
/* nb_inplace_floor_divide */
/* nb_inplace_true_divide */
/* nb_index */
/* nb_matrix_multiply */
/* nb_inplace_matrix_multiply */
/*
/*
/*
/*
/*
/* The sequence methods data structure. */
/* sq_length */
/* sq_concat */
/* sq_repeat */
/* sq_item */
/* sq_slice */
/* sq_ass_item */
/* sq_ass_slice */
/* sq_slice */
/* sq_ass_item */
/* sq_ass_slice */
/* sq_contains */
/* sq_inplace_concat */
/* sq_inplace_repeat */
/*
/*
/* We could allow any item size... */
/* The mapping methods data structure. */
/* mp_length */
/* mp_subscript */
/* mp_ass_subscript */
/*
/*
/*
/*
/* The buffer methods data structure. */
/* bf_getbuffer */
/* bf_releasebuffer */
/* bf_getreadbuffer */
/* bf_getwritebuffer */
/* bf_getsegcount */
/* bf_getcharbuffer */
/* bf_getbuffer */
/* bf_releasebuffer */
/* bf_getcharbuffer */
/*
/* Use the explicit size if one was given. */
/* Use the explicit writeable flag if one was given. */
/* Create the instance. */
/* Save the values. */
/* The type data structure. */
/* tp_name */
/* tp_basicsize */
/* tp_itemsize */
/* tp_dealloc */
/* tp_print */
/* tp_getattr */
/* tp_setattr */
/* tp_reserved (Python v3), tp_compare (Python v2) */
/* tp_repr */
/* tp_as_number */
/* tp_as_sequence */
/* tp_as_mapping */
/* tp_as_mapping */
/* tp_hash */
/* tp_call */
/* tp_str */
/* tp_getattro */
/* tp_setattro */
/* tp_as_buffer */
/* tp_flags */
/* tp_flags */
/* tp_doc */
/* tp_traverse */
/* tp_clear */
/* tp_richcompare */
/* tp_weaklistoffset */
/* tp_iter */
/* tp_iternext */
/* tp_methods */
/* tp_members */
/* tp_getset */
/* tp_base */
/* tp_dict */
/* tp_descr_get */
/* tp_descr_set */
/* tp_dictoffset */
/* tp_init */
/* tp_alloc */
/* tp_new */
/* tp_free */
/* tp_is_gc */
/* tp_bases */
/* tp_mro */
/* tp_cache */
/* tp_subclasses */
/* tp_weaklist */
/* tp_del */
/* tp_version_tag */
/* tp_finalize */
/* tp_vectorcall */
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* Use the current size if one wasn't explicitly given. */
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# Name:        sphinxtools/constants.py
# Author:      Andrea Gavana
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Standard library imports
# Phoenix-specific imports
# List of strings that should be ignored when creating inline literals
# such as ``ID_ANY`` or ``HORIZONTAL``, with double backticks
# C++ stuff to Python/ReST stuff
# This is a list of instances in Phoenix (i.e., without documentation strings), and
# For the sake of beauty of the docs they get the inline literal treatment (double backticks)
# Phoenix full version
# Things to chop away when ReST-ifying the docstrings
#$%\'()*,./:;<=>?@\\^{|}~'
# Conversion between XML sections and ReST sections
# use the custom admonition for deprecation
# List of things to remove/ignore (there may be more)
# Dictionary mapping the etg module name to the real Phoenix module name
# This needs to be kept up to date when other stuff comes in (i.e., wx.grid,
# wx.html and so on)
# Other C++ specific things to strip away
# Series of paths containing the input data for Sphinx and for the scripts
# building the ReST docs:
# The location of the Phoenix main folder
# The location of the Sphinx main folder
# Where the snippets found in the XML docstrings live (There are C++, unconverted and
# converted Python snippets in 3 sub-folders
# A folder where some of the difficult-to-translate-to-ReST tables are. There are 4 of
# them up to now, for various reasons:
# 1. The wx.Sizer flags table is a grid table, very difficult to ReSTify automatically
# 2. The wx.ColourDatabase table of colour comes up all messy when ReSTified from XML
# 3. The "wxWidgets 2.8 Compatibility Functions" table for wx.VScrolledWindow
# 4. The wx.ArtProvider table
# Folder where to save the inheritance diagrams for the classes
# Folder where to save the images found in the wxWidgets overviews or in the XML
# docstrings
# Folder where to save the widgets screenshots (full-size, no thumbnails here)
# Folder for the icons used for titles, sub-titles and so on for the Sphinx documentation
# The Doxygen root for the XML docstrings
# Dictionary copied over from tweaker_tools
# Why not __nonzero__?
# TODO: add more
# A regex to split a string keeping the whitespaces
# A list of things used in the post-processing of the HTML files generated by Sphinx
# This list is used only to insert a HTML horizontal line (<hr>) after each method/function
# description
# Today's date representation for the Sphinx HTML docs
# Inheritance diagram external hyperlinks
# wx.lib and other pure-Python stuff
# wx.tools and other stuff
# ('@section',      XXX),      Deal with this separately
# TODO This one
# TODO This one
# TODO This one
# TODO This one
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# Name:        sphinxtools/inheritance.py
# Author:      Andrea Gavana
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Standard library imports
# Phoenix-specific imports
# These are the default attrs for graphviz
#23238E"',
# Write the node
# Phoenix base classes, assume there is always a link
# Write the edges
# ----------------------------------------------------------------------- #
# graphviz expects UTF-8 by default
# No such file or directory
# Graphviz may close standard input when an error occurs,
# resulting in a broken pipe on communicate()
# in this case, read the standard output and standard error streams
# directly, to get the error message(s)
# Masked is funny...
# Extract the section header
# Try and replace True with ``True`` and False with ``False``
# ``None`` gives trouble sometimes...
#{' in item:
# this is for masked stuff
# Simple link, leave it as it is
# It's an inclined text, but we can attach some
# class reference to it
# It's an inclined text
# Some kind of link, but we can't figure it out
# very easily from here... just use :ref:
# Use double backticks
# Try and reference it
# Something else, don't bother for the moment
# must have at least root folder
# check each name
# recursively scan other folders, appending results
# must have at least root folder
# check each name
# must have at least root folder
# check each name
# recursively scan other folders, appending results
# IMPORTANT!!
# Remove this line to get back the inheritance diagram for a module
#
# take out the '_core' in things like 'wx._core.Control'
# or just the '_' otherwise
#self.signature = self.signature.replace('wx.', '')
# if len(self.signature) < 2: # ???
#     self.is_redundant = True
##        self.id = NewId()
# if there is no signature, then check if the first line of
# docstring looks like it might be it
# if not self.signature.strip():      # ???
#     self.is_redundant = True
# is it a real property?
# Thank you for screwing it up, Cython...
# -*- coding: utf-8 -*-
# Describe classes, methods and functions in a module.
# Works with user-defined modules, all Python library
# modules, including built-in modules.
# since Python 2.6
# Work out how much of the filepath is shared by start and path.
# TODO: Switch to getfullargspec
#' in line:
#')].strip()
# attribute = (isPython3() and ['__self__'] or ['im_self'])[0]
# if hasattr(instancemethod, attribute):
#     return getattr(instancemethod, attribute) is not None
# return False
# Funny comtypes...
# in Py3 unbound methods have same type as functions.
# item = getattr(obj, name)   # ????
# Thanks to ReportLab for this funny exception...
# This can come from the pseudo module in six
#mainmod = importlib.import_module(import_name)
#submod = importlib.import_module(import_string)
# pubsub and Editra can be funny sometimes...
# *** WHY?
# TODO: instead of just skipping to generating the ReST files, do some
# dependency checking and rescan those files that are newer than the
# pickle file.
# restore
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# Name:        sphinxtools/postprocess.py
# Author:      Andrea Gavana
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Standard library imports
# Phoenix-specific imports
# ----------------------------------------------------------------------- #
# Add custom roles
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# Replace the "Perl Note" stuff, we don't need it
# Replacements for ScrolledWindow and ScrolledCanvas...
# Replacement for wx.grid stuff
# Leave the DocstringsGuidelines.txt file alone on these ones
# Avoid Sphinx warnings on wx.TreeCtrl
# Replace EmptyString stuff
# Replace ArrayXXX stuff...
# Remove lines with "Event macros" in them...
# ----------------------------------------------------------------------- #
# Malformed inter-links
# ----------------------------------------------------------------------- #
# Leave the items with spaces/dash alone, as they are
# Overview pages
# Sometimes in wxWidgets the enums and structures are reported as
# Class.Enum/Class.Structure, while we only have links to Enum and Structures
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# Core functions
# ----------------------------------------------------------------------- #
# Core functions
# Take care to get only files starting with "wx.UpperName", not
# "wx.lower.UpperName". This is so we don't put all the enums in the
# submodules in the core wx module too.
# TODO: This may not work on case-insensitive file systems, check it.
# Workaround to sort names in a case-insensitive way
# Are there functions for this module too?
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
#8211' not in line:
#' in paramdesc:
#') + 1
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ENUMS
# repalce the <hr> with a new headline for the first method or first property
#methods" title="Permalink to this headline">¶</a></h3>\n'
#properties" title="Permalink to this headline">¶</a></h3>\n'
# ----------------------------------------------------------------------- #
# Chop off the #anchor if it is identical to the basname of the doc
#')
# No tooltip for this one
# Leave the default tooltip
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# Name:        sphinxtools/templates.py
# Author:      Andrea Gavana
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Main class description, with class name repeated twice
# Inheritance diagram template, containing the class name, the PNG file representing
# the inheritance diagram, the "ALT" HTML flag (the class name again) and the full
# "MAP" HTML flag used for mouse navigation in the inheritance diagram boxes
#dummy" class="inheritance"/></center>
# Template for the widget screenshots, with one screenshots image file for
# each platform
# Template for the subclasses of a class, with a string containing a list
# of comma separated class names with their ReST role as :ref: prepended
# Template for the superclasses of a class, with a string containing a list
# of comma separated class names with their ReST role as :ref: prepended
# Template for the method summary of a class, containing a table made of
# ``method_name``      ``method description``
# Template for the property summary of a class, containing a table made of
# ``property_name``      ``property description``
# Template for the Class API title, no input
# Template for the standalone function summary for a module (wx, wx.dataview
# and so on).
# Template for the main class index for a module (wx, wx.dataview and so on).
# Template for the functions header in the module index
# Template for the class window styles, with the class name as input
# Template for the class window extra styles, with the class name as input
# Template for the class events, with the class name as input
# Template used to generate the widgets gallery (this needs some work)
# Template to generate the "headings.inc" file containing the substitution reference
# for the small icons used in the Sphinx titles, sub-titles and so on.
# Templates for the summary of modules/packages, containing a table made of
# ``module name``      ``short description``
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# Name:        sphinxtools/utilities.py
# Author:      Andrea Gavana
#
# Created:     30-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Standard library imports
# Phoenix-specific imports
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# This should get rid of substitutions like "float buffered"...
# Avoid replacing standalone '&&' and similar
# ----------------------------------------------------------------------- #
# ***
#***
# ----------------------------------------------------------------------- #
#include" are ignored.
#***
#include']
# Bloody SetCursorEvent...
# ***
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# Avoid Sphinx warnings
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
# ----------------------------------------------------------------------- #
##', '').strip()
# funny ctypes...
#%s'%(real_name.lower(), real_name)
#%s'%(possible_external.lower(), real_name)
# Load version numbers from __version__ and some other initialization tasks...
# Add the build type to PlatformInfo
# Register a function to be called when Python terminates that will clean
# up and release all system resources that wxWidgets allocated.
# A little trick to make 'wx' be a reference to this module so wx.Names can
# be used in the python code here.
# It is a class.  Make a subclass that raises a warning.
# wrap a new function around the callable
# it should be a property if there is a getter
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Create some event binders
# Scrolling from wxWindow (sent to wxScrolledWindow)
# Scrolling from wx.Slider and wx.ScrollBar
# Scrolling from wx.Slider and wx.ScrollBar, with an id
# deprecated wxEVT aliases
#---------------------------------------------------------------------------
# Name:        wx/gizmos.py
# Author:      Robin Dunn
#
# Created:     27-Oct-2017
# Copyright:   (c) 2017-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# This is just a compatibility shim to make the gizmos classes usable from
# the wx.gizmos module, like in Classic.  They're actually in the wx.lib.gizmos
# package now.
#
# This module is deprecated and could be removed some time in the future. Please
# switch your imports to wx.lib.gizmos
#---------------------------------------------------------------------------
# Name:        wx/__init__.py
# Author:      Robin Dunn
#
# Created:     3-Nov-2010
# Copyright:   (c) 2010-2018 by Total Control Software
# License:     wxWindows License
#---------------------------------------------------------------------------
# Load the main version string into the package namespace
# Import all items from the core wxPython module so they appear in the wx
# package namespace.
# Clean up the package namespace
# Automatically generated by TopicTreeSpecPrinter(**kwargs).
# The kwargs were:
# - fileObj: file
# - footer: '# End of topic tree definition. Note that application may l...'
# - indentStep: 4
# - treeDoc: 'Tree docs, can be anything you want....'
# - width: 70
# End of topic tree definition. Note that application may load
# more than one definitions provider.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: Remove this test and add real ones.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
##import os; print 'PID:', os.getpid(); raw_input('Ready to start, press enter...')
#---------------------------------------------------------------------------
# wx.PySimpleApp is supposed to be deprecated, make sure it is.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# basic conversion of list or tuples of numbers
#floats are truncated to int
# test error conditions
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# basic conversion of list or tuples of strings
# test error conditions
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# a compatibility alias for wxAssertionError
# check default mode
# attempting to convert an invalid bitmap to an image is an easy way
# to trigger an assert
# test that assertions can be ignored...
# ...and then turned back on
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# wx.EmptyBitmap is supposed to be deprecated, make sure it is.
# check that the __nonzero__ method can be used with if satements
# just make sure this one exists
# The array.array object does not support the new buffer protocol,
# (at least as of 2.7) so this test shows if we can support the old
# one too.
# The array.array object does not support the new buffer protocol,
# (at least as of 2.7) so this test shows if we can support the old
# one too.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# These are actually aliases for wx.Notebook
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# do the properties exist?
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#self.assertEqual(s, [2,4])   the internal list isn't updated right away, can't test this here
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# do the properties exist?
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# copy
# paste
# same, but with the context manager
# copy
# paste
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# property for the same methods
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# do the properties exist?
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Ensure that other types that are sequence-like can't be
# auto-converted, the copy constructor is good-enough for testing this
# Test the immutable version returned by GetIM
#112233')
#11223344')
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# is it there?  It was lost, once upon a time
# Are both overloads present?
# select an item
# select a range of text
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# properties
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#self.assertTrue(cfg is cfg0)
# Test for presence of config enums
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Make sure we haven't borked the magic ID
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# stock
# from file
# from image
# copy
# check that the __nonzero__ method can be used with if satements
# just make sure this one exists
#---------------------------------------------------------------------------
#print os.getpid(); raw_input('Press enter...')
#---------------------------------------------------------------------------
# TODO: Get this fixed!  See https://groups.google.com/d/topic/wx-dev/wFxevpvbhvQ/discussion
# On windows strlen is used internally for stock string types
# to calculate the size, so we need to make room for and add
# a null character at the end for our custom format using
# wx.DF_TEXT.
# copy our local data value to buf
# add the extra byte
# copy from buf to our local data value
# strip off the extra byte at the end
# copy
# paste
# More-or-less a duplicate of the above, but with a custom data format
# copy our local data value to buf
# copy from buf to our local data value
# copy
# paste
# TODO: Get this fixed!  See https://groups.google.com/d/topic/wx-dev/wFxevpvbhvQ/discussion
# See notes above about the need for a null terminator when
# using wx.DF_TEXT on Windows.
# copy our local data value to buf
# copy from buf to our local data value
# copy
# paste
# More-or-less a duplicate of the above, but with a custom data format
# copy our local data value to buf
# copy from buf to our local data value
# copy
# paste
# copy
# paste
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
# This one can't be subclassed (that's what dv.DataViewCustomRenderer
# is for) so make sure it raises an exception too.
#-------------------------------------------------------
# create
# test that properties exist
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
# The reference count should still be 1 because the model was
# DecRef'ed when it's ownership transfered to C++ in the
# AssociateModel call
# Now try associating it with another view and check counts again
# Destroying the 2nd view should drop the refcount again
# And since ownership has been transferred, deleting this reference
# to the model should not cause any problems.
#-------------------------------------------------------
#-------------------------------------------------------
# DataViewTreeCtrl
#-------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# execute some tricky tweaks to make sure they work are as they are supposed to.
# check ownership
# check the DC's ownership has changed
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# We're using the KeepReference annotation for the dc and bitmap args
# to ensure that they will live as long as the DC does. This test will
# try to verify that it works the way I think it does, that the extra
# reference is made, and also released when the DC goes away.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#self.SetBackgroundStyle(wx.BG_STYLE_PAINT)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# number of points per polygon
# number of characters in text
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# A __nonzero__ method has been added to the wx.Window class that
# will return True if the C++ part of the object still exists. This
# can be used with if's or other conditional statements to see if it
# is still safe to call methods of that window object.
# check that it also works with TLWs whose destruction is delayed
# until there are idle events.
# TODO: figure out if this is a bug in wxMSW, or just an oddity of
# the test environment.
# There should be a RuntimeError exception if we try to use an object
# after it's C++ parts have been detroyed.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# These constants are not plain int's
# These constants needed some special tweaking.  Make sure it
# was done right.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Add some buttons
# Something is causing a hang when running one of these tests, so
# for now we'll not actually test ShowModal on Macs.
# TODO: FIX THIS!!
# with parent
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#import os; print(os.getpid())
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Test that a __dtor__ method is called when a wrapped C++ class is
# destroyed
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Test the constructors to make sure the classes are not abstract, except
# for wx.Event
# it's an abstract class, so it can't be instantiated
#assert id(self.obj) != id(self.OnSize)  # Strange, but it's possible
#**kwds)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# it's an abstract class, so it can't be instantiated
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# a typical use case
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# they are in LIFO order
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# For now just test that the expected classes exist.
# TODO: Add more tests.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# this ctor was removed
#f7 = wx.Font(18, wx.FONTFAMILY_SWISS, wx.FONTFLAG_BOLD|wx.FONTFLAG_ITALIC)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# on Windows wx.FONTFAMILY_TELETYPE will actually use wx.FONTFAMILY_MODERN
# but on GTK wx.FONTFAMILY_MODERN uses wx.FONTFAMILY_TELETYPE
# TODO: find a safe way to test ShowModal on native dialogs
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# quit when we've got 5
# quit when we've got 5
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#nfi.PixelSize
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# test a couple tweaks added in wx.TopLevelWidnow
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# automatically restores the old one
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# window
# sizer
# spacer
# item
# window
# sizer
# spacer
# Test the immutable version returned by GetIM
# Test the immutable version returned by GetIM
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#p = 5 * p1
# tests both getitem and setitem
# Test the immutable version returned by GetIM
# Ensure that other types that are sequence-like can't be
# auto-converted, the copy constructor is good-enough for testing this
#---------------------------------------------------------------------------
#s = 5 * s1
# tests both getitem and setitem
# Test the immutable version returned by GetIM
# Ensure that other types that are sequence-like can't be
# auto-converted, the copy constructor is good-enough for testing this
#---------------------------------------------------------------------------
# Test the immutable version returned by GetIM
#---------------------------------------------------------------------------
# Test the immutable version returned by GetIM
# Ensure that other types that are sequence-like can't be
# auto-converted, the copy constructor is good-enough for testing this
# TODO: more tests!
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Test the immutable version returned by GetIM
# Test the immutable version returned by GetIM
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# CreateSubBitmap is not implemented for wxCairoRenderer
# 2 existing, plus 4 added
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# NOTE: Most of these tests simply check that the class exists and can be
# instantiated. It would be nice to add more here, but in the meantime it
# will probably be easier to test features and interoperability between
# the classes in a non-unitest situation. See Phoenix/samples/grid
# test that some GCA methods which were missing are now present
# Does it exist
# new names
# Test the immutable version returned by GetIM
# See issue #297
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# normal properties
# monkey-patched
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#hc = wx.HelpController()
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# should be an exception here because the buffer is the wrong size
# checks that all of the standard wx derivations are available.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# This tests if we're able to pull translations from the wx message catalogs
# just a few of them to make sure the file is included properly
# check that this function exists
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Initialize AquaButton 1 (with image)
# Initialize AquaButton 2 (no image)
# Initialize AquaButton 2 (no image)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# tell AuiManager to manage this frame
# prepare a few custom overflow elements for the toolbars' overflow buttons
# For auibook
# -----------
# -------------------------- #
# - FrameManager Constants - #
# -------------------------- #
# Docking Styles
# Floating/Dragging Styles
# Panes Customization
# Caption Gradient Type
# Pane Button State
# Pane minimize mode
# Button kind
# Pane Insert Level
# ------------------------ #
# - AuiToolBar Constants - #
# ------------------------ #
# AuiToolBar settings
# AuiToolBar text orientation
# AuiToolBar tool orientation
# ------------------------------- #
# - AuiSwitcherDialog Constants - #
# ------------------------------- #
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# ButtonPanel agwStyle
# ButtonPanel alignments
# HitTest flags
# Caption gradient types
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# CubeColourDialog agwStyle
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# ensure that the "Py" versions works as the normal one
# Checkboxes, there can be more than one checked at the same level
# RadioButtons, there can NOT be more than one checked at the same level
# On Mac the scrollbars and the gripper between them on
# ScrolledWindows are also wx widgets, so they are in the
# children list.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# First we create the sub-menu item
# Create the menu items
#-----------------------------------------------
# Flat Menu test
#-----------------------------------------------
#%ld"%(ii+1), "", wx.ITEM_NORMAL, sub)
#%ld"%(k+1))
#%ld"%(ii+1))
# Clear the capture since the test won't do a normal shudown of the flatmenu
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Some methods tests...
# Should not be possible to set 100...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# above is to excersize OrderedDict
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Some methods tests...
# Separators do not count as they are not "real" windows
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Put in some coloured panels...
# Some methods tests...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Test custom and default button labels
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Initialize GradientButton 1 (with image)
# Initialize GradientButton 2 (no image)
# Initialize AquaButton 2 (no image)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Some methods tests...
# Should not be possible...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Pin button states
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# it looks like the generic dir ctrl may start out with an item
# selected, so allow for that here
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# give the frame a Name for below
# give the frame a Name for below
# give the frame a Name for below
# Just clean up the test file used by the other tests...
# TODO: Fix these tests to be self-contained and to clean up after themselves
# PersistenceManager styles
# String constants used by BookHandler
# To save and restore wx.lib.agw.aui.AuiNotebook perspectives
# ----------------------------------------------------------------------------------- #
# String constants used by TreebookHandler
# this key contains the indices of all expanded nodes in the tree book
# separated by PERSIST_SEP
# ----------------------------------------------------------------------------------- #
# String constants used by TLWHandler
# we use just "Window" to keep configuration files and such short, there
# should be no confusion with wx.Window itself as we don't have persistent
# windows, just persistent controls which have their own specific kind strings
# Names for various persistent options
# To save and restore wx.aui and wx.lib.agw.aui perspectives
# ----------------------------------------------------------------------------------- #
# String constants used by CheckBoxHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ListBoxHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ListCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by CheckListBoxHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ChoiceComboHandler
# ----------------------------------------------------------------------------------- #
# String constants used by RadioBoxHandler
# ----------------------------------------------------------------------------------- #
# String constants used by RadioButtonHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ScrolledWindowHandler
# ----------------------------------------------------------------------------------- #
# String constants used by SliderHandler
# ----------------------------------------------------------------------------------- #
# String constants used by SpinHandler
# ----------------------------------------------------------------------------------- #
# String constants used by SplitterHandler
# ----------------------------------------------------------------------------------- #
# String constants used by TextCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ToggleButtonHandler
# ----------------------------------------------------------------------------------- #
# String constants used by TreeCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by TreeListCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by CalendarCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by CollapsiblePaneHandler
# ----------------------------------------------------------------------------------- #
# String constants used by DatePickerHandler
# ----------------------------------------------------------------------------------- #
# String constants used by MediaCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ColourPickerHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FileDirPickerHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FontPickerHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FileHistoryHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FindReplaceHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FontDialogHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ColourDialogHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ChoiceDialogHandler
# ----------------------------------------------------------------------------------- #
# String constants used by MenuBarHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ToolBarHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FoldPanelBarHandler
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# create a simple PieCtrl with 2 sectors
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Some methods tests...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Some methods tests...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Some methods tests...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# RibbonScrollButtonStyle
# RibbonButtonKind
# RibbonButtonBarButtonState
# RibbonGalleryButtonState
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Some methods tests...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Set The Region Of Existence Of SpeedMeter (Always In Radians!!!!)
# Create The Intervals That Will Divide Our SpeedMeter In Sectors
# Assign The Same Colours To All Sectors (We Simulate A Car Control For Speed)
# Usually This Is Black
# Assign The Ticks: Here They Are Simply The String Equivalent Of The Intervals
# Set The Ticks/Tick Markers Colour
# We Want To Draw 5 Secondary Tickis Between The Principal Ticks
# Set The Font For The Ticks Markers
# Set The Text In The Center Of SpeedMeter
# Assign The Colour To The Center Text
# Assign A Font To The Center Text
# Set The Colour For The Hand Indicator
# Do Not Draw The External (Container) Arc. Drawing The External Arc May
# Sometimes Create Uglier Controls. Try To Comment This Line And See It
# For Yourself!
# Set The Current Value For The SpeedMeter
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# in doc but does not exist???
#wx.EVT_LIST_ITEM_CHECKING
#wx.EVT_LIST_ITEM_CHECKED
#wx.EVT_LIST_COL_CHECKING
#wx.EVT_LIST_COL_CHECKED
#wx.EVT_LIST_FOOTER_CHECKING
#wx.EVT_LIST_FOOTER_CHECKED
#wx.EVT_LIST_ITEM_HYPERLINK
#wx.EVT_LIST_FOOTER_CLICK
#wx.EVT_LIST_FOOTER_RIGHT_CLICK
#wx.EVT_LIST_ITEM_LEFT_CLICK
#wx.EVT_LIST_END_DRAG
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# this also validates cdate.julianDay, since Date.day_of_week depends on it
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# All we can test here is that we have more lines than we started
# with, since different platforms may wrap at different spots in the
# string.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# OK to have a zero-sized BB
# OK to have a zero-sized BB
# OK to have a tiny BB
# Should catch tiny difference
# Different data type
# same data type -- should be a view
#B = BBox( ( (1.0, 2.0), (5.0, 10.0) ) )
# B should be completely inside A
# up and to the right or A
#    def testIsNull(self):
#        self.failUnless( self.B1.IsNull )
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# a typical use case
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#def test_ComboBoxDefaultCtor(self):
#c = m.PreMaskedComboBox(self.frame)
#c.Create(self.frame, value="value", choices="one two three four".split())
#---------------------------------------------------------------------------
#def test_textctrlDefaultCtor(self):
#t = m.TextCtrl()
#t.Create(self.frame)
#---------------------------------------------------------------------------
#def test_numctrlDefaultCtor(self):
#t = m.TextCtrl()
#t.Create(self.frame)
#---------------------------------------------------------------------------
#def test_numctrlDefaultCtor(self):
#t = m.TextCtrl()
#t.Create(self.frame)
#---------------------------------------------------------------------------
#def test_ipaddrctrlDefaultCtor(self):
#t = m.IpAddrCtrl()
#t.Create(self.frame)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# class _InspectionHighlighter's FlickerTLW method invokes
# wx.CallLater(300, self._Toggle, tlw),
# so let's give it a chance to run:
#---------------------------------------------------------------------------
# create a division in the composite
# add a shape to the original division
# Like aligned, but with the objects centred on the respective edge
# of the reference object.
# from _drawn
# Drawing operations
# Line alignment flags
# Vertical by default
# keys
#---------------------------------------------------------------------------
# Assume neither PyMuPDF nor PyPDF2 found
#---------------------------------------------------------------------------
# introduce buttonpanel and viewer to each other
#---------------------------------------------------------------------------
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Verify that a 'temporary' listener (one that will be garbage collected
# as soon as subscribe() returns because there are no strong references to
# it) gets immediately unregistered
# create a listener for listeners that have died
# define a topic, subscribe to it, and kill its listener:
#print 'being deleted'
# verify:
# verify that self.pub.isValid() works too
# should do nothing if already subscribed:
# test self.pub.getDefaultTopicMgr().getTopics()
# test ALL_TOPICS
# test unsub many non-pubsub topic listeners
# now same but with filter:
# test unsub all listeners of all topics
# at least all the 'expected' ones were unsub'd; will be others if this
# test is run after other unit tests in same nosetests run
# must also check for subtopics if parents have listeners since
# filtering of args is affected
#pub.TopicDefnError, pub.setTopicUnspecifiedFatal
# required can't become optional!
# parent's arg1 missing
# optional can become required
# parent's arg1 missing
# with getOrCreateTopic(topic, proto), the 'required args' set
# is garanteed to be a subset of 'all args'
# with newTopic(), 'required args' specified separately so
# verify that errors caught
#import traceback
#traceback.print_exc()
# ok_1
# err_11
# err_12
# ok_21
# err_22
# check when no inheritence involved
# reqd args wrong
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# create a listener that raises an exception:
# first test when a listener raises an exception and exception listener also raises!
# create a listener that raises an exception:
# subscribe a good exception listener and validate
# create the listener for uncaught exceptions in listeners:
# verify that information received; first the listenerStr
# next the traceback:
# next the formatted traceback:
# finally the string for formatted traceback:
# verify that listener isn't stuck in a cyclic reference by sys.exc_info()
#Test sendMessage when one handler, then change handler and verify changed
#pubsub.utils.notification.useNotifyByWriteFile()
#assert_equal( self.pub.getDefaultTopicMgr().getTopic(testTopic).getNumListeners(), 1 )
#'MyExcHandler'
# restore to no handling and verify:
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Test when ValidatorSameKwargsOnly used, ie when args in
# listener and topic must be exact match (unless *arg).
# test for topic that has no arg/kwargs in topic message spec (TMS)
# no arg/kwarg in topic message spec (TMS)
# ok: same
# ok: *args/**kwargs
# ok: extra but AUTO_TOPIC
# E: extra arg
# E: extra kwarg
# one arg/kwarg in topic
# ok: same
# ok: same even if a now has default value
# ok: has **kwargs
# ok: has **kwargs
# E: b now required
# E: missing arg
# E: missing kwarg
# E: extra kwarg
# E: extra kwarg
# E: extra arg
# E: extra arg
# Test the proper trapping of non-callable and certain types of
# callable objects.
# validate different types of callables
# not a function:
# just pick something that is not a function
# a regular function:
# a functor and a method
# Test the correct determination of whether want topic
# auto-passed during sendMessage() calls.
# first check proper breakdown of listener args:
# now some white box testing of validator that makes use of args info:
# topic that has Listener.AUTO_TOPIC as an arg rather than kwarg
# Test "dead on arrival"
# test DOA of unbound method
# Py3 doesn't have unbound methods so this won't throw a ValueError
# test DOA of tmp callable:
# check dead-on-arrival when no death callback specified:
# check dead-on-arrival when a death callback specified:
# Test equality tests of two listeners
# verify that Listener can be compared for equality to another Listener, weakref, or callable
# now for class method listener:
# Test notification callbacks when listener dies
# test dead listener notification
# now force some listeners to die, verify lsrs list
# define various type of listeners
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# strip as other wise one has \n, at least on windows
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# should never get here
# don't notify of self subscription
# don't notify of self unsubscription
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# trap the pubsub.sendMessage topic:
# generate a message that will cause pubsub.sendMessage to be generated too
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# the following should create all topic tree since parent
# topics are automatically created
# validate that topic specs were properly parsed
# no providers have spec for subtopic_2
#printTreeSpec()
#
# Test that import/export/import does not change the import
#
# few sanity checks
# export tree
#print exported
# Automatically generated by TopicTreeSpecPrinter(**kwargs).
# The kwargs were:
# - fileObj: StringIO
# - footer: '# End of topic tree definition. Note that application may l...'
# - indentStep: 4
# - treeDoc: 'Tree docs, can be anything you want....'
# - width: 70
# End of topic tree definition. Note that application may load
# more than one definitions provider.
# check there are no differences
#print '\n'.join(diffs)
# now for module:
# - fileObj: TextIOWrapper\n', '+ # - fileObj: file\n']
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# root
# sub, complete
# sub, missing
# sub, of incomplete spec, given ALL args
# root, complete
# sub 1, empty
# empty sub of sub 1
# completed sub of sub 1
# check assumptions before we start:
# pretend we have an update for ai2: all args now available
# check:
# filter:
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#
# Test create and then modify state of a topic object
#
# when parent is None, only nameTuple=ALL_TOPICS is allowed, thereby
# guaranteeing that only one tree root can be created
# create the ALL TOPICS topic; it has no message args
# verify its state is as expected after creation:
# extra required arg
# extra is optional
#
# Test subscription and unsubscription of listeners
#
# need to run this here again to get rootTopic setup for this test
# now modify its state by subscribing listeners
# try to subscribe an invalid listener
# extra required arg
# try unsubscribe
# try unsubscribe all, with filtering
# use != since it is defined in terms of ==; also, put listener
# on RHS to verify works even when Listener used on RHS
#
# Test creation of a child topic, subscription of listeners
#
# need to run this here again to get rootTopic setup for this test
# now create a child of child with wrong arguments so we can test exceptions
# test when all OK
# test when requiredArg wrong
# test when missing opt arg
#---------------------------------------------------------------------------
#
# Test that valid topic names are accepted by pubsub'
#
#
# Test that invalid topic names are rejected by pubsub
#
# parts of topic name are 'empty'
# parts of topic name have invalid char
#
# Test the getOrCreateTopic without proto listener
#
# check that getTopic and getOrCreateTopic won't create again:
# test with a root topic
# verify doesn't exist yet
# ok create it, unsendable
# test with a subtopic
# verify that parent was created implicitly
# check that getTopic raises expected exception when undefined topic:
#
# Test the getOrCreateTopic with proto listener
#
# verify doesn't exist yet
# ok create it, sendable
# check that getTopic and getOrCreateTopic won't create again:
# check that topic created can discern between good and bad listener
# missing required arg
# opt arg is required
# extra required arg
# verify that missing parent created is not sendable, child is
#
# Test the addition and clearing of definition providers
#
#
# Test the use of definition providers for topics. We create
# two so we can check that more than one can work together.
# One provides good definitions, one provides some with errors.
#
# parent doesn't have defn
# missing arg2
# missing arg1
# arg1 is no longer required
# create some topics that will use defn provider
# check
# now the erroneous ones:
# ok, did raise but is it correct message?
#
# Test topic deletion
#
#
# Test printing of topic tree
#
#
# Test traversing with and without filtering, breadth and depth
#
# only accept topics at root or second level tree, or if tailName() is 'A'
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#f = sc.SizedFrame()
#f.Create(None, title='2 phase')
#f.Show()
#f.Close()
#def test_frameTopLevelTweaks(self):
#    # test a couple tweaks added in wx.TopLevelWidnow
#    f = sc.SizedFrame()
#    f.MacSetMetalAppearance(True)
#    f.Create(None)
#    f.Show()
#    f.MacGetTopLevelWindowRef()
#    f.Close()
#---------------------------------------------------------------------------
# Add some buttons
#def test_dialogDefaultCtor(self):
#    dlg = sc.SizedDialog()
#    dlg.Create(None, title='dialog')
#    self.runDialog(dlg)
# with parent
# without parent
#---------------------------------------------------------------------------
#def test_panelDefaultCtor(self):
#    p = sc.SizedPanel()
#    p.Create(self.frame)
#---------------------------------------------------------------------------
#def test_panelDefaultCtor(self):
#    p = sc.SizedScrolledPanel()
#    p.Create(self.frame)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# check creating a ListEvent, and if the properties are working
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# make a big value
# setting the timespan's seconds property will use the mapped type
# code to convert to a wxLongLong...
# ...and fetching it from the timespan will use the mapped type to
# convert back from a wxLongLong to a Python object...
# ...which we can compare with the original.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Not testing with output file because the file resource is not released
# soon enough to be able to delete the file in this test, resulting in
# permission errors.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# not called because Enter didn't return wx.ID_NONE
#---------------------------------------------------------------------------
# Is it just this module or the whole test suite being run?
#---------------------------------------------------------------------------
# make sure it fills the frame
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just check that the properties exist, the getters will also be called in the process
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Ideally we would call this but don't know how to dismiss the dialog
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# test with a bytearray like the original impl
# and do the same using a list
# not sequences
# not the same length
# not integers
# outside of 0..255 range
# outside of 0..255 range
# range is okay, checking start and end
# 3 different kinds of sequences :)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#0000FF')
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# stdout will likely contain a traceback or some other indication of
# the failure, so use it as the assert message for the unittest.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Test the immutable version returned by GetIM
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: Add some better unittests here. In the meantime see
# samples/printing/printing.py
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: We need to figure out some way to unittest wx.PrintPreview
# and wx.Printout...  In the meantime see samples/printing/printing.py
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# wx.Execute and wx.Process can only launch app bundles on OSX!! It's
# a good thing we have the subprocess module that can be used instead.
# TODO: When the stream classes are wrapped add tests for writing to and
# reading from the process
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#wx.MilliSleep(250)
#wx.MilliSleep(250)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Constants
# Normal, simple usage
# 2-Phase create
# Derived class
# 1st phase
# Setup
# 2nd phase create
# Create the stock buttons
# Add some pages
# Do the layout
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# it's an abstract class, so it can't be instantiated
# it's an abstract class, so it can't be instantiated
# Just make sure these exist
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Ensure SetPropertyValue doesn't truncate floats
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# it's an abstract class, so it can't be instantiated
# check the nested enum values
# def test_propgridproperty07(self):
#     attrs = pg.PGAttributeStorage()
#     attrs.Set('name',     'value')
#     attrs.Set('one',      1)
#     attrs.Set('two.one',  2.1)
#     attrs.Set('true',     True)
#     assert attrs.GetCount() == 4
#     assert attrs.FindValue('name') == 'value'
#     # TODO: Add some iteration tests
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Paint event handler for the panel
#---------------------------------------------------------------------------
##import os; print 'PID:', os.getpid(); raw_input('Ready to start, press enter...')
#---------------------------------------------------------------------------
# Since we're doing some funky stuff under the covers with Clone, make
# sure that the reference counts on everything (before and after)
# still make sense
# test what happens when Clone is called from C++
# test what happens when Clone is called from C++
# Since we're doing some funky stuff under the covers with Clone, make
# sure that the reference counts on everything (before and after)
# still make sense
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# introspect is expecting this! usually inited by wx.py.interpreter
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Test using the __iter__ generator
# This block of code is another way to do the same as above
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO:  Expand these tests, this is really minimal currently
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Attempting to access pti.page can crash Python
# pti.page might need some tweaking in etg/ribbon_bar.py
# It has an unusual type in ext/wxWidgets/src/ribbon/bar.cpp:
# WX_DEFINE_USER_EXPORTED_OBJARRAY(wxRibbonPageTabInfoArray)
# pti.page
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# It's an ABC
# It's an ABC
# It's an ABC
# TODO: finish this   a = wx.richtext.RichTextAction(c, 'name', 1234, b, )
# Test the immutable version returned by GetIM
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# just testing that they exist for now...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# in scroll units
# scroll units
# pixels
# pixels
# also test the Point overloads
# pixels
# pixels
# True if OnDraw was called
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# item w/o tuple
# spacer
# item in tuple w/ other args
# Test if deleted sizers evaluate to False
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# just checks if they exist
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# these are grafted-on methods, just make sure that they are there
# Just ensure that the common TextCtrl methods are present. This is
# done because although the C++ class either derives from wxTextCtrl
# or from wxTextCtrlIface, we have to kludge it up a bit since the
# actual class hierarchies are different between platforms. See
# etg/srchctrl.py for details.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#sb.Icon   # TODO: this asserts if SetIcon hasn't been called
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Test that GetFieldRect has been tweaked to be compatible with Classic
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#CCFF00", "RED")
#00FF00", "#00FF00")
#0000FF" % (pb, face1))
#FF0000,size:%d" % (face2, pb))
#FFF0F0")
# This is not even close to the full set of constants in the module,
# but just a represenative few to help ensure that the code
# generation is continuing to do what it is supposed to be doing.
# Just ensure that the common TextCtrl methods are present. This is
# done because the C++ class either derives from wxTextEntryBase
# or from wxTextCtrlIface, but these classes are not part of the API
# (and thus are not wrapped), so we have to kludge things.
# See etg/_stc.py for details.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# ensure that all the stock objects have been created and also initialized
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: Remove this test and add real ones.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# This tests being able to pass a Python file-like object to a
# wrapped function expecting a wxInputStream.
# First, load the image data into a StringIO object
# Then use it to create a wx.Image
# This tests being able to pass a Python file-like object to a
# wrapped function expecting a wxOutputStream.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# utf-8 string
# convert to unicode
# make a string with a different encoding
# wx.testStringTypemap() will accept a parameter that
# is a Unicode object or an 'ascii' or 'utf-8' string object,
# which will then be converted to a wxString. The return
# value is a Unicode object that has been converted from a
# wxString that is a copy of the wxString created for the
# parameter.
# ascii
# unicode should pass through unmodified
# utf-8 is converted
# can't auto-convert this
# utf-16-be
# utf-32-be
# utf-8 with BOM
#val = "\xef\xbb\xbfHello"
#result = wx.testStringTypemap(val)
#self.assertTrue(result == u'\ufeffHello')
# utf-8 bytes
# convert to unicode
# make a string with a different encoding
# ascii
# unicode should pass through unmodified
# utf-8 is converted
# can't auto-convert this
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# timer will not have expired yet by this time, so flag shouldn't be set
# simple CallLater usage
# test getting the result and restarting the CallLater
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# testing client data via the tool object
# property getter
# testing property setter
# testing client data via the toolbar
# Tool properties
#tool.Control
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Can a TreeItemId be a dictionary key?
# Compare with None
# ensure that the "Py" versions raise deprecation warnings
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# use the hidden root as the parent of the visible root
# test if embedded DataViewCtrl is returned as the correct type
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: The mouse pos may be off by 1 on MSW, is this expected?
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: Remove this test and add real ones.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# test using the properties
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO: Remove this test and add real ones.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#print(wx.testVariantTypeName(d1))
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# just testing that it exists
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# This test will ensure that a virtual C++ method from a base class can
# be overridden in a derived class implemented in Python, and that when
# the C++ method is called from C++ that the Python override is called.
# In addition the Python override will pass the call on to the base class
# implementation and this test will ensure that is successful as well.
#
# The AddChild method is a good cantidate for this test because it is
# easy to induce a call from C++ (just create a child window) and it is
# easy to test if the calling the base class AddChild works (the length
# of the GetChildren list will increase.)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# check the ItemCount property
# check that the overridden virtuals were called
# overridable methods
#c0c0c0', 1, wx.PENSTYLE_DOT_DASH))
#dc = wx.ClientDC(self)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Just test that these properties exist for now. More tests can be
# added later to ensure that they work correctly.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# This test is expected to fail if autoID mangagement is turned on
# because a reference to the ID is not being saved, so it will be 
# unreserved when the first widget is destroyed.
# but using this one should succeed
#---------------------------------------------------------------------------
##import os; print 'PID:', os.getpid(); raw_input('Ready to start, press enter...')
#---------------------------------------------------------------------------
#unittest.TestCase):
#self.assertEqual(len(TLWs), 6) # 1 created in the base class plus 5 here
# since TLWs delay destroying themselves there may be more than 6 of them here
# when we're running the whole test suite, so we have to comment out that
# assert...
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Create the wizard
# create the pages
# set the next/prev pages
# Same as above but use the Chain function to connect the pages
# Create the wizard
# create the pages
# set the next/prev pages
# Simply test if these new methods exist
# simulate clicking the next button until the wizard closes
# There seems to be a problem with stacking CallLaters while running
# the unittests, so for now just cancel and return.
#btn = wiz.FindWindowById(wx.ID_FORWARD)
#evt = wx.CommandEvent(wx.EVT_BUTTON.typeId, wx.ID_FORWARD)
#evt.SetEventObject(btn)
#wx.PostEvent(btn, evt)
#wx.CallLater(100, self._autoPilot, wiz)
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
##import os; print 'PID:', os.getpid(); raw_input('Ready to start, press enter...')
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Tests for custom handlers
# This test does not allow for 2-phase create or creating the instance of
# the resource before filling it with widgets or etc. See also the next
# test and try to keep the two of them in sync as much as possible.
# this is the class that will be created for the resource
# This is the little bit of customization that we do for this
# silly example.
# this is the handler class that will create the resource item
# Specify the styles recognized by objects of this type
# Ensure that the instance hasn't been created yet (since
# we're not using 2-phase create)
# Now create the object
# now load it
# This test shows how to do basically the same as above while still
# allowing the instance to be created before loading the content.
# this is the class that will be created for the resource
# create only the instance, not the widget
# this is the handler class that will create the resource item
# Specify the styles recognized by objects of this type
# if not, then create the instance (but not the window)
# Now create the UI object
# now load it
#---------------------------------------------------------------------------
# Tests for the Subclass Factory
# now load it
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# This file was generated by encode_bitmaps.py
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#---------------------------------------------------------------------------
# helper methods
# automatically restores the old one
# a little more than 1/30, just in case
#self.myYield()
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# remove the test topic if present
#skeys = sys.modules.keys()
#for name in skeys:
#del sys.modules[name]
# This class is used by test_xrc7() in test_xrc.py
# the Create step is done by XRC.
# This is the little bit of customization that we do for this
# silly example.  It could just as easily have been done in
# the resource.  We do it in the EVT_WINDOW_CREATE handler
# because the window doesn't really exist yet in the __init__.
# On OSX the EVT_SIZE happens before EVT_WINDOW_CREATE !?!
# so give it another kick
#----------------------------------------------------------------------
# Name:        wx.lib.activex
# Purpose:     The 3rd (and hopefully final) implementation of an
#              ActiveX container for wxPython.
#
# Author:      Robin Dunn
#
# Created:     5-June-2008
# Copyright:   (c) 2008-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
#------------------------------------------------------------------------------
# in case the arg is a tuple
# ditto
# create the control
# get the Interface for the Ax control
# Fetch the interface for IOleInPlaceActiveObject. We'll use this
# later to call its TranslateAccelerator method so the AX Control can
# deal with things like tab traversal and such within itself.
# Use this object as the event sink for the ActiveX events
# Turn the window handle into a wx.Window and set this object to be that window
# Set some wx.Window properties
# And an even easier property
# Pass native messages to the IOleInPlaceActiveObject
# interface before wx processes them, so navigation keys and
# accelerators can be dealt with the way that the AXControl
# wants them to be done. MSWTranslateMessage is called before
# wxWidgets handles and eats the navigation keys itself.
# TBD: Are the focus handlers needed?
# release our event sinks while the window still exists
#------------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.activexwrapper
# Purpose:     a wxWindow derived class that can hold an ActiveX control
#
# Author:      Robin Dunn
#
# Copyright:   (c) 2000-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 11/30/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
# o Tested with updated demo
#
# original error message
##from win32con import WS_TABSTOP, WS_VISIBLE
#----------------------------------------------------------------------
# use the CLSID to get the real class
# determine the base classes
# define the class attributes
# make a new class object
# These functions will be used as methods in the new class
# init base classes
#self.this.own(False)  # this should be set in wx.Window.__init__ when it calls _setOORInfo, but...
# move from class to instance
# create a pythonwin wrapper around this wxWindow
# create the control
# init the ax events part of the object
# hook some wx events
# get wxWindow size
# move the AXControl
#del self._wnd
#----------------------------------------------------------------------
# Name:        wx.lib.anchors
# Purpose:     A class that provides an easy to use interface over layout
#              constraints for anchored layout.
#
# Author:      Riaan Booysen
#
# Created:     15-Dec-2000
# Copyright:   (c) 2000-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 11/30/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
# o Tested with updated demo
#
#---------------------------------------------------------------------------
#  File:         busy.py
#  Description:  A class like wx.BusyInfo but which doesn't take up so much
#                space by default and which has a nicer look.
#
#  Date:         11-Sept-2012
#  Author:       Robin Dunn
#  Tags:         phoenix-port, unittest, documented
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Magic methods for using this class as a Context Manager
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.buttons
# Purpose:     Various kinds of generic buttons, (not native controls but
#              self-drawn.)
#
# Author:      Robin Dunn
#
# Created:     9-Dec-1999
# Copyright:   (c) 1999-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documented
#----------------------------------------------------------------------
# 11/30/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
# o Tested with updated demo
#
# Build a bitmap button and a normal one
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# draw the upper left sides
# draw the lower right sides
# 1 == kThemeBrushDialogBackgroundActive
# this line assumes that a pressed button should be hilighted with
# a solid colour even if the background is supposed to be transparent
# if the button was down when the mouse was released...
# in case the button was destroyed in the eventhandler
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# if there isn't a bitmap use the size of the text
# if the bitmap is used
# no bitmap -> size is zero
# size of text
# adjust for bitmap and text to centre
# draw bitmap if available
# extra spacing from bitmap
# draw the text
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# -*- coding: utf-8 -*-
# #----------------------------------------------------------------------------
# Name:         calendar.py
# Purpose:      Calendar display control
#
# Author:       Lorne White (email: lorne.white@telusplanet.net)
#
# Created:
# Version:      0.92
# Date:         Nov 26, 2001
# Licence:      wxWindows license
# Tags:         phoenix-port, documented, unittest, py3-port
#----------------------------------------------------------------------------
# 12/01/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
# o Tested with updated demo
# o Added new event type EVT_CALENDAR. The reason for this is that the original
#   library used a hardcoded ID of 2100 for generating events. This makes it
#   very difficult to fathom when trying to decode the code since there's no
#   published API. Creating the new event binder might seem like overkill -
#   after all, you might ask, why not just use a new event ID and be done with
#   it? However, a consistent interface is very useful at times; also it makes
#   it clear that we're not just hunting for mouse clicks -- we're hunting
#   wabbit^H^H^H^H (sorry bout that) for calender-driven mouse clicks. So
#   that's my sad story. Shoot me if you must :-)
# o There's still one deprecation warning buried in here somewhere, but I
#   haven't been able to find it yet. It only occurs when displaying a
#   print preview, and only the first time. It *could* be an error in the
#   demo, I suppose.
#
#   Here's the traceback:
#
#   C:\Python\lib\site-packages\wx\core.py:949: DeprecationWarning:
#       integer argument expected, got float
#   newobj = _core.new_Rect(*args, **kwargs)
#
# 12/17/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o A few style-guide nips and tucks
# o Renamed wxCalendar to Calendar
# o Couple of bugfixes
#
# 06/02/2004 - Joerg "Adi" Sieker adi@sieker.info
#
# o Changed color handling, use dictionary instead of members.
#   This causes all color changes to be ignored if they manipluate the members directly.
#   SetWeekColor and other method color methods were adapted to use the new dictionary.
# o Added COLOR_* constants
# o Added SetColor method for Calendar class
# o Added 3D look of week header
# o Added colors for 3D look of header
# o Fixed width calculation.
#   Because of rounding difference the total width and height of the
#   calendar could be up to 6 pixels to small. The last column and row
#   are now wider/taller by the missing amount.
# o Added SetTextAlign method to wxCalendar. This exposes logic
#   which was already there.
# o Fixed CalDraw.SetMarg which set set_x_st and set_y_st which don't get used anywhere.
#   Instead set set_x_mrg and set_y_mrg
# o Changed default X and Y Margin to 0.
# o Added wxCalendar.SetMargin.
#
# 17/03/2004 - Joerg "Adi" Sieker adi@sieker.info
# o Added keyboard navigation to the control.
#   Use the cursor keys to navigate through the ages. :)
#   The Home key function as go to today
# o select day is now a filled rect instead of just an outline
#
# 15/04/2005 - Joe "shmengie" Brown joebrown@podiatryfl.com
# o Adjusted spin control size/placement (On Windows ctrls were overlapping).
# o Set Ok/Cancel buttons to wx.ID_OK & wx.ID_CANCEL to provide default dialog
#   behaviour.
# o If no date has been clicked clicked, OnOk set the result to calend's date,
#   important if keyboard only navigation is used.
#
# 12/10/2006 - Walter Barnes walter_barnes05@yahoo.com
# o Fixed CalDraw to properly render months that start on a Sunday.
#
# 21/10/2006 - Walter Barnes walter_barnes05@yahoo.com
# o Fixed a bug in Calendar: Shift and Control key status was only recorded for
#   left-down events.
# o Added handlers for wxEVT_MIDDLE_DOWN and wxEVT_MIDDLE_DCLICK to generate
#   EVT_CALENDAR for these mouse events.
# Calendar click event - added 12/1/03 by jmg (see above)
# auto scale of the cal number day size
# default size of calendar if no auto size
# maximum size for calendar number
# alignment of numbers
# points indent from position, used to offset if not centered
# auto scale of week font text
# start position
# start of vertical draw default
# draw start position
# calendar draw margins
# highlight weekend dates
# overrides the weekend highlight
# highlighted days
# font digit color
# select background color
# full display window area
# full display window area
# reset initial values
# first day of week (Mon->0), number of days in month
# start day of first saturday
# ...unless we start on Sunday
# Saturday
# Sunday
# create rect region
# increase by 1 to include all gridlines
# initial font setting
# max size
# set fixed size
# draw the horizontal hilight
# draw the vertical hilight
# draw the horizontal lowlight
# draw the vertical lowlight
# max size
# set fixed size
# initial font setting
# left alignment
# left alignment
# initial font setting
# week title adjustment
# recalculate the cell height exkl. the week header and
# subtracting the size
# highlighted selected days
# start postion of draw
# start draw border location
# draw offset position
# set the calendar control attributes
# last used by
# highlighted selected days
# default calendar for current month
# leave a margin for the occasional DST crossing
# leave a margin for the occasional DST crossing
# legacy, this is now an alias for SetNow
# get the date, day, month, year set in calendar
# let the possible ValueError propagate
# drawing attributes
# these have to set after SetCal as SetCal would overwrite them again.
# clear large selection
# store last used by
# set the calendar and attributes
# get month list from DateTime
# select the month
# alternate spin button to control the month
# spin button to control the year
# result click type and date
# -*- coding: utf-8 -*-
# Name:         CDate.py
# Purpose:      Date and Calendar classes
#
# Author:       Lorne White (email: lwhite1@planet.eon.net)
#
# Created:
# Version       0.2 08-Nov-1999
# Licence:      wxWindows license
# Tags:         phoenix-port, py3-port, documented, unittest
#----------------------------------------------------------------------------
# Updated:      01-Dec-2004
# Action:       Cast the year variable to an integer under the Date Class
# Reason:       When the year was compared in the isleap() function, if it was
#               in a string format, then an error was raised.
#
# I18N
# Number of days per month (except for February in leap years)
# Full and abbreviated names of weekdays
# 12/01/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace. Not tested though.
#
# 12/17/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Removed wx prefix from class name,
#   updated reverse renamer
#
# Chris's original code...
#TODO: A MORE APPROPRIATE COMMAND LINE FOR Linux
#[or rather, non-Windows platforms... as of writing,
#this MEANS  Linux, until wxPython for wxMac comes along...]
# My alternative
#----------------------------------------------------------------------
# Name:        wx.lib.colourdb.py
# Purpose:     Adds a bunch of colour names and RGB values to the
#              colour database so they can be found by name
#
# Author:      Robin Dunn
#
# Created:     13-March-2001
# Copyright:   (c) 2001-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documented
#----------------------------------------------------------------------
# show the selected colour in this panel
# create a colour list from the colourdb database
# create a choice widget
# select item 0 (first item) in choice list to show
# set the current frame colour to the choice
# bind the checkbox events to an action
# change colour of the panel to the selected colour ...
# show the selected colour in the frame title
#----------------------------------------------------------------------------
# Name:         ColourSelect.py
# Purpose:      Colour Box Selection Control
#
# Author:       Lorne White, Lorne.White@telusplanet.net
#
# Created:      Feb 25, 2001
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented
#----------------------------------------------------------------------------
# creates a colour wxButton with selectable color
# button click provides a colour selection box
# button colour will change to new colour
# GetColour method to get the selected colour
# Updates:
# call back to function if changes made
# Cliff Wells, logiplexsoftware@earthlink.net:
# - Made ColourSelect into "is a button" rather than "has a button"
# - Added label parameter and logic to adjust the label colour according to the background
#   colour
# - Added id argument
# - Rearranged arguments to more closely follow wx conventions
# - Simplified some of the code
# Cliff Wells, 2002/02/07
# - Added ColourSelect Event
# 12/01/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for 2.5 compatibility.
#
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# slice it into the current list to keep the same list instance
#----------------------------------------------------------------------------
# use the typmap or copy an existing colour object
# yes, this is weird, but it appears to work around a bug in wxMac
# Just make a little colored bitmap
# Add a label to it
# moved after dlg.Destroy, since who knows what the callback will do...
#----------------------------------------------------------------------
# Name:        colourutils.py
# Purpose:     Some useful colour-related utility functions.
#
# Author:      Cody Precord
#
# Created:     13-March-2001
# Copyright:   (c) 2001-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, documented
#----------------------------------------------------------------------
# Used on OSX to get access to carbon api constants
#-----------------------------------------------------------------------------#
# kThemeBrushButtonPressedLightHighlight
# Fallback to text highlight color
#----------------------------------------------------------------------------
# Name:         combotreebox.py
# Purpose:
#
# Author:       Frank Niessink <frank@niessink.com>
#
# Created:
# Version:      1.1
# Date:         August 1, 2010
# Licence:      wxWidgets license
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# Add a root item
# Add a child to item1
# Export only the ComboTreeBox widget
# ---------------------------------------------------------------------------
# Return an invalid item, because the root item is hidden
# Return an invalid TreeItemId
# Return an invalid TreeItemId
# ---------------------------------------------------------------------------
#****
# We hide the frame rather than destroy it, so it can be
# popped up again later. Use CallAfter so that clicking the combobox
# button doesn't immediately popup the frame again.
# Comply with the MS Windows Combobox behaviour: if the text in
# the text field is not in the tree, the first item in the tree
# is selected.
# On wxMac, the kill focus event doesn't work, but the
# deactivate event does:
# We received a deactivate event
# On wxGTK, Alt-Up also closes the popup:
# ---------------------------------------------------------------------------
# We manage readonlyness ourselves
# We manage sorting ourselves
# Methods to construct the widget.
# By default, the text control is the control itself.
# By default, the dropdown button is the control itself.
# It is a subclass responsibility to provide the right PopupFrame,
# depending on platform:
# By default, there is no layout to be done.
# Event handlers
# Note that we don't call event.Skip() to prevent popping up the
# ComboBox's own box.
# We need to change the selection because it doesn't match the
# text just entered
# Methods called by the PopupFrame, to let the ComboTreeBox know
# about what the user did.
# Misc methods, not part of the ComboBox API.
# On wxGTK, when the Combobox width has been increased a call
# to SetMinSize is needed to force a resize of the popupFrame:
# The following methods are all part of the ComboBox API (actually
# the ControlWithItems API) and have been adapted to take TreeItemIds
# as parameter and return :class:`TreeItemId`s, rather than indices.
# Note: We don't need to substract 1 for the hidden root item,
# because the TreeCtrl does that for us
# Bind all mouse click events to self.OnMouseClick so we can
# intercept those events and prevent the native Combobox from
# popping up its list of choices.
# OnChar is only called when in read only mode. We don't call
# event.Skip() on purpose, to prevent the characters from being
# displayed in the text field.
# We select the text in the ComboTreeBox's text field.
# There is a slight complication, however. When the control is
# deleted, SetValue is called. But if we call SetMark at that
# time, wxPython will crash. We can prevent this by comparing the
# result of GetLastPosition and the length of the value. If they
# match, all is fine. If they don't match, we don't call SetMark.
# class MACComboTreeBox(NativeComboTreeBox):
#     def _createPopupFrame(self):
#         return MACPopupFrame(self)
#
#     def _createButton(self):
#         return self.GetChildren()[0] # The choice button
#
#     def _keyShouldNavigate(self, keyEvent):
#         return False # No navigation with up and down on wxMac
#
#     def _keyShouldPopUpTree(self, keyEvent):
#         return super(MACComboTreeBox, self)._keyShouldPopUpTree(keyEvent) or \
#             keyEvent.GetKeyCode() == wx.WXK_DOWN
# The MAC implementation based on the NativeComboTreeBox is no longer working,
# so let's use the GTKComboTreeBox instead.
# ---------------------------------------------------------------------------
# exception was raised!
# assume rhs is a chain
#----------------------------------------------------------------------
# Name:        wx.lib.dialogs
# Purpose:     ScrolledMessageDialog, MultipleChoiceDialog and
#              function wrappers for the common dialogs by Kevin Altis.
#
# Author:      Various
#
# Created:     3-January-2002
# Copyright:   (c) 2002-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port
#----------------------------------------------------------------------
# 12/01/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for 2.5 compatibility.
#
# 12/18/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxScrolledMessageDialog -> ScrolledMessageDialog
# o wxMultipleChoiceDialog -> MultipleChoiceDialog
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
## findDialog was created before wxPython got a Find/Replace dialog
## but it may be instructive as to how a function wrapper can
## be added for your own custom dialogs
## this dialog is always modal, while wxFindReplaceDialog is
## modeless and so doesn't lend itself to a function wrapper
## it is easier to just duplicate the code than
## try and replace color with colour in the result
## KEA: alerts are common, so I'm providing a class rather than
## requiring the user code to set up the right icons and buttons
## the with messageDialog function
## openFileDialog and saveFileDialog are convenience functions
## they represent the most common usages of the fileDialog
## with the most common style options
#---------------------------------------------------------------------------
# the caption will be displayed inside the dialog on Macs
# was an icon passed to us?
# check for icons in the style flags
# will be a spacer when added to the sizer
# Sizer to contain the icon, text area and buttons
# Make the text area
#stext.SetLabelMarkup(message)  Wrap() causes all markup to be lost, so don't try to use it yet...
# Set size to be used by the sizer based on the message content,
# with good maximums
# Make the buttons
#if not style & wx.ICON_NONE and not style & wx.ICON_MASK:
#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         docview.py
# Purpose:      Port of the wxWindows docview classes
#
# Author:       Peter Yared
#
# Created:      5/15/03
# Copyright:    (c) 2003-2006 ActiveGrid, Inc. (Port of wxWindows classes by Julian Smart et al)
# License:      wxWindows license
# Tags:         phoenix-port, docs
#----------------------------------------------------------------------------
#----------------------------------------------------------------------
# docview globals
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Convenience functions from wxWindows used in docview
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Document/View Classes
#----------------------------------------------------------------------
# TODO: ProcessEvent is virtual now, should this method just go away?
# document must be in memory only and can't be out of date
# and self._savedYet:  This was here, but if it is not modified who cares if it hasn't been saved yet?
# elif res == wx.CANCEL:
# spacing is important, make sure there is no space after the "|", it causes a bug on wx_gtk
# if current file exists, move it to a safe place temporarily
# Check if read-only.
# for debugging purposes
# file is still open, close it, need to do this before removal
# save failed, remove copied file
#if wx.Platform == '__WXMAC__':  # Not yet implemented in wxPython
#    wx.FileName(file).MacSetDefaultTypeAndCreator()
# for debugging purposes
# file is still open, close it
# elif res == wx.CANCEL:
# elif res == wx.CANCEL:
# C version does a delete but Python will garbage collect
# Doesn't exist, do a save as
# if dirty flag changed, update the view's displayed title
# Only need app name in title for SDI
# Close in lifo (reverse) order.  We clone the list to make sure we go through all docs even as they are deleted
# Implicitly delete the document when the last view is removed
# this makes a copy of the wx.PrintData instead of just saving
# a reference to the one inside the PrintDialogData that will
# be destroyed when the dialog is destroyed
# Pass two printout objects: for preview, and possible printing.
# wxWindows source doesn't use base frame's pos, size, and icon, but did it this way so it would work like MS Office etc.
# Existing document
# don't ask again
# Not in wxWindows code but useful nonetheless
# Not in wxWindows code but useful nonetheless
# Implicitly deleted by DeleteAllViews
# DeleteAllViews doesn't get rid of the frame, so we'll explicitly destroy it.
# spacing is important, make sure there is no space after the "|", it causes a bug on wx_gtk
# spacing is important, make sure there is no space after the "|", it causes a bug on wx_gtk
# dlg.CenterOnParent()  # wxBug: caused crash with wx.FileDialog
# IsInstance not working, but who cares just send all the commands up since this isn't a real ProcessEvent like wxWindows
# if not isinstance(event, wx.CommandEvent) or not self.GetParent() or not self.GetParent().ProcessEvent(event):
# This isn't in the wxWindows codebase but the document needs to be disposed of somehow
# self.Create(doc, view, frame, id, title, pos, size, style, name)
# wxBug: For some reason the EVT_ACTIVATE event is not getting triggered for the first mdi client window that is opened so we have to do it manually
##    # Couldn't get this to work, but seems to work fine with single stage construction
##    def Create(self, doc, view, frame, id, title, pos, size, style, name):
##        self._childDocument = doc
##        self._childView = view
##        if wx.MDIChildFrame.Create(self, frame, id, title, pos, size, style, name):
##            if view:
##                view.SetFrame(self)
##                return True
##        return False
# Need this in case there are embedded sash windows and such, OnActivate is not getting called
# Break recursion loops
# This isn't in the wxWindows codebase but the document needs to be disposed of somehow
#----------------------------------------------------------------------
# Command Classes
#----------------------------------------------------------------------
#elif undoCommand and not undoCommand.CanUndo():
#    undoItem.SetText(_("Can't Undo") + undoAccel)
#-----------------------------------------------------------------------------
# Name:        dragscroller.py
# Purpose:     Scrolls a wx.ScrollWindow by dragging
#
# Author:      Riaan Booysen
#
# Created:     2006/09/05
# Copyright:   (c) 2006
# Licence:     wxPython
#-----------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.embeddedimage
# Purpose:     Defines a class used for embedding PNG images in Python
#              code. The primary method of using this module is via
#              the code generator in wx.tools.img2py.
#
# Author:      Anthony Tuininga
#
# Created:     26-Nov-2007
# Copyright:   (c) 2007 by Anthony Tuininga
# Licence:     wxWindows license
# Tags:        phoenix-port
#----------------------------------------------------------------------
# added for backwards compatibility
# define properties, for convenience
#----------------------------------------------------------------------
# Name:        wx.lib.eventStack
# Purpose:     These mixins implement a push and pop menu/UI update event
#              handler system at the wx.App level. This is useful for resolving
#              cases where multiple views may want to respond to an event
#              (say, wx.ID_COPY) and where you also want a "default" handler
#              for the event (and UI update status) when there is no active
#              view which wishes to handle the event.
#
# Author:      Kevin Ollivier
#
# Created:     -Mar-
# Copyright:   (c)  Kevin Ollivier
# Licence:     wxWindows license
#----------------------------------------------------------------------
#app.AddHandlerForID(wx.ID_EXIT, self.OnExit)
#app.AddHandlerForID(wx.ID_ABOUT, self.OnAbout)
# When a view changes the handler, move the old one here.
# Then "pop" the handler when the view loses the focus
#----------------------------------------------------------------------------
# Name:        wx.lib.eventwatcher
# Purpose:     A widget that allows some or all events for a particular widget
#              to be captured and displayed.
#
# Author:      Robin Dunn
#
# Created:     21-Jan-2009
# Copyright:   (c) 2009-2018 by Total Control Software
# Licence:     wxWindows license
#
# Tags:        phoenix-port
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Helpers for building the data structures used for tracking the
# various event binders that are available
# Events that should not be watched by default
#----------------------------------------------------------------------------
#", format=wx.LIST_FORMAT_RIGHT, width=50)
#----------------------------------------------------------------------------
# this is called by the base class when an item is checked/unchecked
#----------------------------------------------------------------------------
# Make the widgets
# Do the layout
# Bind events
# This is a list of (PyEventBinder, flag) tuples where the flag indicates
# whether to bind that event or not. By default all execpt those in
# the _noWatchList wil be set to be watched.
# Passing a non-empty fromlist will cause __import__ to
# return the imported submodule if a dotted name is passed.
# Now unwatch and re-watch so we can get the new events bound
#----------------------------------------------------------------------------
#import wx.lib.inspection
#wx.lib.inspection.InspectionTool().Show()
#---------------------------------------------------------------------------
# Name:        wx.lib.evtmgr
# Purpose:     An easier, more "Pythonic" and more OO method of registering
#              handlers for wxWindows events using the Publish/Subscribe
#              pattern.
#
# Author:      Robb Shecter and Robin Dunn
#
# Created:     12-December-2002
# Copyright:   (c) 2003 by db-X Corporation
# Licence:     wxWindows license
# Tags:        phoenix-port
#---------------------------------------------------------------------------
# 12/02/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for 2.5 compatibility.
#
# publish / subscribe library
#---------------------------------------------------------------------------
# 1. Check if the 'event' is actually one of the multi-
#    event macros.
# Support a more OO API.  This allows the GUI widget itself to
# be specified, and the id to be retrieved from the system,
# instead of kept track of explicitly by the programmer.
# (Being used to doing GUI work with Java, this seems to me to be
# the natural way of doing things.)
# Some widgets do not function as their own windows.
#  Create an adapter from the PS system back to wxEvents, and
#  possibly one from wxEvents:
# Throwing away a duplicate request
# For time efficiency when deregistering by window:
# For time efficiency when deregistering by listener:
# See if the source understands the listeningFor protocol.
# This is a bit of a test I'm working on - it allows classes
# to know when their events are being listened to.  I use
# it to enable chaining events from contained windows only
# when needed.
# Let the source know that we're listening  for this
# event.
# Some aliases for Register, just for kicks
#%d' % (name, i)
# This topic isn't valid.  Probably because it was deleted
# by listener.
#---------------------------------------------------------------------------
# From here down is implementaion and support classes, although you may
# find some of them useful in other contexts.
#---------------------------------------------------------------------------
# Return True if every element in testList is in eventList
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Register myself with the wxWindows event system
##????
#---------------------------------------------------------------------------
# the message is the event object
#---------------------------------------------------------------------------
# Create globals
# For now a singleton is not enforced.  Should it be or can we trust
# the programmers?
#---------------------------------------------------------------------------
# simple test code
#
# Demonstrate 1) register/deregister, 2) Multiple listeners receiving
# one event, and 3) Multiple events going to one listener.
#
# Turn the output of mouse events on and off
# Send togglebutton events to both the on/off code as well
# as the function that prints to stdout.
#---------------------------------------------------------------------------
# Name:        expando.py
# Purpose:     A multi-line text control that expands and collapses as more
#              or less lines are needed to display its content.
#
# Author:      Robin Dunn
#
# Created:     18-Sept-2006
# Copyright:   (c) 2006-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documented
#
#---------------------------------------------------------------------------
# create some buttons and sizers to use in testing some
# features and also the layout
# Put the panel in a sizer for the frame so we can use self.Fit()
# The Expando control will redo the layout of the
# sizer it belongs to, but sometimes this may not be
# enough, so it will send us this event so we can do any
# other layout adjustments needed.  In this case we'll
# just resize the frame to fit the new needs of the sizer.
# This event class and binder object can be used to catch
# notifications that the ExpandoTextCtrl has resized itself and
# that layout adjustments may need to be made.
#---------------------------------------------------------------------------
# TODO: find a way to calculate this, it may vary by platform
# find the default height of a single line control
# make sure we default to that height if none was given
# always use the multi-line style
# init the base class
# save some basic metrics
# work around a bug of a lack of a EVT_TEXT when calling
# WriteText on wxMac
# Instead of using wx.TextCtrl.AppendText append and set the
# insertion point ourselves.  This works around a bug on wxMSW
# where it scrolls the old text out of view, and since there
# is no scrollbar there is no way to get back to it.
# check if any adjustments are needed on every text update
# The number of lines needed can change when the ctrl is resized too.
# if the current number of lines is different than before
# then recalculate the size needed and readjust
# The size is changing...  if the control is not in a
# sizer then we just want to change the size and
# that's it, the programmer will need to deal with
# potential layout issues.  If it is being managed by
# a sizer then we'll change the min size setting and
# then try to do a layout.  In either case we'll also
# send an event so the parent can handle any special
# layout issues that it wants to deal with.
# send notification that layout may be needed
# checked for cached value
# otherwise make a single line textctrl and find out its default height
# GetNumberOfLines in some ports doesn't count wrapped lines, so we
# need to implement our own.
# the width of the text is wider than the control,
# calc how many lines it will be wrapped to
# Estimate where the control will wrap the lines and
# return the count of extra lines needed.
# we've reached the max width, add a new line
# did we see a space? if so restart the count at that pos
#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         fancytext.py
# Purpose:      Methods for rendering XML specified text
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port, py3-port
#----------------------------------------------------------------------------
# 12/02/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for 2.5 compatibility.
#
# Copyright 2001-2003 Timothy Hochberg
# Use as you see fit. No warantees, I cannot be held responsible, etc.
# The next three classes: Renderer, SizeRenderer and DCRenderer are
# what you will need to override to extend the XML language. All of
# the font stuff as well as the subscript and superscript stuff are in
# Renderer.
# For backward compatibility
# There is no capital for altsigma
# Public interface
# XXX round up
# XXX round up
# Chicken and egg problem, we need a bitmap in the DC in order to
# measure how big the bitmap should be...
# Old names for backward compatibiliry
# Test Driver
#----------------------------------------------------------------------
# Name:        wx.lib.filebrowsebutton
# Purpose:     Composite controls that provide a Browse button next to
#              either a wxTextCtrl or a wxComboBox.  The Browse button
#              launches a wxFileDialog and loads the result into the
#              other control.
#
# Author:      Mike Fletcher
#
# Copyright:   (c) 2000-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port
#----------------------------------------------------------------------
# 12/02/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 Compatibility changes
#
#----------------------------------------------------------------------
# following are the values for a file dialog box
# callback for when value changes (optional)
# store variables
# create the dialog
# Setting a value causes the changeCallback to be called.
# In this case that would be before the return of the
# constructor. Not good. So a default value on
# SetValue is used to disable the callback
# play nice with sizers
# add a border around the whole thing and resize the panel to fit
#        if size.width != -1 or size.height != -1:
#            self.SetSize(size)
# Clear history values not the selected one.
# clear previous values
# walk through, appending new values
# Hack to call an event handler
# The callback wasn't being called when SetValue was used ??
# So added this explicit call to it
#
#
#----------------------------------------------------------------------
#from skeletonbuilder import rulesfile
#----------------------------------------------------------------------
# Name:        wx.lib.flashwin
# Purpose:     A class that allows the use of the Shockwave Flash
#              ActiveX control
#
# Author:      Robin Dunn
#
# Created:     22-March-2004
# Copyright:   (c) 2008-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port
#----------------------------------------------------------------------
# Getters, Setters and properties
#----------------------------------------------------------------------
# Name:        wx.lib.flashwin
# Purpose:     A class that allows the use of the Shockwave Flash
#              ActiveX control
#
# Author:      Robin Dunn
#
# Created:     22-March-2004
# Copyright:   (c) 2004-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# This module was generated by the wx.activex.GernerateAXModule class
# (See also the genaxmodule script.)
# Create eventTypes and event binders
# Derive a new class from ActiveXWindow
# Methods exported by the ActiveX object
# Getters, Setters and properties
#  PROPERTIES
#  --------------------
#  readystate
#      type:int  arg:VT_EMPTY  canGet:True  canSet:False
#
#  totalframes
#      type:int  arg:VT_EMPTY  canGet:True  canSet:False
#
#  playing
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  quality
#      type:int  arg:int  canGet:True  canSet:True
#
#  scalemode
#      type:int  arg:int  canGet:True  canSet:True
#
#  alignmode
#      type:int  arg:int  canGet:True  canSet:True
#
#  backgroundcolor
#      type:int  arg:int  canGet:True  canSet:True
#
#  loop
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  movie
#      type:string  arg:string  canGet:True  canSet:True
#
#  framenum
#      type:int  arg:int  canGet:True  canSet:True
#
#  wmode
#      type:string  arg:string  canGet:True  canSet:True
#
#  salign
#      type:string  arg:string  canGet:True  canSet:True
#
#  menu
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  base
#      type:string  arg:string  canGet:True  canSet:True
#
#  scale
#      type:string  arg:string  canGet:True  canSet:True
#
#  devicefont
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  embedmovie
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  bgcolor
#      type:string  arg:string  canGet:True  canSet:True
#
#  quality2
#      type:string  arg:string  canGet:True  canSet:True
#
#  swremote
#      type:string  arg:string  canGet:True  canSet:True
#
#  flashvars
#      type:string  arg:string  canGet:True  canSet:True
#
#  allowscriptaccess
#      type:string  arg:string  canGet:True  canSet:True
#
#  moviedata
#      type:string  arg:string  canGet:True  canSet:True
#
#
#
#
#  METHODS
#  --------------------
#  QueryInterface
#      retType:  VT_VOID
#      params:
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          ppvObj
#              in:False  out:True  optional:False  type:unsupported type 26
#
#  AddRef
#      retType:  int
#
#  Release
#      retType:  int
#
#  GetTypeInfoCount
#      retType:  VT_VOID
#      params:
#          pctinfo
#              in:False  out:True  optional:False  type:int
#
#  GetTypeInfo
#      retType:  VT_VOID
#      params:
#          itinfo
#              in:True  out:False  optional:False  type:int
#          lcid
#              in:True  out:False  optional:False  type:int
#          pptinfo
#              in:False  out:True  optional:False  type:unsupported type 26
#
#  GetIDsOfNames
#      retType:  VT_VOID
#      params:
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          rgszNames
#              in:True  out:False  optional:False  type:unsupported type 26
#          cNames
#              in:True  out:False  optional:False  type:int
#          lcid
#              in:True  out:False  optional:False  type:int
#          rgdispid
#              in:False  out:True  optional:False  type:int
#
#  Invoke
#      retType:  VT_VOID
#      params:
#          dispidMember
#              in:True  out:False  optional:False  type:int
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          lcid
#              in:True  out:False  optional:False  type:int
#          wFlags
#              in:True  out:False  optional:False  type:int
#          pdispparams
#              in:True  out:False  optional:False  type:unsupported type 29
#          pvarResult
#              in:False  out:True  optional:False  type:VT_VARIANT
#          pexcepinfo
#              in:False  out:True  optional:False  type:unsupported type 29
#          puArgErr
#              in:False  out:True  optional:False  type:int
#
#  SetZoomRect
#      retType:  VT_VOID
#      params:
#          left
#              in:True  out:False  optional:False  type:int
#          top
#              in:True  out:False  optional:False  type:int
#          right
#              in:True  out:False  optional:False  type:int
#          bottom
#              in:True  out:False  optional:False  type:int
#
#  Zoom
#      retType:  VT_VOID
#      params:
#          factor
#              in:True  out:False  optional:False  type:int
#
#  Pan
#      retType:  VT_VOID
#      params:
#          x
#              in:True  out:False  optional:False  type:int
#          y
#              in:True  out:False  optional:False  type:int
#          mode
#              in:True  out:False  optional:False  type:int
#
#  Play
#      retType:  VT_VOID
#
#  Stop
#      retType:  VT_VOID
#
#  Back
#      retType:  VT_VOID
#
#  Forward
#      retType:  VT_VOID
#
#  Rewind
#      retType:  VT_VOID
#
#  StopPlay
#      retType:  VT_VOID
#
#  GotoFrame
#      retType:  VT_VOID
#      params:
#          FrameNum
#              in:True  out:False  optional:False  type:int
#
#  CurrentFrame
#      retType:  int
#
#  IsPlaying
#      retType:  bool
#
#  PercentLoaded
#      retType:  int
#
#  FrameLoaded
#      retType:  bool
#      params:
#          FrameNum
#              in:True  out:False  optional:False  type:int
#
#  FlashVersion
#      retType:  int
#
#  LoadMovie
#      retType:  VT_VOID
#      params:
#          layer
#              in:True  out:False  optional:False  type:int
#          url
#              in:True  out:False  optional:False  type:string
#
#  TGotoFrame
#      retType:  VT_VOID
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          FrameNum
#              in:True  out:False  optional:False  type:int
#
#  TGotoLabel
#      retType:  VT_VOID
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          label
#              in:True  out:False  optional:False  type:string
#
#  TCurrentFrame
#      retType:  int
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#
#  TCurrentLabel
#      retType:  string
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#
#  TPlay
#      retType:  VT_VOID
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#
#  TStopPlay
#      retType:  VT_VOID
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#
#  SetVariable
#      retType:  VT_VOID
#      params:
#          name
#              in:True  out:False  optional:False  type:string
#          value
#              in:True  out:False  optional:False  type:string
#
#  GetVariable
#      retType:  string
#      params:
#          name
#              in:True  out:False  optional:False  type:string
#
#  TSetProperty
#      retType:  VT_VOID
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          property
#              in:True  out:False  optional:False  type:int
#          value
#              in:True  out:False  optional:False  type:string
#
#  TGetProperty
#      retType:  string
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          property
#              in:True  out:False  optional:False  type:int
#
#  TCallFrame
#      retType:  VT_VOID
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          FrameNum
#              in:True  out:False  optional:False  type:int
#
#  TCallLabel
#      retType:  VT_VOID
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          label
#              in:True  out:False  optional:False  type:string
#
#  TSetPropertyNum
#      retType:  VT_VOID
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          property
#              in:True  out:False  optional:False  type:int
#          value
#              in:True  out:False  optional:False  type:double
#
#  TGetPropertyNum
#      retType:  double
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          property
#              in:True  out:False  optional:False  type:int
#
#  TGetPropertyAsNumber
#      retType:  double
#      params:
#          target
#              in:True  out:False  optional:False  type:string
#          property
#              in:True  out:False  optional:False  type:int
#
#
#
#
#  EVENTS
#  --------------------
#  ReadyStateChange
#      retType:  VT_VOID
#      params:
#          newState
#              in:False  out:False  optional:False  type:int
#
#  Progress
#      retType:  VT_VOID
#      params:
#          percentDone
#              in:False  out:False  optional:False  type:int
#
#  FSCommand
#      retType:  VT_VOID
#      params:
#          command
#              in:True  out:False  optional:False  type:string
#          args
#              in:True  out:False  optional:False  type:string
#
#
#
#
# 12/07/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 Compatibility changes
#
#Mouse Gestures
#Version 0.0.1
#By Daniel Pozmanter
#drpython@bluebottle.com
#Released under the terms of the wxWindows License.
###########################################
###########################################
#ToDo:
#Fully Implement Manual Mode
#Add "Ends With":  AddGestureEndsWith(self, gesture, action, args)
#Add "Starts With":  AddGestuteStartsWith(self, gesture, action, args)
#For better control of when the gesture starts and stops,
#use manual mode.
#At the moment, you need to Bind the OnMouseMotion event if you want to use
#manual mode.
#Make Sure not a duplicate:
#Figure out the gestures (Look for occurances of 5 in a row or more):
#point1 is the old point
#point2 is current
#(Negative = Left, Up)
#(Positive = Right, Down)
#Diagonal
#Straight Line
#Draw it!
#----------------------------------------------------------------------
# Name:        wx.lib.graphics
# Purpose:     A wx.GraphicsContext-like API implemented using cairo
#              and wx.lib.wxcairo.
#
# Author:      Robin Dunn
#
# Created:     15-Sept-2008
# Copyright:   (c) 2008-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port
#----------------------------------------------------------------------
# Other ideas:
# 1. TextToPath (or maybe make this part of the Path class
# 3. Relative moves, lines, curves, etc.
# 5. maybe expose cairo_paint, cairo_paint_with_alpha, cairo_mask?
#---------------------------------------------------------------------------
# Image surface formats
#---------------------------------------------------------------------------
# Compositing operators.  See http://cairographics.org/operators
# clear destination layer (bounded)
# replace destination layer (bounded)
# draw source layer on top of destination layer (bounded)
# draw source where there was destination content (unbounded)
# draw source where there was no destination content (unbounded)
# draw source on top of destination content and only there
# ignore the source
# draw destination on top of source
# leave destination only where there was source content (unbounded)
# leave destination only where there was no source content
# leave destination on top of source content and only there (unbounded)
# source and destination are shown where there is only one of them
# source and destination layers are accumulated
# like over, but assuming source and dest are disjoint geometries
#---------------------------------------------------------------------------
# Anti-alias modes.  Note that according to the Cairo docs none of the
# current backends support the the SUBPIXEL mode.
# Use the default antialiasing for the subsystem and target device
# Use a bilevel alpha mask
# Perform single-color antialiasing (using shades of gray for black
# text on a white background, for example).
# Perform antialiasing by taking advantage of the order of subpixel
# elements on devices such as LCD panels
#---------------------------------------------------------------------------
# A decorator that makes creating properties a little cleaner and simpler
#---------------------------------------------------------------------------
# We'll just use None instead of "Null (invalid) objects"
# This class probably isn't needed at all anymore since we'll just use None
# instead of the Null objects, but we'll keep it anyway in case it's needed to
# help write compatible code.
#---------------------------------------------------------------------------
# TODO: GraphicsPenInfo still needs Dashes support added.
# set up the context with this pen's parameters
# make a pattern from the stipple bitmap
# TODO  make a stock pattern...
#---------------------------------------------------------------------------
# make a pattern from the stipple bitmap
#---------------------------------------------------------------------------
# TODO: Should we be able to create a GraphicsFont from other
# properties, or will it always be via a wx.Font?  What about
# creating from a cairo.FontFace or cairo.ScaledFont?
# To remain consistent with the GC API a color is associated
# with the font, and nothing else.  Since this is Cairo and
# it's easy to do, we'll also allow a brush to be used...
#---------------------------------------------------------------------------
# save a reference to the buffer to ensure that it lives as
# long as this object does
# TODO: implement this
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# A path is essentially just a context that we use just for
# collecting path moves, lines, and curves in order to apply
# them to the real context.  So we'll use a 1x1 image surface
# for the backend, since we won't ever actually use it for
# rendering in this context.
# clockwise means positive in our system (y pointing downwards)
# calculate tangential points
# calculate using degree elevation to a cubic bezier
# as we don't have a true path object, we have to apply the
# inverse matrix to the context
# TODO: should we clone the matrix before inverting it?
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# TODO:  Support creating directly from a wx.Window too.
# TODO: implement this
# Our implementation is able to create these things directly, but
# we'll keep them here too for compatibility with wx.GraphicsContext.
# TODO: this could be optimized by moving the stroke and fill
# code here and only loading the path once.
# Cairo's x,y for drawing text is at the baseline, so we need to adjust
# the position we move to by the ascent.
# In case we're scaling the image by using a width and height
# different than the bitmap's size, create a pattern
# transformation on the surface and draw the transformed
# pattern.
# use the original size here since the context is scaled already...
# fill the rectangle with the pattern
# Some things not in wx.GraphicsContext (yet)
#---------------------------------------------------------------------------
# Utility functions
#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         GridColMover.py
# Purpose:      Grid Column Mover Extension
#
# Author:       Gerrit van Dyk (email: gerritvd@decillion.net)
#
# Version       0.1
# Date:         Nov 19, 2002
# Licence:      wxWindows license
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# 12/07/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 Compatibility changes
#
# 12/18/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxGridColMoveEvent -> GridColMoveEvent
# o wxGridRowMoveEvent -> GridRowMoveEvent
# o wxGridColMover -> GridColMover
# o wxGridRowMover -> GridRowMover
#
#----------------------------------------------------------------------------
# event class and macros
#
# New style 12/7/03
#
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# graft new methods into the wxGrid class
#----------------------------------------------------------------------------
# Need to display insertion point
# Need to display insertion point
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.iewin
# Purpose:     A class that allows the use of the IE web browser
#              ActiveX control
#
# Author:      Robin Dunn
#
# Created:     22-March-2004
# Copyright:   (c) 2008-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# IWebBrowser2 and etc.
# Flags to be used with the RefreshPage method
# Flags to be used with LoadUrl, Navigate, Navigate2 methods
#----------------------------------------------------------------------
# if just fetching the text then get it from the body property
# otherwise look in the all property
# the first item with content should be the <html> tag and all its
# children.
# COM Event handlers
# watch the command states to know when it is possible to use
# GoBack or GoForward
# Getters, Setters and properties
#----------------------------------------------------------------------
# Name:        wx.lib.iewin
# Purpose:     A class that allows the use of the IE web browser
#              ActiveX control
#
# Author:      Robin Dunn
#
# Created:     22-March-2004
# Copyright:   (c) 2004-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# This module was originally generated by the
# wx.activex.GernerateAXModule class but has been tweaked somewhat as
# indicated below.
# Flags to be used with the RefreshPage method
# Flags to be used with LoadUrl, Navigate, Navigate2 methods
# Create eventTypes and event binders
# For this there are a few special methods implemented in C++ in the
# IEHtmlWindowBase class, so derive from it instead of ActiveXWindow.
# in case the old 'ID' param is used as a keyword
# Methods from IEHtmlWindowBase.  Redirected from here just for
# the sake of completeness...
# Methods exported by the ActiveX object
# added default for Flags
# Removed to prevent conflict with wx.Window.Refresh
#def Refresh(self):
#    return self.CallAXMethod('Refresh')
# renamed
# added default for flags
# Getters, Setters and properties
#  PROPERTIES
#  --------------------
#  application
#      type:VT_DISPATCH  arg:VT_EMPTY  canGet:True  canSet:False
#
#  parent
#      type:VT_DISPATCH  arg:VT_EMPTY  canGet:True  canSet:False
#
#  container
#      type:VT_DISPATCH  arg:VT_EMPTY  canGet:True  canSet:False
#
#  document
#      type:VT_DISPATCH  arg:VT_EMPTY  canGet:True  canSet:False
#
#  toplevelcontainer
#      type:bool  arg:VT_EMPTY  canGet:True  canSet:False
#
#  type
#      type:string  arg:VT_EMPTY  canGet:True  canSet:False
#
#  left
#      type:int  arg:int  canGet:True  canSet:True
#
#  top
#      type:int  arg:int  canGet:True  canSet:True
#
#  width
#      type:int  arg:int  canGet:True  canSet:True
#
#  height
#      type:int  arg:int  canGet:True  canSet:True
#
#  locationname
#      type:string  arg:VT_EMPTY  canGet:True  canSet:False
#
#  locationurl
#      type:string  arg:VT_EMPTY  canGet:True  canSet:False
#
#  busy
#      type:bool  arg:VT_EMPTY  canGet:True  canSet:False
#
#  name
#      type:string  arg:VT_EMPTY  canGet:True  canSet:False
#
#  hwnd
#      type:int  arg:VT_EMPTY  canGet:True  canSet:False
#
#  fullname
#      type:string  arg:VT_EMPTY  canGet:True  canSet:False
#
#  path
#      type:string  arg:VT_EMPTY  canGet:True  canSet:False
#
#  visible
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  statusbar
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  statustext
#      type:string  arg:string  canGet:True  canSet:True
#
#  toolbar
#      type:int  arg:int  canGet:True  canSet:True
#
#  menubar
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  fullscreen
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  readystate
#      type:unsupported type 29  arg:VT_EMPTY  canGet:True  canSet:False
#
#  offline
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  silent
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  registerasbrowser
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  registerasdroptarget
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  theatermode
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  addressbar
#      type:bool  arg:bool  canGet:True  canSet:True
#
#  resizable
#      type:bool  arg:bool  canGet:True  canSet:True
#
#
#
#
#  METHODS
#  --------------------
#  QueryInterface
#      retType:  VT_VOID
#      params:
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          ppvObj
#              in:False  out:True  optional:False  type:unsupported type 26
#
#  AddRef
#      retType:  int
#
#  Release
#      retType:  int
#
#  GetTypeInfoCount
#      retType:  VT_VOID
#      params:
#          pctinfo
#              in:False  out:True  optional:False  type:int
#
#  GetTypeInfo
#      retType:  VT_VOID
#      params:
#          itinfo
#              in:True  out:False  optional:False  type:int
#          lcid
#              in:True  out:False  optional:False  type:int
#          pptinfo
#              in:False  out:True  optional:False  type:unsupported type 26
#
#  GetIDsOfNames
#      retType:  VT_VOID
#      params:
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          rgszNames
#              in:True  out:False  optional:False  type:unsupported type 26
#          cNames
#              in:True  out:False  optional:False  type:int
#          lcid
#              in:True  out:False  optional:False  type:int
#          rgdispid
#              in:False  out:True  optional:False  type:int
#
#  Invoke
#      retType:  VT_VOID
#      params:
#          dispidMember
#              in:True  out:False  optional:False  type:int
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          lcid
#              in:True  out:False  optional:False  type:int
#          wFlags
#              in:True  out:False  optional:False  type:int
#          pdispparams
#              in:True  out:False  optional:False  type:unsupported type 29
#          pvarResult
#              in:False  out:True  optional:False  type:VT_VARIANT
#          pexcepinfo
#              in:False  out:True  optional:False  type:unsupported type 29
#          puArgErr
#              in:False  out:True  optional:False  type:int
#
#  GoBack
#      retType:  VT_VOID
#
#  GoForward
#      retType:  VT_VOID
#
#  GoHome
#      retType:  VT_VOID
#
#  GoSearch
#      retType:  VT_VOID
#
#  Navigate
#      retType:  VT_VOID
#      params:
#          URL
#              in:True  out:False  optional:False  type:string
#          Flags
#              in:True  out:False  optional:False  type:VT_VARIANT
#          TargetFrameName
#              in:True  out:False  optional:True  type:VT_VARIANT
#          PostData
#              in:True  out:False  optional:True  type:VT_VARIANT
#          Headers
#              in:True  out:False  optional:True  type:VT_VARIANT
#
#  Refresh
#      retType:  VT_VOID
#
#  Refresh2
#      retType:  VT_VOID
#      params:
#          Level
#              in:True  out:False  optional:False  type:VT_VARIANT
#
#  Stop
#      retType:  VT_VOID
#
#  Quit
#      retType:  VT_VOID
#
#  ClientToWindow
#      retType:  VT_VOID
#      params:
#          pcx
#              in:True  out:True  optional:False  type:int
#          pcy
#              in:True  out:True  optional:False  type:int
#
#  PutProperty
#      retType:  VT_VOID
#      params:
#          Property
#              in:True  out:False  optional:False  type:string
#          vtValue
#              in:True  out:False  optional:False  type:VT_VARIANT
#
#  GetProperty
#      retType:  VT_VARIANT
#      params:
#          Property
#              in:True  out:False  optional:False  type:string
#
#  Navigate2
#      retType:  VT_VOID
#      params:
#          URL
#              in:True  out:False  optional:False  type:VT_VARIANT
#          Flags
#              in:True  out:False  optional:False  type:VT_VARIANT
#          TargetFrameName
#              in:True  out:False  optional:True  type:VT_VARIANT
#          PostData
#              in:True  out:False  optional:True  type:VT_VARIANT
#          Headers
#              in:True  out:False  optional:True  type:VT_VARIANT
#
#  QueryStatusWB
#      retType:  unsupported type 29
#      params:
#          cmdID
#              in:True  out:False  optional:False  type:unsupported type 29
#
#  ExecWB
#      retType:  VT_VOID
#      params:
#          cmdID
#              in:True  out:False  optional:False  type:unsupported type 29
#          cmdexecopt
#              in:True  out:False  optional:False  type:unsupported type 29
#          pvaIn
#              in:True  out:False  optional:False  type:VT_VARIANT
#          pvaOut
#              in:True  out:True  optional:True  type:VT_VARIANT
#
#  ShowBrowserBar
#      retType:  VT_VOID
#      params:
#          pvaClsid
#              in:True  out:False  optional:False  type:VT_VARIANT
#          pvarShow
#              in:True  out:False  optional:False  type:VT_VARIANT
#          pvarSize
#              in:True  out:False  optional:True  type:VT_VARIANT
#
#
#
#
#  EVENTS
#  --------------------
#  StatusTextChange
#      retType:  VT_VOID
#      params:
#          Text
#              in:True  out:False  optional:False  type:string
#
#  ProgressChange
#      retType:  VT_VOID
#      params:
#          Progress
#              in:True  out:False  optional:False  type:int
#          ProgressMax
#              in:True  out:False  optional:False  type:int
#
#  CommandStateChange
#      retType:  VT_VOID
#      params:
#          Command
#              in:True  out:False  optional:False  type:int
#          Enable
#              in:True  out:False  optional:False  type:bool
#
#  DownloadBegin
#      retType:  VT_VOID
#
#  DownloadComplete
#      retType:  VT_VOID
#
#  TitleChange
#      retType:  VT_VOID
#      params:
#          Text
#              in:True  out:False  optional:False  type:string
#
#  PropertyChange
#      retType:  VT_VOID
#      params:
#          szProperty
#              in:True  out:False  optional:False  type:string
#
#  BeforeNavigate2
#      retType:  VT_VOID
#      params:
#          pDisp
#              in:True  out:False  optional:False  type:VT_DISPATCH
#          URL
#              in:True  out:False  optional:False  type:VT_VARIANT
#          Flags
#              in:True  out:False  optional:False  type:VT_VARIANT
#          TargetFrameName
#              in:True  out:False  optional:False  type:VT_VARIANT
#          PostData
#              in:True  out:False  optional:False  type:VT_VARIANT
#          Headers
#              in:True  out:False  optional:False  type:VT_VARIANT
#          Cancel
#              in:True  out:True  optional:False  type:bool
#
#  NewWindow2
#      retType:  VT_VOID
#      params:
#          ppDisp
#              in:True  out:True  optional:False  type:VT_DISPATCH
#          Cancel
#              in:True  out:True  optional:False  type:bool
#
#  NavigateComplete2
#      retType:  VT_VOID
#      params:
#          pDisp
#              in:True  out:False  optional:False  type:VT_DISPATCH
#          URL
#              in:True  out:False  optional:False  type:VT_VARIANT
#
#  DocumentComplete
#      retType:  VT_VOID
#      params:
#          pDisp
#              in:True  out:False  optional:False  type:VT_DISPATCH
#          URL
#              in:True  out:False  optional:False  type:VT_VARIANT
#
#  Quit
#      retType:  VT_VOID
#
#  Visible
#      retType:  VT_VOID
#      params:
#          Visible
#              in:True  out:False  optional:False  type:bool
#
#  ToolBar
#      retType:  VT_VOID
#      params:
#          ToolBar
#              in:True  out:False  optional:False  type:bool
#
#  MenuBar
#      retType:  VT_VOID
#      params:
#          MenuBar
#              in:True  out:False  optional:False  type:bool
#
#  StatusBar
#      retType:  VT_VOID
#      params:
#          StatusBar
#              in:True  out:False  optional:False  type:bool
#
#  FullScreen
#      retType:  VT_VOID
#      params:
#          FullScreen
#              in:True  out:False  optional:False  type:bool
#
#  TheaterMode
#      retType:  VT_VOID
#      params:
#          TheaterMode
#              in:True  out:False  optional:False  type:bool
#
#  WindowSetResizable
#      retType:  VT_VOID
#      params:
#          Resizable
#              in:True  out:False  optional:False  type:bool
#
#  WindowSetLeft
#      retType:  VT_VOID
#      params:
#          Left
#              in:True  out:False  optional:False  type:int
#
#  WindowSetTop
#      retType:  VT_VOID
#      params:
#          Top
#              in:True  out:False  optional:False  type:int
#
#  WindowSetWidth
#      retType:  VT_VOID
#      params:
#          Width
#              in:True  out:False  optional:False  type:int
#
#  WindowSetHeight
#      retType:  VT_VOID
#      params:
#          Height
#              in:True  out:False  optional:False  type:int
#
#  WindowClosing
#      retType:  VT_VOID
#      params:
#          IsChildWindow
#              in:True  out:False  optional:False  type:bool
#          Cancel
#              in:True  out:True  optional:False  type:bool
#
#  ClientToHostWindow
#      retType:  VT_VOID
#      params:
#          CX
#              in:True  out:True  optional:False  type:int
#          CY
#              in:True  out:True  optional:False  type:int
#
#  SetSecureLockIcon
#      retType:  VT_VOID
#      params:
#          SecureLockIcon
#              in:True  out:False  optional:False  type:int
#
#  FileDownload
#      retType:  VT_VOID
#      params:
#          Cancel
#              in:True  out:True  optional:False  type:bool
#
#  NavigateError
#      retType:  VT_VOID
#      params:
#          pDisp
#              in:True  out:False  optional:False  type:VT_DISPATCH
#          URL
#              in:True  out:False  optional:False  type:VT_VARIANT
#          Frame
#              in:True  out:False  optional:False  type:VT_VARIANT
#          StatusCode
#              in:True  out:False  optional:False  type:VT_VARIANT
#          Cancel
#              in:True  out:True  optional:False  type:bool
#
#  PrintTemplateInstantiation
#      retType:  VT_VOID
#      params:
#          pDisp
#              in:True  out:False  optional:False  type:VT_DISPATCH
#
#  PrintTemplateTeardown
#      retType:  VT_VOID
#      params:
#          pDisp
#              in:True  out:False  optional:False  type:VT_DISPATCH
#
#  UpdatePageStatus
#      retType:  VT_VOID
#      params:
#          pDisp
#              in:True  out:False  optional:False  type:VT_DISPATCH
#          nPage
#              in:True  out:False  optional:False  type:VT_VARIANT
#          fDone
#              in:True  out:False  optional:False  type:VT_VARIANT
#
#  PrivacyImpactedStateChange
#      retType:  VT_VOID
#      params:
#          bImpacted
#              in:True  out:False  optional:False  type:bool
#
#
#
#
#----------------------------------------------------------------------------
# Name:         BrowseImage.py
# Purpose:      Display and Select Image Files
#
# Original Author:       Lorne White
#
# Version:      2.0
# Date:         June 16, 2007
# Licence:      wxWindows license
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# 2.0 Release - Bill Baxter (wbaxter@gmail.com)
# Date:         June 16, 2007
# o Changed to use sizers instead of fixed placement.
# o Made dialog resizeable
# o Added a splitter between file list and view pane
# o Made directory path editable
# o Added an "up" button" to go to the parent dir
# o Changed to show directories in file list
# o Don't select images on double click any more
# o Added a 'broken image' display for files that wx fails to identify
# o Redesigned appearance -- using bitmap buttons now, and rearranged things
# o Fixed display of masked gifs
# o Fixed zooming logic to show shrunken images at correct aspect ratio
# o Added different background modes for preview (white/grey/dark/checkered)
# o Added framing modes for preview (no frame/box frame/tinted border)
#
#----------------------------------------------------------------------------
#
# 12/08/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
# o Corrected a nasty bug or two - see comments below.
# o There was a duplicate ImageView.DrawImage() method. Que?
#
#----------------------------------------------------------------------------
# 1.0 Release - Lorne White
# Date:         January 29, 2002
# Create list of all available image file types
# View "All Image" File Types as default filter
# Sort the file list
# Use newer "re" function for patterns
#
# Tags:        phoenix-port, documented, unittest
#---------------------------------------------------------------------------
# show the selected file
# The wx.BitmapButton doesn't do so well on OSX with very small bitmaps,
# so use a custom class there.
#---------------------------------------------------------------------------
# Don't try to create it directly because wx throws up
# an annoying messasge dialog if the type isn't supported.
# BAD_IMAGE means a bad image, None just means no image (i.e. directory)
# dark_bg is the brush/bitmap to use for painting in the whole background
# lite_bg is the brush/bitmap/pen to use for painting the image rectangle
# Changed API of wx uses tuples for size and pos now.
# display the selected file in the panel
# adjust so 0,0 so we always match with a tiling starting at 0,0
# dimensions of image file
# squeeze iwidth x iheight image into window, preserving aspect ratio
# center calc
# center calc
# draw the image to window
# display the selected file in the panel
# set to working directory if nothing set
# initial setting for file filtering
# get the file list
# display, filter
# initial file filter setting
# after this we don't care about the order any more
#ok_btn.SetDefault()
# initial file filter setting
# get the file list using directory and extension values
# get list of all
#print("filter = ", filter)
# add to list of files
# sort the file list
# prepend the directories
# display the working directory
# get file type value
# try to select fname in list
# set the new directory
# refresh the display with files and initial image
# Changed 12/8/03 jmg
#
# o Clear listbox first
# o THEN check to see if there are any valid files of the selected
#   type,
# o THEN if we have any files to display, set the listbox up,
#
# OTHERWISE
#
# o Leave it cleared
# o Clear the image viewer.
#
# This avoids a nasty assert error.
#
# mark directories as 'True' with client data
#os.path.normapth?
# Set up a regex for file names
#----------------------------------------------------------------------
# This part of the file was generated by C:\Python25\Scripts\img2py
# then edited slightly.
#----------------------------------------------------------------------
# Name:        wx.lib.imageutils
# Purpose:     A collection of functions for simple image manipulations
#
# Author:      Robb Shecter
#
# Created:     7-Nov-2002
# Copyright:   (c) 2002 by
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documented
#----------------------------------------------------------------------
# Darker
# Lighter
# 0 < f < 1.  Higher is grayer.
# ''.join(map(chr, data)))
# step is 0..200 where 0 is completely black
# and 200 is completely white and 100 is the same
# convert that to a range of -1.0 .. 1.0
# blend with white
# 0 = transparent fg; 1 = opaque fg
# blend with black
# 0 = transparent fg; 1 = opaque fg
# 12/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxPyInformationalMessagesFrame -> PyInformationalMessagesFrame
# o dummy_wxPyInformationalMessagesFrame -> dummy_PyInformationalMessagesFrame
#
# ... modify your wxApp as follows:
# ...
# (default = "")
# (default = "informational messages")
#^^^^ early in the program
# ...
# where list_of_items:
#
# comma-separated list of items to display.
# Note that these will never be separated by spaces as they may
# be when used in the Python 'print' command
# figure out how tall to make the status bar
# reposition things...
# widths........
# use the SetParent method if desired...
# of rather limited use
# Aquire the GUI mutex before making GUI calls.  Mutex is released
# when locker is deleted at the end of this function.
#
# TODO: This should be updated to use wx.CallAfter similarly to how
# PyOnDemandOutputWindow.write was so it is not necessary
# to get the gui mutex
# and "__debug__" in m.__dict__:
# and "__debug__" in m.__dict__:
# typically True, but, e.g., allows
# DisableOutput method (which calls this
# one) to be called when the frame is not
# actually open, so that it is always safe
# to call this method...
# event must be the first optional argument...
# event must be the first optional argument...
##        sys.__stderr__.write("Directory: os.path.abspath(%s) = %s\n"
##                             % (dir,self.dir))
#----------------------------------------------------------------------------
# Name:        wx.lib.inspection
# Purpose:     A widget inspection tool that allows easy introspection of
#              all the live widgets and sizers in an application.
#
# Author:      Robin Dunn
#
# Created:     26-Jan-2007
# Copyright:   (c) 2007-2018 by Total Control Software
# Licence:     wxWindows license
#
# Tags:        py3-port, phoenix-port, documented
#----------------------------------------------------------------------------
# NOTE: This class was originally based on ideas sent to the
# wxPython-users mail list by Dan Eloff.  See also
# wx.lib.mixins.inspect for a class that can be mixed-in with wx.App
# to provide Hot-Key access to the inspection tool.
#import wx.aui as aui
#----------------------------------------------------------------------------
# Note: This is the Borg design pattern which ensures that all
# instances of this class are actually using the same set of
# instance data.  See
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66531
#----------------------------------------------------------------------------
# tell FrameManager to manage this frame
# make the child tools
# put the chlid tools in AUI panes
# ignore bad perspective string errors
#---------------------------------------------------------------------------
# should inspection frame (and children) be includeed in the tree?
#s = kw.get('style', 0)
#kw['style'] = s | wx.TR_DEFAULT_STYLE | wx.TR_HIDE_ROOT
# Expand the subtree containing the startWidget, and select it.
# Add the sizer and widgets in the sizer, if we're showing them
# Add any children not in the sizer, or all children if we're
# not showing the sizers
#---------------------------------------------------------------------------
#    wx.ALL : 'wx.ALL',
#    wx.GROW : 'wx.GROW',
#    wx.ALIGN_CENTER : 'wx.ALIGN_CENTER',
#---------------------------------------------------------------------------
# should non TLWs be flashed too?  Otherwise use a highlight rectangle
# for widgets and sizers
# for item boundaries in sizers
#00008B'     # for items in sizers
# how long to display the highlights
# how to draw it
# Spacer
# first do the outline of the whole sizer like normal
# Now highlight the actual items within the sizer.  This may
# get overdrawn by the code below for item boundaries, but if
# there is border padding then this will help make it more
# obvious.
# Next highlight the area allocated to each item in the sizer.
# Each kind of sizer will need to be done a little
# differently.
# wx.BoxSizer, wx.StaticBoxSizer
# NOTE: we have to do some reverse-engineering here for
# borders because the sizer and sizer item don't give us
# enough information to know for sure where item
# (allocated) boundaries are, just the boundaries of the
# actual widgets. TODO: It would be nice to add something
# to wx.SizerItem that would give us the full bounds, but
# that will have to wait until 2.9...
# wx.FlexGridSizer, wx.GridBagSizer
# wx.GridSizer
# NOTE: More reverse engineering (see above.) This time we
# need to determine what the sizer is using for row
# heights and column widths.
#rh = cw = 0
#for item in sizer.GetChildren():
#    rh = max(rh, item.Size.height)
#    cw = max(cw, item.Size.width)
# Anything else is probably a custom sizer, just highlight the items
# We'll be using a ClientDC in this case so adjust the
# position accordingly
#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         wx.lib.intctrl.py
# Author:       Will Sadkin
# Created:      01/16/2003
# Copyright:   (c) 2003 by Will Sadkin
# License:     wxWindows license
# Tags:        phoenix-port, py3-port, unittest, documented
#----------------------------------------------------------------------------
# NOTE:
#   This was written to provide a standard integer edit control for wxPython.
#
#   IntCtrl permits integer (long) values to be retrieved or  set via
#   .GetValue() and .SetValue(), and provides an EVT_INT() event function
#   for trapping changes to the control.
#
#   It supports negative integers as well as the naturals, and does not
#   permit leading zeros or an empty control; attempting to delete the
#   contents of the control will result in a (selected) value of zero,
#   thus preserving a legitimate integer value, or an empty control
#   (if a value of None is allowed for the control.) Similarly, replacing the
#   contents of the control with '-' will result in a selected (absolute)
#   value of -1.
#
#   IntCtrl also supports range limits, with the option of either
#   enforcing them or simply coloring the text of the control if the limits
#   are exceeded.
#----------------------------------------------------------------------------
# 12/08/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 Compatibility changes
#
# 12/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxIntUpdateEvent -> IntUpdateEvent
# o wxIntValidator -> IntValidator
# o wxIntCtrl -> IntCtrl
#
#----------------------------------------------------------------------------
# (constants should be in upper case)
#----------------------------------------------------------------------------
# Used to trap events indicating that the current
# integer value of the control has been changed.
#----------------------------------------------------------------------------
# wxWindows' wxTextCtrl translates Composite "control key"
# events into single events before returning them to its OnChar
# routine.  The doc says that this results in 1 for Ctrl-A, 2 for
# Ctrl-B, etc. However, there are no wxPython or wxWindows
# symbols for them, so I'm defining codes for Ctrl-X (cut) and
# Ctrl-V (paste) here for readability:
#----------------------------------------------------------------------------
# window here is the *parent* of the ctrl
# (Uncomment for debugging:)
##        print('keycode:', key)
##        print('pos:', pos)
##        print('sel_start, sel_to:', sel_start, sel_to)
##        print('select_len:', select_len)
##        print('textval:', textval)
# set defaults for processing:
# Validate action, and predict resulting value, so we can
# range check the result and validate that too.
# (else value shouldn't change)
# Deletion of last significant digit:
# (see comments at top of file)
# Only allow paste if number:
# Convert the resulting strings, verifying they
# are legal integers and will fit in proper
# size if ctrl limited to int. (if not,
# disallow event.)
# if resulting value is 0, truncate and highlight value:
# Disallow pasting a leading zero with nothing selected:
# event ok
# Allow '-' to result in -1 if replacing entire contents:
# else allow negative sign only at start, and only if
# number isn't already zero or negative:
# disallow inserting a leading zero with nothing selected
# disallow inserting digits before the minus sign:
# not a legal char
# Do range checking for new candidate value:
# ensure resulting text doesn't result in a leading 0:
# Allow replacement of leading chars with
# zero, but remove the leading zero, effectively
# making this like "remove leading digits"
# Account for leading zero when positioning cursor:
# Always do paste numerically, to remove
# leading/trailing spaces
# (one way or t'other)
# (Uncomment for debugging:)
##        if allow_event:
##            print('new value:', new_value)
##            if paste: print('paste')
##            if set_to_none: print('set_to_none')
##            if set_to_zero: print('set_to_zero')
##            if set_to_minus_one: print('set_to_minus_one')
##            if internally_set: print('internally_set')
##        else:
##            print('new text:', new_text)
##            print('disallowed')
##        print()
# select to "empty" numeric value
# allow base wxTextCtrl to finish processing
#----------------------------------------------------------------------------
# Establish attrs required for any operation on value:
# The following lets us set out our "integer update" events:
# Establish parameters, with appropriate error checking
# let normal processing of the text continue
# record for next event
# record for next event
# if bounds set, and value is None, return False
# One or more of the underlying text control implementations
# issue an intermediate EVT_TEXT when replacing the control's
# value, where the intermediate value is an empty string.
# So, to ensure consistency and to prevent spurious ValueErrors,
# we make the following test, and react accordingly:
#
# Remove leading and trailing spaces before evaluating contents
# (conversion will raise ValueError if paste isn't legal)
#===========================================================================
#----------------------------------------------------------------------------
# Name:         itemspicker.py
# Purpose:
#
# Author:       Daphna Rosenbom, Gitty Zinger, Moshe Cohavi and Yoav Glazner
#
# Created:      Oct 3, 2010
# Version:
# Date:
# Licence:      wxPython license
# Tags:         phoenix-port
#----------------------------------------------------------------------------
#DCLICK only works on one item
#this can happen using ^DCLICK when two items are selected
#-----------------------------------------------------------------------------
# Name:        languagectrls.py
# Purpose:
#
# Author:      Riaan Booysen
#
# Created:     2006
# Copyright:   (c) 2006 Riaan Booysen
# License:     wxPython
# Tags:        phoenix-port, unittest, documented, py3-port
#-----------------------------------------------------------------------------
# generated from wx.Locale info and locale.windows_locale
#    wx.LANGUAGE_DEFAULT: 'ZA',
# manually defined language/country mapping
# wx.LANGUAGE_SERBIAN gives an error for me
# invalid language assertions
# wx 2.6
#print(cnt, name, lc, wxli)
# override, drop country
# map unhandled to blank images
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
##            filter=LC_ALL)
# 12/09/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
#
# 12/18/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxScrolledMessageDialog -> ScrolledMessageDialog
#
# Tags:
#1;l=r10#2;r!100;h%h50#1', (self, self.panel))
#1;l=r#2;r!100;h%h50#1', (self, self.panel))
#1;l=r#2;r!100;h%h50#1', (self, self.panel))
#<compare object nr.>
#2`` -> lc.top.Below(<second obj>, 10)
#<compare object nr.>
#2`` -> lc.width.PercentOf(<second obj>, wx.Height, 50) and ``t=b#1`` -> lc.top.SameAs(<first obj>, wx.Bottom)
#<compare object
#(\d+)\s*$')
#1;l=l10#1;b=b10#1;r%r50#1',(self,)))
#1;r=r10#1;b%b30#1;l>10#2', (self,self.panelA)))
#3;r=r10#1;b=b10#1;l>10#2', (self,self.panelA,self.panelB)))
#1;Y=Y#1;h*;w%w50#1', (self.panelA,)))
#1;r=r4#1;h*;w*', (self.panelB,)))
#1;r%w50#1;h=h#2;w=w#2', (self.panelC, b)))
#1;l>#1;h*;w*', (self.panelD,)))
#----------------------------------------------------------------------
# Name:        wx.lib.msgpanel
# Purpose:     The MessagePanel class  (Note: this class used to live
#              in the demo's Main module.)
#
# Author:      Robin Dunn
#
# Created:     19-Oct-2009
# Copyright:   (c) 2009-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Make widgets
# make a spacer instead
# add to sizers for layout
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:         multisash
# Purpose:      Multi Sash control
#
# Author:       Gerrit van Dyk
#
# Created:      2002/11/20
# Version:      0.1
# License:      wxWindows license
#----------------------------------------------------------------------
# 12/09/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxMultiSash -> MultiSash
# o wxMultiSplit -> MultiSplit
# o wxMultiViewLeaf -> MultiViewLeaf
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# We will only have 2 windows if
# we need to destroy any
# Another splitview
# We'r at the root
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Yellow
##        from Funcs import FindFocusedChild
##        child = FindFocusedChild(self)
##        child.Bind(wx.EVT_KILL_FOCUS,self.OnChildKillFocus)
#----------------------------------------------------------------------
# Previous X
# Previous Y
# In Dragging
# View being sized
# For Closer
#----------------------------------------------------------------------
# Previous X
# Previous Y
# In Dragging
# Make provision for closer
# Draw outline
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# TODO: Switch to wx.Overlay instead of screen DC
#---------------------------------------------------------------------------
# Name:        newevent.py
# Purpose:     Easy generation of new events classes and binder objects.
#
# Author:      Miki Tebeka <miki.tebeka@gmail.com>
#
# Created:     18-Sept-2006
# Copyright:   (c) 2006-2018 by Total Control Software
# Licence:     wxWindows license
#
# Tags:        phoenix-port, documented
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.nvdlg
# Purpose:     Dialog for editing name/value pairs
#
# Author:      Robin Dunn
#
# Created:     30-Nov-2009
# Copyright:   (c) 2009-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port
#----------------------------------------------------------------------
# TODO: add ability to specify which stock or custom buttons are used
#app = wx.App(redirect=False)
#----------------------------------------------------------------------
# Name:        wx.lib.pdfwin
# Purpose:     A class that allows the use of the Acrobat PDF reader
#              ActiveX control
#
# Author:      Robin Dunn
#
# Created:     22-March-2004
# Copyright:   (c) 2008-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Adobe Reader >= 7.0
# Adobe Reader 5 or 6
# Adobe Reader not installed (progID is not defined)
# Use get_min_adobe_version() before instantiating PDFWindow
#------------------------------------------------------------------------------
## Oh no it isn't! The first page is 1 (dfh)
## NB.'thumbs' is case-sensitive, the other are not (dfh)
## NB. If scrollbars are off, the navigation tools disappear as well (dfh)
#------------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.pdfwin
# Purpose:     A class that allows the use of the Acrobat PDF reader
#              ActiveX control
#
# Author:      Robin Dunn
#
# Created:     22-March-2004
# Copyright:   (c) 2004-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# The ActiveX module from Acrobat 7.0 has changed and it seems to now
# require much more from the container than what our wx.activex module
# provides.  If we try to use it via wx.activex then Acrobat crashes.
# So instead we will use Internet Explorer (via the win32com modules
# so we can use better dynamic dispatch) and embed the Acrobat control
# within that.  Acrobat provides the IAcroAXDocShim COM class that is
# accessible via the IE window's Document property after a PDF file
# has been loaded.
#
# Details of the Acrobat reader methods can be found in
# http://partners.adobe.com/public/developer/en/acrobat/sdk/pdf/iac/IACOverview.pdf
# http://partners.adobe.com/public/developer/en/acrobat/sdk/pdf/iac/IACReference.pdf
#
# Co-ordinates passed as parameters are in points (1/72 inch).
# Make a new class that derives from the WebBrowser class
# in the COM module imported above.  This class also
# derives from wxWindow and implements the machinery
# needed to integrate the two worlds.
# can we sense failure at this point?
## Oh no it isn't! The first page is 1 (dfh)
## NB.'thumbs' is case-sensitive, the other are not (dfh)
## NB. If scrollbars are off, the navigation tools disappear as well (dfh)
# Create eventTypes and event binders
# Derive a new class from ActiveXWindow
# Methods exported by the ActiveX object
# Getters, Setters and properties
#  PROPERTIES
#  --------------------
#  src
#      type:string  arg:string  canGet:True  canSet:True
#
#  messagehandler
#      type:VT_VARIANT  arg:VT_VARIANT  canGet:True  canSet:True
#
#
#
#
#  METHODS
#  --------------------
#  QueryInterface
#      retType:  VT_VOID
#      params:
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          ppvObj
#              in:False  out:True  optional:False  type:unsupported type 26
#
#  AddRef
#      retType:  int
#
#  Release
#      retType:  int
#
#  GetTypeInfoCount
#      retType:  VT_VOID
#      params:
#          pctinfo
#              in:False  out:True  optional:False  type:int
#
#  GetTypeInfo
#      retType:  VT_VOID
#      params:
#          itinfo
#              in:True  out:False  optional:False  type:int
#          lcid
#              in:True  out:False  optional:False  type:int
#          pptinfo
#              in:False  out:True  optional:False  type:unsupported type 26
#
#  GetIDsOfNames
#      retType:  VT_VOID
#      params:
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          rgszNames
#              in:True  out:False  optional:False  type:unsupported type 26
#          cNames
#              in:True  out:False  optional:False  type:int
#          lcid
#              in:True  out:False  optional:False  type:int
#          rgdispid
#              in:False  out:True  optional:False  type:int
#
#  Invoke
#      retType:  VT_VOID
#      params:
#          dispidMember
#              in:True  out:False  optional:False  type:int
#          riid
#              in:True  out:False  optional:False  type:unsupported type 29
#          lcid
#              in:True  out:False  optional:False  type:int
#          wFlags
#              in:True  out:False  optional:False  type:int
#          pdispparams
#              in:True  out:False  optional:False  type:unsupported type 29
#          pvarResult
#              in:False  out:True  optional:False  type:VT_VARIANT
#          pexcepinfo
#              in:False  out:True  optional:False  type:unsupported type 29
#          puArgErr
#              in:False  out:True  optional:False  type:int
#
#  LoadFile
#      retType:  bool
#      params:
#          fileName
#              in:True  out:False  optional:False  type:string
#
#  setShowToolbar
#      retType:  VT_VOID
#      params:
#          On
#              in:True  out:False  optional:False  type:bool
#
#  gotoFirstPage
#      retType:  VT_VOID
#
#  gotoLastPage
#      retType:  VT_VOID
#
#  gotoNextPage
#      retType:  VT_VOID
#
#  gotoPreviousPage
#      retType:  VT_VOID
#
#  setCurrentPage
#      retType:  VT_VOID
#      params:
#          n
#              in:True  out:False  optional:False  type:int
#
#  goForwardStack
#      retType:  VT_VOID
#
#  goBackwardStack
#      retType:  VT_VOID
#
#  setPageMode
#      retType:  VT_VOID
#      params:
#          pageMode
#              in:True  out:False  optional:False  type:string
#
#  setLayoutMode
#      retType:  VT_VOID
#      params:
#          layoutMode
#              in:True  out:False  optional:False  type:string
#
#  setNamedDest
#      retType:  VT_VOID
#      params:
#          namedDest
#              in:True  out:False  optional:False  type:string
#
#  Print
#      retType:  VT_VOID
#
#  printWithDialog
#      retType:  VT_VOID
#
#  setZoom
#      retType:  VT_VOID
#      params:
#          percent
#              in:True  out:False  optional:False  type:double
#
#  setZoomScroll
#      retType:  VT_VOID
#      params:
#          percent
#              in:True  out:False  optional:False  type:double
#          left
#              in:True  out:False  optional:False  type:double
#          top
#              in:True  out:False  optional:False  type:double
#
#  setView
#      retType:  VT_VOID
#      params:
#          viewMode
#              in:True  out:False  optional:False  type:string
#
#  setViewScroll
#      retType:  VT_VOID
#      params:
#          viewMode
#              in:True  out:False  optional:False  type:string
#          offset
#              in:True  out:False  optional:False  type:double
#
#  setViewRect
#      retType:  VT_VOID
#      params:
#          left
#              in:True  out:False  optional:False  type:double
#          top
#              in:True  out:False  optional:False  type:double
#          width
#              in:True  out:False  optional:False  type:double
#          height
#              in:True  out:False  optional:False  type:double
#
#  printPages
#      retType:  VT_VOID
#      params:
#          from
#              in:True  out:False  optional:False  type:int
#          to
#              in:True  out:False  optional:False  type:int
#
#  printPagesFit
#      retType:  VT_VOID
#      params:
#          from
#              in:True  out:False  optional:False  type:int
#          to
#              in:True  out:False  optional:False  type:int
#          shrinkToFit
#              in:True  out:False  optional:False  type:bool
#
#  printAll
#      retType:  VT_VOID
#
#  printAllFit
#      retType:  VT_VOID
#      params:
#          shrinkToFit
#              in:True  out:False  optional:False  type:bool
#
#  setShowScrollbars
#      retType:  VT_VOID
#      params:
#          On
#              in:True  out:False  optional:False  type:bool
#
#  GetVersions
#      retType:  VT_VARIANT
#
#  setCurrentHightlight
#      retType:  VT_VOID
#      params:
#          a
#              in:True  out:False  optional:False  type:int
#          b
#              in:True  out:False  optional:False  type:int
#          c
#              in:True  out:False  optional:False  type:int
#          d
#              in:True  out:False  optional:False  type:int
#
#  setCurrentHighlight
#      retType:  VT_VOID
#      params:
#          a
#              in:True  out:False  optional:False  type:int
#          b
#              in:True  out:False  optional:False  type:int
#          c
#              in:True  out:False  optional:False  type:int
#          d
#              in:True  out:False  optional:False  type:int
#
#  postMessage
#      retType:  VT_VOID
#      params:
#          strArray
#              in:True  out:False  optional:False  type:VT_VARIANT
#
#
#
#
#  EVENTS
#  --------------------
#  Error
#      retType:  VT_VOID
#
#  Message
#      retType:  VT_VOID
#
#
#
#
###############################################################################
# Name: platebtn.py                                                           #
# Purpose: PlateButton is a flat label button with support for bitmaps and    #
#          drop menu.                                                         #
# Author: Cody Precord <cprecord@editra.org>                                  #
# Copyright: (c) 2007 Cody Precord <staff@editra.org>                         #
# Licence: wxWindows Licence                                                  #
# Tags: phoenix-port
###############################################################################
#-----------------------------------------------------------------------------#
# Imports
# Local Imports
#-----------------------------------------------------------------------------#
# Button States
# Button Styles
# Normal Flat Background
# Gradient Filled Background
# Use square corners instead of rounded
# Useful on Windows to get a transparent appearance
# when the control is shown on a non solid background
# Draw drop arrow and fire EVT_PLATEBTN_DROPRROW_PRESSED event
# Stay pressed until clicked again
#-----------------------------------------------------------------------------#
# EVT_BUTTON used for normal event notification
# EVT_TOGGLE_BUTTON used for toggle button mode notification
#-----------------------------------------------------------------------------#
# Attributes
#(.634, .224, .143)
# Setup Initial Size
# Event Handlers
# Mouse Events
# Other events
# Positioning needs a little help on Windows
# TODO using a buffered paintdc on windows with the nobg style
#      causes lots of weird drawing. So currently the use of a
#      buffered dc is dissabled for this style.
# Setup
# The background needs some help to look transparent on
# on Gtk and Windows
# Calc Object Positions
# Draw bitmap and text
#---- End Private Member Function ----#
#---- Public Member Functions ----#
# Aliases
# NOTE: Should measure with a GraphicsContext to get right
#       size, but due to random segfaults on linux special
#       handling is done in the drawing instead...
# GetBitmap Aliases for BitmapButton api
# Alias for GetLabel
#---- Event Handlers ----#
# Note: this delay needs to be at least as much as the on in the KeyUp
#       handler to prevent ghost highlighting from happening when
#       quickly changing focus and activating buttons
#---- End Event Handlers ----#
#(.634, .224, .143)
# Aliases for SetBitmap* functions from BitmapButton
#---- End Public Member Functions ----#
#----------------------------------------------------------------------
# Name:         popup
# Purpose:      Generic popup control
#
# Author:       Gerrit van Dyk
#
# Created:      2002/11/20
# Version:      0.1
# License:      wxWindows license
# Tags:         phoenix-port
#----------------------------------------------------------------------
# 11/24/2007 - Cody Precord
#
# o Use RendererNative to draw button
#
# 12/09/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxPopupDialog -> PopupDialog
# o wxPopupControl -> PopupControl
#
#---------------------------------------------------------------------------
# Tried to use wxPopupWindow but the control misbehaves on MSW
#---------------------------------------------------------------------------
# embedded control should get focus on TAB keypress
# layout the child widgets
# calculate the best size of the combined control based on the
# needs of the child widgets.
# an alias
#----------------------------------------------------------------------------
# Name:         printout.py
# Purpose:      preview and printing class -> table/grid printing
#
# Author:       Lorne White (email: lorne.white@telusplanet.net)
#
# Created:
# Version       0.75
# Date:         May 15, 2002
# Licence:      wxWindows license
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# Release Notes
# fixed bug for string wider than print region
# add index to data list after parsing total pages for paging
#----------------------------------------------------------------------------
# 12/10/2003 - Jeff Grimmett (grimmtooth@softhome.net)
# o 2.5 compatibility update.
#----------------------------------------------------------------------------
# 11/23/2004 - Vernon Cole (wnvcole@peppermillcas.com)
# o Generalize for non-2-dimensional sequences and non-text data
#   (can use as a simple text printer by supplying a list of strings.)
# o Add a small _main_ for self test
# set the DC font parameters
# get the remaining cell size for adjustment
# trouble fitting into cell
# fit the text to the cell size
# blank + word
# truncate string to fit into width
# fitted text value
# full page width
# left margin
#module logic expects two dimensional data -- fix input if needed
# a string becomes a single cell
# a non-iterable becomes a single cell
# a sequence of strings
#becomes one column
#becames one row
# a sequence of non-iterables
#becomes one column
#becomes one row
# position of each column
# position of each column
# check if it fits in page
# check if custom column alignment
# check if custom column background colour
# check if custom column text colour
# setup using 10 point
# extra spacing for label per point value
# extra spacing for row text per point value
# total pages for display/printing
# if there data for display on the page
# check if header defined
# test to see if row will fit in remaining space
# colour the row/column
# row fits - print text
# top line of cell
# last value in list
# set the point spacing
# top line of label
# print the header array
# print the header array
# set the point spacing
# set font colour
# override the column colour
# check if custom colour defined for the cell background
# check if custom colour defined for the cell text
# draw last row line
# draw all vertical lines
#supress grid lines if only one column
#            y_out = self.y + self.pt_space_before + self.pt_space_after     # adjust for extra spacing
#surpress grid line if only one column
# point adjustment before and after the label text
# point adjustment before and after the row text
# method to set the label space adjustment
# method to set the row space adjustment
# offset to adjust for printer
# only used if no column sizes
# cell background colour
# test if row already exists
# test if column already exists
# create the column value
# create the column value
# create dictionary item for colour settings
# font colour for custom cells
# test if row already exists
# test if column already exists
# create the column value
# create the column value
# create dictionary item for colour settings
# column line size
# create dictionary item for column line settings
# returns colours based from wxColour value
# initial zoom value
# total display pages
# a single sequence will print out as a single column with no borders ...
#... but, if labels or columns are defined, a single sequence will print out as a single row
##ptbl.label = ('One','Two','Three','Four','5')
#----------------------------------------------------------------------
# Name:        wx.lib.progressindicator
# Purpose:
#
# Author:      Robin Dunn
#
# Created:     22-Oct-2009
# Copyright:   (c) 2009-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Supported Styles
#----------------------------------------------------------------------
# parent, id, pos, size, style, name
# Make sure Stop is called as many times as Start was. Only really
# stop when the count reaches zero.
# should be already stopped...
# there's still more starts than stops...
#----------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         pydocview.py
# Purpose:      Python extensions to the wxWindows docview framework
#
# Author:       Peter Yared, Morgan Hua, Matt Fryer
#
# Created:      5/15/03
# Copyright:    (c) 2003-2006 ActiveGrid, Inc.
# License:      wxWindows license
# Tags:         phoenix-port
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Constants
#----------------------------------------------------------------------------
#item = wxMenuItem(self.editMenu, wxID_CUT, _("Cu&t\tCtrl+X"), _("Cuts the selection and puts it on the Clipboard"))
#item.SetBitmap(getCutBitmap())
#editMenu.AppendItem(item)
# Using ID_ABOUT to update the window menu, the window menu items are not triggering
# TODO: Is this really needed?
# save child documents first
# save parent and other documents later
# wxBug: Menubar and toolbar help strings don't pop the status text back
# wxBug: Need to set to fill screen to get around bug where maximize is leaving shadow of statusbar, check out maximize call at end of this function
# Check if the frame position is offscreen
# wxBug: On maximize, statusbar leaves a residual that needs to be refereshed, happens even when user does it
# wxBug: Have to set the menubar at the very end or the automatic MDI "window" menu doesn't get put in the right place when the services add new menus to the menubar
# Need to do this here in case the services are looking for wx.GetApp().GetTopWindow()
# instantiate service windows for correct positioning, we'll hide/show them later based on user preference
# wxBug: Have to set the menubar at the very end or the automatic MDI "window" menu doesn't get put in the right place when the services add new menus to the menubar
# TODO: GetClientWindow.GetSize is still returning 0,0 since the frame isn't fully constructed yet, so using full frame size
# wx.SASH_TOP is 0 so check for None instead of just doing "if sash:"
####
# Force a refresh
####
# It's a window embedded in another sash window so remember its actual size to show it again
# It is a parent sashwindow with multiple embedded sashwindows
# Make sure it is visible in case all of the subwindows were hidden
# If it is not the size of the full parent sashwindow set the other window's size so that if it gets shown it will have a cooresponding size
# Hide the parent sashwindow if all of the children are hidden
# Force a refresh
# Need this in case there are embedded sash windows and such, OnActivate is not getting called
# Called by Project Editor
# From docview.MDIParentFrame
# End From docview.MDIParentFrame
# self._notebook.SetSizer(wx.NotebookSizer(self._notebook))
# wxBug: wx.Listbook does not implement HitTest the same way wx.Notebook
# does, so for now don't fire MouseOver events.
# wxBug: On Windows XP the tooltips don't automatically disappear when you move the mouse and it is on a notebook tab, has nothing to do with this code!!!
# wxBug: Tooltips no longer appearing on tabs except on
# about a 2 pixel area between tab top and contents that will show tip.
# Go from len-1 to 0
# wxBug: It is offsetting click events in the blank notebook area
# Now set the icon
# wxBug: the wxListbook used on Mac needs its tabs list resized
# whenever a new tab is added, but the only way to do this is
# to resize the entire control
# build file menu list when we open a file
# build file menu list when we open a file
# Needed in case there are splitpanels around the mdi frame
# save and close services last
# From docview.MDIParentFrame
# self.Create(doc, view, frame, id, title, pos, size, style, name)
# wxBug: For some reason the EVT_ACTIVATE event is not getting triggered for the first mdi client window that is opened so we have to do it manually
##    # Couldn't get this to work, but seems to work fine with single stage construction
##    def Create(self, doc, view, frame, id, title, pos, size, style, name):
##        self._childDocument = doc
##        self._childView = view
##        if wx.MDIChildFrame.Create(self, frame, id, title, pos, size, style, name):
##            if view:
##                view.SetFrame(self)
##                return True
##        return False
# Need this in case there are embedded sash windows and such, OnActivate is not getting called
# Break recursion loops
# This isn't in the wxWindows codebase but the document needs to be disposed of somehow
# wxBug: wxDialog should be calling this automatically but doesn't
# NB_MULTILINE is windows platform only
# We need to populate the image list before setting notebook images
# use -1 to represent that this panel has no icon
# Add icons to notebook
# More than one mode is supported, allow selection
# only set if not already initialized
# only set if not already initialized
# if _singleInstance is TRUE only allow one single instance of app to run.
# When user tries to run a second instance of the app, abort startup,
# But if user also specifies files to open in command line, send message to running app to open those files
# create shared memory temporary file
# have running single instance open file arguments
# available buffer
# set writing marker
# write files we tried to open to shared memory
# set finished writing marker
# give enough time for buffer to be available
# force display of running app
# available data
# finished reading, set buffer free marker
# force display of running app
# 1 second interval
# wxBug: operating system bug, first window is set to the position of last window closed, ignoring passed in position on frame creation
#        also, initial size is incorrect for the same reasons
# if any child windows are maximized, then user must want any new children maximized
# if no children exist, then use the default value from registry
# wxBug:  Only current window is maximized, so need to check every child frame
# other windows exist and none are maximized
# get default setting from registry
# wxBug: Should already be maximizing new child frames if one is maximized but it's not so we have to force it to
##        wx.EVT_MAXIMIZE(frame, self.OnMaximize) # wxBug: This doesn't work, need to save MDIChildFrameMaximized state on close of windows instead
# need to check on this, but only once
# other windows exist and none are maximized
# Cloning list to make sure we go through all docs even as they are deleted
# Implicitly deleted by DeleteAllViews
# Cloning list to make sure we go through all docs even as they are deleted
# Let the views handle the event before the services
# Using ID_ABOUT to update the window menu, the window menu items are not triggering
# wxBug: Not defined for some reason
# Needed in case there are splitpanels around the mdi frame
# save and close services last.
# save and close documents
# documents with a common view, e.g. project view, should save the document, but not close the window
# and let the service close the window.
# wxBug: Need to do this in SDI to mimic MDI... because have to set the menubar at the very end or the automatic MDI "window" menu doesn't get put in the right place when the services add new menus to the menubar
# Need to call docmanager here since super class relies on DocParentFrame which we are not using
# Let the views handle the event before the services
# use default AboutDialog
# Handle OK
# see if we can find a delimiter to chop the path
# let the line expand horizontally without vertical expansion
# add a border around the inside of the tab
#----------------------------------------------------------------------------
# Constants
#----------------------------------------------------------------------------
# Arrange All and window navigation doesn't work on Linux
# It's a new frame, so update the windows menu... this is as if the View::OnActivateMethod had been invoked
# build file list only when we are updating the windows menu
# Add the more items item
# Remove any extra items
# get list of windows for documents
# get list of windows for general services
# Make the current frame the last frame so that it is the last one to appear
# TODO: Need to loop around if posx + delta + size > displaysize
# TODO - make the current window the first one
# Should preselect the current window, but not supported by wx.GetSingleChoice
#----------------------------------------------------------------------------
# File generated by encode_bitmaps.py
#----------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.rcsizer
# Purpose:     RowColSizer:
#
# Author:      Robin Dunn, adapted from code by Niki Spahiev
#
# Created:     26-Feb-2002
# Copyright:   (c) 2002-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 12/10/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
# o There appears to be a prob with the wx.Sizer.GetSize() method.
#
# 12/23/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wx.Sizer.GetSize() method working right now.
#
# After the lib and demo no longer uses this sizer enable this warning...
## import  warnings
## warningmsg = r"""\
## #####################################################\
## # THIS MODULE IS NOW DEPRECATED                      |
## #                                                    |
## # The core wx library now contains a similar class   |
## # wrapped as wx.GridBagSizer.                        |
## #####################################################/
## """
## warnings.warn(warningmsg, DeprecationWarning, stacklevel=2)
#----------------------------------------------------------------------
# default sizes for cells with no item
#--------------------------------------------------
# row, col and spanning can be specified individually...
# or as tuples (row,col) and (rowspan,colspan)
# Do I really want to do this?  Probably not...
#if rowspan > 1 or colspan > 1:
#    flag = flag | wx.EXPAND
#AddWindow = Add
#AddSizer  = Add
#--------------------------------------------------
# unpack coords and spanning
# are the widths and heights lists long enough?
# set the widths and heights lists for this item
#--------------------------------------------------
#--------------------------------------------------
# save current dimensions, etc.
# Check for growables
# iterate children and set dimensions...
#--------------------------------------------------
# calculate the item's actual size and position within
# its grid cell
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.resizewidget
# Purpose:     Adds a resize handle to any widget, with support for
#              notifying parents when layout needs done.
#
# Author:      Robin Dunn
#
# Created:     12-June-2008
# Copyright:   (c) 2008-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------
#-----------------------------------------------------------------------------
# dimensions used for the handle
# default colors for the handle
#A0A0A0'
#E0E0E0'
# An event and event binder that will notify the containers that they should
# redo the layout in whatever way makes sense for their particular content.
# TODO: Add a style flag that indicates that the ResizeWidget should
# try to adjust the layout itself by looking up the sizer and
# containment hierachy.  Maybe also a style that says that it is okay
# to adjust the size of top-level windows too.
#-----------------------------------------------------------------------------
# This calls AddChild, so do the rest of the init there
#=== Event handler methods ===
# set or reset the drag cursor
# determine if a new size is needed
# draw the resize handle
# is the position in the area to be used for the resize handle?
#=== Overriden virtuals from the base class ===
# This little hack is needed because if this AddChild was called when
# the widget was first created, then the OOR values will get reset
# after this function call, and so the Python proxy object saved in
# the window may be different than the child object we have now, so we
# need to reset which proxy object we're using.  Look for it by ID.
#-----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         scrolledpanel.py
# Author:       Will Sadkin
# Created:      03/21/2003
# Copyright:    (c) 2003 by Will Sadkin
# License:      wxWindows license
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# 12/11/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxScrolledPanel -> ScrolledPanel
#
# 21 Dec 2012 - Andrea Gavana (andrea.gavana@gmail.com)
#
# Tags:        phoenix-port, unittest, documented
#
# The following is all that is needed to integrate the sizer and the scrolled window
# Round up the virtual size to be a multiple of the scroll rate
# scroll back to top after initial events
# is it before the left edge?
# is it above the top?
# For the right and bottom edges, scroll enough to show the
# whole control if possible, but if not just scroll such that
# the top/left edges are still visible
# is it past the right edge ?
# is it below the bottom ?
# if we need to adjust
#print("%s: (%s, %s)" % (self.GetName(), new_vs_x, new_vs_y))
# sheet.py
# CSheet - A wxPython spreadsheet class.
# This is free software.  Feel free to adapt it as you like.
# Author: Mark F. Russo (russomf@hotmail.com) 2002/01/31
# Tags: phoenix-port
#---------------------------------------------------------------------------
# 12/11/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
# o Untested.
#
#---------------------------------------------------------------------------
# Save grid reference
# Hook OnChar for custom behavior
# Commit the edit
# Change the current cell
# Commit the edit
# Change the current cell
# Commit the edit
# Change the current cell
# Commit the edit
# Change the current cell
# Continue event
#---------------------------------------------------------------------------
# Save a reference to the grid
# Size text control to exactly overlay in-cell editing
# Call base class method.
# Select the text when initiating an edit so that subsequent typing
# replaces the contents.
# Assume value not changed
# Get value in edit control
# Compare
# If different then changed is True
# Update the table
# Clear the class' start value
# Clear contents of the edit control
# Get the key code
# Handle num pad keys
# Empty text control when init w/ back key
# Handle normal keys
# If are at this point with a key,
# replace the contents of the text control.
# Move to the end so that subsequent keys are appended
#---------------------------------------------------------------------------
# Init variables
# Init last cell column clicked
# Init last cell row clicked
# Init range currently selected
# Map string datatype to default renderer/editor
# By default start with a 4 x 3 grid
# Default sizes and alignment
# Default column sizes
# Sink events
# Save the last cell coordinates
# Save the cell clicked
# Suppress event if same cell clicked twice in a row.
# This prevents a single-click from initiating an edit.
# Move grid cursor to double-clicked cell
# Show the cell editor
# If a single cell is selected, then Selecting() returns False (0)
# and range coords are entire grid.  In this case cancel previous selection.
# If more than one cell is selected, then Selecting() is True (1)
# and range accurately reflects selected cells.  Save them.
# If more cells are added to a selection, selecting remains True (1)
# TODO: raise an error when there are no cells selected?
# Build a string to put on the clipboard
# (Is there a faster way to do this in Python?)
# Put the string on the clipboard
# (Is there a better way to do this?)
# Exit on failure
# Get the text
# CrLf characters
# Tab character
# split into rows
# leave out last element, which is always empty
# split rows into elements
# Get the starting and ending cell range to paste into
# If no cells selected...
# Start the paste at the current location
# Go to maximum row and col extents
# If cells selected, only paste there
# Enter data into spreadsheet cells one at a time
# Init row and column counters
# Loop over all rows
# Loop over all row elements
# Set cell value
# Increment the column counter
# Do not exceed maximum column
# Do not exceed maximum row
# If no selection...
# clear only current cell
# Otherwise clear selected cells
# Check for non-negative number
# Adjust number of rows
# Check for non-negative number
# Adjust number of rows
#----------------------------------------------------------------------
# Name:        sized_controls.py
# Purpose:     Implements default, HIG-compliant sizers under the hood
#              and provides a simple interface for customizing those sizers.
#
# Author:      Kevin Ollivier
#
# Created:     26-May-2006
# Copyright:   (c) 2006 Kevin Ollivier
# Licence:     wxWindows license
#
#
# Tags:        phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------
# For HIG info: links to all the HIGs can be found here:
# http://en.wikipedia.org/wiki/Human_Interface_Guidelines
# useful defines for sizer prop values
# MSW HIGs use dialog units, not pixels
# elif lprop == "border":
#     # this arg takes a tuple (dir, pixels)
#     dirs, amount = value
#     if dirs == "all":
#         dirs = ["all"]
#     for dir in dirs:
#         flag = flag | border[dir]
#     item.SetBorder(amount)
# this arg takes a tuple (dir, pixels)
# auto-adjust growable rows/columns if expand or proportion is set
# on a sizer item in a FlexGridSizer
# FIXME: I'd like to get the item index in the sizer instead, but
# doing sizer.GetChildren.index(item) always gives an error
# Why, Python?! Why do you make it so easy?! ;-)
# Note: The wx.LogNull is used here to suppress a log message
# on wxMSW that happens because when AddChild is called the
# widget's hwnd hasn't been set yet, so the GetWindowRect that
# happens as a result of sizer.Add (in wxSizerItem::SetWindow)
# fails.  A better fix would be to defer this code somehow
# until after the child widget is fully constructed.
# Note: One problem is that the child class given to AddChild
# is the underlying wxWidgets control, not its Python subclass. So if
# you derive your own class, and override that class' GetDefaultBorder(),
# etc. methods, it will have no effect.
#sizer.AddGrowableCol(1)
# On the Mac the scrollbars and corner gripper of a
# ScrolledWindow will be in the list of children, but
# should not be managed by a sizer.  So if there is a
# child that is not in a sizer make sure we don't track
# info for it nor add it to the next sizer.
# See Mac comment above.
# Temporary hack to fix button ordering problems.
# this probably isn't needed, but I thought it would help to make it consistent
# with SizedDialog, and creating a panel to hold things is often good practice.
#----------------------------------------------------------------------
# Name:        wx.lib.softwareupdate
# Purpose:     A mixin class using Esky that allows a frozen application
#              to update itself when new versions of the software become
#              available.
#
# Author:      Robin Dunn
#
# Created:     1-Aug-2011
# Copyright:   (c) 2011-2018 by Total Control Software
# Licence:     wxWindows license
#
# Tags:        py3-port??
#----------------------------------------------------------------------
# wx 2.8 doesn't have [SG]etAppDisplayname...
#if 'wxMac' in wx.PlatformInfo:
#    SOT = wx.STAY_ON_TOP
#----------------------------------------------------------------------
# get rid of the prior version if it is still here.
# Ok, there is a little trickery going on here. We don't know yet if
# the user wants to restart the application after the update is
# complete, but since atexit functions are executed in a LIFO order we
# need to registar our function before we call auto_update and Esky
# possibly registers its own atexit function, because we want ours to
# be run *after* theirs. So we'll create an instance of an info object
# and register its method now, and then fill in the details below
# once we decide what we want to do.
# Execute the program, replacing this process
# Let Esky handle all the rest of the update process so we can
# take advantage of the error checking and priviledge elevation
# (if neccessary) that they have done so we don't have to worry
# about that ourselves like we would if we broke down the proccess
# into component steps.
# Ask the user if they want the application to be restarted.
# Close all windows in this application...
# force close (can't be cancelled)
# ...find the path of the esky bootstrap/wrapper program...
# ...and tell our RestartInfo object about it.
# Make sure the CWD not in the current version's appdir, so it can
# hopefully be cleaned up either as we exit or as the next verison
# is starting.
# With all the top level windows closed the MainLoop should exit
# automatically, but just in case tell it to exit so we can have a
# normal-as-possible shutdown of this process. Hopefully there
# isn't anything happening after we return from this function that
# matters.
# Start the worker thread that will check for an update, it will call
# processResults when it is finished.
# Show progress of the download and install. This function is passed to Esky
# functions to use as a callback.
# user pressed the cancel button
# It looks like at least some versions of py2app are setting
# sys.executable to ApplicationName.app/Contents/MacOS/python instead
# of ApplicationName.app/Contents/MacOS/applicationname, which is what
# should be used to relaunch the application. Other freezer tools set
# sys.executable to the actual executable as expected, so we'll tweak
# the setting here for Macs too.
# there should be only 2
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.splitter
# Purpose:     A class similar to wx.SplitterWindow but that allows more
#              than a single split
#
# Author:      Robin Dunn
#
# Created:     9-June-2005
# Copyright:   (c) 2005-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documentation, py3-port
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# always turn on tab traversal
# and turn off any border styles
# initialize the base class
# initialize data members
# Bind event handlers
# -------------------------------------
# Event handlers
# if this is the first idle time after a sash position has
# potentially been set, allow _SizeWindows to check for a
# requested size.
# LeftDown: set things up for dragging the sash
# LeftUp: Finsish the drag
# erase the old tracker
# determine if we can change the position
# the change was not allowed
# TODO: check for unsplit?
# Entering or Leaving a sash: Change the cursor
# Dragging the sash
# mouse didn't move far enough
# determine if we can change the position
# the change was not allowed
# nothing was changed
# erase the old tracker
# Remember old positions
# draw a new tracker
# -------------------------------------
# Internal helpers
# TODO: check for possibility of unsplit (pane size becomes zero)
# make sure that minsizes are honored
# sanity check
# send the events
# the event handler vetoed the change
# or it might have changed the value
# the event handler vetoed the change
# or it might have changed the value
# these are the windows on either side of the sash
# make adjustments for window min sizes
# TODO:  what is the thing about _requestedSashPosition for?
# find the diff from the old pos
# NOTE:  Should this use GetEffectiveMinSize?
# if there are no splits then we're done.
# if we are not supposed to use a sash then we're done.
# Reverse the sense of the orientation, in this case it refers
# to the direction to draw the sash not the direction that
# windows are stacked.
# Draw a line to represent the dragging sash, for when not
# doing live updates
# if there are no splits then we're done.
# no windows yet?
# are there any pending size settings?
# TODO: this may need adjusted to make sure they all fit
# in the current client size
# are there any that still have a -1?
# TODO: this should also be adjusted
# there's only one, it's an easy layout
# last one takes the rest of the space. TODO make this configurable
# last one takes the rest of the space. TODO make this configurable
#----------------------------------------------------------------------
# methods from wx.NotifyEvent
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.statbmp
# Purpose:     A generic StaticBitmap class.
#
# Author:      Robin Dunn
#
# Created:     12-May-2004
# Copyright:   (c) 2004-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.stattext
# Purpose:     A generic wxGenStaticText class.  Using this should
#              eliminate some of the platform differences in wxStaticText,
#              such as background colours and mouse sensitivity.
#
# Author:      Robin Dunn
#
# Created:     8-July-2002
# Copyright:   (c) 2002-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------
# 12/12/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
# o Untested.
#
# In unbuffered mode we can let the theme shine through,
# otherwise we draw the background ourselves.
#----------------------------------------------------------------------
# don't check wx.ST_NO_AUTORESIZE yet
# empty lines have height too
# if colour is still the default then use the theme's  background on Mac
# empty lines have height too
#----------------------------------------------------------------------
#
# throbber.py - Cliff Wells <clifford.wells@comcast.net>
#
# Thanks to Harald Massa <harald.massa@suedvers.de> for
# suggestions and sample code.
#
#
# 12/12/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# Tags:        phoenix-port, unittest, py3-port, documented
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# set size, guessing if necessary
# double check it
# do we have a sequence of images?
# or a composite image that needs to be split?
# self.sequence can be changed, but it's not recommended doing it
# while the throbber is running.  self.sequence[0] should always
# refer to whatever frame is to be shown when 'resting' and be sure
# that no item in self.sequence >= self.frames or < 0!!!
# --------- public methods ---------
#FIXME: need to make sure value is within range!!!
# self.sequence can be changed, but it's not recommended doing it
# while the throbber is running.  self.sequence[0] should always
# refer to whatever frame is to be shown when 'resting' and be sure
# that no item in self.sequence >= self.frames or < 0!!!
#FIXME: need to make sure values are within range!!!
# ------------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.ticker
# Purpose:     A news-ticker style scrolling text control
#
# Author:      Chris Mellon
#
# Created:     29-Aug-2004
# Copyright:   (c) 2004 by Chris Mellon
# Licence:     wxWindows license
# Tags:        phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#cache value for the GetTextExtent call
#frames per second
#pixels per frame
#Change the offset so it's correct for the new direction
#Refresh here to clear away the old text.
#centered vertically
#testcase/demo
#set ticker properties here if you want
#----------------------------------------------------------------------
# Name:        wx.lib.ticker_xrc
# Purpose:     A XRC handler for wx.lib.ticker
#
# Author:      Chris Mellon
#
# Created:     17-May-2005
# Copyright:   (c) 2005 by Chris Mellon
# Licence:     wxWindows license
#----------------------------------------------------------------------
# handles font, bg/fg color
#----------------------------------------------------------------------
# Name:        wx.lib.utils
# Purpose:     Miscelaneous utility functions
#
# Author:      Robin Dunn
#
# Created:     18-Jan-2009
# Copyright:   (c) 2009-2018 Total Control Software
# Licence:     wxWidgets license
#
# Tags:        phoenix-port, unittest, documented
#
#----------------------------------------------------------------------
#---------------------------------------------------------------------------
# bail out if there are any -1's in the dimensions
# is it already fully visible?
# if not then try adjusting the position
# if the rectangle has been moved too far, then readjust the position
# and also adjust the size
# make final adjustments if needed
# return the result
#---------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.wordwrap
# Purpose:     Contains a function to aid in word-wrapping some text
#
# Author:      Robin Dunn
#
# Created:     15-Oct-2006
# Copyright:   (c) 2006-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port
#----------------------------------------------------------------------
# remember the last seen space
# have we reached the max width?
#print(repr(text))
#----------------------------------------------------------------------
# Name:        wx.lib.wxpTag
# Purpose:     A wxHtmlTagHandler that knows how to build and place
#              wxPython widgets onto web pages.
#
# Author:      Robin Dunn
#
# Created:     13-Sept-1999
# Copyright:   (c) 1999-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 12/13/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for V2.5 compatibility
#
#123ABC" will automatically be
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# create a new context object
# find and import the module
# find and verify the class
#if type(self.ctx.classObj) not in [ types.ClassType, types.TypeType]:
#    raise TypeError("WXP tag attribute CLASS must name a class")
# now look for width and height
# parse up to the closing tag, and gather any nested Param tags.
# create the object
# add it to the HtmlWindow
# check for a param named 'id'
# check for something that should be evaluated
# convert to wx.Colour
#':
#----------------------------------------------------------------------
# just a place to hold some values
#----------------------------------------------------------------------
# Function to assist with importing packages
#----------------------------------------------------------------------
# Function to parse a param string (of the form 'item=value item2="value etc"'
# and creates a dictionary
#----------------------------------------------------------------------
# --------------------------------------------------------------------------- #
# ADVANCEDSPLASH Control wxPython IMPLEMENTATION
# Python Code By:
#
# Andrea Gavana, @ 10 Oct 2005
# Latest Revision: 19 Dec 2012, 21.00 GMT
#
#
# TODO List/Caveats
#
# 1. Actually, Setting The Shape Of AdvancedSplash Is Done Using "SetShape"
#    Function On A Frame. This Works, AFAIK, On This Following Platforms:
#
#    - MSW
#    - UNIX/Linux
#    - MacOS Carbon
#
#    Obviously I May Be Wrong Here. Could Someone Verify That Lines 139-145
#    Work Correctly On Other Platforms Than Mine (MSW XP/2000)?
#    Moreover, Is There A Way To Avoid The Use Of The "SetShape" Method?
#    I Don't Know.
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
#----------------------------------------------------------------------
# Beginning Of ADVANCEDSPLASH wxPython Code
#----------------------------------------------------------------------
# These Are Used To Declare If The AdvancedSplash Should Be Destroyed After The
# Timeout Or Not
# These Flags Are Used To Position AdvancedSplash Correctly On Screen
# This Option Allow To Mask A Colour In The Input Bitmap
#----------------------------------------------------------------------
# ADVANCEDSPLASH Class
# This Is The Main Class Implementation. See __init__() Method For
# Details.
#----------------------------------------------------------------------
# Some Error Checking
# Our Bitmap Is Masked Accordingly To User Input
# Setting Initial Properties
# Calculate The Shape Of AdvancedSplash Using The Input-Modified Bitmap
# Don't Know If It Works On Other Platforms!!
# Tested Only In Windows XP/2000
# Set The AdvancedSplash Size To The Bitmap Size
# Starts The Timer. Once Expired, AdvancedSplash Is Destroyed
# Catch Some Mouse Events, To Behave Like wx.SplashScreen
# Here We Redraw The Bitmap Over The Frame
# We Draw The Text Anyway, Wheter It Is Empty ("") Or Not
# --------------------------------------------------------------------------------- #
# AQUABUTTON wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 07 October 2008
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1) Anything to do?
#
#
# For all kind of problems, requests of enhancements and bug reports, please
# write to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Initialize AquaButton 1 (with image)
# Initialize AquaButton 2 (no image)
# Constants for the hovering and clicking effects
# The following defaults are better suited to draw the text outline
# We take the percent way of the colour from colour ==> white
# Create shadow
# Create top water colour to give "aqua" effect
# draw shapes
#draw shadow
#draw main
#draw top bubble
# adjust for bitmap and text to centre
# draw bitmap if available
# extra spacing from bitmap
# Create a Path to draw the text
# draw the text
# Save the bitmap using wx.MemoryDC for later use
#draw main
#draw top bubble
# Create shadow
# Create top water colour to give "aqua" effect
# draw shapes
#draw shadow
#draw main
#draw top bubble
# adjust for bitmap and text to centre
# draw bitmap if available
# extra spacing from bitmap
# Create a Path to draw the text
# draw the text
# Save the bitmap using wx.MemoryDC for later use
#draw main
#draw top bubble
# ---------------------------------------------------------------------------- #
# Class DCSaver
# ---------------------------------------------------------------------------- #
# Shadows behind menus are supported only in XP
# ---------------------------------------------------------------------------- #
# Class RendererBase
# ---------------------------------------------------------------------------- #
# Keep old pen and brush
# draw the gradient area
# draw arrow
# Keep old pen and brush
# lower right size
# upper left side
# ---------------------------------------------------------------------------- #
# Class RendererXP
# ---------------------------------------------------------------------------- #
# switch according to the status
# Draw the button borders
# switch according to the status
# Draw the button borders
# For office style, we simple draw a rectangle with a gradient colouring
# fill with gradient
# Draw the border
# For office style, we simple draw a rectangle with a gradient colouring
# fill with gradient
# ---------------------------------------------------------------------------- #
# Class RendererMSOffice2007
# ---------------------------------------------------------------------------- #
# switch according to the status
# Keep old pen and brush
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the middle points
# Define the top region
# Keep old pen and brush
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the middle points
# Define the top region
# Define the middle region
# Define the bottom region
# Keep old pen and brush
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the middle points
# Define the top region
# Define the middle region
# Define the bottom region
# ---------------------------------------------------------------------------- #
# Class ArtManager
# ---------------------------------------------------------------------------- #
# connect an event handler to the system colour change event
# create wxBitmaps from the xpm's
# initialise the colour map
# Create common bitmaps
# Initialize the renderers map
# reinitialise the colour map
# We take the percent way of the colour from colour -. white
# We take the percent way of the colour from colour -. white
# The way to achieve non-rectangle
# Colour the whole rectangle with gradient
# Convert the region to a black and white bitmap with the white pixels being inside the region
# we draw the bitmap over the gradient coloured rectangle, with mask set to white,
# this will cause our region to be coloured with the gradient, while area outside the
# region will be painted with black. then we simply draw the bitmap to the dc with mask set to
# black
# The function ConvertToBitmap() return a rectangle bitmap
# which is shorter by 1 pixl on the height and width (this is correct behavior, since
# DrawLine does not include the second point as part of the line)
# we fix this issue by drawing our own line at the bottom and left side of the rectangle
# Save the current pen and brush
# gradient fill from colour 1 to colour 2 with top to bottom
# calculate some basic numbers
# calculate gradient coefficients
# draw the upper triangle
# draw the lower triangle
# Restore the pen and brush
# calculate gradient coefficients
# Random value betweem 0-255
# Random value betweem 0-255
# Random value betweem 0-255
# The text does not fit in the designated area,
# so we need to truncate it a bit
# Set background colour if non given by caller
# on supported windows systems (Win2000 and greater), this function
# will make a frame window transparent by a certain amount
# this API call is not in all SDKs, only the newer ones, so
# we will runtime bind this
# assumption: the background was already drawn on the dc
# the rect must be at least 5x5 pixles
# Start by drawing the right bottom corner
# Draw right side shadow
#Nothing to be done
#Nothing to be done
# get the startLocationY
# get the startLocationX
# the alignment is for both sides
# get the truncated text. The text may stay as is, it is not a must that is will be trancated
# get the fixed text dimentions
# calculate the start location
# calculate the start location
# meaning BU_EXT_CENTER_ALIGN_STYLE
# the alignment is for both sides
# get the truncated text. The text may stay as is, it is not a must that is will be trancated
# get the fixed text dimentions
# calculate the start location
# calculate the start location
# it is very important to validate that the start location is not less than the alignment buffer
# get the bitmap offset
# get the truncated text. The text may stay as is, it is not a must that is will be trancated
# the alignment is for both sides
# get the fixed text dimentions
# get the startLocationX
# calculate the start location
# calculate the start location
# meaning wxBU_EXT_CENTER_ALIGN_STYLE
# calculate the start location
# it is very important to validate that the start location is not less than the alignment buffer
# enable colours
# set the font
# calculate the bitmap start location
# draw the bitmap
# calculate the text start location
# after all the caculations are finished, it is time to draw the text
# underline the first letter that is marked with a '&'
# draw the text
# underline the first '&'
# before
# underlineLetter
# Draw the underline ourselves since using the Underline in GTK,
# causes the line to be too close to the letter
# after
# allocate extra space for the bitmap
# Add new theme
# Create a DC for the whole screen area
# Create a Bitmap that will later on hold the screenshot image
# Note that the Bitmap must have a size big enough to hold the screenshot
# -1 means using the current default colour depth
# Create a memory DC that will be used for actually taking the screenshot
# Tell the memory DC to use our Bitmap
# all drawing action on the memory DC will go to the Bitmap now
# Blit (in this case copy) the actual screen on the memory DC
# and thus the Bitmap
# Copy to this X coordinate
# Copy to this Y coordinate
# Copy this width
# Copy this height
# From where do we copy?
# What's the X offset in the original DC?
# What's the Y offset in the original DC?
# Select the Bitmap out of the memory DC by selecting a new
# uninitialized Bitmap
# Set background colour if non given by caller
# Set background colour if non given by caller
# set default colour
# --------------------------------------------------------------------------- #
# BALLOONTIP wxPython IMPLEMENTATION
# Python Code By:
#
# Andrea Gavana, @ 29 May 2005
# Latest Revision: 16 Jul 2012, 15.00 GMT
#
#
# TODO List/Caveats
#
# 1. With wx.ListBox (And Probably Other Controls), The BalloonTip Sometimes
#    Flashes (It Is Created And Suddenly Destroyed). I Don't Know What Is
#    Happening. Probably I Don't Handle Correctly The wx.EVT_ENTER_WINDOW
#    wx.EVT_LEAVE_WINDOW?
#
# 2. wx.RadioBox Seems Not To Receive The wx.EVT_ENTER_WINDOW Event
#
# 3. wx.SpinCtrl (And Probably Other Controls), When Put In A Sizer, Does Not
#    Return The Correct Size/Position. Probably Is Something I Am Missing.
#
# 4. Other Issues?
#
#
# FIXED Problems
#
# 1. Now BalloonTip Control Works Also For TaskBarIcon (Thanks To Everyone
#    For The Suggetions I Read In The wxPython Mailing List)
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented
#
# End Of Comments
# --------------------------------------------------------------------------- #
# Let's suppose that in your application you have a wx.TextCtrl defined as:
# You can define your BalloonTip as follows:
# Set the BalloonTip target
# Set the BalloonTip background colour
# Set the font for the balloon title
# Set the colour for the balloon title
# Leave the message font as default
# Set the message (tip) foreground colour
# Set the start delay for the BalloonTip
# Set the time after which the BalloonTip is destroyed
# our normal wxApp-derived class, as usual
# Define The Values For The BalloonTip Frame Shape
# Define The Value For The BalloonTip Destruction Behavior
# ---------------------------------------------------------------
# Class BalloonFrame
# ---------------------------------------------------------------
# This Class Is Called By The Main BalloonTip Class, And It Is
# Responsible For The Frame Creation/Positioning On Screen
# Depending On Target Control/Window, The Frame Can Position
# Itself To NW (Default), NE, SW, SE. The Switch On Positioning
# Is Done By Calculating The Absolute Position Of The Target
# Control/Window Plus/Minus The BalloonTip Size. The Pointing
# Arrow Is Positioned Accordingly.
# ---------------------------------------------------------------
# This Is NW Positioning
# This Is SE Positioning
# This Is SW Positioning
# This Is NE Positioning
# ---------------------------------------------------------------
# Class BalloonTip
# ---------------------------------------------------------------
# This Is The Main BalloonTip Implementation
# ---------------------------------------------------------------
# Let's suppose that in your application you have a wx.TextCtrl defined as:
# You can define your BalloonTip as follows:
# Set the BalloonTip target
# Set the BalloonTip background colour
# Set the font for the balloon title
# Set the colour for the balloon title
# Leave the message font as default
# Set the message (tip) foreground colour
# Set the start delay for the BalloonTip
# Set the time after which the BalloonTip is destroyed
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------- #
# BUTTONPANEL Widget wxPython IMPLEMENTATION
#
# Original C++ Code From Eran. You Can Find It At:
#
# http://wxforum.shadonet.com/viewtopic.php?t=6619
#
# License: wxWidgets license
#
#
# Python Code By:
#
# Andrea Gavana, @ 02 Oct 2006
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# This will print the button label
# our normal wxApp-derived class, as usual
# Some constants to tune the BPArt class
# Caption Gradient Type
# Flags for HitTest() method
# Alignment of buttons in the panel
# ButtonPanel styles
# Delay used to cancel the longHelp in the statusbar field
# Check for the new method in 2.7 (not present in 2.6.3.3)
# ----------------------------------------------------------------------------
# ---------------------------------------------------------------------------- #
# Class BPArt
# Handles all the drawings for buttons, separators and text and allows the
# programmer to set colours, sizes and gradient shadings for ButtonPanel
# ---------------------------------------------------------------------------- #
# Draw a button
# [ Padding | Text | .. Buttons .. | Padding ]
# Draw gradient colour in the backgroud of the panel
# Draw a rectangle around the panel
# calculate gradient coefficients
# list of child Pseudo Controls
# Sizer doesn't use the x1,y1,x2,y2 so allow it to
# be called with or without the coordinates
# use sizer coordinates rather than
# what is passed in
# this should be handled by the wx.Sizer based class
# Pseudo BoxSizer
#-------------------------------------------
# sizer overrides (only called from Python)
#-------------------------------------------
# no support for user data if it's a pseudocontrol
# since that is already used
# check to see if it's a pseudo object or sizer
# Control should be what ever class your controls come from
# add a spacer to track this object
# check to see if it's a pseudo object or sizer
# Control should be what ever class your controls come from
# add a spacer to track this object
# check to see if it's a pseudo object or sizer
# Control should be what ever class your controls come from
# add a spacer to track this object
# ---------------------------------------------------------------------------- #
# Class Separator
# This class holds all the information to size and draw a separator inside
# ButtonPanel
# ---------------------------------------------------------------------------- #
# 10 is completely arbitrary, but it works anyhow
# ---------------------------------------------------------------------------- #
# Class ButtonPanelText
# This class is used to hold data about the main caption in ButtonPanel
# ---------------------------------------------------------------------------- #
# -- ButtonInfo class implementation ----------------------------------------
# This class holds information about every button that is added to
# ButtonPanel.  It is an auxiliary class that you should use
# every time you add a button.
# We have text in the button
# -- ButtonPanel class implementation ----------------------------------
# This is the main class.
# First spacer to create some room before the first text/button/control
# Last spacer to create some room before the last text/button/control
# Even if we have no text, we insert it an empty spacer anyway
# it is easier to handle if you have to recreate the sizer after.
# We have text, so insert the text and an expandable spacer
# alongside it. "Standard" ButtonPanel are left or top aligned.
# Detach the text
# Detach the expandable spacer
# Detach the text
# Detach the expandable spacer
# Remove the text in any case
# Remove the first and last spacers
# Recreate the sizer accordingly to the new alignment
# *VERY* WEIRD: the sizer seems not to respond to any layout until I
# change the ButtonPanel size and restore it back
# Create a new sizer depending on the alignment chosen
# First spacer to create some room before the first text/button/control
# Last spacer to create some room before the last text/button/control
# This is needed otherwise SetBarText goes mad
# It is a ButtonInfo, can't be anything else
# This is a spacer, expandable or not
# This is a wxPython control
# Add the space required for the main caption
# Add the button's sizes
# Add the control's sizes
# Add the separator's sizes and the 2 SizerItems at the beginning
# and at the end
# NOTE: It seems like LayoutItems number of calls can be optimized in some way.
# Currently every DoLayout (or every parent Layout()) calls about 3 times
# the LayoutItems method. Any idea on how to improve it?
# Leave out the last spacer, it has to be there always
# Check to see if we are hovering a button
# Update the button status to be hovered
# Fire a button click event
# Reset all buttons statuses
# This will print the button label
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------- #
# CUBECOLOURDIALOG Widget wxPython IMPLEMENTATION
#
# Python Code By:
#
# Andrea Gavana, @ 16 Aug 2007
# Latest Revision: 19 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1. Find A Way To Reduce Flickering On The 2 ColourPanels;
#
# 2. See Why wx.GCDC Doesn't Work As I Thought (!). It Looks Slow As A Turtle,
#    But Probably I Am Doing Something Wrong While Painting The Alpha Textures.
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# Our normal wxApp-derived class, as usual
# If the user selected OK, then the dialog's wx.ColourData will
# contain valid information. Fetch the data ...
# ... then do something with it. The actual colour data will be
# returned as a three-tuple (r, g, b) in this particular case.
# Once the dialog is destroyed, Mr. wx.ColourData is no longer your
# friend. Don't use it again!
#----------------------------------------------------------------------
# Beginning Of CUBECOLOURDIALOG wxPython Code
#----------------------------------------------------------------------
# Define a translation string
# Show the alpha control in the dialog
# Radius of the HSB colour wheel
# Width of the mouse-controlled colour pointer
# Dictionary keys for the RGB colour cube
#B0171F': ['Indian red', '2037680', ''],
#DC143C': ['Crimson', '3937500', '#CC0033'],
#FFB6C1': ['Lightpink', '12695295', '#FFCCCC'],
#FFAEB9': ['Lightpink 1', '12168959', ''],
#EEA2AD': ['Lightpink 2', '11379438', ''],
#CD8C95': ['Lightpink 3', '9800909', ''],
#8B5F65': ['Lightpink 4', '6643595', ''],
#FFC0CB': ['Pink', '13353215', '#FFCCCC'],
#FFB5C5': ['Pink 1', '12957183', ''],
#EEA9B8': ['Pink 2', '12102126', ''],
#CD919E': ['Pink 3', '10392013', ''],
#8B636C': ['Pink 4', '7103371', ''],
#DB7093': ['Palevioletred', '9662683', '#CC6699'],
#FF82AB': ['Palevioletred 1', '11240191', ''],
#EE799F': ['Palevioletred 2', '10451438', ''],
#CD6889': ['Palevioletred 3', '9005261', ''],
#8B475D': ['Palevioletred 4', '6113163', ''],
#FFF0F5': ['Lavenderblush 1 (lavenderblush)', '16118015', '#FFFFFF'],
#EEE0E5': ['Lavenderblush 2', '15065326', ''],
#CDC1C5': ['Lavenderblush 3', '12960205', ''],
#8B8386': ['Lavenderblush 4', '8815499', ''],
#FF3E96': ['Violetred 1', '9846527', ''],
#EE3A8C': ['Violetred 2', '9190126', ''],
#CD3278': ['Violetred 3', '7877325', ''],
#8B2252': ['Violetred 4', '5382795', ''],
#FF69B4': ['Hotpink', '11823615', '#FF66CC'],
#FF6EB4': ['Hotpink 1', '11824895', ''],
#EE6AA7': ['Hotpink 2', '10971886', ''],
#CD6090': ['Hotpink 3', '9461965', ''],
#8B3A62': ['Hotpink 4', '6437515', ''],
#872657': ['Raspberry', '5711495', ''],
#FF1493': ['Deeppink 1 (deeppink)', '9639167', '#FF0099'],
#EE1289': ['Deeppink 2', '8983278', ''],
#CD1076': ['Deeppink 3', '7737549', ''],
#8B0A50': ['Deeppink 4', '5245579', ''],
#FF34B3': ['Maroon 1', '11744511', ''],
#EE30A7': ['Maroon 2', '10957038', ''],
#CD2990': ['Maroon 3', '9447885', ''],
#8B1C62': ['Maroon 4', '6429835', ''],
#C71585': ['Mediumvioletred', '8721863', '#CC0066'],
#D02090': ['Violetred', '9445584', ''],
#DA70D6': ['Orchid', '14053594', '#CC66CC'],
#FF83FA': ['Orchid 1', '16417791', ''],
#EE7AE9': ['Orchid 2', '15301358', ''],
#CD69C9': ['Orchid 3', '13199821', ''],
#8B4789': ['Orchid 4', '8996747', ''],
#D8BFD8': ['Thistle', '14204888', '#CCCCCC'],
#FFE1FF': ['Thistle 1', '16769535', ''],
#EED2EE': ['Thistle 2', '15651566', ''],
#CDB5CD': ['Thistle 3', '13481421', ''],
#8B7B8B': ['Thistle 4', '9141131', ''],
#FFBBFF': ['Plum 1', '16759807', ''],
#EEAEEE': ['Plum 2', '15642350', ''],
#CD96CD': ['Plum 3', '13473485', ''],
#8B668B': ['Plum 4', '9135755', ''],
#DDA0DD': ['Plum', '14524637', '#CC99CC'],
#EE82EE': ['Violet', '15631086', '#FF99FF'],
#FF00FF': ['Magenta (fuchsia)', '16711935', '#FF00FF'],
#EE00EE': ['Magenta 2', '15597806', ''],
#CD00CD': ['Magenta 3', '13435085', ''],
#8B008B': ['Magenta 4 (darkmagenta)', '9109643', '#990099'],
#800080': ['Purple', '8388736', '#990099'],
#BA55D3': ['Mediumorchid', '13850042', '#CC66CC'],
#E066FF': ['Mediumorchid 1', '16738016', ''],
#D15FEE': ['Mediumorchid 2', '15622097', ''],
#B452CD': ['Mediumorchid 3', '13456052', ''],
#7A378B': ['Mediumorchid 4', '9123706', ''],
#9400D3': ['Darkviolet', '13828244', '#9900CC'],
#9932CC': ['Darkorchid', '13382297', '#9933CC'],
#BF3EFF': ['Darkorchid 1', '16727743', ''],
#B23AEE': ['Darkorchid 2', '15612594', ''],
#9A32CD': ['Darkorchid 3', '13447834', ''],
#68228B': ['Darkorchid 4', '9118312', ''],
#4B0082': ['Indigo', '8519755', '#330099'],
#8A2BE2': ['Blueviolet', '14822282', '#9933FF'],
#9B30FF': ['Purple 1', '16724123', ''],
#912CEE': ['Purple 2', '15608977', ''],
#7D26CD': ['Purple 3', '13444733', ''],
#551A8B': ['Purple 4', '9116245', ''],
#9370DB': ['Mediumpurple', '14381203', '#9966CC'],
#AB82FF': ['Mediumpurple 1', '16745131', ''],
#9F79EE': ['Mediumpurple 2', '15628703', ''],
#8968CD': ['Mediumpurple 3', '13461641', ''],
#5D478B': ['Mediumpurple 4', '9127773', ''],
#483D8B': ['Darkslateblue', '9125192', '#333399'],
#8470FF': ['Lightslateblue', '16740484', ''],
#7B68EE': ['Mediumslateblue', '15624315', '#6666FF'],
#6A5ACD': ['Slateblue', '13458026', '#6666CC'],
#836FFF': ['Slateblue 1', '16740227', ''],
#7A67EE': ['Slateblue 2', '15624058', ''],
#6959CD': ['Slateblue 3', '13457769', ''],
#473C8B': ['Slateblue 4', '9124935', ''],
#F8F8FF': ['Ghostwhite', '16775416', '#FFFFFF'],
#E6E6FA': ['Lavender', '16443110', '#FFFFFF'],
#0000FF': ['Blue', '16711680', '#0000FF'],
#0000EE': ['Blue 2', '15597568', ''],
#0000CD': ['Blue 3 (mediumblue)', '13434880', '#0000CC'],
#00008B': ['Blue 4 (darkblue)', '9109504', '#000099'],
#000080': ['Navy', '8388608', '#000099'],
#191970': ['Midnightblue', '7346457', '#000066'],
#3D59AB': ['Cobalt', '11229501', ''],
#4169E1': ['Royalblue', '14772545', '#3366CC'],
#4876FF': ['Royalblue 1', '16741960', ''],
#436EEE': ['Royalblue 2', '15625795', ''],
#3A5FCD': ['Royalblue 3', '13459258', ''],
#27408B': ['Royalblue 4', '9125927', ''],
#6495ED': ['Cornflowerblue', '15570276', '#6699FF'],
#B0C4DE': ['Lightsteelblue', '14599344', '#99CCCC'],
#CAE1FF': ['Lightsteelblue 1', '16769482', ''],
#BCD2EE': ['Lightsteelblue 2', '15651516', ''],
#A2B5CD': ['Lightsteelblue 3', '13481378', ''],
#6E7B8B': ['Lightsteelblue 4', '9141102', ''],
#778899': ['Lightslategray', '10061943', '#669999'],
#708090': ['Slategray', '9470064', '#669999'],
#C6E2FF': ['Slategray 1', '16769734', ''],
#B9D3EE': ['Slategray 2', '15651769', ''],
#9FB6CD': ['Slategray 3', '13481631', ''],
#6C7B8B': ['Slategray 4', '9141100', ''],
#1E90FF': ['Dodgerblue 1 (dodgerblue)', '16748574', '#3399FF'],
#1C86EE': ['Dodgerblue 2', '15631900', ''],
#1874CD': ['Dodgerblue 3', '13464600', ''],
#104E8B': ['Dodgerblue 4', '9129488', ''],
#F0F8FF': ['Aliceblue', '16775408', '#FFFFFF'],
#4682B4': ['Steelblue', '11829830', '#3399CC'],
#63B8FF': ['Steelblue 1', '16758883', ''],
#5CACEE': ['Steelblue 2', '15641692', ''],
#4F94CD': ['Steelblue 3', '13472847', ''],
#36648B': ['Steelblue 4', '9135158', ''],
#87CEFA': ['Lightskyblue', '16436871', '#99CCFF'],
#B0E2FF': ['Lightskyblue 1', '16769712', ''],
#A4D3EE': ['Lightskyblue 2', '15651748', ''],
#8DB6CD': ['Lightskyblue 3', '13481613', ''],
#607B8B': ['Lightskyblue 4', '9141088', ''],
#87CEFF': ['Skyblue 1', '16764551', ''],
#7EC0EE': ['Skyblue 2', '15646846', ''],
#6CA6CD': ['Skyblue 3', '13477484', ''],
#4A708B': ['Skyblue 4', '9138250', ''],
#87CEEB': ['Skyblue', '15453831', '#99CCFF'],
#00BFFF': ['Deepskyblue 1 (deepskyblue)', '16760576', '#00CCFF'],
#00B2EE': ['Deepskyblue 2', '15643136', ''],
#009ACD': ['Deepskyblue 3', '13474304', ''],
#00688B': ['Deepskyblue 4', '9136128', ''],
#33A1C9': ['Peacock', '13214003', ''],
#ADD8E6': ['Lightblue', '15128749', '#99CCFF'],
#BFEFFF': ['Lightblue 1', '16773055', ''],
#B2DFEE': ['Lightblue 2', '15654834', ''],
#9AC0CD': ['Lightblue 3', '13484186', ''],
#68838B': ['Lightblue 4', '9143144', ''],
#B0E0E6': ['Powderblue', '15130800', '#CCCCFF'],
#98F5FF': ['Cadetblue 1', '16774552', ''],
#8EE5EE': ['Cadetblue 2', '15656334', ''],
#7AC5CD': ['Cadetblue 3', '13485434', ''],
#53868B': ['Cadetblue 4', '9143891', ''],
#00F5FF': ['Turquoise 1', '16774400', ''],
#00E5EE': ['Turquoise 2', '15656192', ''],
#00C5CD': ['Turquoise 3', '13485312', ''],
#00868B': ['Turquoise 4', '9143808', ''],
#5F9EA0': ['Cadetblue', '10526303', '#669999'],
#00CED1': ['Darkturquoise', '13749760', '#00CCCC'],
#F0FFFF': ['Azure 1 (azure)', '16777200', '#FFFFFF'],
#E0EEEE': ['Azure 2', '15658720', ''],
#C1CDCD': ['Azure 3', '13487553', ''],
#838B8B': ['Azure 4', '9145219', ''],
#E0FFFF': ['Lightcyan 1 (lightcyan)', '16777184', '#CCFFFF'],
#D1EEEE': ['Lightcyan 2', '15658705', ''],
#B4CDCD': ['Lightcyan 3', '13487540', ''],
#7A8B8B': ['Lightcyan 4', '9145210', ''],
#BBFFFF': ['Paleturquoise 1', '16777147', ''],
#AEEEEE': ['Paleturquoise 2 (paleturquoise)', '15658670', ''],
#96CDCD': ['Paleturquoise 3', '13487510', ''],
#668B8B': ['Paleturquoise 4', '9145190', ''],
#2F4F4F': ['Darkslategray', '5197615', '#336666'],
#97FFFF': ['Darkslategray 1', '16777111', ''],
#8DEEEE': ['Darkslategray 2', '15658637', ''],
#79CDCD': ['Darkslategray 3', '13487481', ''],
#528B8B': ['Darkslategray 4', '9145170', ''],
#00FFFF': ['Cyan / aqua', '16776960', '#00FFFF'],
#00EEEE': ['Cyan 2', '15658496', ''],
#00CDCD': ['Cyan 3', '13487360', ''],
#008B8B': ['Cyan 4 (darkcyan)', '9145088', '#009999'],
#008080': ['Teal', '8421376', '#009999'],
#48D1CC': ['Mediumturquoise', '13422920', '#33CCCC'],
#20B2AA': ['Lightseagreen', '11186720', '#339999'],
#03A89E': ['Manganeseblue', '10397699', ''],
#40E0D0': ['Turquoise', '13688896', '#33CCCC'],
#808A87': ['Coldgrey', '8882816', ''],
#00C78C': ['Turquoiseblue', '9225984', ''],
#7FFFD4': ['Aquamarine 1 (aquamarine)', '13959039', '#66FFCC'],
#76EEC6': ['Aquamarine 2', '13037174', ''],
#66CDAA': ['Aquamarine 3 (mediumaquamarine)', '11193702', '#66CC99'],
#458B74': ['Aquamarine 4', '7637829', ''],
#00FA9A': ['Mediumspringgreen', '10156544', '#00FF99'],
#F5FFFA': ['Mintcream', '16449525', '#FFFFFF'],
#00FF7F': ['Springgreen', '8388352', '#00FF66'],
#00EE76': ['Springgreen 1', '7794176', ''],
#00CD66': ['Springgreen 2', '6737152', ''],
#008B45': ['Springgreen 3', '4557568', ''],
#3CB371': ['Mediumseagreen', '7451452', '#33CC66'],
#54FF9F': ['Seagreen 1', '10485588', ''],
#4EEE94': ['Seagreen 2', '9760334', ''],
#43CD80': ['Seagreen 3', '8441155', ''],
#2E8B57': ['Seagreen 4 (seagreen)', '5737262', '#339966'],
#00C957': ['Emeraldgreen', '5753088', ''],
#BDFCC9': ['Mint', '13237437', ''],
#3D9140': ['Cobaltgreen', '4231485', ''],
#F0FFF0': ['Honeydew 1 (honeydew)', '15794160', '#FFFFFF'],
#E0EEE0': ['Honeydew 2', '14741216', ''],
#C1CDC1': ['Honeydew 3', '12701121', ''],
#838B83': ['Honeydew 4', '8620931', ''],
#8FBC8F': ['Darkseagreen', '9419919', '#99CC99'],
#C1FFC1': ['Darkseagreen 1', '12713921', ''],
#B4EEB4': ['Darkseagreen 2', '11857588', ''],
#9BCD9B': ['Darkseagreen 3', '10210715', ''],
#698B69': ['Darkseagreen 4', '6916969', ''],
#98FB98': ['Palegreen', '10025880', '#99FF99'],
#9AFF9A': ['Palegreen 1', '10157978', ''],
#90EE90': ['Palegreen 2 (lightgreen)', '9498256', '#99FF99'],
#7CCD7C': ['Palegreen 3', '8179068', ''],
#548B54': ['Palegreen 4', '5540692', ''],
#32CD32': ['Limegreen', '3329330', '#33CC33'],
#228B22': ['Forestgreen', '2263842', '#339933'],
#00FF00': ['Green 1 (lime)', '65280', '#00FF00'],
#00EE00': ['Green 2', '60928', ''],
#00CD00': ['Green 3', '52480', ''],
#008B00': ['Green 4', '35584', ''],
#008000': ['Green', '32768', '#009900'],
#006400': ['Darkgreen', '25600', '#006600'],
#308014': ['Sapgreen', '1343536', ''],
#7CFC00': ['Lawngreen', '64636', '#66FF00'],
#7FFF00': ['Chartreuse 1 (chartreuse)', '65407', '#66FF00'],
#76EE00': ['Chartreuse 2', '61046', ''],
#66CD00': ['Chartreuse 3', '52582', ''],
#458B00': ['Chartreuse 4', '35653', ''],
#ADFF2F': ['Greenyellow', '3145645', '#99FF33'],
#CAFF70': ['Darkolivegreen 1', '7405514', ''],
#BCEE68': ['Darkolivegreen 2', '6876860', ''],
#A2CD5A': ['Darkolivegreen 3', '5950882', ''],
#6E8B3D': ['Darkolivegreen 4', '4033390', ''],
#556B2F': ['Darkolivegreen', '3107669', '#666633'],
#6B8E23': ['Olivedrab', '2330219', '#669933'],
#C0FF3E': ['Olivedrab 1', '4128704', ''],
#B3EE3A': ['Olivedrab 2', '3862195', ''],
#9ACD32': ['Olivedrab 3 (yellowgreen)', '3329434', '#99CC33'],
#698B22': ['Olivedrab 4', '2263913', ''],
#FFFFF0': ['Ivory 1 (ivory)', '15794175', '#FFFFFF'],
#EEEEE0': ['Ivory 2', '14741230', ''],
#CDCDC1': ['Ivory 3', '12701133', ''],
#8B8B83': ['Ivory 4', '8620939', ''],
#F5F5DC': ['Beige', '14480885', '#FFFFCC'],
#FFFFE0': ['Lightyellow 1 (lightyellow)', '14745599', '#FFFFFF'],
#EEEED1': ['Lightyellow 2', '13758190', ''],
#CDCDB4': ['Lightyellow 3', '11849165', ''],
#8B8B7A': ['Lightyellow 4', '8031115', ''],
#FAFAD2': ['Lightgoldenrodyellow', '13826810', '#FFFFCC'],
#FFFF00': ['Yellow 1 (yellow)', '65535', '#FFFF00'],
#EEEE00': ['Yellow 2', '61166', ''],
#CDCD00': ['Yellow 3', '52685', ''],
#8B8B00': ['Yellow 4', '35723', ''],
#808069': ['Warmgrey', '6914176', ''],
#808000': ['Olive', '32896', '#999900'],
#BDB76B': ['Darkkhaki', '7059389', '#CCCC66'],
#FFF68F': ['Khaki 1', '9434879', ''],
#EEE685': ['Khaki 2', '8775406', ''],
#CDC673': ['Khaki 3', '7587533', ''],
#8B864E': ['Khaki 4', '5146251', ''],
#F0E68C': ['Khaki', '9234160', ''],
#EEE8AA': ['Palegoldenrod', '11200750', '#FFFF99'],
#FFFACD': ['Lemonchiffon 1 (lemonchiffon)', '13499135', '#FFFFCC'],
#EEE9BF': ['Lemonchiffon 2', '12577262', ''],
#CDC9A5': ['Lemonchiffon 3', '10865101', ''],
#8B8970': ['Lemonchiffon 4', '7375243', ''],
#FFEC8B': ['Lightgoldenrod 1', '9170175', ''],
#EEDC82': ['Lightgoldenrod 2', '8576238', ''],
#CDBE70': ['Lightgoldenrod 3', '7388877', ''],
#8B814C': ['Lightgoldenrod 4', '5013899', ''],
#E3CF57': ['Banana', '5754851', ''],
#FFD700': ['Gold 1 (gold)', '55295', '#FFCC00'],
#EEC900': ['Gold 2', '51694', ''],
#CDAD00': ['Gold 3', '44493', ''],
#8B7500': ['Gold 4', '30091', ''],
#FFF8DC': ['Cornsilk 1 (cornsilk)', '14481663', '#FFFFCC'],
#EEE8CD': ['Cornsilk 2', '13494510', ''],
#CDC8B1': ['Cornsilk 3', '11651277', ''],
#8B8878': ['Cornsilk 4', '7899275', ''],
#DAA520': ['Goldenrod', '2139610', '#CC9933'],
#FFC125': ['Goldenrod 1', '2474495', ''],
#EEB422': ['Goldenrod 2', '2274542', ''],
#CD9B1D': ['Goldenrod 3', '1940429', ''],
#8B6914': ['Goldenrod 4', '1337739', ''],
#B8860B': ['Darkgoldenrod', '755384', '#CC9900'],
#FFB90F': ['Darkgoldenrod 1', '1030655', ''],
#EEAD0E': ['Darkgoldenrod 2', '962030', ''],
#CD950C': ['Darkgoldenrod 3', '824781', ''],
#8B6508': ['Darkgoldenrod 4', '550283', ''],
#FFA500': ['Orange 1 (orange)', '42495', '#FF9900'],
#EE9A00': ['Orange 2', '39662', ''],
#CD8500': ['Orange 3', '34253', ''],
#8B5A00': ['Orange 4', '23179', ''],
#FFFAF0': ['Floralwhite', '15792895', '#FFFFFF'],
#FDF5E6': ['Oldlace', '15136253', '#FFFFFF'],
#F5DEB3': ['Wheat', '11788021', '#FFCCCC'],
#FFE7BA': ['Wheat 1', '12249087', ''],
#EED8AE': ['Wheat 2', '11458798', ''],
#CDBA96': ['Wheat 3', '9878221', ''],
#8B7E66': ['Wheat 4', '6717067', ''],
#FFE4B5': ['Moccasin', '11920639', '#FFCCCC'],
#FFEFD5': ['Papayawhip', '14020607', '#FFFFCC'],
#FFEBCD': ['Blanchedalmond', '13495295', '#FFFFCC'],
#FFDEAD': ['Navajowhite 1 (navajowhite)', '11394815', '#FFCC99'],
#EECFA1': ['Navajowhite 2', '10604526', ''],
#CDB38B': ['Navajowhite 3', '9155533', ''],
#8B795E': ['Navajowhite 4', '6191499', ''],
#FCE6C9': ['Eggshell', '13231868', ''],
#D2B48C': ['Tan', '9221330', '#CCCC99'],
#9C661F': ['Brick', '2057884', ''],
#FF9912': ['Cadmiumyellow', '1219071', ''],
#FAEBD7': ['Antiquewhite', '14150650', '#FFFFCC'],
#FFEFDB': ['Antiquewhite 1', '14413823', ''],
#EEDFCC': ['Antiquewhite 2', '13426670', ''],
#CDC0B0': ['Antiquewhite 3', '11583693', ''],
#8B8378': ['Antiquewhite 4', '7897995', ''],
#DEB887': ['Burlywood', '8894686', '#CCCC99'],
#FFD39B': ['Burlywood 1', '10212351', ''],
#EEC591': ['Burlywood 2', '9553390', ''],
#CDAA7D': ['Burlywood 3', '8235725', ''],
#8B7355': ['Burlywood 4', '5600139', ''],
#FFE4C4': ['Bisque 1 (bisque)', '12903679', '#FFFFCC'],
#EED5B7': ['Bisque 2', '12047854', ''],
#CDB79E': ['Bisque 3', '10401741', ''],
#8B7D6B': ['Bisque 4', '7044491', ''],
#E3A869': ['Melon', '6924515', ''],
#ED9121': ['Carrot', '2200045', ''],
#FF8C00': ['Darkorange', '36095', '#FF9900'],
#FF7F00': ['Darkorange 1', '32767', ''],
#EE7600': ['Darkorange 2', '30446', ''],
#CD6600': ['Darkorange 3', '26317', ''],
#8B4500': ['Darkorange 4', '17803', ''],
#FF8000': ['Orange', '33023', ''],
#FFA54F': ['Tan 1', '5219839', ''],
#EE9A49': ['Tan 2', '4823790', ''],
#CD853F': ['Tan 3 (peru)', '4163021', '#CC9933'],
#8B5A2B': ['Tan 4', '2841227', ''],
#FAF0E6': ['Linen', '15134970', '#FFFFFF'],
#FFDAB9': ['Peachpuff 1 (peachpuff)', '12180223', '#FFCCCC'],
#EECBAD': ['Peachpuff 2', '11389934', ''],
#CDAF95': ['Peachpuff 3', '9809869', ''],
#8B7765': ['Peachpuff 4', '6649739', ''],
#FFF5EE': ['Seashell 1 (seashell)', '15660543', '#FFFFFF'],
#EEE5DE': ['Seashell 2', '14607854', ''],
#CDC5BF': ['Seashell 3', '12568013', ''],
#8B8682': ['Seashell 4', '8554123', ''],
#F4A460': ['Sandybrown', '6333684', '#FF9966'],
#C76114': ['Rawsienna', '1335751', ''],
#D2691E': ['Chocolate', '1993170', '#CC6633'],
#FF7F24': ['Chocolate 1', '2392063', ''],
#EE7621': ['Chocolate 2', '2193134', ''],
#CD661D': ['Chocolate 3', '1926861', ''],
#8B4513': ['Chocolate 4 (saddlebrown)', '1262987', '#993300'],
#292421': ['Ivoryblack', '2171945', ''],
#FF7D40': ['Flesh', '4226559', ''],
#FF6103': ['Cadmiumorange', '221695', ''],
#8A360F': ['Burntsienna', '997002', ''],
#A0522D': ['Sienna', '2970272', '#996633'],
#FF8247': ['Sienna 1', '4686591', ''],
#EE7942': ['Sienna 2', '4356590', ''],
#CD6839': ['Sienna 3', '3762381', ''],
#8B4726': ['Sienna 4', '2508683', ''],
#FFA07A': ['Lightsalmon 1 (lightsalmon)', '8036607', '#FF9966'],
#EE9572': ['Lightsalmon 2', '7509486', ''],
#CD8162': ['Lightsalmon 3', '6455757', ''],
#8B5742': ['Lightsalmon 4', '4347787', ''],
#FF7F50': ['Coral', '5275647', '#FF6666'],
#FF4500': ['Orangered 1 (orangered)', '17919', '#FF3300'],
#EE4000': ['Orangered 2', '16622', ''],
#CD3700': ['Orangered 3', '14285', ''],
#8B2500': ['Orangered 4', '9611', ''],
#5E2612': ['Sepia', '1189470', ''],
#E9967A': ['Darksalmon', '8034025', '#FF9966'],
#FF8C69': ['Salmon 1', '6917375', ''],
#EE8262': ['Salmon 2', '6456046', ''],
#CD7054': ['Salmon 3', '5533901', ''],
#8B4C39': ['Salmon 4', '3755147', ''],
#FF7256': ['Coral 1', '5665535', ''],
#EE6A50': ['Coral 2', '5270254', ''],
#CD5B45': ['Coral 3', '4545485', ''],
#8B3E2F': ['Coral 4', '3096203', ''],
#8A3324': ['Burntumber', '2372490', ''],
#FF6347': ['Tomato 1 (tomato)', '4678655', '#FF6633'],
#EE5C42': ['Tomato 2', '4349166', ''],
#CD4F39': ['Tomato 3', '3755981', ''],
#8B3626': ['Tomato 4', '2504331', ''],
#FA8072': ['Salmon', '7504122', '#FF9966'],
#FFE4E1': ['Mistyrose 1 (mistyrose)', '14804223', '#FFCCFF'],
#EED5D2': ['Mistyrose 2', '13817326', ''],
#CDB7B5': ['Mistyrose 3', '11909069', ''],
#8B7D7B': ['Mistyrose 4', '8093067', ''],
#FFFAFA': ['Snow 1 (snow)', '16448255', '#FFFFFF'],
#EEE9E9': ['Snow 2', '15329774', ''],
#CDC9C9': ['Snow 3', '13224397', ''],
#8B8989': ['Snow 4', '9013643', ''],
#BC8F8F': ['Rosybrown', '9408444', '#CC9999'],
#FFC1C1': ['Rosybrown 1', '12698111', ''],
#EEB4B4': ['Rosybrown 2', '11842798', ''],
#CD9B9B': ['Rosybrown 3', '10197965', ''],
#8B6969': ['Rosybrown 4', '6908299', ''],
#F08080': ['Lightcoral', '8421616', '#FF9999'],
#CD5C5C': ['Indianred', '6053069', '#CC6666'],
#FF6A6A': ['Indianred 1', '6974207', ''],
#EE6363': ['Indianred 2', '6513646', ''],
#8B3A3A': ['Indianred 4', '3816075', ''],
#CD5555': ['Indianred 3', '5592525', ''],
#A52A2A': ['Brown', '2763429', '#993333'],
#FF4040': ['Brown 1', '4210943', ''],
#EE3B3B': ['Brown 2', '3881966', ''],
#CD3333': ['Brown 3', '3355597', ''],
#8B2323': ['Brown 4', '2302859', ''],
#B22222': ['Firebrick', '2237106', '#993333'],
#FF3030': ['Firebrick 1', '3158271', ''],
#EE2C2C': ['Firebrick 2', '2895086', ''],
#CD2626': ['Firebrick 3', '2500301', ''],
#8B1A1A': ['Firebrick 4', '1710731', ''],
#FF0000': ['Red 1 (red)', '255', '#FF0000'],
#EE0000': ['Red 2', '238', ''],
#CD0000': ['Red 3', '205', ''],
#8B0000': ['Red 4 (darkred)', '139', '#990000'],
#800000': ['Maroon', '128', '#990000'],
#8E388E': ['Sgi beet', '9320590', ''],
#7171C6': ['Sgi slateblue', '13005169', ''],
#7D9EC0': ['Sgi lightblue', '12623485', ''],
#388E8E': ['Sgi teal', '9342520', ''],
#71C671': ['Sgi chartreuse', '7456369', ''],
#8E8E38': ['Sgi olivedrab', '3706510', ''],
#C5C1AA': ['Sgi brightgray', '11190725', ''],
#C67171': ['Sgi salmon', '7434694', ''],
#555555': ['Sgi darkgray', '5592405', ''],
#1E1E1E': ['Sgi gray 12', '1973790', ''],
#282828': ['Sgi gray 16', '2631720', ''],
#515151': ['Sgi gray 32', '5329233', ''],
#5B5B5B': ['Sgi gray 36', '5987163', ''],
#848484': ['Sgi gray 52', '8684676', ''],
#8E8E8E': ['Sgi gray 56', '9342606', ''],
#AAAAAA': ['Sgi lightgray', '11184810', ''],
#B7B7B7': ['Sgi gray 72', '12040119', ''],
#C1C1C1': ['Sgi gray 76', '12698049', ''],
#EAEAEA': ['Sgi gray 92', '15395562', ''],
#F4F4F4': ['Sgi gray 96', '16053492', ''],
#FFFFFF': ['White', '16777215', '#FFFFFF'],
#F5F5F5': ['White smoke (gray)', '16119285', '#FFFFFF'],
#DCDCDC': ['Gainsboro', '14474460', '#CCCCCC'],
#D3D3D3': ['Lightgrey', '13882323', '#CCCCCC'],
#C0C0C0': ['Silver', '12632256', '#CCCCCC'],
#A9A9A9': ['Darkgray', '11119017', '#999999'],
#808080': ['Gray', '8421504', ''],
#696969': ['Dimgray (gray 42)', '6908265', '#666666'],
#000000': ['Black', '0', '#000000'],
#FCFCFC': ['Gray 99', '16579836', ''],
#FAFAFA': ['Gray 98', '16448250', ''],
#F7F7F7': ['Gray 97', '16250871', ''],
#F2F2F2': ['Gray 95', '15921906', ''],
#F0F0F0': ['Gray 94', '15790320', ''],
#EDEDED': ['Gray 93', '15592941', ''],
#EBEBEB': ['Gray 92', '15461355', ''],
#E8E8E8': ['Gray 91', '15263976', ''],
#E5E5E5': ['Gray 90', '15066597', ''],
#E3E3E3': ['Gray 89', '14935011', ''],
#E0E0E0': ['Gray 88', '14737632', ''],
#DEDEDE': ['Gray 87', '14606046', ''],
#DBDBDB': ['Gray 86', '14408667', ''],
#D9D9D9': ['Gray 85', '14277081', ''],
#D6D6D6': ['Gray 84', '14079702', ''],
#D4D4D4': ['Gray 83', '13948116', ''],
#D1D1D1': ['Gray 82', '13750737', ''],
#CFCFCF': ['Gray 81', '13619151', ''],
#CCCCCC': ['Gray 80', '13421772', ''],
#C9C9C9': ['Gray 79', '13224393', ''],
#C7C7C7': ['Gray 78', '13092807', ''],
#C4C4C4': ['Gray 77', '12895428', ''],
#C2C2C2': ['Gray 76', '12763842', ''],
#BFBFBF': ['Gray 75', '12566463', ''],
#BDBDBD': ['Gray 74', '12434877', ''],
#BABABA': ['Gray 73', '12237498', ''],
#B8B8B8': ['Gray 72', '12105912', ''],
#B5B5B5': ['Gray 71', '11908533', ''],
#B3B3B3': ['Gray 70', '11776947', ''],
#B0B0B0': ['Gray 69', '11579568', ''],
#ADADAD': ['Gray 68', '11382189', ''],
#ABABAB': ['Gray 67', '11250603', ''],
#A8A8A8': ['Gray 66', '11053224', ''],
#A6A6A6': ['Gray 65', '10921638', ''],
#A3A3A3': ['Gray 64', '10724259', ''],
#A1A1A1': ['Gray 63', '10592673', ''],
#9E9E9E': ['Gray 62', '10395294', ''],
#9C9C9C': ['Gray 61', '10263708', ''],
#999999': ['Gray 60', '10066329', ''],
#969696': ['Gray 59', '9868950', ''],
#949494': ['Gray 58', '9737364', ''],
#919191': ['Gray 57', '9539985', ''],
#8F8F8F': ['Gray 56', '9408399', ''],
#8C8C8C': ['Gray 55', '9211020', ''],
#8A8A8A': ['Gray 54', '9079434', ''],
#878787': ['Gray 53', '8882055', ''],
#858585': ['Gray 52', '8750469', ''],
#828282': ['Gray 51', '8553090', ''],
#7F7F7F': ['Gray 50', '8355711', ''],
#7D7D7D': ['Gray 49', '8224125', ''],
#7A7A7A': ['Gray 48', '8026746', ''],
#787878': ['Gray 47', '7895160', ''],
#757575': ['Gray 46', '7697781', ''],
#737373': ['Gray 45', '7566195', ''],
#707070': ['Gray 44', '7368816', ''],
#6E6E6E': ['Gray 43', '7237230', ''],
#6B6B6B': ['Gray 42', '7039851', ''],
#696969': ['Dimgray (gray 42)', '6908265', '#666666'],
#666666': ['Gray 40', '6710886', ''],
#636363': ['Gray 39', '6513507', ''],
#616161': ['Gray 38', '6381921', ''],
#5E5E5E': ['Gray 37', '6184542', ''],
#5C5C5C': ['Gray 36', '6052956', ''],
#595959': ['Gray 35', '5855577', ''],
#575757': ['Gray 34', '5723991', ''],
#545454': ['Gray 33', '5526612', ''],
#525252': ['Gray 32', '5395026', ''],
#4F4F4F': ['Gray 31', '5197647', ''],
#4D4D4D': ['Gray 30', '5066061', ''],
#4A4A4A': ['Gray 29', '4868682', ''],
#474747': ['Gray 28', '4671303', ''],
#454545': ['Gray 27', '4539717', ''],
#424242': ['Gray 26', '4342338', ''],
#404040': ['Gray 25', '4210752', ''],
#3D3D3D': ['Gray 24', '4013373', ''],
#3B3B3B': ['Gray 23', '3881787', ''],
#383838': ['Gray 22', '3684408', ''],
#363636': ['Gray 21', '3552822', ''],
#333333': ['Gray 20', '3355443', ''],
#303030': ['Gray 19', '3158064', ''],
#2E2E2E': ['Gray 18', '3026478', ''],
#2B2B2B': ['Gray 17', '2829099', ''],
#292929': ['Gray 16', '2697513', ''],
#262626': ['Gray 15', '2500134', ''],
#242424': ['Gray 14', '2368548', ''],
#212121': ['Gray 13', '2171169', ''],
#1F1F1F': ['Gray 12', '2039583', ''],
#1C1C1C': ['Gray 11', '1842204', ''],
#1A1A1A': ['Gray 10', '1710618', ''],
#171717': ['Gray 9', '1513239', ''],
#141414': ['Gray 8', '1315860', ''],
#121212': ['Gray 7', '1184274', ''],
#0F0F0F': ['Gray 6', '986895', ''],
#0D0D0D': ['Gray 5', '855309', ''],
#0A0A0A': ['Gray 4', '657930', ''],
#080808': ['Gray 3', '526344', ''],
#050505': ['Gray 2', '328965', ''],
#030303': ['Gray 1', '197379', ''],
#----------------------------------------------------------------------
#%02x%02x%02x"%(colour.r, colour.g, colour.b)
# Parallel lines, no intersection
# First Line is vertical, eqn is x=0
# Put x = 0 in second line eqn to get y
# second line is vertical Equation of line is x=0
# Put x = 0 in first line eqn to get y
# Number of pixels bigger than the standard rectangle size
# for drawing a highlight
# User-defined colours
# Our normal wxApp-derived class, as usual
# If the user selected OK, then the dialog's wx.ColourData will
# contain valid information. Fetch the data ...
# ... then do something with it. The actual colour data will be
# returned as a three-tuple (r, g, b) in this particular case.
# Once the dialog is destroyed, Mr. wx.ColourData is no longer your
# friend. Don't use it again!
# --------------------------------------------------------------------------------- #
# CUSTOMTREECTRL wxPython IMPLEMENTATION
# Inspired By And Heavily Based On wxGenericTreeCtrl.
#
# Andrea Gavana, @ 17 May 2006
# Latest Revision: 02 Jul 2018, 00.10 GMT
# Modified by Helio Guilherme, @ 26 Apr 2018
#
# TODO List
#
# Almost All The Features Of wx.TreeCtrl Are Available, And There Is Practically
# No Limit In What Could Be Added To This Class. The First Things That Comes
# To My Mind Are:
#
# 1. Try To Implement A More Flicker-Free Background Image In Cases Like
#    Centered Or Stretched Image (Now CustomTreeCtrl Supports Only Tiled
#    Background Images).
#
# 2. Try To Mimic Windows wx.TreeCtrl Expanding/Collapsing behaviour: CustomTreeCtrl
#    Suddenly Expands/Collapses The Nodes On Mouse Click While The Native Control
#    Has Some Kind Of "Smooth" Expanding/Collapsing, Like A Wave. I Don't Even
#    Know Where To Start To Do That.
#
# 3. Speed Up General OnPaint Things? I Have No Idea, Here CustomTreeCtrl Is Quite
#    Fast, But We Should See On Slower Machines.
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Create a CustomTreeCtrl instance
# Add a root node to it
# Create an image list to add icons next to an item
# our normal wxApp-derived class, as usual
# Version Info
# Python 2/3 compatibility helper
# ----------------------------------------------------------------------------
# Constants
# ----------------------------------------------------------------------------
# Start editing the current item after half a second (if the mouse hasn't
# been clicked/moved)
# wxPython version string
# ----------------------------------------------------------------------------
# Constants
# ----------------------------------------------------------------------------
# Enum for different images associated with a treectrl item
# not selected, not expanded
#     selected, not expanded
# not selected,     expanded
#     selected,     expanded
# check button,     checked
# check button, not checked
# check button, undetermined
# radio button,     selected
# radio button, not selected
# ----------------------------------------------------------------------------
# CustomTreeCtrl flags
# ----------------------------------------------------------------------------
# for convenience
# draw collapsed/expanded btns
# don't draw lines at all
# connect top-level nodes
# still used by wxTreeListCtrl
# for convenience
# can select multiple items
# TODO: allow extended selection
# what it says
# can edit item labels
# put border around items
# don't display root node
# highlight full horz space
# only meaningful for checkboxes
# only meaningful for checkboxes
# only meaningful for checkboxes
# to align windows horizontally for items at the same level
# to align windows to the rightmost edge of CustomTreeCtrl
# to ellipsize long items when horizontal space is low
# to display tooltips on long items when horizontal space is low
# default style for the tree control
# Values for the `flags` parameter of CustomTreeCtrl.HitTest() which determine
# where exactly the specified point is situated:
# Background Image Style
# Windows Vista Colours
# Flags for wx.RendererNative
# ----------------------------------------------------------------------------
# CustomTreeCtrl events and binding for handling them
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# white background
# black lines
# half of the length of the horz lines in "-" and "+"
# turn "-" into "+"
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# first check if the text fits with no problems
#---------------------------------------------------------------------------
# DragImage Implementation
# This Class Handles The Creation Of A Custom Image In Case Of Item Drag
# And Drop.
#---------------------------------------------------------------------------
# at least 2 pixels
# otherwise 10% extra spacing
# Gtk and Windows unfortunatly don't do so well with transparent
# drawing so this hack corrects the image to have a transparent
# background.
# ----------------------------------------------------------------------------
# TreeItemAttr: a structure containing the visual attributes of an item
# ----------------------------------------------------------------------------
# setters
# accessors
# getters
# ----------------------------------------------------------------------------
# CommandTreeEvent Is A Special Subclassing Of wx.CommandEvent
#
# NB: Note That Not All The Accessors Make Sense For All The Events, See The
# Event Description Below.
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# TreeEvent is a special class for all events associated with tree controls
#
# NB: note that not all accessors make sense for all events, see the event
#     descriptions below
# ----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Auxiliary Classes: TreeEditTimer
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Auxiliary Classes: TreeTextCtrl
# This Is The Temporary ExpandoTextCtrl Created When You Edit The Text Of An Item
# -----------------------------------------------------------------------------
# FIXME: what are all these hardcoded 4, 8 and 11s really?
# nothing changed, always accept
# when an item remains unchanged, the owner
# needs to be notified that the user decided
# not to change the tree item label, and that
# the edit has been cancelled
# vetoed by the user
# accepted, do rename the item
# Notify the owner about the changes
# Even if vetoed, close the control (consistent with MSW)
# auto-grow the textctrl:
# We must finish regardless of success, otherwise we'll get
# focus problems:
# We must let the native text control handle focus, too, otherwise
# it could have problems with the cursor (e.g., in wxGTK).
# -----------------------------------------------------------------------------
# Auxiliary Classes: TreeFindTimer
# Timer Used To Clear CustomTreeCtrl._findPrefix If No Key Was Pressed For A
# Sufficiently Long Time.
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# GenericTreeItem Implementation.
# This Class Holds All The Information And Methods For Every Single Item In
# CustomTreeCtrl.
# -----------------------------------------------------------------------------
# since there can be very many of these, we save size by chosing
# the smallest representation for the elements and by ordering
# the members to avoid padding.
# label to be rendered for item
# user-provided data
# list of children
# parent of this item
# attributes???
# tree ctrl images for the normal, selected, expanded and
# expanded+selected states
# (virtual) offset from top
# (virtual) offset from left
# width of this item
# height of this item
# same as focused
# used for item which doesn't have
# children but has a [+] button
# render the label in bold font
# render the label in italic font
# delete attribute when done
# item type: 0=normal, 1=check, 2=radio
# true for 3-state checkbox items
# only meaningful for check and radio items
# flag to enable/disable an item
# indicates if the item is hypertext
# visited state for an hypertext item
# do not construct the array for normal items
# if the node parent is a radio not enabled, we are disabled
# are we holding a window?
# on the right, or left?
# the window is a complex one hold by a sizer
# simple window, without sizers
# We have to bind the wx.EVT_SET_FOCUS for the associated window
# No other solution to handle the focus changing from an item in
# CustomTreeCtrl and the window associated to an item
# Do better strategies exist?
# We also have to bind the wx.EVT_TREE_ITEM_COLLAPSING for the
# associated window, for example when it is an agw.animate.AnimationCtrl,
# otherwise it would stay visible. See the demo for an example.
## Hide the window since the position isn't correct yet. It will
## be shown and positioned when the item is painted.
# The window is enabled only if the item is enabled
# If the window is associated to an item that currently is selected
# (has focus) we don't kill the focus. Otherwise we do it.
# Helio: This is not OK?
#        Should it be more "internal" code?
#        It is working on the user application.
# Hides the attached window if added
# Hides the attached window if added
#if self._wnd:
#    self._wnd.Hide()
# We have to destroy the associated window
# for a hidden root node, don't evaluate it, but do evaluate children
# evaluate the item
# according to the drawing code the triangels are drawn
# at -4 , -4  from the position up to +10/+10 max
# 5 is the size of the plus sign
# assuming every image (normal and selected) has the same size!
# if children are expanded, fall through to evaluate them
# evaluate children
# we usually fall back to the normal item, but try just the
# expanded one (and not selected) first in this case
# not expanded
# maybe it doesn't have the specific image we want,
# try the default one instead
# Checkbox
# Radiobutton
# Checkbox
# Radiobutton
# -----------------------------------------------------------------------------
# CustomTreeCtrl Main Implementation.
# This Is The Main Class.
# -----------------------------------------------------------------------------
# Default line height: it will soon be changed
# Item indent wrt parent
# item horizontal spacing between the start and the text
# Brushes for focused/unfocused items (also gradient type)
# image list for icons
# Drag and drop initial settings
# EditCtrl initial settings for editable items
# This one allows us to handle Freeze() and Thaw() calls
# Default normal and bold fonts for an item
# Hyperlinks things
# Default CustomTreeCtrl background colour.
# Background image settings
# Disabled items colour
# Gradient selection colours
# Horizontal Gradient
# Vista Selection Styles
# To speed up ExpandAll and SelectAll
# Connection lines style
# Pen Used To Draw The Border Around Selected Items
# For Appended Windows
# A constant to use my translation of RendererNative.DrawTreeItemButton
# if the wxPython version is less than 2.6.2.1.
# Set the separator pen default colour
# Create our container... at last!
# Create the default check image list
# If the tree display has no buttons, but does have
# connecting lines, we can use a narrower layout.
# It may not be a good idea to force this...
# Bind the events
# Sets the focus to ourselves: this is useful if you have items
# with associated widgets.
# overridden base class method, allows this ctrl to
# participate in the tab-order, etc.  It's overridable because
# of deriving this class from wx.ScrolledWindow...
# Here there may be something I miss... do I have to destroy
# something else?
# the tree is empty
# take the root itself into account
# We hit a radiobutton item not checked, we don't want to
# enable the children
# Recurse on tree
# Handles the eventual window associated to the item
# We have to refresh the item line
# Should we raise an error here?!?
# it's a radio button
# Try To Unckeck?
# Radiobuttons are done, let's handle checkbuttons...
# Blocked by user
# Recurse on tree
# Do not try to expand the root node if it hasn't been created yet
# if we will hide the root, make sure children are visible
# right now, just sets the styles.  Eventually, we may
# want to update the inherited styles, but right now
# none of the parents has updatable styles
# -----------------------------------------------------------------------------
# functions to work with tree items
# -----------------------------------------------------------------------------
# avoid redrawing the tree if no real change
# No colour given, generate a slightly darker from the
# CustomTreeCtrl background colour
# 0 = Horizontal, 1 = Vertical
# -----------------------------------------------------------------------------
# item status inquiries
# -----------------------------------------------------------------------------
# An item is only visible if it's not a descendant of a collapsed item
# consider that the item does have children if it has the "+" button: it
# might not have them (if it had never been expanded yet) but then it
# could have them as well and it's better to err on this side rather than
# disabling some operations which are restricted to the items with
# children for an item which does have them
# -----------------------------------------------------------------------------
# navigation
# -----------------------------------------------------------------------------
# it's ok to cast cookie to size_t, we never have indices big enough to
# overflow "void *"
# there are no more of them
# root item doesn't have any siblings
# Item is unlinked from tree
# root item doesn't have any siblings
# Item is unlinked from tree
# First see if there are any children.
# Try a sibling of this or ancestor instead
# Look for a previous sibling of this item
# return it's last child or itself if has not got any children
# item has not got a previous sibling, return it's parent
# find a previous sibling or parent which is visible
# test if found item has visible children, if so and if the found item is not the
# parent of the current item traverse the found item to the last visible child
# match is case insensitive as this is more convenient to the user: having
# to press Shift-letter to go to the item starting with a capital letter
# would be too bothersome
# determine the starting point: we shouldn't take the current item (this
# allows to switch between two items starting with the same letter just by
# pressing it) but we shouldn't jump to the next one if the user is
# continuing to type as otherwise he might easily skip the item he wanted
# look for the item starting with the given prefix after it
# if we haven't found anything...
# ... wrap to the beginning
# can't select virtual root
# no tree item selected and idParent is not reachable
# and try all the items (stop when we get to the one we started from)
# -----------------------------------------------------------------------------
# operations
# -----------------------------------------------------------------------------
# should we give a warning here?
# do this first so stuff below doesn't cause flicker
# do this first so stuff below doesn't cause flicker
# if root is hidden, make sure we can navigate
# into children
# should we give a warning here?
# should we give a warning here?
# should we give a warning here?
# item is a descendant of parent
# Don't leave edit or selection on a child which is about to disappear
# do this first so stuff below doesn't cause flicker
# do this first so stuff below doesn't cause flicker
# can't delete the item being edited, cancel editing it first
# don't keep stale pointers around!
# Don't silently change the selection:
# do it properly in idle time, so event
# handlers get called.
# self._key_current = parent
# self._select_me records whether we need to select
# a different item, in idle time.
# Don't silently change the selection:
# do it properly in idle time, so event
# handlers get called.
# self._current = parent
# remove the item from the tree
# remove by value
# deleting the root
# nothing will be left in the tree
# and delete all of its children and the item itself now
# Remove the item with window
# cancelled by program
# We are in ExpandAll/ExpandAllChildren
# We hide the associated window here, we may show it after
# cancelled by program
# the tree might not have the root item at all
# the tree might not have the root item at all
# Recursive function !
# To stop we must have crt_item<last_item
# Algorithm :
# Tag all next children, when no more children,
# Move to parent (not to tag)
# Keep going... if we found last_item, we stop.
# This is root item
# item2 is not necessary after item1
# choice first' and 'last' between item1 and item2
# to keep going anyhow !!!
# Handles hypertext items
# nothing else to do
# selection change if there is more than one item currently selected
# Handles hypertext items
# TODO : Here we don't send any selection mode yet !
# ctrl press
# to speed up thing
# shift press
# don't change the mark (self._current)
# the default
# Check if we need to toggle hilight (ctrl mode)
# This can cause idle processing to select the root
# if no item is selected, so it must be after the
# selection is set
# Handles hypertext items
# deselect
#else: the tree is empty, so no selections
# first expand all parent branches
# We have to call this here because the label in
# question might just have been added and no screen
# update taken place.
# now scroll to the item
# Calculate size of entire tree (not necessary anymore?)
# one more scrollbar unit + 2 pixels
# one more scrollbar unit + 2 pixels
## Note: The Scroll() method updates all child window positions
##       while the SetScrollBars() does not (on most platforms).
# going down, item should appear at top
#self.SetScrollbars(_PIXELS_PER_UNIT, _PIXELS_PER_UNIT, x//_PIXELS_PER_UNIT, y//_PIXELS_PER_UNIT, x_pos, item_y//_PIXELS_PER_UNIT)
# going up, item should appear at bottom
#self.SetScrollbars(_PIXELS_PER_UNIT, _PIXELS_PER_UNIT, x//_PIXELS_PER_UNIT, y//_PIXELS_PER_UNIT, x_pos, (item_y+self.GetLineHeight(item)-client_h)//_PIXELS_PER_UNIT )
# equivalent to old cmp function
# Calculate a self._lineHeight value from the normal Image sizes.
# May be toggle off. Then CustomTreeCtrl will spread when
# necessary (which might look ugly).
# Calculate a self._lineHeight value from the Button image sizes.
# May be toggle off. Then CustomTreeCtrl will spread when
# necessary (which might look ugly).
# Calculate a self._lineHeight value from the check/radio image sizes.
# May be toggle off. Then CustomTreeCtrl will spread when
# necessary (which might look ugly).
# Calculate a self._lineHeight value from the leftmost image sizes.
# May be toggle off. Then CustomTreeCtrl will spread when
# necessary (which might look ugly).
# at least 2 pixels
# otherwise 10% extra spacing
# Don't do any drawing if we're setting the list to NULL,
# since we may be in the process of deleting the tree control.
# We gray out the image list to use the grayed icons with disabled items
# Don't do any drawing if we're setting the list to NULL,
# since we may be in the process of deleting the tree control.
# We gray out the image list to use the grayed icons with disabled items
# Image list to hold disabled versions of each control
# Get the Checkboxes
# Get the Radio Buttons
# -----------------------------------------------------------------------------
# helpers
# -----------------------------------------------------------------------------
# one more scrollbar unit + 2 pixels
# one more scrollbar unit + 2 pixels
# calculate gradient coefficients
# calculate gradient coefficients
# under mac selections are only a rectangle in case they don't have the focus
# Horizontal
# Vertical
# If it's selected, and there's an image, then we should
# take care to leave the area under the image painted in the
# background colour.
# Horizontal
# Vertical
# On GTK+ 2, drawing a 'normal' background is wrong for themes that
# don't allow backgrounds to be customized. Not drawing the background,
# except for custom item backgrounds, works for both kinds of theme.
# Horizontal
# Vertical
# Helio: Should I make a getter?
# Helio: Original behaviour
# Horizontal alignment of windows
# Rightmost alignment of windows
# Force window visible after any position changes were made.
# restore normal font
# Now y stands for the top of the item, whereas it used to stand for middle !
# always expand hidden root
# draw line down to last child
# 10000 = very much
# don't draw rect outline if we already have the
# background colour under Mac
# prepare to draw
# draw
# if the background colour is white, choose a
# contrasting colour for the lines
# restore DC objects
# draw the horizontal line here
# should the item show a button?
# draw the image button here
# no custom buttons
# We draw something like the Mac twist buttons
# These are the standard wx.TreeCtrl buttons as wx.RendererNative knows
# draw line down to last child
# Only draw the portion of the line that is visible, in case it is huge
# Move end points to the begining/end of the view?
# after the adjustments if y_mid is larger than oldY then the line
# isn't visible at all so don't draw anything
# -----------------------------------------------------------------------------
# wxWidgets callbacks
# -----------------------------------------------------------------------------
# Can we actually do something here (or in OnPaint()) To Handle
# background images that are stretchable or always centered?
# I tried but I get enormous flickering...
# intercepted by the user code
# how should the selection work for this event?
# + : Expand
# - : Collaspe
# * : Expand all/Collapse all
# ' ' | return : activate
# up    : go up (not last children!)
# down  : go down
# left  : go to parent
# right : open if parent and go next
# home  : go to root
# end   : go to last item without opening parents
# alnum : start or continue searching for the item with this prefix
# "+"
# "*"
# expand all
# "-"
# Use the item's bounding rectangle to determine position for the event
# Use the left edge, vertical middle
# in any case, also generate the normal key event for this key,
# even if we generated the ACTIVATED event above: this is what
# wxMSW does and it makes sense because you might not want to
# process ACTIVATED event at all and handle Space and Return
# directly (and differently) which would be impossible otherwise
# up goes to the previous sibling or to the last
# of its children if it's expanded
# Search for a previous, enabled item.
# If we found a valid enabled item, select it.
# left arrow goes to the parent
# don't go to root if it is hidden
# this works the same as the down arrow except that we
# also expand the item if it wasn't expanded yet
# fall through
# Scan for next enabled item.
# <End> selects the last enabled tree item.
# Keep track of last enabled item encountered.
# Top-most item is not enabled. Scan for next item.
# <Home> selects the first enabled tree item.
# Scan for first enabled and displayed item.
# <PgUp> moves up by a page
# Get Current tree Item.
# Nothing selected. Allow normal ScrolledWindow PageUp handling.
# Is the current item visible?
# Current item is visible
# Current item not visible.
# Move upwards in tree until last visible, or pagesize hit.
# Is this item also visible?
# Move to top visible item in page.
# Move up to previous item, set as target if it is enabled.
# Break loop if we moved up a page size and have a new target.
# If we found a valid target, select it.
# No enabled item found. Let ScrolledWindow handle PageUp.
# <PgDn> moves down by a page
# Get Current tree Item.
# Nothing selected. Allow normal ScrolledWindow PgDn handling.
# Is the current item visible?
# Current item is visible
# Current item not visible.
# Move downwards in tree until last visible, or pagesize hit.
# Is this item also visible?
# Move to last visible item in page.
# Move down to next item, set as target if it is enabled.
# Break loop if we moved down a page size and have a new target.
# If we found a valid target, select it.
# No enabled item found. Let ScrolledWindow handle PageDown.
# Some other key pressed. Consume character for item search.
# find the next item starting with the given prefix
# no such item
# also start the timer to reset the current prefix if the user
# doesn't press any more alnum keys soon -- we wouldn't want
# to use this prefix for a new item search
# Try to get previous sibling.
# Drill down to last displayed child of previous sibling.
# No previous sibling. Move to parent.
# Suppress returning root item if TR_HIDE_ROOT flag is set.
# Is the item expanded and has children?
# Next item = first child.
# Next item = next sibling.
# No sibling. Try parent's sibling until root reached.
# Return the next item.
# Is an unchecked radiobutton... all its children are inactive
# try to get the next/previous sibling
# Tha's not a radiobutton... but some of its children can be
# inactive
# vetoed by user
# We have to call this here because the label in
# question might just have been added and no screen
# update taken place.
# let owner know that the edit was cancelled
# Is the mouse over a tree item button?
# unhighlight old item
# Determines what item we are hovering over and need a tooltip for
# We do not want a tooltip if we are dragging, or if the edit timer is running
# Ask the tree control what tooltip (if any) should be shown
# we process left mouse up event (enables in-place edit), right down
# (pass to the user code), left dbl click (activate item) and
# dragging/moving events for items drag-and-drop
# wait until user drags a bit further...
# by default the dragging is not supported, the user code must
# explicitly allow the event for it to take place
# we're going to drag this item
# remember the old cursor because we will change it while
# dragging
# in a single selection control, hide the selection temporarily
# Create the custom draw image from the icons and the text of the item
# unhighlight the previous drop target
# Here I am trying to avoid ugly repainting problems... hope it works
# generate the drag end event
# Probably this is not enough on GTK. Try a Refresh() if it does not work.
# If we got to this point, we are not dragging or moving the mouse.
# Because the code in carbon/toplevel.cpp will only set focus to the tree
# if we skip for EVT_LEFT_DOWN, we MUST skip this event here for focus to work.
# We skip even if we didn't hit an item because we still should
# restore focus to the tree control even if we didn't exactly hit an item.
# here we process only the messages which happen on tree items
# we hit the blank area
# If the item is already selected, do not update the selection.
# Multi-selections should not be cleared if a selected item is clicked.
# Consistent with MSW (for now), send the ITEM_MENU *after*
# the RIGHT_CLICK event. TODO: This behaviour may change.
# this facilitates multiple-item drag-and-drop
# !RightDown() && !LeftUp() ==> LeftDown() || LeftDClick()
# only toggle the item for a single click, double click on
# the button doesn't do anything (it toggles the item twice)
# don't select the item if the button was clicked
# clear the previously selected items, if the
# user clicked outside of the present selection.
# otherwise, perform the deselection on mouse-up.
# this allows multiple drag and drop to work.
# but if Cmd is down, toggle selection of the clicked item
# how should the selection work for this event?
# Handle hyperlink items... which are a bit odd sometimes
# For some reason, Windows isn't recognizing a left double-click,
# so we need to simulate it here.  Allow 200 milliseconds for now.
# double clicking should not start editing the item label
# send activate event first
# if the user code didn't process the activate event,
# handle it ourselves by toggling the item when it is
# double clicked
##                        if item.HasPlus():
# Check if we need to select the root item
# because nothing else has been selected.
# Delaying it means that we can invoke event handlers
# as required, when a first item is selected.
# after all changes have been done to the tree control,
# we actually redraw the tree when everything is over
#        event.Skip()
# restore normal font
# at least 2 pixels
# otherwise 10% extra spacing
# a hidden root is not evaluated, but its
# children are always calculated
# recurse
# set its position
# move its window, if necessary.
# we don't need to calculate collapsed branches
# recurse
# start recursion
# start recursion
# TODO: this is awfully inefficient, we should keep the list of all
#       selected items internally, should be much faster
# ----------------------------------------------------------------------------
# changing colours: we need to refresh the tree control
# ----------------------------------------------------------------------------
# something is better than nothing...
# 100x80 is what the MSW version will get from the default
# wxControl::DoGetBestSize
# It looks like the space between the "+" and the node
# rect occupies 4 pixels approximatively
# It looks like the space between the "+" and the node
# rect occupies 4 pixels approximatively
# Create a CustomTreeCtrl instance
# Add a root node to it
# Create an image list to add icons next to an item
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# FLATMENU wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 03 Nov 2006
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
# TODO List
#
# 1. Work is still in progress, so other functionalities may be added in the future;
# 2. No shadows under MAC, but it may be possible to create them using Carbon.
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
#
# Tags:     phoenix-port, py3-port, unittest, documented
# --------------------------------------------------------------------------------- #
# Append the menu items to the menus
# Append menus to the menubar
# our normal wxApp-derived class, as usual
# FlatMenu styles
# Some checking to see if we can draw shadows behind the popup menus
# at least on Windows. *REQUIRES* Mark Hammond's win32all extensions
# and ctypes, on Windows obviouly. Mac and GTK have no shadows under
# the menus, and it has been reported that shadows don't work well
# on Windows 2000 and previous.
# Define a translation string
# Shadows behind menus are supported only in XP
# Simple hack, but I don't know how to make it work on Mac
# I don't have  Mac ;-)
#if wx.Platform == "__WXMAC__":
#    try:
#        import ctypes
#        _carbon_dll = ctypes.cdll.LoadLibrary(r'/System/Frameworks/Carbon.framework/Carbon')
#    except:
#        _carbon_dll = None
# FIXME: No way to get shadows on Windows with the original code...
# May anyone share some suggestion on how to make it work??
# Right now I am using win32api to create shadows behind wx.PopupWindow,
# but this will result in *all* the popup windows in an application
# to have shadows behind them, even the user defined wx.PopupWindow
# that do not derive from FlatMenu.
# Check for the new method in 2.7 (not present in 2.6.3.3)
# we now have black where the original bmp was drawn,
# white elsewhere
# Convert the black to grey
# now contains a bitmap with grey where the image was, white elsewhere
# ---------------------------------------------------------------------------- #
# Class FMRendererMgr
# ---------------------------------------------------------------------------- #
# If we have already initialized don't do it again. There is only one
# FMRendererMgr process-wide.
# ---------------------------------------------------------------------------- #
# Class FMRenderer
# ---------------------------------------------------------------------------- #
# Display scrollbar buttons if the menu doesn't fit on the screen
# otherwise default to up and down arrow menu items
# Background Colours
# create wxBitmaps from the xpm's
# switch according to the status
# Place a separator bitmap
# assumption: the background was already drawn on the dc
# the rect must be at least 5x5 pixles
# Start by drawing the right bottom corner
# Draw right side shadow
# fill with gradient
# Define the item actual rectangle area
# Define the drawing area
# Draw the background
# Draw the left margin gradient
# check if separator
# Separator is a small grey line separating between menu items.
# Keep the item rect
# Get the bitmap base on the item state (disabled, selected ..)
# First we draw the selection rectangle
#copy.Inflate(0, menubar._spacer)
# Calculate the postion to place the image
# Checkable item
# Draw surrounding rectangle around the selection box
# Checkable item
# Draw surrounding rectangle around the selection box
# Draw text - without accelerators
# We divide the drawing to 3 parts
# Draw first part
# mnemonic
# last part
# Now draw accelerator
# Accelerators are aligned to the right
# Check if this item has sub-menu - if it does, draw
# right arrow on the right margin
# Draw arrow
# switch according to the status
# switch according to the status
# Keep old pen and brush
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the middle points
# Define the top region
# switch according to the status
# fill with gradient
#artMgr = ArtManager.Get()
# ---------------------------------------------------------------------------
# Draw as much items as we can if the screen is not wide enough, add all
# missing items to a drop down menu
# ---------------------------------------------------------------------------
# mark all items as non-visibles at first
# Handle accelerator ('&')
# Get the menu item rect
#rect = wx.Rect(posx+menubar._spacer/2, posy, textWidth, textHeight)
# Can we draw more??
# the +DROP_DOWN_ARROW_WIDTH  is the width of the drop down arrow
# In this style the button highlight includes the menubar margin
#button_rect.width = rect.width + menubar._spacer
# Keep the item rectangle, will be used later in functions such
# as 'OnLeftDown', 'OnMouseMove'
#copy.Inflate(0, menubar._spacer)
# Draw the text on a bitmap using memory dc,
# so on following calls we will use this bitmap instead
# of calculating everything from scratch
# Fill the bitmap with the masking colour
# draw the text
# underline the first '&'
# before
# underlineLetter
# Draw the underline ourselves since using the Underline in GTK,
# causes the line to be too close to the letter
# after
# Set masking colour to the bitmap
# + menubar._spacer
# Get a background image of the more menu button
# Draw the drop down arrow button
# Set the button rect
# colour the menu face with background colour
# draw items
# make all items as non-visible first
# If we have to scroll and are not using the scroll bar buttons we need to draw
# the scroll up menu item at the top.
# make sure we draw only visible items
# ---------------------------------------------------------------------------- #
# Class FMRendererMSOffice2007
# ---------------------------------------------------------------------------- #
# Display scrollbar buttons if the menu doesn't fit on the screen
# Construct the margin rectangle
# Set the gradient colours
# Keep old pen and brush
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the middle points
# Define the top region
# Keep old pen and brush
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the middle points
# Define the top region
# Define the middle region
# Define the bottom region
# Keep old pen and brush
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the middle points
# Define the top region
# Define the middle region
# Define the bottom region
# ---------------------------------------------------------------------------- #
# Class FMRendererVista
# ---------------------------------------------------------------------------- #
# Keep old pen and brush
# ---------------------------------------------------------------------------- #
# Class FMRendererXP
# ---------------------------------------------------------------------------- #
# Display scrollbar buttons if the menu doesn't fit on the screen
# Construct the margin rectangle
# Set the gradient colours
# For office style, we simple draw a rectangle with a gradient colouring
# fill with gradient
# Draw the border
# For office style, we simple draw a rectangle with a gradient colouring
# fill with gradient
# ----------------------------------------------------------------------------
# File history (a.k.a. MRU, most recently used, files list)
# ----------------------------------------------------------------------------
# we need to quote '&' characters which are used for mnemonics
# ----------------------------------------------------------------------------
# File history management
# ----------------------------------------------------------------------------
# The ID of the first history menu item (Doesn't have to be wxID_FILE1)
# Last n files
# Menus to maintain (may need several for an MDI app)
# Max files to maintain
# Accessors
# Set/get base id
# check if we don't already have this file
# we do have it, move it to the top of the history
# if we already have a full history, delete the one at the end
# add a new menu item to all file menus (they will be updated below)
# label doesn't matter, it will be set below anyhow, but it can't
# be empty (this is supposed to indicate a stock item)
# insert the new file in the beginning of the file history
# update the labels in all menus
# if in same directory just show the filename otherwise the full path
# file in different directory
# absolute path could also set relative path
# delete the element from the array
# shift filenames up
# delete the last menu item which is unused now
#else: menu is empty somehow
# ---------------------------------------------------------------------------- #
# Class FlatMenuEvent
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class MenuEntryInfo
# ---------------------------------------------------------------------------- #
# the menu itself accelerator id
# ---------------------------------------------------------------------------- #
# Class StatusBarTimer
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class FlatMenuBar
# ---------------------------------------------------------------------------- #
# 20 milliseconds
# start the stop watch
# it is time to process UpdateUIEvents
# Reset the timer
# we need to update the menu bar
# The menu bar margin
# add the toolbar height to the menubar height
# search for a tool bar with id
# on GTK, dont use the bitmap for drawing,
# draw directly on the DC
#yy = rect.y #+ self._toolbarMargin #+ (rect.height - height)/2
# by default set all toolbar items as invisible
# Get all the toolbar items
# the button width depends on its type
# normal bitmap's width
# can we keep drawing?
# mark this item as visible
#------------------------------------------
# special handling for separator
#------------------------------------------
# draw the separator
# Draw the toolbar image
#y = rect.y + (rect.height - bmp.GetHeight())/2 - 1
# TODO DrawToolbarButton? With separate toolbar colors
# in case we the button is in focus, place it
# once pixle up and left
# place a dark image under the original image to provide it
# with some shadow
# shadow = ConvertToMonochrome(bmp)
# dc.DrawBitmap(shadow, imgx, imgy, True)
#Edited by P.Kort
# Draw a drop down menu at the right position of the menu bar
# we use xpm file with 16x16 size, another 4 pixels we take as spacer
# from the right side of the frame, this will create a DROP_DOWN_ARROW_WIDTH  pixels width
# of unwanted zone on the right side
# Draw the bitmap
# Draw background according to state
# Delete current image
# Calc the image coordinates
# check for tool bar items
# locate the corresponded menu item
# Reset items state
# On Item
# If this item is already selected, dont draw it again
# mark all toolbar items as non-hilited
# we need to refresh the toolbar
# Reset items state
# Position the menu, the GetPosition() return the coords
# of the button relative to its parent, we need to translate
# them into the screen coords
# try to toggle if its a check item:
# switch is if its a unselected radio item
# Over a toolbar item
# TODO:: Do the action specified in this button
# Over a toolbar item
# draw the bitmap over the highlight
# place a dark image under the original image to provide it
# with some shadow
# shadow = ConvertToMonochrome(self._tbButtons[idx]._tbItem.GetBitmap())
# dc.DrawBitmap(shadow, x, y, True)
# in case we the button is in focus, place it
# once pixle up and left
# first make sure all other menus are not popedup
# Remove the popup menu as well
# make sure that the menu item button is highlited
# we handle only button clicks
# Create the event
# all events are handled by this control and its parents
# Since we use bitmaps to optimize our drawings, we need
# to reset all bitmaps from pos and until end of vector
# to force size/position changes to the menu bar
# remove the connection to this menubar
# first get the number of items we have
# create accelerator for every menu (if it exist)
# Get the accelrator character
# connect an event to this cmd
# Add the new menu items
# find the current active menu
# find the last visible item
# find the current active menu
# first time
# Connect an event handler for this event
# Remove all items from the popup menu
# Add invisible toolbar items
# intialize the dialog
# Handle customize requests here
# Reset the more button
# We add our menu bar as a toolbar, with the following settings
# We add our menu bar as a toolbar, with the following settings
# ---------------------------------------------------------------------------- #
# Class ShadowPopupWindow
# ---------------------------------------------------------------------------- #
# popup windows are created hidden by default
#--------------------------------------------------------
# Class FlatMenuButton
#--------------------------------------------------------
# always stop the timer
# Process mouse move event
#--------------------------------------------------------
# Class FlatMenuItemGroup
#--------------------------------------------------------
# uncheck all other items
# make sure this item exist in our group
# uncheck all other items
#if the removed item was the selected one,
# select the first one in the group
#--------------------------------------------------------
# Class FlatMenuBase
#--------------------------------------------------------
# Release mouse capture if needed
# send an event about our dismissal to the parent (unless we are a sub menu)
# Send it
# some controls update themselves from OnIdle() call - let them do it
# The mouse was pressed in the parent coordinates,
# e.g. pressing on the left top of a text ctrl
# will result in (1, 1), these coordinates needs
# to be converted into screen coords
# If we are topmost menu, we use the given pt
# else we use the logical
# parent (second argument provided to this function)
# Fit the menu into screen
# Get the screen height
# position the scrollbar - If we are doing scroll bar buttons put them in the top right and
# bottom right or else place them as menu items at the top and bottom.
# Capture mouse event and direct them to us
# Check that the menu can fully appear in the screen
# always assume that we have scrollbuttons on
# the menu will be truncated
# try to flip the menu
# We need to popup scrollbuttons!
# we are a submenu
# try to decrease the y value of the menu position
# probably the menu size is too high to fit
# the screen, we need scrollbuttons
# We are submenu
# Check if child menu is poped, if so, dismiss it
# Reset menu owner
# by default do nothing
# by default do nothing
#--------------------------------------------------------
# Class ToolBarItem
#--------------------------------------------------------
#--------------------------------------------------------
# Class FlatToolBarItem
#--------------------------------------------------------
# Is a separator
# is a wxControl
# Bitmap construction, simple tool
# Create a grey bitmap from the normal bitmap
# group id for radio items
#--------------------------------------------------------
# Class FlatMenuItem
#--------------------------------------------------------
# Fix toolbar update
# Fix toolbar update
# radio items can be checked only after they are attached to menu
# update group
# Our parent menu might want to do something with this change
#--------------------------------------------------------
# Class FlatMenu
#--------------------------------------------------------
# each time we popup, need to reset the starting index
# Loop over self menu and send update UI event for
# every item in the menu
# Set the owner of the menu. All events will be directed to it.
# If owner is None, the Default GetParent() is used as the owner
# Adjust menu position and show it
# Replace the event handler of the active window to direct
# all keyboard events to us and the focused window to direct char events to us
# Reparent to us
# Update the menu width if necessary
# Add accelerator entry to the menu if needed
# Without accelerator
# 4 spaces betweem text and accel column
# Calc text length/height
# Update the global menu item height if needed
# Update the accel width
# In case the item has image & is type radio or check, we need double size
# left margin
# update the rightMargin X position
# We need to redraw all our child menus
# notify menu bar that an item was modified directly
# Draw all childs menus of self menu as well
# We are a submenu, dismiss us.
# try to find our root menu, if we are attached to menubar,
# let it try and open the previous menu
# try to find our root menu, if we are attached to menubar,
# let it try and open the previous menu
# Select first item of the menu
# Select last item of the menu
# Alt was pressed
# Iterate over all the menu items
# We keep the index of only
# the first occurence
# Keep on looping until no more items for self menu
# We select the first item
# Activate the item, if self is a submenu item we first select it
# make sure we have at least two items in the menu (which are not
# separators)
# Select the current one
# find the next valid item
# find the next valid item
# Ignore dummy mouse move events
# we need to ignore extra mouse events: example when this happens is when
# the mouse is on the menu and we open a submenu from keyboard - Windows
# then sends us a dummy mouse move event, we (correctly) determine that it
# happens in the parent menu and so immediately close the just opened
# submenunot
# first let the scrollbar handle it
# The event is not in our coords,
# so we try our parent
# we need to translate our client coords to the client coords of the
# window we forward this event to
# try the grandparent
# The event is not in our coords,
# so we try our parent
# we need to translate our client coords to the client coords of the
# window we forward self event to
# try the grandparent
# At this point we can assume that the event was not
# processed, so we dismiss the menu and its children
# test if we are on a menu item
# If we have a context menu, close any opened submenu
# Popup child menu
# The event is not in our coords,
# so we try our parent
# we need to translate our client coords to the client coords of the
# window we forward self event to
# try the grandparent
# At this point we can assume that the event was not
# processed, so we dismiss the menu and its children
# test if we are on a menu item
# The event is not in our coords,
# so we try our parent
# we need to translate our client coords to the client coords of the
# window we forward self event to
# try the grandparent
# If we are attached to a menu bar,
# let him process the event as well
# let the menu bar process it
# let the menu bar process it
# test if we are on a menu item
# Message to send when out of last selected item
# Message to send when over an item
# Message to send when out of last selected item
# Message to send when out of last selected item
# Message to send when out of last selected item
# Message to send when out of last selected item
# Close sub-menu first
# We have another sub-menu open, close it
# Close sub-menu if needed
# Popup child menu
# if the radio item is already checked,
# just send command event. Else, check it, uncheck the current
# checked item in the radio item group, and send command event
# Send command event
# Popup child menu
# Select the first child
# First we search for the menu item (recursively)
# Remove the menu item
# update group
# Resize the menu
# Append it
# Insert the menu item
# Recalculate the menu geometry
# Update radio groups
# Udpate radio groups in case this item is a radio item
# first item in group
# can we do the resize?
# Clear accelerator table
# Reset parameters and menu size
# Now we simply add the items
# events
# Create the event
# For checkable item, set the IsChecked() value
# Create the event
# For checkable item, set the IsChecked() value
# since Destroy() call ResizeMenu(), we turn this flag on
# to avoid resizing the menu for every item removed
# Now we can resize the menu
# Now we can resize the menu
# first copy the current menu items
# if any item in this menu has sub-menu, copy them as well
# increase the self._from index
# Not used anymore
#--------------------------------------------------------
# Class MenuKbdRedirector
#--------------------------------------------------------
#--------------------------------------------------------
# Class FocusHandler
#--------------------------------------------------------
# Let parent process it
# --------------------------------------------------------------------------- #
# FLATNOTEBOOK Widget wxPython IMPLEMENTATION
#
# Original C++ Code From Eran. You Can Find It At:
#
# http://wxforum.shadonet.com/viewtopic.php?t=5761&start=0
#
# License: wxWidgets license
#
#
# Python Code By:
#
# Andrea Gavana, @ 02 Oct 2006
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
#----------------------------------------------------------------------
# Beginning Of FLATNOTEBOOK wxPython Code
#----------------------------------------------------------------------
# Used on OSX to get access to carbon api constants
# Check for the new method in 2.7 (not present in 2.6.3.3)
# Use Visual Studio 2003 (VC7.1) style for tabs
# Use fancy style - square tabs filled with gradient colouring
# Draw thin border around the page
# Do not display the 'X' button
# Do not display the Right / Left arrows
# Use the mouse middle button for cloing tabs
# Place tabs at bottom - the default is to place them
# at top
# Disable dragging of tabs
# Use Visual Studio 2005 (VC8) style for tabs
# Firefox 2 tabs style
# Place 'X' on a tab
# Style to close tab using double click - styles 1024, 2048 are reserved
# Button size is a 16x16 xpm bitmap
# Button status
# Hit Test results
# On a tab
# On the X button
# On the 'X' button (tab's X button)
# On the rotate left arrow button
# On the rotate right arrow button
# On the drop down arrow button
# Anywhere else
# FlatNotebook Events:
# wxEVT_FLATNOTEBOOK_PAGE_CHANGED: Event Fired When You Switch Page;
# wxEVT_FLATNOTEBOOK_PAGE_CHANGING: Event Fired When You Are About To Switch
# Pages, But You Can Still "Veto" The Page Changing By Avoiding To Call
# event.Skip() In Your Event Handler;
# wxEVT_FLATNOTEBOOK_PAGE_CLOSING: Event Fired When A Page Is Closing, But
# You Can Still "Veto" The Page Changing By Avoiding To Call event.Skip()
# In Your Event Handler;
# wxEVT_FLATNOTEBOOK_PAGE_CLOSED: Event Fired When A Page Is Closed.
# wxEVT_FLATNOTEBOOK_PAGE_CONTEXT_MENU: Event Fired When A Menu Pops-up In A Tab.
# wxEVT_FLATNOTEBOOK_PAGE_DROPPED: Event Fired When A Tab Is Dropped On The Same Notebook
#-----------------------------------#
#        FlatNotebookEvent
#-----------------------------------#
# Some icons in XPM format
#008080",
#555555",
# c #000000",
#000000",
#000000",
#000000",
#000000",
#000000",
#008080",
#4766e0",
# c #9e9ede",
#000000",
#000000",
#000000",
#000000",
#000000",
############.`",
############.`",
############.`",
###aa####aa#.`",
####aa##aa##.`",
#####aaaa###.`",
######aa####.`",
#####aaaa###.`",
####aa##aa##.`",
###aa####aa#.`",
############.`",
#008080",
#555555",
# c #000000",
#000000",
#000000",
#000000",
#000000",
#000000",
#008080",
#4766e0",
# c #c9dafb",
#000000",
#000000",
#000000",
#000000",
#000000",
############.`",
############.`",
##aa####aa##.`",
###aa##aa###.`",
####aaaa####.`",
#####aa#####.`",
####aaaa####.`",
###aa##aa###.`",
##aa####aa##.`",
############.`",
############.`",
#008080",
#555555",
# c #000000",
#000000",
#000000",
#000000",
#000000",
#000000",
#008080",
#4766e0",
# c #9e9ede",
#000000",
#000000",
#000000",
#000000",
#000000",
############.`",
############.`",
#######a####.`",
######aa####.`",
#####aaa####.`",
####aaaa####.`",
###aaaaa####.`",
####aaaa####.`",
#####aaa####.`",
######aa####.`",
#######a####.`",
#008080",
#4766e0",
# c #c9dafb",
#000000",
#000000",
#000000",
#000000",
#000000",
############.`",
######a#####.`",
#####aa#####.`",
####aaa#####.`",
###aaaa#####.`",
##aaaaa#####.`",
###aaaa#####.`",
####aaa#####.`",
#####aa#####.`",
######a#####.`",
############.`",
#008080",
#555555",
# c #000000",
#000000",
#000000",
#000000",
#000000",
#000000",
#008080",
#4766e0",
# c #c9dafb",
#000000",
#000000",
#000000",
#000000",
#000000",
############.`",
####a#######.`",
####aa######.`",
####aaa#####.`",
####aaaa####.`",
####aaaaa###.`",
####aaaa####.`",
####aaa#####.`",
####aa######.`",
####a#######.`",
############.`",
#008080",
#4766e0",
# c #9e9ede",
#000000",
#000000",
#000000",
#000000",
#000000",
############.`",
############.`",
#####a######.`",
#####aa#####.`",
#####aaa####.`",
#####aaaa###.`",
#####aaaaa##.`",
#####aaaa###.`",
#####aaa####.`",
#####aa#####.`",
#####a######.`",
#008080",
#555555",
# c #000000",
#000000",
#000000",
#000000",
#000000",
#000000",
#008080",
#4766e0",
# c #c9dafb",
#000000",
#000000",
#000000",
#000000",
#000000",
###########.`",
###########.`",
###########.`",
#aaaaaaaaa#.`",
##aaaaaaa##.`",
###aaaaa###.`",
####aaa####.`",
#####a#####.`",
###########.`",
###########.`",
###########.`",
#008080",
#4766e0",
# c #9e9ede",
#000000",
#000000",
#000000",
#000000",
#000000",
###########.`",
###########.`",
###########.`",
###########.`",
###########.`",
#aaaaaaaaa#.`",
##aaaaaaa##.`",
###aaaaa###.`",
####aaa####.`",
#####a#####.`",
###########.`",
#008080",
#000000",
# c #000000",
#000000",
#000000",
#000000",
#000000",
#000000",
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# We take the percent way of the colour from colour -. white
# Random value between 0-255
# Random value between 0-255
# Random value between 0-255
# Save the current pen and brush
# Restore the pen and brush
# -----------------------------------------------------------------------------
# Util functions
# -----------------------------------------------------------------------------
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the top region
# Incase we use bottom tabs, switch the colours
# ---------------------------------------------------------------------------- #
# Class FNBDropSource
# Gives Some Custom UI Feedback during the DnD Operations
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class FNBDragInfo
# Stores All The Information To Allow Drag And Drop Between Different
# FlatNotebooks.
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class FNBDropTarget
# Simply Used To Handle The OnDrop() Method When Dragging And Dropping Between
# Different FlatNotebooks.
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class PageInfo
# Contains parameters for every FlatNotebook page
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class FlatNotebookEvent
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class TabNavigatorWindow
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class TabNavigatorWindow
# ---------------------------------------------------------------------------- #
# Place a spacer of 2 pixels
# Out signpost bitmap is 24 pixels
# Connect events to the list box
# Connect paint event to the panel
# Set focus on the list box to avoid having to click on it to change
# the tab selection under GTK.
# Select next page
# Previous page
# Insert the previous selection as second entry
# Skip selected page
# Skip previous selected page as well
# Select the next entry after the current selection
# Draw the caption title and place the bitmap
# get the bitmap optimal position, and draw it
# get the text position, and draw it
# ---------------------------------------------------------------------------- #
# Class FNBRenderer
# ---------------------------------------------------------------------------- #
# Get proper highlight colour for focus rectangle from the
# current Mac theme.  kThemeBrushFocusHighlight is
# available on Mac OS 8.5 and higher
# ''
# 'x'
# '<>'
# 'vx'
# 'v'
# '<>x'
# Make sure that there are pages in the container
# Set the bitmap according to the button status
# Handle disabled arrow
# Erase old bitmap
# Draw the new bitmap
# Make sure that there are pages in the container
# Set the bitmap according to the button status
# Check if the right most tab is visible, if it is
# don't rotate right anymore
# erase old bitmap
# Draw the new bitmap
# Check if this style is enabled
# Make sure that there are pages in the container
# erase old bitmap
# Draw the new bitmap
# Check if this style is enabled
# Make sure that there are pages in the container
# Set the bitmap according to the button status
# erase old bitmap
# Draw the new bitmap
# We draw the 'x' on the active tab only
# Set the bitmap according to the button status
# Set the masking
# Draw the new bitmap
# Update the vector
# Calculate the text length using the bold font, so when selecting a tab
# its width will not change
# Set a minimum size to a tab
# Style to add a small 'x' button on the top right
# of the tab
# The xpm image that contains the 'x' button is 9 pixels
# Default style
# For VC71 style, we only add the icon size (16 pixels)
# Default style
# For GTK it seems that we must do this steps in order
# for the tabs will get the proper height on initialization
# on MSW, preforming these steps yields wierd results
# We use 8 pixels as padding
# On GTK the tabs are should be larger
# Works well on MSW & GTK, however this lines should be skipped on MAC
# Get the text hight
# Calculate the number of rows required for drawing the tabs
# Set the maximum client size
# Background
# If border style is set, set the pen to be border pen
# We always draw the bottom/upper line of the tabs
# regradless the style
# Restore the pen
# Draw thik grey line between the windows area and
# the tab area
# Restore the pen
# Draw labels
# Update all the tabs from 0 to 'pc._nFrom' to be non visible
#----------------------------------------------------------
# Go over and draw the visible tabs
#----------------------------------------------------------
# Now set the font to the correct font
# Add the padding to the tab width
# Tab width:
# +-----------------------------------------------------------+
# | PADDING | IMG | IMG_PADDING | TEXT | PADDING | x |PADDING |
# +-----------------------------------------------------------+
# Check if we can draw more
# By default we clean the tab region
# Clean the 'x' buttn on the tab.
# A 'Clean' rectangle, is a rectangle with width or height
# with values lower than or equal to 0
# Draw the tab (border, text, image & 'x' on tab)
# Restore the text forground
# Update the tab position & size
# Update all tabs that can not fit into the screen as non-visible
# Draw the left/right/close buttons
# Left arrow
# The drawing starts from posx
# Add a result to the returned vector
# Advance posx
# ---------------------------------------------------------------------------- #
# Class FNBRendererMgr
# A manager that handles all the renderers defined below and calls the
# appropriate one when drawing is needed
# ---------------------------------------------------------------------------- #
# register renderers
# the default is to return the default renderer
#------------------------------------------
# Default renderer
#------------------------------------------
# Default style
# Draw the tab as rounded rectangle
# Draw a vertical line to the right of the text
# Restore the pen
# -----------------------------------
# Text and image drawing
# -----------------------------------
# Text drawing offset from the left border of the
# rectangle
# The width of the images are 16 pixels
# Set the text background to be like the vertical lines
# draw 'x' on tab (if enabled)
# take a bitmap from the position of the 'x' button (the x on tab button)
# this bitmap will be used later to delete old buttons
# Draw the tab
#------------------------------------------
# Firefox2 renderer
#------------------------------------------
#------------------------------------
# Paint the tab with gradient
#------------------------------------
# Draw the tab as rounded rectangle
# -----------------------------------
# Text and image drawing
# -----------------------------------
# The width of the images are 16 pixels
# Set the text background to be like the vertical lines
# draw 'x' on tab (if enabled)
# take a bitmap from the position of the 'x' button (the x on tab button)
# this bitmap will be used later to delete old buttons
# Draw the tab
#------------------------------------------------------------------
# Visual studio 7.1
#------------------------------------------------------------------
# Visual studio 7.1 style
# Draw a black line on the left side of the
# rectangle
# To give the tab more 3D look we do the following
# Incase the tab is on top,
# Draw a thik white line on topof the rectangle
# Otherwise, draw a thin (1 pixel) black line at the bottom
# Draw a white vertical line to the left of the tab
# We dont draw a rectangle for non selected tabs, but only
# vertical line on the left
# -----------------------------------
# Text and image drawing
# -----------------------------------
# Text drawing offset from the left border of the
# rectangle
# The width of the images are 16 pixels
# Set the text background to be like the vertical lines
# draw 'x' on tab (if enabled)
# take a bitmap from the position of the 'x' button (the x on tab button)
# this bitmap will be used later to delete old buttons
# Draw the tab
#------------------------------------------------------------------
# Fancy style
#------------------------------------------------------------------
# Fancy tabs - like with VC71 but with the following differences:
# - The Selected tab is coloured with gradient colour
# erase the bottom/top line of the rectangle
# We dont draw a rectangle for non selected tabs, but only
# vertical line on the left
# -----------------------------------
# Text and image drawing
# -----------------------------------
# Text drawing offset from the left border of the
# rectangle
# The width of the images are 16 pixels
# Set the text background to be like the vertical lines
# draw 'x' on tab (if enabled)
# take a bitmap from the position of the 'x' button (the x on tab button)
# this bitmap will be used later to delete old buttons
# Draw the tab
#------------------------------------------------------------------
# Visual studio 2005 (VS8)
#------------------------------------------------------------------
# Works well on MSW & GTK, however this lines should be skipped on MAC
# Get the text hight
# Set the font for measuring the tab height
# Calculate the number of rows required for drawing the tabs
# Set the maximum client size
# Create brushes
# Background
# If border style is set, set the pen to be border pen
# For VC8 style, we colour the tab area in gradient colouring
# We always draw the bottom/upper line of the tabs
# regradless the style
# Restore the pen
# Draw labels
# Update all the tabs from 0 to 'pc.self._nFrom' to be non visible
# Draw the visible tabs, in VC8 style, we draw them from right to left
# 'i' points to the index of the currently drawn tab
# in pc.GetPageInfoVector() vector
# Now set the font to the correct font
# Add the padding to the tab width
# Tab width:
# +-----------------------------------------------------------+
# | PADDING | IMG | IMG_PADDING | TEXT | PADDING | x |PADDING |
# +-----------------------------------------------------------+
# By default we clean the tab region
# incase we use the VC8 style which requires
# the region, it will be filled by the function
# drawVc8Tab
# Clean the 'x' buttn on the tab
# 'Clean' rectanlge is a rectangle with width or height
# with values lower than or equal to 0
# Draw the tab
# Incase we are drawing the active tab
# we need to redraw so it will appear on top
# of all other tabs
# when using the vc8 style, we keep the position of the active tab so we will draw it again later
# Restore the text forground
# Update the tab position & size
# Incase we are in VC8 style, redraw the active tab (incase it is visible)
# Update all tabs that can not fit into the screen as non-visible
# Draw the left/right/close buttons
# Left arrow
# If we draw the first tab or the active tab,
# we draw a full tab, else we draw a truncated tab
#
#             X(2)                  X(3)
#        X(1)                            X(4)
#
#                                           X(5)
#
# X(0),(7)                                  X(6)
#
#
# Draw the polygon
# Restore the brush
# Top default tabs
# Incase we are drawing the selected tab, we draw the border of it as well
# but without the bottom (upper line incase of wxBOTTOM)
# Delete the bottom line (or the upper one, incase we use wxBOTTOM)
# Draw a thin line to the right of the non-selected tab
# Text drawing offset from the left border of the
# rectangle
# The width of the images are 16 pixels
# Draw the image for the tab if any
# if selected tab, draw text in bold
# draw 'x' on tab (if enabled)
# take a bitmap from the position of the 'x' button (the x on tab button)
# this bitmap will be used later to delete old buttons
# Draw the tab
# calculate gradient coefficients
# If colourful tabs style is set, override the tab colour
# First time, generate colour, and keep it in the vector
# If we are drawing the selected tab, we need also to draw a line
# from 0.tabPoints[0].x and tabPoints[6].x . end, we achieve this
# by drawing the rectangle with transparent brush
# the line under the selected tab will be deleted by the drwaing loop
# Draw the border using the 'edge' point
# Progress the colour
# We check the 3 points to the left
# According to the equation y = ax + b => x = (y-b)/a
# We know the first 2 points
# We check the 3 points to the left
# According to the equation y = ax + b => x = (y-b)/a
# We know the first 2 points
# Vertical line
# Empty results
# The drawing starts from posx
# Add a result to the returned vector
# Advance posx
#------------------------------------------------------------------
# Ribbon Tabs style
#------------------------------------------------------------------
# definte this because we don't want to use the bold font
# Set a minimum size to a tab
# Style to add a small 'x' button on the top right
# of the tab
# The xpm image that contains the 'x' button is 9 pixels
# Default style
# For VC71 style, we only add the icon size (16 pixels)
# Default style
# -----------------------------------
# Text and image drawing
# -----------------------------------
# Text drawing offset from the left border of the
# rectangle
# The width of the images are 16 pixels
# Set the text background to be like the vertical lines
# draw 'x' on tab (if enabled)
# take a bitmap from the position of the 'x' button (the x on tab button)
# this bitmap will be used later to delete old buttons
# Draw the tab
#style = pc.GetParent().GetWindowStyleFlag()
# Works well on MSW & GTK, however this lines should be skipped on MAC
# Get the text height
# Calculate the number of rows required for drawing the tabs
# Set the maximum client size
# Background
# If border style is set, set the pen to be border pen
# Draw labels
# Update all the tabs from 0 to 'pc._nFrom' to be non visible
#----------------------------------------------------------
# Go over and draw the visible tabs
#----------------------------------------------------------
# This style highlights the selected tab and the tab the mouse is over
# Add the padding to the tab width
# Tab width:
# +-----------------------------------------------------------+
# | PADDING | IMG | IMG_PADDING | TEXT | PADDING | x |PADDING |
# +-----------------------------------------------------------+
# Check if we can draw more
# By default we clean the tab region
#pc._pagesInfoVec[i].GetRegion().Clear()
# Clean the 'x' buttn on the tab.
# A 'Clean' rectangle, is a rectangle with width or height
# with values lower than or equal to 0
# Draw the tab (border, text, image & 'x' on tab)
# Restore the text forground
# Update the tab position & size
# Update all tabs that can not fit into the screen as non-visible
# Draw the left/right/close buttons
# Left arrow
# ---------------------------------------------------------------------------- #
# Class FlatNotebook
# ---------------------------------------------------------------------------- #
# The child panels will inherit this bg colour, so leave it at the default value
#self.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_APPWORKSPACE))
# Set default page height
# For GTK it seems that we must do this steps in order
# for the tabs will get the proper height on initialization
# on MSW, preforming these steps yields wierd results
# We use 8 pixels as padding
# Add the tab container to the sizer
# Something is better than nothing... no pages!
# Loop over all the windows to get their best size
##        self._mainSizer.Destroy()
# Add the tab container to the sizer
# We leave a space of 1 pixel around the window
# sanity check
# reparent the window to us
# Add tab
# Check for selection and send events
# Check if a new selection was made
# Remove the window from the main sizer
# We leave a space of 1 pixel around the window
# Fire a wxEVT_FLATNOTEBOOK_PAGE_CHANGED event
# Hide the page
# sanity check
# reparent the window to us
# Insert tab
# Check for selection and send events
# Check if a new selection was made
# Remove the window from the main sizer
# Fire a wxEVT_FLATNOTEBOOK_PAGE_CHANGED event
# Hide the page
# Support for disabed tabs
# program allows the page change
# Remove the window from the main sizer
# We leave a space of 1 pixel around the window
# there is a real page changing
# Fire a closing event
# The event handler allows it?
# Delete the requested page
# If the page is the current window, remove it from the sizer
# as well
# Remove it from the array as well
# Now we can destroy it in wxWidgets use Destroy instead of delete
# Fire a closed event
# Clear the container of the tabs as well
# Make sure image is proper size
# change pages
# a dialog is already opened
# change pages
# For changing the tab position (i.e. placing them top/bottom)
# refreshing the tab container is not enough
# If we just hid the tabs we must Refresh()
#For Redrawing the Tabs once you remove the Hide tyle
# Fire a closing event
# The event handler allows it?
# Remove the requested page
# If the page is the current window, remove it from the sizer
# as well
# Remove it from the array as well
# ---------------------------------------------------------------------------- #
# Class PageContainer
# Acts as a container for the pages you add to FlatNotebook
# ---------------------------------------------------------------------------- #
# Set default page height, this is done according to the system font
# We use 10 pixels as padding
# Create page info and add it to the vector
# When resizing the control, try to fit to screen as many tabs as we can
# Call on paint
# Test if this style is enabled
# This shouldn't really change the selection, so it's commented out
# Fire events and eventually (if allowed) change selection
# self.FireEvent(tabIdx)
# send a message to popup a custom menu
# Reset buttons status
# In case the tab is disabled, we dont allow to choose it
# Make sure that the button was pressed before
# We scroll left with bulks of 5
# Make sure that the button was pressed before
# Check if the right most tab is visible, if it is
# don't rotate right anymore
# forget the zone that was initially clicked
# Make sure selected tab has focus
# Make sure that the button was pressed before
# Make sure that the button was pressed before
# Make sure that the button was pressed before
# Refresh the button status
# Test whether a left click was made on a tab
# 'x' button exists on a tab
# We have a match
# We are doing DND, so check also the region outside the tabs
# try before the first tab
# try after the last tab
# Default
##        self.DoSetSelection(page)
#! fix for tabfocus
# Try to remove one tab from start and try again
# Remove the page from the vector
# Thanks to Yiaanis AKA Mandrav
# The delete page was the last first on the array,
# but the book still has more pages, so we set the
# active page to be the first one (0)
# Refresh the tabs
# Check for selection and send event
# Fire a wxEVT_FLATNOTEBOOK_PAGE_CHANGED event
#if not self._pagesInfoVec:
#    # Erase the page container drawings
#    dc = wx.ClientDC(self)
#    dc.Clear()
# Erase the page container drawings
# Call virtual method for showing tooltip
# Set the cursor to be 'No-entry'
# Support for drag and drop
# Disable drag'n'drop for disabled tab
# Remove the window from the main sizer
# Add the page according to the style
# We leave a space of 1 pixel around the window
# Incase the from is greater than page,
# we need to reset the self._nFrom, so in order
# to force the caller to do so, we return false
# Seems strange, but this is the default
# There is an alignment problem with wx2.6.3 & Menus so only use
# images for versions above 2.6.3
# No events for the same selection
# Fire a wxEVT_FLATNOTEBOOK_PAGE_CHANGED event
# get the index of tab that will be replaced with the dragged tab
# ---------------------------------------------------------------------------- #
# Class FlatNotebookCompatible
# This class is more compatible with the wx.Notebook API.
# ---------------------------------------------------------------------------- #
# Support for disabed tabs
# --------------------------------------------------------------------------- #
# FLOATSPIN Control wxPython IMPLEMENTATION
# Python Code By:
#
# Andrea Gavana, @ 16 Nov 2005
# Latest Revision: 03 Jan 2014, 23.00 GMT
#
#
# TODO List/Caveats
#
# 1. Ay Idea?
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented
#
# End Of Comments
# --------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# [1,  ]
# [ , 0]
# [ , ]
#----------------------------------------------------------------------
# Beginning Of FLOATSPIN wxPython Code
#----------------------------------------------------------------------
# Python 2/3 compatibility helper
# Set The Styles For The Underline wx.TextCtrl
# Define The FloatSpin Event
#-----------------------------------#
#        FloatSpinEvent
#-----------------------------------#
# ---------------------------------------------------------------------------- #
# Class FloatSpinEvent
# ---------------------------------------------------------------------------- #
#----------------------------------------------------------------------------
# FloatTextCtrl
#----------------------------------------------------------------------------
#---------------------------------------------------------------------------- #
# FloatSpin
# This Is The Main Class Implementation
# ---------------------------------------------------------------------------- #
# Don't call SetRange here, because it will try to modify
# self._value whose value doesn't exist yet.
# start Philip Semanchuk addition
# The textbox & spin button are drawn slightly differently
# depending on the platform. The difference is most pronounced
# under OS X.
# GTK
# end Philip Semanchuk addition
# start Philip Semanchuk addition
# Setting the textctrl's size in the ctor also sets its min size.
# But the textctrl is entirely controlled by the parent floatspin
# control and should accept whatever size its parent dictates, so
# here we tell it to forget its min size.
# Setting the spin buttons's size in the ctor also sets its min size.
# Under OS X that results in a rendering artifact because spin buttons
# are a little shorter than textboxes.
# Setting the min size to the default allows OS X to draw the spin
# button correctly. However, Windows and KDE take the call to
# SetMinSize() as a cue to size the spin button taller than the
# textbox, so we avoid the call there.
# end Philip Semanchuk addition
# Ensure the spin button is shown, and the text widget takes
# all remaining free space
# set the value here without generating an event
# start Philip Semanchuk move
# end Philip Semanchuk move
# Null This Since MSW Sends KILL_FOCUS On Deletion
# oops something went wrong, set to reasonable value
# CTRL-TAB changes the (parent) window, i.e. switch notebook page
# start Philip Semanchuk addition
# The spin button is always snug against the right edge of the
# control.
# end Philip Semanchuk addition
# FIXME What To Do About A Failure?
# textctrl is out of sync, discard and reset
# Class FixedPoint, version 0.0.4.
# Released to the public domain 28-Mar-2001,
# by Tim Peters (tim.one@home.com).
# Provided as-is; use at your own risk; no warranty; no promises; enjoy!
# 28-Mar-01 ver 0.0,4
#     Use repr() instead of str() inside __str__, because str(long) changed
#     since this was first written (used to produce trailing "L", doesn't
#     now).
#
# 09-May-99 ver 0,0,3
#     Repaired __sub__(FixedPoint, string); was blowing up.
#     Much more careful conversion of float (now best possible).
#     Implemented exact % and divmod.
#
# 14-Oct-98 ver 0,0,2
#     Added int, long, frac.  Beefed up docs.  Removed DECIMAL_POINT
#     and MINUS_SIGN globals to discourage bloating this class instead
#     of writing formatting wrapper classes (or subclasses)
#
# 11-Oct-98 ver 0,0,1
#     posted to c.l.py
# The default value for the number of decimal digits carried after the
# decimal point.  This only has effect at compile-time.
# precision defaults to 2
# round to one fraction digit
# same thing setting to 1 in constructor
#  returns constructor string that reproduces object exactly
# the exact value is self.n / 10**self.p;
# self.n is a long; self.p is an int
# exact value is n*10**exp = n*10**(exp+p)/10**p
# XXX ignoring infinities and NaNs and overflows for now
# |value| = f * 2**e exactly
# Suck up CHUNK bits at a time; 28 is enough so that we suck
# up all bits in 2 iterations for all known binary double-
# precision formats, and small enough to fit in an int.
# invariant: |value| = (top + f) * 2**e exactly
# now |value| = top * 2**e exactly
# want n such that n / 10**p = top * 2**e, or
# n = top * 10**p * 2**e
# can we coerce to a float?
# similarly for long
# caution!  == values must have equal hashes, and a FixedPoint
# is essentially a rational in unnormalized form.  There's
# really no choice here but to normalize it, so hash is
# potentially expensive.
# Obscurity: if the value is an exact integer, p will be 0 now,
# so the hash expression reduces to hash(n).  So FixedPoints
# that happen to be exact integers hash to the same things as
# their int or long equivalents.  This is Good.  But if a
# FixedPoint happens to have a value exactly representable as
# a float, their hashes may differ.  This is a teensy bit Bad.
# n1/10**p + n2/10**p = (n1+n2)/10**p
# n1/10**p * n2/10**p = (n1*n2/10**p)/10**p
# n1/10**p / (n2/10**p) = n1/n2 = (n1*10**p/n2)/10**p
# floor((n1/10**p)/(n2*10**p)) = floor(n1/n2)
# n1/10**p - q * n2/10**p = (n1 - q * n2)/10**p
# caution! float can lose precision
# XXX should this round instead?
# XXX note e.g. int(-1.9) == -1L and int(1.9) == 1L in Python
# XXX note that __int__ inherits whatever __long__ does,
# XXX and .frac() is affected too
# return n, p s.t. self == n/10**p and n % 10 != 0
# return 10L**n
# return xn, yn, p s.t.
# p = max(x.p, y.p)
# x = xn / 10**p
# y = yn / 10**p
#
# x must be FixedPoint to begin with; if y is not FixedPoint,
# it inherits its precision from x.
#
# Note that this is called a lot, so default-arg tricks are helpful.
# same as yp
# divide x by y, rounding to int via nearest-even
# y must be > 0
# XXX which rounding modes are useful?
# c < 0 <-> leftover < y/2, etc
# crud for parsing strings
# There's an optional sign at the start, and an optional exponent
# at the end.  The exponent has an optional sign and at least one
# digit.  In between, must have either at least one digit followed
# by an optional fraction, or a decimal point followed by at least
# one digit.  Yuck.
# return n, p s.t. float string value == n * 10**p exactly
# our normal wxApp-derived class, as usual
#----------------------------------------------------------------------------
# Name:         fmcustomizeddlg.py
# Purpose:
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, py3-port
#----------------------------------------------------------------------------
# ---------------------------------------------------------------------------- #
# Class OrderedDict
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class FMTitlePanel
# ---------------------------------------------------------------------------- #
# Set the panel size
# Set minimum panel size
# Draw the background
# Draw the text
# ---------------------------------------------------------------------------- #
# Class FMCustomizeDlg
# ---------------------------------------------------------------------------- #
# Create the main book and add some pages into it
# add a separator between the book & the buttons area
# Add all the menu items that are currently visible to the list
# Add the menu to the visible menus map
# Add all hidden menus to the menu bar
# check all visible items
# Add title panel
# Create some options here
#-----------------------------------------------------------
# options page layout
# - Menu Style: Default or 2007 (radio group)
#
# - Default Style Settings:     (static box)
#     + Draw vertical gradient  (check box)
#     + Draw border             (check box)
#     + Drop toolbar shadow     (check box)
#
# - Colour Scheme                   (static box)
#     + Menu bar background colour  (combo button)
#-----------------------------------------------------------
# update the selection
# connect event to the control
# Misc
# update the dialog by sending all possible events to us
# remove the item from the hidden map
# add it to the visible map
# update the menubar
# remove the item from the visible items
# add it to the hidden map
# update the menubar
# Default style
# select new colour scheme
# Overall menu styles
# Menu shadows
# Right side shadow
# Not full bottom shadow
# Full bottom shadow
# Button styles
# Control state
# FlatMenu styles
# Control status
# HitTest constants
# HitTest results
# Pin button states
# Windows Vista Colours
#000000",
#800000",
# c #008000",
#808000",
#000080",
#800080",
#008080",
#808080",
#c0c0c0",
#ff0000",
#00ff00",
#ffff00",
#0000ff",
#ff00ff",
#00ffff",
#ffffff",
#000000",
#800000",
# c #008000",
#808000",
#000080",
#800080",
#008080",
#808080",
#c0c0c0",
#ff0000",
#00ff00",
#ffff00",
#0000ff",
#ff00ff",
#00ffff",
#ffffff",
#ffffff",
#000000",
# c #000000",
#000000",
#000000",
#000000",
#000000",
#000000",
#----------------------------------
# Shadow images
#----------------------------------
# shadow_right.xpm 5x5
# shadow_bottom.xpm 5x5
#FFFFFF",
#008080",
#---------------------------------------------
# Pin images
#---------------------------------------------
#ffffff",
#000000",
# c #808080",
#000000",
#000000",
#000000",
#000000",
#000000",
#####.``",
#####.``",
#ffffff",
#000000",
# c #808080",
#000000",
#000000",
#000000",
#000000",
#000000",
##..`````",
##..`````",
##..`````",
##..`````",
##..`````",
# --------------------------------------------------------------------------- #
# FOLDPANELBAR wxPython IMPLEMENTATION
# Ported From Jorgen Bodde & Julian Smart (Extended Demo) C++ Code By:
#
# Andrea Gavana, @ 23 Mar 2005
# Latest Revision: 16 Jul 2012, 15.00 GMT
#
#
# TODO List
#
# All The C++ TODOs Are Still Alive. I Am Not Able to Read Jorges's Mind
# So I Don't Really Know What Will Be The New Features/Additions He Will
# Make On His Code. At The Moment They Are:
#
# 1. OnPaint Function In CaptionBar Class:
# TODO: Maybe First A Memory Dc Should Draw All, And Then Paint It On The
# Caption. This Way A Flickering Arrow During Resize Is Not Visible.
#
# 2. OnChar Function In CaptionBar Class:
# TODO: This Is Easy To Do But I Don't Have Any Useful Idea On Which Kind
# Of Features To Add. Does Anyone Have An Intelligent Idea?
#
# 3. AddFoldPanelWindow Function In FoldPanelBar Class:
# TODO: Take Old And New Heights, And If Difference, Reposition All The
# Lower Panels. This Is Because The User Can Add New wxWindow Controls
# Somewhere In Between When Other Panels Are Already Present.
# Don't Know What It Means. Probably Is My Poor English...
#
# 4. OnSizePanel Function In FoldPanelBar Class:
# TODO: A Smart Way To Check Wether The Old - New Width Of The
# Panel Changed, If So No Need To Resize The Fold Panel Items
#
#
# DONE List:
#
# 1. Implemented Styles Like FPB_SINGLE_FOLD and FPB_EXCLUSIVE_FOLD
# Thanks To E. A. Tacao For His Nice Suggestions.
#
# 2. Added Some Maquillage To FoldPanelBar: When The Mouse Enters The Icon
# Region, It Is Changed To wx.CURSOR_HAND.
#
#
# For The Original TODO List From Jorgen, Please Refer To:
# http://www.solidsteel.nl/jorg/components/foldpanel/wxFoldPanelBar.php#todo_list
#
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
#----------------------------------------------------------------------
# Collapsed And Expanded Bitmap Images
# Created With img2py.py
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# FOLDPANELBAR Starts Here
#----------------------------------------------------------------------
# CAPTIONBAR STYLES
#
#- CAPTIONBAR_GRADIENT_V: Draws a vertical gradient from top to bottom
#- CAPTIONBAR_GRADIENT_H: Draws a horizontal gradient from left to right
#- CAPTIONBAR_SINGLE: Draws a single filled rectangle to draw the caption
#- CAPTIONBAR_RECTANGLE: Draws a single colour with a rectangle around the caption
#- CAPTIONBAR_FILLED_RECTANGLE: Draws a filled rectangle and a border around it
# pixels of the bmp to be aligned from the right filled with space
# Now supported! Single fold forces
# other panels to close when they are open, and only opens the current panel.
# This will allow the open panel to gain the full size left in the client area
# All panels are stacked to the bottom. When they are expanded again they
# show up at the top
# Now supported! Single fold plus panels
# will be stacked at the bottom
# Orientation Flag
# FoldPanelItem default settings
# ------------------------------------------------------------------------------ #
# class CaptionBarStyle
# ------------------------------------------------------------------------------ #
# ------- CaptionBar Font -------
# ------- First Colour -------
# ------- Second Colour -------
# ------- Caption Text Colour -------
# ------- CaptionStyle  -------
#-----------------------------------#
#        CaptionBarEvent
#-----------------------------------#
# Define Empty CaptionBar Style
# ---------------------------------------------------------------------------- #
# class CaptionBarEvent
# ---------------------------------------------------------------------------- #
# -------------------------------------------------------------------------------- #
# class CaptionBar
# -------------------------------------------------------------------------------- #
# set initial size
# get first colour from style or make it default
# get second colour from style or make it default
# make the second colour slightly darker then the background
# get text colour
# get font colour
# apply caption style
# TODO: Maybe first a memory DC should draw all, and then paint it on
# the caption. This way a flickering arrow during resize is not visible
# draw small icon, either collapsed or expanded
# based on the state of the bar. If we have any bmp's
##        event.Skip()
# send the collapse, expand event to the parent
# TODO: Anything here?
# TODO: The extra FPB_EXTRA_X constants should be adjustable as well
# calculate gradient coefficients
# calculate gradient coefficients
# draw simple rectangle
# single frame, set up internal fill colour
# setup the pen frame
# What I am doing here is simply invalidating the part of the window
# exposed. So when I make a rect with as width the newly exposed part,
# and the x,y of the old window size origin, I don't need a bitmap
# calculation in it, or do I ? The bitmap needs redrawing anyway.
# Leave it like this until I figured it out.
# set rect to redraw as old bitmap area which is entitled to redraw
# adjust rectangle when more is slided so we need to redraw all
# the old stuff but not all (ugly flickering)
# adjust the rect with all the crap to redraw
# invalidate the bitmap area and force a redraw
# ---------------------------------------------------------------------------------- #
# class FoldPanelBar
# ---------------------------------------------------------------------------------- #
# make sure there is any orientation
# create the panel (duh!). This causes a size event, which we are going
# to skip when we are not initialised
# the fold panel area
# create a fold panel item, which is first only the caption.
# the user can now add a panel area which will be folded in
# when pressed.
# Create the FoldPanelBar
# Add a foldpanel to the control. "Test me" is the caption and it is
# initially not collapsed.
# Now add a button to the fold panel. Mind that the button should be
# made child of the FoldPanel and not of the main form.
# Add a separator between the two controls. This is purely a visual
# line that can have a certain colour and also the indents and width
# aligning like a control.
# Now add a text ctrl. Also very easy. Align this on width so that
# when the control gets wider the text control also sizes along.
# TODO: Take old and new height, and if difference, reposition all the lower
# panels this is because the user can add new wxWindow controls somewhere in
# between when other panels are already present.
# skip all stuff when we are not initialised yet
# fold panel itself. If too little space,
# don't show it
# TODO: A smart way to check wether the old - new width of the
# panel changed, if so no need to resize the fold panel items
# act upon the folding or expanding status of the bar
# to expand or collapse the panel(s)
# if collapse to bottom is on, the panels that are not expanded
# should be drawn at the bottom. All panels that are expanded
# are drawn on top. The last expanded panel gets all the extra space
# put all non collapsed panels at the bottom where there is space,
# else put them right behind the expanded ones
# resize them all. No need to reposition
# determine wether the number of panels left
# times the size of their captions is enough
# to be placed in the left over space
# if no room stick them behind the normal ones, else
# at the bottom
# value is the region which is left unpainted
# I will send it back as 'slack' so it does not need to
# be recalculated.
# go reposition
# assumed here that all the panels that are expanded
# are positioned after each other from 0,0 to end.
# --------------------------------------------------------------------------------- #
# class FoldPanelItem
# --------------------------------------------------------------------------------- #
# create the caption bar, in collapsed or expanded state
# make initial size for component, if collapsed, the
# size is determined on the panel height and won't change
# NOTE: Call Resize before Reposition when an item is added, because the new
# size needed will be calculated by Resize. Of course the relative position
# of the controls have to be correct in respect to the caption bar
# tell the upper container we are responsible
# for this event, so it can fold the panel item
# and do a refresh
# prevent unnecessary updates by blocking repaints for a sec
# force this panel to take the width of the parent panel and the y of the
# user or calculated width (which will be recalculated by the contents here)
# resize caption bar
# resize the panel
# go by all the controls and call Layout
# draw all the items that are lines
# grandparent of FoldPanelItem is FoldPanelBar
# default is vertical
# ----------------------------------------------------------------------------------- #
# class FoldWindowItem
# ----------------------------------------------------------------------------------- #
# Window constructor. This initialises the class as a wx.Window Type
# separator constructor. This initialises the class as a separator type
# align by taking full width
# can't have negative width
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# FOURWAYSPLITTER wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 03 Nov 2006
# Latest Revision: 16 Jul 2012, 15.00 GMT
#
#
# TODO List
#
# 1. Any idea?
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Put in some coloured panels...
# our normal wxApp-derived class, as usual
# Tolerance for mouse shape and sizing
# Modes
# FourWaySplitter styles
# FourWaySplitter events
# ---------------------------------------------------------------------------- #
# Class FourWaySplitterEvent
# ---------------------------------------------------------------------------- #
# methods from wx.NotifyEvent
# ---------------------------------------------------------------------------- #
# Class FourWaySplitter
# ---------------------------------------------------------------------------- #
# always turn on tab traversal
# and turn off any border styles
# initialize the base class
# Get top left child
# Get top right child
# Get bottom left child
# Get bottom right child
# something is better than nothing...
# Recompute layout
# Determine split mode
# Move the split intelligently
# Adjust layout
# Button being pressed
# Button being released
# Moving split
# Send a changing event
# Change cursor based on position
# send the event
# the event handler vetoed the change or missing event.Skip()
# or it might have changed the value
# Draw the horizontal split
# if we are not supposed to use a sash then we're done.
# Draw a line to represent the dragging sash, for when not
# doing live updates
# Change horizontal split [fraction*10000]
# Change vertical split [fraction*10000]
# Expand one or all of the four panes
# Put in some coloured panels...
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# GENERICMESSAGEDIALOG wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 07 October 2008
# Latest Revision: 19 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1) ?
#
#
# For all kind of problems, requests of enhancements and bug reports, please
# write to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Our normal wxApp-derived class, as usual
# To use AquaButtons or GradientButtons instead of wx.lib.buttons
# GenericMessageDialog styles
# Avoid 2.9 errors
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# HIG POLICE BULLETIN - destructive buttons need extra padding
# 24 pixels on either side
# extra whitespace between help/negative and cancel/ok buttons
# Cancel or help should be default
# self._buttonCancel.SetDefaultButton()
# Ugh, Mac doesn't really have apply dialogs, so I'll just
# figure the best place is between Cancel and OK
# these buttons have set labels under Mac so we should use them
# Extra space around and at the right
# extra whitespace between help and cancel/ok buttons
# according to HIG, in explicit apply windows the order is:
# [ Help                     Apply   Cancel   OK ]
# Cancel or help should be default
# self._buttonCancel.SetDefaultButton()
# Windows
# center-justify buttons
# GTK+1 and any other platform
# extra whitespace between help and cancel/ok buttons
# Cancel or help should be default
# self._buttonCancel.SetDefaultButton()
# The extended message placeholder
# Labels for the buttons, initially empty meaning that the defaults should
# be used, use GetYes/No/OK/CancelLabel() to access them
# Icons for the buttons, initially empty meaning that the defaults should
# be used, use GetYes/No/OK/CancelBitmap() to access them
# Populate the sizers...
# We want to show the main message in a different font to make it stand
# out if the extended message is used as well. This looks better and is
# more consistent with the native dialogs under MSW and GTK.
# no extended message
# Handles the key down for the buttons...
# Allow cancellation via ESC/Close button except if
# only YES and NO are specified.
# Switch the focus between buttons...
# Set a bold font for the current focused button
# Restore the other buttons...
# Mac Human Interface Guidelines recommend not to use static lines as
# grouping elements
# Remove unwanted flags...
# Customization of the message box buttons
# buttons have standard "Yes"/"No" values, so rephrase the question
# Test if any custom labels were set
# Customization of the message box buttons icons
# Test if any custom icons were set
# To combine the separate main and extended messages in a single string
# Our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# GRADIENTBUTTON wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 07 October 2008
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1) Anything to do?
#
#
# For all kind of problems, requests of enhancements and bug reports, please
# write to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# One button without bitmap
# One button with bitmap
# our normal wxApp-derived class, as usual
# We take the percent way of the colour from colour -. white
#draw main
#draw main
# adjust for bitmap and text to centre
# draw bitmap if available
# extra spacing from bitmap
# adjust for bitmap and text to left
# draw bitmap if available
# extra spacing from bitmap
# --------------------------------------------------------------------------- #
# HYPERLINKSCTRL wxPython IMPLEMENTATION
# Ported From Angelo Mandato C++ Code By:
#
# Andrea Gavana, @ 27 Mar 2005
# Latest Revision: 16 Jul 2012, 15.00 GMT
#
#
# Original Web Site (For The C++ Code):
#
# http://www.spaceblue.com/codedetail.php?CodeID=7
#
#
# Thanks to E. A. Tacao for his nice suggestions and improvements of the code.
#
# For all kind of problems, requests of enhancements and bug reports, please
# write to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# Default Web links:
# Web link with underline rollovers, opens in same window
# our normal wxApp-derived class, as usual
# Import the useful webbrowser module for platform-independent results
# Set no delay time to open the web page
# To show a popup that copies the hyperlinks on the clipboard
#-----------------------------------#
#        HyperLinksEvents
#-----------------------------------#
# wxEVT_HYPERLINK_LEFT: Respond To A Left Mouse Button Event
# wxEVT_HYPERLINK_MIDDLE: Respond To A Middle Mouse Button Event
# wxEVT_HYPERLINK_RIGHT: Respond To A Right Mouse Button Event
# ------------------------------------------------------------
# This class implements the event listener for the hyperlinks
# ------------------------------------------------------------
# -------------------------------------------------
# This is the main HyperLinkCtrl implementation
# it user the StatiText from wx.lib.stattext
# because of its "quasi-dynamic" behavior
# -------------------------------------------------
# Set Tooltip
# Set default properties
# default: True
# default: True, True, True
# default: blue, violet, blue
# default: False
# default: False
# default: False
# default: wx.CURSOR_HAND
# default True
# default True
# default False
# Set control properties and refresh
# Mouse Is Moving On The StaticText
# Set The Hand Cursor On The Link
# Restore The Original Cursor
# Left Button Was Pressed
# Right Button Was Pressed
# Popups A Menu With The "Copy HyperLynks" Feature
# Middle Button Was Pressed
# Default Web links:
# Web link with underline rollovers, opens in same window
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# HYPERTREELIST wxPython IMPLEMENTATION
# Inspired By And Heavily Based On wx.gizmos.TreeListCtrl in Classic.
#
# Andrea Gavana, @ 08 May 2006
# Latest Revision: 30 Jul 2014, 21.00 GMT
#
#
# TODO List
#
# Almost All The Features Of wx.gizmos.TreeListCtrl Are Available, And There Is
# Practically No Limit In What Could Be Added To This Class. The First Things
# That Comes To My Mind Are:
#
# 1. Add Support For 3-State CheckBoxes (Is That Really Useful?).
#
# 2. Try To Implement A More Flicker-Free Background Image In Cases Like
#    Centered Or Stretched Image (Now HyperTreeList Supports Only Tiled
#    Background Images).
#
# 3. Try To Mimic Windows wx.TreeCtrl Expanding/Collapsing behaviour: HyperTreeList
#    Suddenly Expands/Collapses The Nodes On Mouse Click While The Native Control
#    Has Some Kind Of "Smooth" Expanding/Collapsing, Like A Wave. I Don't Even
#    Know Where To Start To Do That.
#
# 4. Speed Up General OnPaint Things? I Have No Idea, Here HyperTreeList Is Quite
#    Fast, But We Should See On Slower Machines.
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# Python 2/3 compatibility helper
# Version Info
# --------------------------------------------------------------------------
# Constants
# --------------------------------------------------------------------------
# pixels; used by OnPaint to redraw only exposed items
# minimum drag wait time in ms
# minimum find wait time in ms
# minimum edit wait time in ms
# --------------------------------------------------------------------------
# Additional HitTest style
# --------------------------------------------------------------------------
# HyperTreeList styles
# for convenience
# draw collapsed/expanded btns
# don't draw lines at all
# connect top-level nodes
# still used by wxTreeListCtrl
# for convenience
# can select multiple items
# TODO: allow extended selection
# what it says
# can edit item labels
# put column border around items
# put border around items
# don't display root node
# highlight full horz space
# only meaningful for checkboxes
# only meaningful for checkboxes
# only meaningful for checkboxes
# to align windows horizontally for items at the same level
# to ellipsize long items when horizontal space is low
# --------------------------------------------------------------------------
# Additional HyperTreeList style to hide the header
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Additional HyperTreeList style for filling the whole background of the
# item columns
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Additional HyperTreeList style autosize the columns based on the widest
# width between column header and cells content
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Windows Vista
# get/set
#-----------------------------------------------------------------------------
#  TreeListHeaderWindow (internal)
#-----------------------------------------------------------------------------
# total width of all columns
# column manipulation
# column information manipulation
# shift the DC origin to match the position of the main window horz
# scrollbar: this allows us to always use logical coords
# account for the horz scrollbar offset
# width and height of the entire header window
# do next column if not shown
# Fill up any unused space to the right of the columns
# but why ????
# we want to work with logical coords
# Refresh the col header so it will be painted with hot tracking
# (if supported by the native renderer.)
# Also refresh the old hot header
# Leaving the window so clear any hot tracking indicator that may be present
# we don't draw the line beyond our window, but we allow dragging it
# there
# erase the line if it was drawn
# draw in the new location
# not dragging
# end of the current column
# find the column where this event occured
# do next if not shown
# near the column border
# inside the column
# click on a column
# the position should be relative to the parent window, not
# this one for compatibility with MSW and common sense: the
# user code doesn't know anything at all about this header
# window, so why should it get positions relative to it?
# ---------------------------------------------------------------------------
# TreeListItem
# ---------------------------------------------------------------------------
# We don't know the height here yet.
# are we holding a window?
# Iterate over copy of self._children as tree.Delete() will modify it.
# We have to destroy the associated window
# Hidden items are never evaluated.
# for a hidden root node, don't evaluate it, but do evaluate children
# reset any previous hit infos
# check for right of all columns (outside)
# evaluate if y-pos is okay
# check for above/below middle
# check for button hit
# check for hit on the check icons
# check for image hit
# check for label hit
# check for indent hit after button and image hit
# considered not belonging to main column
# check for right of label
# considered not belonging to main column
# else check for each column except main
# no special flag or column found
# if children not expanded, return no item
# in any case evaluate children
# not found
# We have to bind the wx.EVT_SET_FOCUS for the associated window
# No other solution to handle the focus changing from an item in
# HyperTreeList and the window associated to an item
# Do better strategies exist?
## Hide the window since the position isn't correct yet. It will
## be shown and positioned when the item is painted.
# The window is enabled only if the item is enabled
# If the window is associated to an item that currently is selected
# (has focus) we don't kill the focus. Otherwise we do it.
#-----------------------------------------------------------------------------
# EditTextCtrl (internal)
#-----------------------------------------------------------------------------
# do next column if not shown
# FIXME: what are all these hardcoded 4, 8 and 11s really?
# nothing changed, always accept
# when an item remains unchanged, the owner
# needs to be notified that the user decided
# not to change the tree item label, and that
# the edit has been cancelled
# We must let the native control handle focus, too, otherwise
# it could have problems with the cursor (e.g., in wxGTK).
# Notify the owner about the changes
# Even if vetoed, close the control (consistent with MSW)
# auto-grow the textctrl:
# ---------------------------------------------------------------------------
# TreeListMainWindow implementation
# ---------------------------------------------------------------------------
# no current column
# TextCtrl initial settings for editable items
# Sets the focus to ourselves: this is useful if you have items
# with associated widgets.
#-----------------------------------------------------------------------------
# functions to work with tree items
#-----------------------------------------------------------------------------
# Reparent the window to ourselves
# Recalculate tree during idle time.
# ----------------------------------------------------------------------------
# navigation
# ----------------------------------------------------------------------------
# An item is only visible if it's not a descendant of a collapsed item
# there are no more of them
# ----------------------------------------------------------------------------
# operations
# ----------------------------------------------------------------------------
# do this first so stuff below doesn't cause flicker
# should we give a warning here?
# do this first so stuff below doesn't cause flicker
# do this first so stuff below doesn't cause flicker
# if root is hidden, make sure we can navigate
# into children
# do this first so stuff below doesn't cause flicker
# can't delete the item being edited, cancel editing it first
# don't stay with invalid self._shiftItem or we will crash in the next call to OnChar()
# self._shiftItem is a descendant of the item being deleted
# remove by value
# Remove the item with window
# Don't leave edit or selection on a child which is about to disappear
# Handles the eventual window associated to the item
# We have to refresh the item line
# ensure that the position of the item it calculated in any case
# now scroll to the item
# Calculate size of entire tree (not necessary anymore?)
# one more scrollbar unit + 2 pixels
## Note: The Scroll() method updates all child window positions
##       while the SetScrollBars() does not (on most platforms).
# going down, item should appear at top
##            self.SetScrollbars(xUnit, yUnit, (xUnit and [x//xUnit] or [0])[0], (yUnit and [y//yUnit] or [0])[0],
##                               x_pos, (yUnit and [item_y//yUnit] or [0])[0])
# going up, item should appear at bottom
##            self.SetScrollbars(xUnit, yUnit, (xUnit and [x//xUnit] or [0])[0], (yUnit and [y//yUnit] or [0])[0],
##                               x_pos, (yUnit and [(item_y+self.GetLineHeight(item)-client_h)//yUnit] or [0])[0])
# ----------------------------------------------------------------------------
# helpers
# ----------------------------------------------------------------------------
# one more scrollbar unit + 2 pixels
##        clipper = wx.DCClipper(dc, 0, item.GetY(), total_w, total_h) # only within line
# determine background and show it
# Horizontal
# Vertical
# On GTK+ 2, drawing a 'normal' background is wrong for themes that
# don't allow backgrounds to be customized. Not drawing the background,
# except for custom item backgrounds, works for both kinds of theme.
# We have to colour the item background for each column separately
# So it is better to move this functionality in the subsequent for loop.
# only within column
# honor text alignment
# don't draw rect outline if we already have the background colour
# Horizontal
# Vertical
# On GTK+ 2, drawing a 'normal' background is wrong for themes that
# don't allow backgrounds to be customized. Not drawing the background,
# except for custom item backgrounds, works for both kinds of theme.
# vertical lines between columns
# should the item show a button?
# Use white on Macs, but only on the primary column if
# TR_FULL_ROW_HIGHLIGHT is NOT turned on.
# Force window visible after any position changes were made.
# restore normal font
# Now y stands for the top of the item, whereas it used to stand for middle !
# Handle hide root (only level 0)
# end after expanding root
# calculate position of vertical lines
# start of column
# space for lines at root
# half button space
# indent but not level 1
# indent according to level
# set position of vertical line
# horizontal lines between rows?
# fill background below twist buttons
# draw item
# restore DC objects
# clip to the column width
##            clipper = wx.DCClipper(dc, x_maincol, y_top, clip_width, 10000)
# connection lines
# draw the horizontal line here
# should the item show a button?
# draw the image button here
# draw the twisty button here
# if (HasAGWFlag(wxTR_HAS_BUTTONS))
# if the background colour is white, choose a
# contrasting colour for the lines
# restore DC objects
# process lower levels
# ----------------------------------------------------------------------------
# wxWindows callbacks
# ----------------------------------------------------------------------------
# do not paint the background separately in buffered mode.
# paint the background
# calculate button size
# calculate image size
# calculate indent size
# set default values
# calculate column start and paint
# ensure that the position of the item it calculated in any case
# TODO if the validator fails this causes a crash
# let owner know that the edit was cancelled
# we process left mouse up event (enables in-place edit), right down
# (pass to the user code), left dbl click (activate item) and
# dragging/moving events for items drag-and-drop
# set focus if window clicked
# determine event
# unhighlight old item
# Determines what item we are hovering over and need a tooltip for
# We do not want a tooltip if we are dragging, or if the edit timer is running
# Ask the tree control what tooltip (if any) should be shown
# we only process dragging here
# Create the custom draw image from the icons and the text of the item
# unhighlight the previous drop target
# Here I am trying to avoid ugly repainting problems... hope it works
# nothing to do, already done
# we need an item to dragging
# determine drag start
# minimum drag 3 pixel
# we're going to drag
# send drag start event
# the dragged item
# dragging must be explicit allowed!
# we're going to drag this item
# in a single selection control, hide the selection temporarily
# any other event but not event.Dragging()
# end dragging
#            if self.HasCapture():
#                self.ReleaseMouse()
# send drag end event event
# the item the drag is started
# just in case dragging is initiated
# end dragging
# we process only the messages which happen on tree items
# remember item at shift down
# the item clicked
# the column clicked
# only toggle the item for a single click, double click on
# the button doesn't do anything (it toggles the item twice)
# don't select the item if the button was clicked
# determine the selection if not done by left down
# make the new item the current item
# only toggle the item for a single click, double click on
# the button doesn't do anything (it toggles the item twice)
# don't select the item if the button was clicked
# determine the selection if the current item is not selected
# make the new item the current item
# For some reason, Windows isn't recognizing a left double-click,
# so we need to simulate it here.  Allow 200 milliseconds for now.
# double clicking should not start editing the item label
# send activate event first
# the item clicked
# the column clicked
# if the user code didn't process the activate event,
# handle it ourselves by toggling the item when it is
# double clicked
# any other event skip just in case
# Update the header window after this scroll event has fully finished
# processing, and the scoll action is complete.
# Hidden items have a height of 0.
# restore normal font
# at least 2 pixels
# otherwise 10% extra spacing
# calculate position of vertical lines
# start of column
# space for lines at root
# half button space
# indent but not level 1
# indent according to level
# a hidden root is not evaluated, but its children are always
# a hidden root is not evaluated, but its
# children are always calculated
# recurse
# set its position
# hidden items don't get a height (height=0).
# move this window, if necessary.
# we don't need to calculate collapsed branches
# recurse
# start recursion
# determine item width
# calculate width
# count indent level
# Not shown on screen
# get root if on item
# add root width
# check the children of this item
# next sibling
# Prevent zero column width
# Recalculate positions and hide child windows.
# Refresh the tree.
#----------------------------------------------------------------------------
# TreeListCtrl - the multicolumn tree control
#----------------------------------------------------------------------------
# only update if changed
# Search TreeListHeaderWindow.OnPaint to understand this:
# Main column cannot be hidden
# something is better than nothing...
# but it should be specified values! FIXME
# do the comparison here, and not delegate to self._main_win, in order
# to let the user override it
# Create methods that delegate to self._main_win. This approach allows for
# overriding these methods in possible subclasses of HyperTreeList
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------- #
# INFOBAR Control wxPython IMPLEMENTATION
# Inspired By And Heavily Based On wxInfoBar.
#
# Python Code By:
#
# Andrea Gavana, @ 12 March 2012
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List/Caveats
#
# 1. ?
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# ... Add other frame controls to the sizer ...
# our normal wxApp-derived class, as usual
# Version Info
# Start the imports
# These two are needed only to check if the InfoBar parent
# is managed by PyAUI or wx.aui, in which case the handling
# of the showing/dismissing is done a bit differently
# These are for the AutoWrapStaticText class
# Get the translation function
# Determine the placement of the bar from its position in the containing
# sizer
# This dictionary is here because wx.ArtProvider.GetMessageBoxIconId(flags)
# doesn't do what I think it should do in wxPython
# ----------------------------------------------------------------------------
# Local helpers
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# Auto-wrapping static text class
# ----------------------------------------------------------------------------
# ============================================================================
# Implementation
# ============================================================================
# calling Hide() before Create() ensures that we're created initially
# hidden
# use special, easy to notice, colours
# create the controls: icon,text and the button to dismiss the
# message.
# the icon is not shown unless it's assigned a valid bitmap
# THIS CRASHES PYTHON ALTOGETHER!!
# sizeBmp = wx.ArtProvider.GetSizeHint(wx.ART_BUTTON)
# center the text inside the sizer with an icon to the left of it and a
# button at the very right
#
# NB: AddButton() relies on the button being the last control in the sizer
#     and being preceded by a spacer
# use default effect duration
# check that we're not called before Create()
# re-layout the parent first so that the window expands into an already
# unoccupied by the other controls area: for this we need to change our
# internal visibility flag to force Layout() to take us into account(an
# alternative solution to this hack would be to temporarily set
# wx.RESERVE_SPACE_EVEN_IF_HIDDEN flag but it's not really better)
# just change the internal flag indicating that the window is visible,
# without really showing it
# adjust the parent layout to account for us
# reset the flag back before really showing the window or it wouldn't be
# shown at all because it would believe itself already visible
# finally do really show the window.
# first update the controls
# do show an icon
# notice the use of EscapeMnemonics() to ensure that "&" come through
# correctly
# then show this entire window if not done yet
# user-added buttons replace the standard close button so remove it if we
# hadn't done it yet
# Add the bitmap to the button
# default is 4 but that seems too big to me.
# smaller buttons look better in the(narrow)info bar under OS X
# iterate over the sizer items in reverse order to find the last added
# button with this id(ids of all buttons should be unique anyhow but if
# they are repeated removing the last added one probably makes more sense)
# if we reached the spacer separating the buttons from the text
# preceding them without finding our button,it must mean it's not
# there at all
# check if we found our button
# check if there are any custom buttons left
# if the last item is the spacer,none are left so restore the
# standard close button
# ... Add other frame controls to the sizer ...
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# KNOBCTRL wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 03 Nov 2006
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1. Any idea?
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# Flag to use double buffering (recommendeded = 1)
# Events
# ---------------------------------------------------------------------------- #
# Class KnobCtrlEvent
# ---------------------------------------------------------------------------- #
#----------------------------------------------------------------------
# BUFFERENDWINDOW Class
# This Class Has Been Taken From The wxPython Wiki, And Slightly
# Adapted To Fill My Needs. See:
#
# http://wiki.wxpython.org/index.cgi/DoubleBufferedDrawing
#
# For More Info About DC And Double Buffered Drawing.
#----------------------------------------------------------------------
# OnSize called to make sure the buffer is initialized.
# This might result in OnSize getting called twice on some
# platforms at initialization, but little harm done.
# All that is needed here is to draw the buffer to screen
# The Buffer init is done here, to make sure the buffer is always
# the same size as the Window
# Make new off screen bitmap: this bitmap will always have the
# current drawing in it, so it can be used to save the image to
# a file, or whatever.
# This seems required on MacOS, it doesn't like wx.Bitmap with
# size = (0, 0)
# Thanks to Gerard Grazzini
# update the buffer
# update the screen
# ---------------------------------------------------------------------------- #
# Class KnobCtrl
# ---------------------------------------------------------------------------- #
# draw first and last tags bigger
# Get RGB components of specified colour
# Calculate max. allowed real offset
# the caller didn't use event.Skip()
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------- #
# LABELBOOK And FLATIMAGEBOOK Widgets wxPython IMPLEMENTATION
#
# Original C++ Code From Eran, embedded in the FlatMenu source code
#
#
# License: wxWidgets license
#
#
# Python Code By:
#
# Andrea Gavana, @ 03 Nov 2006
# Latest Revision: 22 Jan 2013, 21.00 GMT
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# TODO:
# LabelBook - Support IMB_SHOW_ONLY_IMAGES
# LabelBook - An option to only draw the border
#             between the controls and the pages so the background
#             colour can flow into the window background
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
#
# End Of Comments
# --------------------------------------------------------------------------- #
# Possible values for Tab placement are INB_TOP, INB_BOTTOM, INB_RIGHT, INB_LEFT
# our normal wxApp-derived class, as usual
#----------------------------------------------------------------------
# Beginning Of IMAGENOTEBOOK wxPython Code
#----------------------------------------------------------------------
# Check for the new method in 2.7 (not present in 2.6.3.3)
# FlatImageBook and LabelBook styles
#-----------------------------------#
#        ImageNotebookEvent
#-----------------------------------#
# ---------------------------------------------------------------------------- #
# Class ImageNotebookEvent
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class ImageInfo
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class ImageContainerBase
# ---------------------------------------------------------------------------- #
# Adding a page - enabled by default
# Remove the page from the vector
# The delete page was the last first on the array,
# but the book still has more pages, so we set the
# active page to be the first one (0)
# Refresh the tabs
# Erase the page container drawings
# Call on paint
# For Web Hover style, we test the TextRect
# Check if we are on a the sash border
# Support for collapse/expand
# Incase panel is collapsed, there is nothing
# to check
# Make sure the pin button status is NONE
# incase we were in pin button style
# Restore cursor
# Save the current tab area width
# Restore the tab area size
# Check to see if we are in the pin button rect
# Allow hovering unless over current tab or tab is disabled
# Change the cursor to be Hand if we have the Web hover style set
# Restore the cursor if we are not currently hovering the sash
# Set the bitmap according to the button status
# Draw upper and left border with grey colour
# Draw upper and left border with grey colour
# Set the masking
# Draw the new bitmap
# Save the pin rect
# ---------------------------------------------------------------------------- #
# Class ImageContainer
# ---------------------------------------------------------------------------- #
# Background
# Draw the pin button
# We reserver 20 pixels for the 'pin' button
# The drawing of the images start position. This is
# depenedent of the style, especially when Pin button
# style is requested
# Pad text with 2 pixels on the left and right
# incase the 'fit button' style is applied, we set the rectangle width to the
# text width plus padding
# Incase the style IS applied, but the style is either LEFT or RIGHT
# we ignore it
# Default values for the surrounding rectangle
# around a button
# To avoid the rectangle to 'touch' the borders
# In case the style requires non-fixed button (fit to text)
# recalc the rectangle width
# Make the width an even number
# Check that we have enough space to draw the button
# If Pin button is used, consider its space as well (applicable for top/botton style)
# since in the left/right, its size is already considered in 'pos'
# Calculate the button rectangle
# Check if we need to draw a rectangle around the button
# Set the colours
# Fix the surrounding of the rect if border is set
# Set the colours
# Fix the surrounding of the rect if border is set
# Incase user set both flags:
# INB_SHOW_ONLY_TEXT and INB_SHOW_ONLY_IMAGES
# We override them to display both
# Draw the caption and text
# Draw the text
# Check if the text can fit the size of the rectangle,
# if not truncate it
# Update the length of the text
# Update the page info
# Update all buttons that can not fit into the screen as non-visible
# Draw the pin button
# ---------------------------------------------------------------------------- #
# Class LabelContainer
# ---------------------------------------------------------------------------- #
# Set the pen & brush
# In case user set both flags, we override them to display both
# INB_SHOW_ONLY_TEXT and INB_SHOW_ONLY_IMAGES
# Draw gradient in the background area
# Draw the border and background
# Draw border
# Just draw the border with transparent brush
# Draw the pin button
# We reserve 20 pixels for the pin button
# Default values for the surrounding rectangle
# around a button
# Check that we have enough space to draw the button
# Calculate the button rectangle
# Update all buttons that can not fit into the screen as non-visible
#self._skin = bmp
# Sash was being dragged?
# Remove sash
# Restore cursor
# Resize our size
# Dont allow width to be lower than that
# Update the tab new area width
# Remove old sash
# Progress sash, and redraw it
# Sash is not being dragged
# Change cursor to EW cursor
# We are over the sash
# first time, begin drawing sash
# Change mouse cursor
# If Sash is being dragged, ignore this event
# The hovered tab with default border
# We draw CCW
# Right images
# Upper line
# Right line (white)
# Bottom diagonal - we change pen
# Bottom line
# Left images
# Upper line white
# Left line
# Bottom diagonal, we change the pen
# Bottom line
# Redraw the text with underlined font
# Initialize map colours
# Don't allow bright colour one over the other
# First we define the rectangle for the text
#-------------------------------------------------------------------------
# Label layout:
# [ nPadding | Image | nPadding | Text | nPadding ]
#-------------------------------------------------------------------------
# Text bounding rectangle
# Truncate text if needed
# Image bounding rectangle
# Draw bounding rectangle
# First we colour the tab
# Draw the text & bitmap
# Drop shadow
# Always drop shadow for this style
# Draw hover effect
# Update the page information bout position and size
# ---------------------------------------------------------------------------- #
# Class FlatBookBase
# ---------------------------------------------------------------------------- #
# Check that we are not in initialization process
# Detach the windows attached to the sizer
# Add the tab container and the separator
# Attach the windows back to the sizer to the sizer
# Fire a closing event
# The event handler allows it?
# Delete the requested page
# If the page is the current window, remove it from the sizer
# as well
# Remove it from the array as well
# Now we can destroy it in wxWidgets use Destroy instead of delete
# Fire a closed event
# Fire a closing event
# The event handler allows it?
# Remove the requested page
# If the page is the current window, remove it from the sizer
# as well
# Remove it from the array as well
# Fire a closed event
#TODO this is 6*4 6 is nPadding from drawlabel
# remove old selection
# Generate an event that indicates that an image is about to be selected
# The event handler allows it?
# Now we can update the new selection
# Refresh calls the OnPaint of this class
# Generate an event that indicates that an image was selected
# Force change
# Replace the window in the sizer
# Check if a new selection was made
# Remove the window from the main sizer
# change pages
# ---------------------------------------------------------------------------- #
# Class FlatImageBook
# ---------------------------------------------------------------------------- #
# Add the tab container to the sizer
# ---------------------------------------------------------------------------- #
# Class LabelBook
# ---------------------------------------------------------------------------- #
# Label book specific initialization
# Add the tab container to the sizer
# Initialize the colours maps
# --------------------------------------------------------------------------------- #
# MULTIDIRDIALOG wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 07 October 2008
# Latest Revision: 19 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1) Implement an meaningful action for the "Make New Folder" button, but this
#    requires a strong integration with Explorer, at least on Windows;
#
# 2) Be more user-friendly with special folders as the Desktop, My Documents etc...
#
#
# For all kind of problems, requests of enhancements and bug reports, please
# write to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Our normal wxApp-derived class, as usual
# MultiDirDialog styles
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Setup the layout and frame properties
# Add images to list. You need to keep the same order in order for
# this to work!
# closed folder:
# open folder:
# root of filesystem (linux):
# drive letter (windows):
# cdrom drive:
# removable drive on win98:
# removable drive (floppy, flash, etc):
# assign image list:
# Set the wx.GenericDirCtrl default path
# Add the main wx.GenericDirCtrl
# Add the fancy buttons
# Layout the dialog
# Retrieve the tree control and the selections the
# user has made
# Loop recursively over the selected folder and its sub-direcories
# Recurse on it.
# Get the item parent
# Not the root item, recurse again on it
# Build a couple of fancy buttons
# Close the dialog, no action
# Close the dialog, the user wants to continue
# We are being destroyed...
# We are really being destroyed...
# Bad item?
# Set the item name into the text control
# Our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# PEAKMETERCTRL wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 07 October 2008
# Latest Revision: 31 Jul 2014, 21.00 GMT
#
#
# TODO List
#
# 1) Possibly some nicer drawing of bands and leds (using GraphicsContext).
#
#
# For all kind of problems, requests of enhancements and bug reports, please
# write to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Initialize Peak Meter control 1
# Initialize Peak Meter control 2
# Layout the two PeakMeterCtrl
# 2 fps
# 18 fps
# 20 fps
# Generate 15 random number and set them as data for the meter
# our normal wxApp-derived class, as usual
# Horizontal or vertical PeakMeterCtrl
# Some useful constants...
# 10% of Max Range (Auto Decrease)
# Increase Grid colour based on Background colour
# Increase Falloff colour based on Background
# Initializes all data
# Min Range 0-60
# Med Range 60-80
# Max Range 80-100
# clear vector data
# Initialize vector
# Reset vector
# Stop timer if Animation is active
# Auto-restart
# Stop timer if no more data
# something is better than nothing...
# This is intentionally empty, to reduce flicker
# Draw band from top
# Find colour based on range value
# Draw falloff effect (Seems to be working now.)
# Move to Next Vertical band
# Draw band from bottom
# Find colour based on range value
# Draw grid line (level) bar
# Draw falloff effect
# Move to Next Horizontal band
# Draw band from top?
# Find colour based on range value
# Draw grid line (level) bar
# Draw falloff effect
# Move to Next Horizontal band
# Initialize Peak Meter control 1
# Initialize Peak Meter control 2
# Layout the two PeakMeterCtrl
# 2 fps
# 18 fps
# 20 fps
# Generate 15 random number and set them as data for the meter
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------- #
# PIECTRL Control wxPython IMPLEMENTATION
# Python Code By:
#
# Andrea Gavana, @ 31 Oct 2005
# Latest Revision: 16 Jul 2012, 15.00 GMT
#
#
# TODO List/Caveats
#
# 1. Maybe Integrate The Very Nice PyOpenGL Implementation Of A PieChart Coded
#    By Will McGugan?
#
# 2. Not Tested On Other Platforms, Only On Windows 2000/XP, With Python 2.4.1
#    And wxPython 2.6.1.0
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# create a simple PieCtrl with 3 sectors
# create a ProgressPie
# our normal wxApp-derived class, as usual
#----------------------------------------------------------------------
# Beginning Of PIECTRL wxPython Code
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Class PieCtrlLegend
# This Class Handles The Legend For The Classic PieCtrl.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Class PiePart
# This Class Handles The Legend Segments Properties, Such As Value,
# Colour And Label.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Class PieCtrl
# This Is The Main PieCtrl Implementation, Used Also By ProgressPie.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Class ProgressPie
# This Is The Main ProgressPie Implementation. Is Is A Subclassing Of
# PieCtrl, With 2 Sectors.
#----------------------------------------------------------------------
# create a simple PieCtrl with 3 sectors
# create a ProgressPie
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------- #
# PYBUSYINFO Control wxPython IMPLEMENTATION
# Inspired By And Heavily Based On wxBusyInfo.
#
# Python Code By:
#
# Andrea Gavana, @ 10 December 2009
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List/Caveats
#
# 1. ?
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# Version Info
# need to size the panel correctly first so that text.Centre() works
# Bind the events to draw ourselves
# Create a non-rectangular region to set the frame shape
# Store the non-rectangular region
# Add a custom bitmap at the top (if any)
# GTK only
# Fill the background with a gradient shading
# Draw the label
# Draw the message
# Draw the top title
# This is empty on purpose, to avoid flickering
# -------------------------------------------------------------------- #
# The actual PyBusyInfo implementation
# -------------------------------------------------------------------- #
# we must have this flag to be in front of our parent if it has it
# Added for the screenshot-taking tool
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# PYCOLLAPSIBLEPANE wxPython IMPLEMENTATION
# Generic Implementation Based On wx.CollapsiblePane.
#
# Andrea Gavana, @ 09 Aug 2007
# Latest Revision: 19 Dec 2012, 21.00 GMT
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# inject into the wx namespace with the other CP_* constants
# PyCollapsiblePane events
#-----------------------------------------------------------------------------
# 2.9 deprecates SetSpacer, so we'll use AssignSpacer and monkey-patch 2.8 so
# it works there too
#-----------------------------------------------------------------------------
# GTKExpander widget
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# PyCollapsiblePane
#-----------------------------------------------------------------------------
# Use a StaticBox instead of a StaticLine, and the button's
# position will be handled separately so don't put it in the sizer
# spacer, size will be reset later
# spacer, size will be reset later
# This hack is needed on Windows because wxMSW clears the
# CLIP_SIBLINGS style from all sibling controls that overlap the
# static box, so the box ends up overdrawing the button since we
# have the button overlapping the box. This hack will ensure that
# the button is refreshed after every time that the box is drawn.
# This adds a little flicker but it is not too bad compared to
# others.
# create children and lay them out using a wx.BoxSizer
# (so that we automatically get RTL features)
# put the static line above the button
# arrange the static line and the button horizontally
# the user asked to explicitely handle the resizing itself...
# NB: the following block of code has been accurately designed to
#     as much flicker-free as possible be careful when modifying it!
# NB: don't Layout() the 'top' window as its size has not been correctly
#     updated yet and we don't want to do an initial Layout() with the old
#     size immediately followed by a SetClientSize/Fit call for the new
#     size that would provoke flickering!
# FIXME: the SetSizeHints() call would be required also for GTK+ for
#        the expanded.collapsed transition. Unfortunately if we
#        enable this line, then the GTK+ top window won't always be
#        resized by the SetClientSize() call below! As a side effect
#        of this dirty fix, the minimal size for the pane window is
#        not set in GTK+ and the user can hide it shrinking the "top"
#        window...
# we shouldn't attempt to resize a maximized window, whatever happens
# expanded . collapsed transition
# we have just set the size hints...
# use SetClientSize() and not SetSize() otherwise the size for
# e.g. a wxFrame with a menubar wouldn't be correctly set
# collapsed . expanded transition
# force our parent to "fit", i.e. expand so that it can honour
# our best size
# optimization
# update our state
# update button label
# NB: this must be done after updating our "state"
# In this case the button is not in the sizer, and the static box
# is not shown when not expanded, so use the size of the button as
# our stating point. But first we'll make sure that it is it's
# best size.
# Reset the spacer sizes to be based on the button size
# do not use GetSize() but rather GetMinSize() since it calculates
# the required space of the sizer
# when expanded, we need more space
# we need to complete the creation first!
# move & resize the button and the static line
# move & resize the container window
# this is very important to make the pane window layout show correctly
#-----------------------------------------------------------------------------
# PyCollapsiblePane - event handlers
#-----------------------------------------------------------------------------
# this change was generated by the user - send the event
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# PYGAUGE wxPython IMPLEMENTATION
#
# Mark Reed, @ 28 Jul 2010
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
# TODO List
#
# 1. Indeterminate mode (see wx.Gauge)
# 2. Vertical bar
# 3. Bitmap support (bar, background)
# 4. UpdateFunction - Pass a function to PyGauge which will be called every X
#    milliseconds and the value will be updated to the returned value.
# 5. Currently the full gradient is drawn from 0 to value. Perhaps the gradient
#    should be drawn from 0 to range and clipped at 0 to value.
# 6. Add a label?
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To The:
#
# wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
#format-specification-mini-language.
# Will not draw anything unless this is True
# This is to test if format string is valid. If not, it will be replaced with default one.
# Here formatString is either valid formatting string, or None in case of error or None passed
#print(self._update_)
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# PYPROGRESS wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 03 Nov 2006
# Latest Revision: 19 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1. Do we support all the styles of wx.ProgressDialog in indeterminated mode?
#
# 2. Other ideas?
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Our normal wxApp-derived class, as usual
# Some constants, taken straight from wx.ProgressDialog
# Margins between gauge and text/button
# PyProgress styles
# ---------------------------------------------------------------------------- #
# Class ProgressGauge
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class PyProgress
# ---------------------------------------------------------------------------- #
# we may disappear at any moment, let the others know about it
# we have to remove the "Close" button from the title bar then as it is
# confusing to have it - it doesn't work anyhow
# FIXME: should probably have a (extended?) window style for this
# create the estimated/remaining/total time zones if requested
# set it to the current time
# Windows dialogs usually have buttons in the lower right corner
# try to make the dialog not square but rectangular of reasonable width
# this one can be initialized even if the others are unknown for now
# NB: do it after calling Layout() to keep the labels correctly aligned
# This is causing the unittests to hang, investigate it later.
#if not wx.EventLoopBase.GetActive():
#    self.evtloop = wx.GetApp().GetTraits().CreateEventLoop()
#    wx.EventLoopBase.SetActive(self.evtloop)
# label and time centered in one row
# label and time to the right in one row
# ----------------------------------------------------------------------------
# wxProgressDialog operations
# ----------------------------------------------------------------------------
# also provide the finishing message if the application didn't
# reenable other windows before hiding this one because otherwise
# Windows wouldn't give the focus back to the window which had
# been previously focused because it would still be disabled
# we have to yield because not only we want to update the display but
# also to process the clicks on the cancel and skip buttons
# reenable other windows before hiding this one because otherwise
# Windows wouldn't give the focus back to the window which had
# been previously focused because it would still be disabled
# ----------------------------------------------------------------------------
# event handlers
# ----------------------------------------------------------------------------
# this means that the count down is already finished and we're being
# shown as a modal dialog - so just let the default handler do the job
# request to cancel was received, the next time Update() is called we
# will handle it
# update the buttons state immediately so that the user knows that the
# request has been noticed
# save the time when the dialog was stopped
# can't close this dialog
# let the default handler close the window as we already terminated
# next Update() will notice it
# Our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# RULERCTRL wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 03 Nov 2006
# Latest Revision: 19 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1. Any idea?
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# Try to import PIL, if possible.
# This is used only to change the colour for an indicator arrow.
# Python 2/3 compatibility helper
# Built-in formats
# Events
# Some accessor functions
#----------------------------------------------------------------------
# ---------------------------------------------------------------------------- #
# Class RulerCtrlEvent
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class Label
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class Indicator
# ---------------------------------------------------------------------------- #
# The Palette Can Be Applied Only To "L" And "P" Images, Not "RGBA"
# Apply The New Palette
# Convert The Image Back To RGBA
# ---------------------------------------------------------------------------- #
# Class RulerCtrl
# ---------------------------------------------------------------------------- #
#else:
#    self._currentIndicator = None
# only x moves
# Specify the name of the units (like "dB") if you
# want numbers like "1.6" formatted as "1.6 dB".
# For a horizontal ruler,
# minVal is the value in the center of pixel "left",
# maxVal is the value in the center of pixel "right".
# If this is True, the edges of the ruler will always
# receive a label.  If not, the nearest round number is
# labeled (which may or may not be the edge).
# If this is True, the orientation of the tick marks
# is reversed from the default eg. above the line
# instead of below
# Given the dimensions of the ruler, the range of values it
# has to display, and the format (i.e. Int, Real, Time),
# figure out how many units are in one Minor tick, and
# in one Major tick.
#
# The goal is to always put tick marks on nice round numbers
# that are easy for humans to grok.  This is the most tricky
# with time.
# As a heuristic, we want at least 16 pixels
# between each minor tick
# 1 sec
# 5 sec
# 1 min
# 5 min
# 10 min
# 15 min
# 30 min
# 1 hr
# 6 hrs
# 1 day
# 1 week
# Otherwise fall through to RealFormat
# (fractions of a second should be dealt with
# the same way as for RealFormat)
# Given a value, turn it into a string according
# to the current ruler format.  The number of digits of
# accuracy depends on the resolution of the ruler,
# i.e. how far zoomed in or out you are.
# don't display
# don't display
# See if any of the pixels we need to draw this
# label is already covered
# If not, position the label and give it text
# And mark these pixels, plus some surrounding
# ones (the spacing between labels), as covered
# This gets called when something has been changed
# (i.e. we've been invalidated).  Recompute all
# tick positions.
# Units per pixel
# Left and Right Edges
# Zero (if it's in the middle somewhere)
# Major ticks
# Minor ticks
# Left and Right Edges
# log case
# Left and Right Edges
# Major ticks are the decades
# Minor ticks are multiples of decades
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------- #
# SHAPEDBUTTON Control wxPython IMPLEMENTATION
# Python Code By:
#
# Andrea Gavana, @ 18 Oct 2005
# Latest Revision: 16 Jul 2012, 15.00 GMT
#
#
# TODO List/Caveats
#
# 1. Elliptic Buttons May Be Handled Better, In My Opinion. They Look Nice
#    But They Are Somewhat More Difficult To Handle When Using Sizers.
#    This Is Probably Due To Some Lack In My Implementation;
#
# 2. I Am Unable To Translate The 2 Files "UpButton.png" And "DownButton.png"
#    Using "img2py" (Under wx.tools) Or With PIL In Order To Embed Them In
#    A Python File. Every Translation I Made, Did Not Preserve The Alpha
#    Channel So I Ended Up With Round Buttons Inside Black Squares. Does
#    Anyone Have A Suggestion Here?
#
# 3. Creating *A Lot* Of ShapedButtons May Require Some Time. In The Demo,
#    I Create 23 Buttons In About 0.4 Seconds On Windows XP, 3 GHz 1 GB RAM.
#
# 4. Creating Buttons With Size Greater Than wx.Size(200, 200) May Display
#    Buttons With Clearly Evident Pixel Edges. This Is Due To The Size Of The
#    Image Files I Load During Initialization. If This Is Not Satisfactory,
#    Please Let Me Know And I Will Upload Bigger Files.
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# Create 2 bitmaps for the button
# our normal wxApp-derived class, as usual
#----------------------------------------------------------------------
# Beginning Of SHAPEDBUTTON wxPython Code
#----------------------------------------------------------------------
# First Check If PIL Is Installed Properly
# Import Some Stuff For The Annoying Ellipsis... ;-)
#-----------------------------------------------------------------------------
# PATH & FILE FILLING FUNCTION (OS INDEPENDENT)
# This Is Required To Load The Pressed And Non-Pressed Images From The
# "images" Directory.
#-----------------------------------------------------------------------------
# HACK: on Linux, a leading / gets lost...
#-----------------------------------------------------------------------------
#----------------------------------------------------------------------
# Class SButtonEvent
# Code Stolen From wx.lib.buttons. This Class Handles All The Button
# And ToggleButton Events.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# SBUTTON Class
# This Is The Main Class Implementation. See __init__() Method For
# Details. All The Other Button Types Depend On This Class For Event
# Handling And Property Settings.
#----------------------------------------------------------------------
# Initialize Button Properties
# Event Binding
# In This Case The Button Is A Circle
# In This Case The Button Is An Ellipse... Some Math To Do
# This Is An Ellipse With Main Axis Aligned With X Axis
# This Is An Ellipse With Main Axis Aligned With Y Axis
# Draw Finally The Bitmap
# Store Bitmap Position And Size To Draw An Elliptical Focus Indicator
# labeldelta Is Used To Give The Impression Of A "3D" Click
# Check If There Is Any Rotation Chosen By The User
# Ah, That Is A Round Button
# This Is An Ellipse
# Use A Double Buffered DC (Good Speed Up)
# The DC Background *Must* Be The Same As The Parent Background Colour,
# In Order To Hide The Fact That Our "Shaped" Button Is Still Constructed
# Over A Rectangular Window
# This Is A Circle
# This Is An Ellipse
#----------------------------------------------------------------------
# SBITMAPBUTTON Class
# It Is Derived From SButton, And It Is A Class Useful To Draw A
# ShapedButton With An Image In The Middle. The Button Can Have 4
# Different Bitmaps Assigned To Its Different States (Pressed, Non
# Pressed, With Focus, Disabled).
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# SBITMAPTEXTBUTTON Class
# It Is Derived From SButton, And It Is A Class Useful To Draw A
# ShapedButton With An Image And Some Text Ceneterd In The Middle.
# The Button Can Have 4 Different Bitmaps Assigned To Its Different
# States (Pressed, Non Pressed, With Focus, Disabled).
#----------------------------------------------------------------------
# if there isn't a bitmap use the size of the text
# if the bitmap is used
# no bitmap -> size is zero
# size of text
# adjust for bitmap and text to centre
# draw bitmap if available
# extra spacing from bitmap
# draw the text
#----------------------------------------------------------------------
# __STOGGLEMIXIN Class
# A Mixin That Allows To Transform Any Of SButton, SBitmapButton And
# SBitmapTextButton In The Corresponding ToggleButtons.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# STOGGLEBUTTON Class
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# SBITMAPTOGGLEBUTTON Class
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# SBITMAPTEXTTOGGLEBUTTON Class
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Create bitmaps for the button
# our normal wxApp-derived class, as usual
# --------------------------------------------------------------------------------- #
# SHORTCUTEDITOR wxPython IMPLEMENTATION
# Inspired By the GIMP Shortcut Editor.
#
# Andrea Gavana, @ 05 March 2012
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1. Check the various IDs in the KEYMAP dictionary to try and understand if all
#    the possible shortcut combinations can be handled.
#
# 2. Verify that the current shortcut handling is working as advertised.
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Build your wx.MenuBar first!!!
# "self" is an instance of wx.TopLevelWindow
# Here the user will make all the various modifications
# to the shortcuts
# Changes accepted, send back the new shortcuts to
# the TLW wx.MenuBar
# Build your wx.AcceleratorTable first!!!
# "accelTable" is a list of tuples (4 elements per tuple)
# Every tuple is defined in this way:
# label:   the string used to show the accelerator into the ShortcutEditor dialog
# flags:   a bitmask of wx.ACCEL_ALT, wx.ACCEL_SHIFT, wx.ACCEL_CTRL, wx.ACCEL_CMD,
#          or wx.ACCEL_NORMAL used to specify which modifier keys are held down
# keyCode: the keycode to be detected (i.e., ord('b'), wx.WXK_F10, etc...)
# cmdID:   the menu or control command ID to use for the accelerator event.
# Here the user will make all the various modifications
# to the shortcuts
# Changes accepted, send back the new shortcuts to
# the window with the wx.AcceleratorTable:
# Changes accepted, send back the new shortcuts to the TLW wx.MenuBar
# our normal wxApp-derived class, as usual
# Version Info
# AGW stuff
# add support for I18N
# ----------------------------------------------------------------------------
# Constants
# ----------------------------------------------------------------------------
# These commented out things need to be taken into account somehow, but I
# have no idea how to treat them and even if they could be valid accelerators
#    wx.WXK_NUMPAD0 : 'WXK_NUMPAD0',
#    wx.WXK_NUMPAD1 : 'WXK_NUMPAD1',
#    wx.WXK_NUMPAD2 : 'WXK_NUMPAD2',
#    wx.WXK_NUMPAD3 : 'WXK_NUMPAD3',
#    wx.WXK_NUMPAD4 : 'WXK_NUMPAD4',
#    wx.WXK_NUMPAD5 : 'WXK_NUMPAD5',
#    wx.WXK_NUMPAD6 : 'WXK_NUMPAD6',
#    wx.WXK_NUMPAD7 : 'WXK_NUMPAD7',
#    wx.WXK_NUMPAD8 : 'WXK_NUMPAD8',
#    wx.WXK_NUMPAD9 : 'WXK_NUMPAD9',
#    wx.WXK_SEPARATOR : 'WXK_SEPARATOR',
#    wx.WXK_NUMPAD_SPACE : 'WXK_NUMPAD_SPACE',
#    wx.WXK_NUMPAD_TAB : 'WXK_NUMPAD_TAB',
#    wx.WXK_NUMPAD_ENTER : 'WXK_NUMPAD_ENTER',
#    wx.WXK_NUMPAD_F1 : 'WXK_NUMPAD_F1',
#    wx.WXK_NUMPAD_F2 : 'WXK_NUMPAD_F2',
#    wx.WXK_NUMPAD_F3 : 'WXK_NUMPAD_F3',
#    wx.WXK_NUMPAD_F4 : 'WXK_NUMPAD_F4',
#    wx.WXK_NUMPAD_HOME : 'WXK_NUMPAD_HOME',
#    wx.WXK_NUMPAD_LEFT : 'WXK_NUMPAD_LEFT',
#    wx.WXK_NUMPAD_UP : 'WXK_NUMPAD_UP',
#    wx.WXK_NUMPAD_RIGHT : 'WXK_NUMPAD_RIGHT',
#    wx.WXK_NUMPAD_DOWN : 'WXK_NUMPAD_DOWN',
#    wx.WXK_NUMPAD_PAGEUP : 'WXK_NUMPAD_PAGEUP',
#    wx.WXK_NUMPAD_PAGEUP : 'WXK_NUMPAD_PAGEUP',
#    wx.WXK_NUMPAD_PAGEDOWN : 'WXK_NUMPAD_PAGEDOWN',
#    wx.WXK_NUMPAD_PAGEDOWN : 'WXK_NUMPAD_PAGEDOWN',
#    wx.WXK_NUMPAD_END : 'WXK_NUMPAD_END',
#    wx.WXK_NUMPAD_BEGIN : 'WXK_NUMPAD_BEGIN',
#    wx.WXK_NUMPAD_INSERT : 'WXK_NUMPAD_INSERT',
#    wx.WXK_NUMPAD_DELETE : 'WXK_NUMPAD_DELETE',
#    wx.WXK_NUMPAD_EQUAL : 'WXK_NUMPAD_EQUAL',
#    wx.WXK_NUMPAD_MULTIPLY : 'WXK_NUMPAD_MULTIPLY',
#    wx.WXK_NUMPAD_ADD : 'WXK_NUMPAD_ADD',
#    wx.WXK_NUMPAD_SEPARATOR : 'WXK_NUMPAD_SEPARATOR',
#    wx.WXK_NUMPAD_SUBTRACT : 'WXK_NUMPAD_SUBTRACT',
#    wx.WXK_NUMPAD_DECIMAL : 'WXK_NUMPAD_DECIMAL',
#    wx.WXK_NUMPAD_DIVIDE : 'WXK_NUMPAD_DIVIDE',
#
#    wx.WXK_WINDOWS_LEFT : 'WXK_WINDOWS_LEFT',
#    wx.WXK_WINDOWS_RIGHT : 'WXK_WINDOWS_RIGHT',
#    wx.WXK_WINDOWS_MENU : 'WXK_WINDOWS_MENU',
#    wx.WXK_SPECIAL1 : 'WXK_SPECIAL1',
#    wx.WXK_SPECIAL2 : 'WXK_SPECIAL2',
#    wx.WXK_SPECIAL3 : 'WXK_SPECIAL3',
#    wx.WXK_SPECIAL4 : 'WXK_SPECIAL4',
#    wx.WXK_SPECIAL5 : 'WXK_SPECIAL5',
#    wx.WXK_SPECIAL6 : 'WXK_SPECIAL6',
#    wx.WXK_SPECIAL7 : 'WXK_SPECIAL7',
#    wx.WXK_SPECIAL8 : 'WXK_SPECIAL8',
#    wx.WXK_SPECIAL9 : 'WXK_SPECIAL9',
#    wx.WXK_SPECIAL10 : 'WXK_SPECIAL10',
#    wx.WXK_SPECIAL11 : 'WXK_SPECIAL11',
#    wx.WXK_SPECIAL12 : 'WXK_SPECIAL12',
#    wx.WXK_SPECIAL13 : 'WXK_SPECIAL13',
#    wx.WXK_SPECIAL14 : 'WXK_SPECIAL14',
#    wx.WXK_SPECIAL15 : 'WXK_SPECIAL15',
#    wx.WXK_SPECIAL16 : 'WXK_SPECIAL16',
#    wx.WXK_SPECIAL17 : 'WXK_SPECIAL17',
#    wx.WXK_SPECIAL18 : 'WXK_SPECIAL18',
#    wx.WXK_SPECIAL19 : 'WXK_SPECIAL19',
#    wx.WXK_SPECIAL2 : 'WXK_SPECIAL2',
# Define a dictionary to hold the correspondence between wx.ACCEL_* and
# human-readable names
# Define a dictionary to hold the correspondence between wx.MOD_* and
# human-readable names (platform dependent)
# Define a couple of standard, default accelerators
# Events handled by ShortcutEditor
# Standard images for all the buttons we use in the dialog
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ----------------------------------------------------------------------------
# HTMLHelpWindow is a frame containing the HTML help page for ShortcutEditor
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ShortcutEvent is a special subclassing of wx.PyCommandEvent
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# Shortcut is a class containing the details for a shortcut, whether from
# a menu item, an accelerator or a user-defined shortcut. It behaves like
# a tree, with children and parents.
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ConflictDialog is a subclass of GenericMessageDialog, customized to look
# like the GIMP conflict dialog.
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ListShortcut is a subclass of HyperTreeList, customized to look
# like the GIMP main shortcut list.
# ----------------------------------------------------------------------------
# the one with the tree in it...
# How did we get here???
# Don't allow to change labels for shortcuts without an ID
# If we press backspace with no modifers down, *and* the current text is
# "New accelerator..." then we reset the accelerator to "Disabled"
# the caller didn't use event.Skip()
# Only the root item
# ----------------------------------------------------------------------------
# ShortcutEditor is a subclass of wx.Dialog, customized to look
# like the GIMP main shortcut dialog.
# ----------------------------------------------------------------------------
# Add the fancy buttons
# It's a separator
# Every tuple is defined in this way:
# label:   the string used to show the accelerator into the ShortcutEditor dialog
# flags:   a bitmask of wx.ACCEL_ALT, wx.ACCEL_SHIFT, wx.ACCEL_CTRL, wx.ACCEL_CMD,
#          or wx.ACCEL_NORMAL used to specify which modifier keys are held down
# keyCode: the keycode to be detected (i.e., ord('b'), wx.WXK_F10, etc...)
# cmdID:   the menu or control command ID to use for the accelerator event.
# --------------------------------------------------------------------------- #
# SPEEDMETER Control wxPython IMPLEMENTATION
# Python Code By:
#
# Andrea Gavana, @ 25 Sep 2005
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List/Caveats
#
# 1. Combination Of The Two Styles:
#
#    SM_DRAW_PARTIAL_FILLER
#    SM_DRAW_SECTORS
#
#    Does Not Work Very Well. It Works Well Only In Case When The Sector Colours
#    Are The Same For All Intervals.
#
#
# Thanks To Gerard Grazzini That Has Tried The Demo On MacOS, I Corrected A
# Bug On Line 246
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# Set The Region Of Existence Of SpeedMeter (Always In Radians!!!!)
# Create The Intervals That Will Divide Our SpeedMeter In Sectors
# Assign The Same Colours To All Sectors (We Simulate A Car Control For Speed)
# Usually This Is Black
# Assign The Ticks: Here They Are Simply The String Equivalent Of The Intervals
# Set The Ticks/Tick Markers Colour
# We Want To Draw 5 Secondary Ticks Between The Principal Ticks
# Set The Font For The Ticks Markers
# Set The Text In The Center Of SpeedMeter
# Assign The Colour To The Center Text
# Assign A Font To The Center Text
# Set The Colour For The Hand Indicator
# Do Not Draw The External (Container) Arc. Drawing The External Arc May
# Sometimes Create Uglier Controls. Try To Comment This Line And See It
# For Yourself!
# Set The Current Value For The SpeedMeter
# our normal wxApp-derived class, as usual
#----------------------------------------------------------------------
# Beginning Of SPEEDMETER wxPython Code
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# DC Drawing Options
#----------------------------------------------------------------------
# SM_NORMAL_DC Uses The Normal wx.PaintDC
# SM_BUFFERED_DC Uses The Double Buffered Drawing Style
#----------------------------------------------------------------------
# SpeedMeter Styles
#----------------------------------------------------------------------
# SM_ROTATE_TEXT: Draws The Ticks Rotated: The Ticks Are Rotated
#                 Accordingly To The Tick Marks Positions
# SM_DRAW_SECTORS: Different Intervals Are Painted In Differend Colours
#                  (Every Sector Of The Circle Has Its Own Colour)
# SM_DRAW_PARTIAL_SECTORS: Every Interval Has Its Own Colour, But Only
#                          A Circle Corona Is Painted Near The Ticks
# SM_DRAW_HAND: The Hand (Arrow Indicator) Is Drawn
# SM_DRAW_SHADOW: A Shadow For The Hand Is Drawn
# SM_DRAW_PARTIAL_FILLER: A Circle Corona That Follows The Hand Position
#                         Is Drawn Near The Ticks
# SM_DRAW_SECONDARY_TICKS: Intermediate (Smaller) Ticks Are Drawn Between
#                          Principal Ticks
# SM_DRAW_MIDDLE_TEXT: Some Text Is Printed In The Middle Of The Control
#                      Near The Center
# SM_DRAW_MIDDLE_ICON: An Icon Is Drawn In The Middle Of The Control Near
#                      The Center
# SM_DRAW_GRADIENT: A Gradient Of Colours Will Fill The Control
# SM_DRAW_FANCY_TICKS: With This Style You Can Use XML Tags To Create
#                      Some Custom Text And Draw It At The Ticks Position.
#                      See wx.lib.fancytext For The Tags.
#----------------------------------------------------------------------
# Event Binding
#----------------------------------------------------------------------
# SM_MOUSE_TRACK: The Mouse Left Click/Drag Allow You To Change The
#                 SpeedMeter Value Interactively
#----------------------------------------------------------------------
# BUFFERENDWINDOW Class
# This Class Has Been Taken From The wxPython Wiki, And Slightly
# Adapted To Fill My Needs. See:
#
# http://wiki.wxpython.org/index.cgi/DoubleBufferedDrawing
#
# For More Info About DC And Double Buffered Drawing.
#----------------------------------------------------------------------
# OnSize called to make sure the buffer is initialized.
# This might result in OnSize getting called twice on some
# platforms at initialization, but little harm done.
# Make new off screen bitmap: this bitmap will always have the
# current drawing in it, so it can be used to save the image to
# a file, or whatever.
# Some platforms object to creating bitmaps with size < (1,1)
# update the buffer
# update the screen
#----------------------------------------------------------------------
# SPEEDMETER Class
# This Is The Main Class Implementation. See __init__() Method For
# Details.
#----------------------------------------------------------------------
# If no initial size is set then use (1,1) instead of the (20,20) that
# wxWindow will default to. This is so we don't set the initial
# self.scale based on (20,20) but will instead wait until the initial
# size is set by the sizer. See Draw() implementation below.
# Create An Empty Bitmap
# Set Background Of The Control
# Get The Radius Of The Sector. Set It A Bit Smaller To Correct Draw After
# Get The Angle Of Existance Of The Sector
# Initialize The Colours And The Intervals - Just For Reference To The
# Children Functions
# Get The Intervals Colours
# Get The Intervals (Partial Sectors)
# Get The Current Value For The SpeedMeter
# Get The Direction Of The SpeedMeter
# This Because DrawArc Does Not Draw Last Point
# Calculate The Angle For The Current Value Of SpeedMeter
# Get Some Data For The Partial Filler
# Get The Sector In Which The Current Value Is
# Draw The Filler (Both In "Advance" And "Reverse" Directions)
# This Is Needed To Fill The Partial Sector Correctly
# Draw The Sectors
# Keep The Coordinates, We Will Need Them After To Position The Ticks
# We Got The Interval In Which There Is The Current Value. If We Choose
# A "Reverse" Direction, First We Draw The Partial Sector, Next The Filler
# Here We Draw The Rest Of The Sector In Which The Current Value Is
# Here We Still Use The SM_DRAW_PARTIAL_FILLER Style, But We Are Not
# In The Sector Where The Current Value Resides
# This Is The Case Where No SM_DRAW_PARTIAL_FILLER Has Been Chosen
# calculate gradient coefficients
# Get The Ticks And The Ticks Colour
# Get The Font For The Ticks
# Draw The Ticks And The Markers (Text Ticks)
# This Is The Small Rectangle --> Tick Mark
#oldinterval = start + (oldinterval + spacing)
# Draw The External Arc
# If It's Not A Complete Circle, Draw The Connecting Lines And The Arc
# Draw A Circle, Is A 2*pi Extension Arc = Complete Circle
# Here We Draw The Text In The Middle, Near The Start Of The Arrow (If Present)
# This Is Like The "Km/h" Or "mph" Text In The Cars
# Here We Draw The Icon In The Middle, Near The Start Of The Arrow (If Present)
# This Is Like The "Fuel" Icon In The Cars
# Restore Icon Dimension, If Not Something Strange Happens
# Requested To Draw The Hand
# Calculate The Data For The Hand
# Draw The Shadow
# Draw The Shadow
# Draw The Small Circle In The Center --> The Hand "Holder"
# Draw The "Hand", An Arrow
# Draw The Arrow Pointer
# Draw The Hand Pointer
# Draw The Small Circle In The Center --> The Hand "Holder"
# --------------------------------------------------------------------------------- #
# SUPERTOOLTIP wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 07 October 2008
# Latest Revision: 04 Feb 2013, 21.00 GMT
#
#
# TODO List
#
# 1) Maybe add some more customization like multiline text
#    in the header and footer;
# 2) Check whether it's possible to use rounded corners and
#    shadows on the Mac
# 3) Split OnPaint() into smaller pieces to improve readability and
#    ability to redefine behaviour in subclasses
# 4) Extend text formatting capabilities
# 5) Make better use of links (right now it's difficult to click them without hiding tooltip)
#
# For all kind of problems, requests of enhancements and bug reports, please
# write to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:         phoenix-port, documented, unittest, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# Version Info
# Let's see if we can add few nice shadows to our tooltips (Windows only)
# Shadows behind menus are supported only in XP
# Try Mark Hammond's win32all extensions
# Define a bunch of predefined colour schemes...
# Bind the events
# Go with double buffering...
# Store the rects for the hyperlink lines
# Retrieve the colours for the blended triple-gradient background
# Get the user options for header, bitmaps etc...
# Fill the triple-gradient
# We got the header bitmap
# We got the header text
# Calculate the header height
# Draw the separator line after the header
# Get the big body image (if any)
# A bunch of calculations to draw the main body message
# Loop over all the lines in the message
# draw a line
# is a bold line
# is a link
# Is a normal line
# Draw the main body image
# Got the footer bitmap
# Got the footer text
# Draw the separator line before the footer
# Draw the footer and footer bitmap (if any)
# Store the hyperlink rectangle and link
# This is intentionally empty to reduce flicker
# We are over one hyperlink...
# Restore the normal cursor
# We haven't clicked a link
# Check if window still exists, Destroy might have been called manually (more than once)
# Run the webbrowser with the clicked link
# Fade out...
# Calculate starting alpha value and its step
# Start the timer
# No message yet...
# No Mark Hammond's win32all extension
# This works only on Windows XP
# Create a rounded rectangle region
# Load the user32 library
#Nothing to be done
# Drop the shadow underneath the window
# Increase (or decrease) the alpha channel
# We're done, stop the timer
# Destroy the SuperToolTip, we are fading out
# Make the SuperToolTip more or less transparent
# No way, only Windows XP with Mark Hammond's win32all
# this API call is not in all SDKs, only the newer ones, so
# we will runtime bind this
# Handle Mac and Windows/GTK differences...
# Call the base class
# Call the base class
# Set all the initial options
# Get the running applications
# Build a couple of timers...
# Not yet created
# The running app doesn't want tooltips...
# We are already running
# Fade out...
# target widget might already be destroyed
# need to destroy it if already exists,
# otherwise we might end up with many of them
# need to stop this, otherwise we get into trouble when leaving the window
# Fade out...
# Unbind the events!
# --------------------------------------------------------------------------- #
# THUMBNAILCTRL Control wxPython IMPLEMENTATION
# Python Code By:
#
# Andrea Gavana And Peter Damoc, @ 12 Dec 2005
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List/Caveats
#
# 1. Thumbnail Creation/Display May Be Somewhat Improved From The Execution
#    Speed Point Of View;
#
# 2. The Implementation For wx.HORIZONTAL Style Is Still To Be Written;
#
# 3. I Have No Idea On How To Implement Thumbnails For Audio, Video And Other Files.
#
# 4. Other Ideas?
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:         phoenix-port, documented, unittest, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
#----------------------------------------------------------------------
# Beginning Of ThumbnailCtrl wxPython Code
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Get Default Icon/Data
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#\xa5\x83\x81\x81y\x96\xa7\x8bcH\xc5\
#-----------------------------------------------------------------------------
# PATH & FILE FILLING (OS INDEPENDENT)
#-----------------------------------------------------------------------------
# HACK: on Linux, a leading / gets lost...
#-----------------------------------------------------------------------------
# Different Outline On Thumb Selection:
# THUMB_OUTLINE_NONE: No Outline Drawn On Selection
# THUMB_OUTLINE_FULL: Full Outline Drawn On Selection
# THUMB_OUTLINE_RECT: Only Maximum Image Rect Outlined On Selection
# THUMB_OUTLINE_IMAGE: Only Image Rect Outlined On Selection
# Options For Filtering Files
# THUMB_FILTER_VIDEOS = 2  Don't Know How To Create Thumbnails For Videos!!!
# ThumbnailCtrl Orientation: Not Fully Implemented Till Now
# Image File Name Extensions: Am I Missing Some Extensions Here?
# ThumbnailCtrl Events:
# wxEVT_THUMBNAILS_SEL_CHANGED: Event Fired When You Change Thumb Selection
# wxEVT_THUMBNAILS_POINTED: Event Fired When You Point A Thumb
# wxEVT_THUMBNAILS_DCLICK: Event Fired When You Double-Click A Thumb
# wxEVT_THUMBNAILS_CAPTION_CHANGED: Not Used At Present
# wxEVT_THUMBNAILS_THUMB_CHANGED: Used Internally
#-----------------------------------#
#        ThumbnailCtrlEvent
#-----------------------------------#
# ---------------------------------------------------------------------------- #
# Class PILImageHandler, handles loading and highlighting images with PIL
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class NativeImageHandler, handles loading and highlighting images with wx
# ---------------------------------------------------------------------------- #
# Don't stop when a corrupt file is to be loaded, show Mondrian instead
# ---------------------------------------------------------------------------- #
# Class ThumbnailEvent
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class Thumb
# Auxiliary Class, To Handle Single Thumb Information For Every Thumb.
# Used Internally.
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class ThumbnailCtrl
# Auxiliary Class, All Useful Methods Are Defined On ScrolledThumbnail Class.
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# Class ScrolledThumbnail
# This Is The Main Class Implementation
# ---------------------------------------------------------------------------- #
#009EFF"
#A2A2D2", 1, wx.SHORT_DASH)
# update items
# update items
# get row
# calc position to scroll view
# scroll top
# scroll bottom
# scroll view
# convert sy to scroll units
# background
# image
# draw caption
#7D7D7D"
# outline
# items
# visible?
# get item number to select
# get item number to select
# set new selection
# Popup menu
# -- drag & drop --
# -- light-effect --
# get item number
# update thumbnail
# --------------------------------------------------------------------------- #
# TOASTERBOX wxPython IMPLEMENTATION
# Ported And Enhanced From wxWidgets Contribution (Aj Bommarito) By:
#
# Andrea Gavana, @ 16 September 2005
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO/Caveats List
#
# 1. Any Idea?
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:         phoenix-port, documented, unittest, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# Define Window List, We Use It Globally
# scroll from up to down
# scroll from down to up
# fade in/out
# ------------------------------------------------------------------------------ #
# Class ToasterBox
#    Main Class Implementation. It Is Basically A wx.Timer. It Creates And
#    Displays Popups And Handles The "Stacking".
# ------------------------------------------------------------------------------ #
# top left
# top right
# bottom left
# bottom right
# create new window
# clean up the list
# check to see if there is already a window displayed
# by looking at the linked list
# there ARE other windows displayed already
# reclac where it should display
# shift new window on to the list
# if we didn't show the window properly, remove it from the list
# delete the object too
# recalc where to place this popup
# clean the window list
# figure out how many blanks we have
# move windows to fill in blank space
# loop through all the windows
# reset where the object THINKS its supposed to be
# actually move it
# ------------------------------------------------------------------------------ #
# Class ToasterBoxWindow
#    This Class Does All The Job, By Handling Background Images, Text Properties
#    And Panel Adding. Depending On The Style You Choose, ToasterBoxWindow Will
#    Behave Differently In Order To Handle Widgets Inside It.
# ------------------------------------------------------------------------------ #
# the size we want the dialog to be
# top left
# top right
# bottom left
# bottom right
# do some checks to make sure this window is valid
# toasterbox launches into a endless loop for some reason
# when you try to make the window too small.
# checking the type of the scroll (from up to down or from down to up)
# checking the type of the scroll (from up to down or from down to up)
# walk the Y value up in a raise motion
# checking the type of the scroll (from up to down or from down to up)
# walk down the Y value
# checking the type of the scroll (from up to down or from down to up)
# Increase (or decrease) the alpha channel
# We're done, stop the timer
# Make the ToasterBoxWindow more or less transparent
# border from sides and top to text (in pixels)
# how much space between text lines
# --------------------------------------------------------------------------------- #
# ULTIMATELISTCTRL wxPython IMPLEMENTATION
# Inspired by and heavily based on the wxWidgets C++ generic version of wxListCtrl.
#
# Andrea Gavana, @ 08 May 2009
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# 1)  Subitem selection;
# 2)  Watermark? (almost, does not work very well :-( );
# 3)  Groups? (Maybe, check ObjectListView);
# 4)  Scrolling items as headers and footers;
# 5)  Alpha channel for text/background of items;
# 6)  Custom renderers for headers/footers (done);
# 7)  Fading in and out on mouse motion (a la Windows Vista Aero);
# 8)  Sub-text for headers/footers (grey text below the header/footer text);
# 9)  Fixing the columns to the left or right side of the control layout;
# 10) Skins for header and scrollbars (implemented for headers/footers).
#
#
# For all kind of problems, requests of enhancements and bug reports, please
# write to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:         phoenix-port, documented, unittest, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# Version Info
# wxPython version string
# ----------------------------------------------------------------------------
# UltimateListCtrl constants
# ----------------------------------------------------------------------------
# style flags
# only meaningful for checkboxes
# only meaningful for checkboxes
# only meaningful for checkboxes
# shows tooltips on items with ellipsis (...)
# enable hot tracking on mouse motion
# changes border colour whan an item is selected, instead of highlighting the item
# Enables hot-track selection in a list control. Hot track selection means that an item
# is automatically selected when the cursor remains over the item for a certain period
# of time. The delay is retrieved on Windows using the win32api call
# win32gui.SystemParametersInfo(win32con.SPI_GETMOUSEHOVERTIME), and is defaulted to 400ms
# on other platforms. This style applies to all styles of UltimateListCtrl.
# Show column headers in all view modes
# When an item is selected, the only the item in the first column is highlighted
# Show a footer too (only when header is present)
# Allows to set a custom row height (one value for all the items, only in report mode).
# for compatibility only
# Omitted because
#  (a) too much detail
#  (b) not enough style flags
#  (c) not implemented anyhow in the generic version
#
# ULC_NO_SCROLL
# ULC_NO_LABEL_WRAP
# ULC_OWNERDRAW_FIXED
# ULC_SHOW_SEL_ALWAYS
# Mask flags to tell app/GUI what fields of UltimateListItem are valid
# State flags for indicating the state of an item
# MSW only
# MSW only
# Hit test flags, used in HitTest
# Above the client area.
# Below the client area.
# In the client area but below the last item.
# On the bitmap associated with an item.
# On the label (string) associated with an item.
# On the state icon for a tree view item that is in a user-defined state.
# To the left of the client area.
# To the right of the client area.
# On the checkbox (if any)
# Flags for GetNextItem (MSW only except ULC_NEXT_ALL)
# Searches for an item above the specified item
# Searches for subsequent item by index
# Searches for an item below the specified item
# Searches for an item to the left of the specified item
# Searches for an item to the right of the specified item
# Alignment flags for Arrange (MSW only except ULC_ALIGN_LEFT)
# Column format (MSW only except ULC_FORMAT_LEFT)
# Autosize values for SetColumnWidth
# partly supported by generic version
# Flag values for GetItemRect
# Flag values for FindItem (MSW only)
# Items/subitems rect
# ----------------------------------------------------------------------------
# UltimateListCtrl event macros
# ----------------------------------------------------------------------------
# NOTE: If using the wxExtListBox visual attributes works everywhere then this can
# be removed, as well as the #else case below.
# ----------------------------------------------------------------------------
# Constants
# ----------------------------------------------------------------------------
# the spacing between the lines (in report mode)
# extra margins around the text label
# margin between the window and the items
# offset for the header window
# margin between rows of icons in [small] icon view
# when autosizing the columns, add some slack
# default and minimal widths for the header columns
# the space between the image and the text in the report mode
# the space between the image and the text in the report mode in header
# and the width of the icon, if any
# Background Image Style
# Windows Vista Colours
# Mouse hover time for track selection
# For PyImageList
# Python integers, to make long types to work with CreateListItem
# ----------------------------------------------------------------------------
# Functions
# ----------------------------------------------------------------------------
# Utility method
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
#----------------------------------------------------------------------
#-----------------------------------------------------------------------------
#  PyImageList
#-----------------------------------------------------------------------------
# Mimic behavior of Windows ImageList_Add that automatically breaks up the added
# bitmap into sub-images of the correct size
# the array of items whose selection state is different from default
# the default state: normally, False (i.e. off) but maybe set to true if
# there are more selected items than non selected ones - this allows to
# handle selection of all items efficiently
# the total number of items we handle
# special case of SetItemCount(0)
# return the total number of selected items
# if the default state is to be selected, being in m_itemsSel means that
# the item is not selected, so we have to inverse the logic
# search for the item ourselves as like this we get the index where to
# insert it later if needed, so we do only one search in the array instead
# of two (adding item to a sorted array requires a search)
# reset to default state
# 100 is hardcoded but it shouldn't matter much: the important thing is
# that we don't refresh everything when really few (e.g. 1 or 2) items
# change state
# many items (> half) changed state
# are we going to have more [un]selected items than the other ones?
# the default state now becomes the same as 'select'
# so all the old selections (which had state select) shouldn't be
# selected any more, but all the other ones should
# TODO: it should be possible to optimize the searches a bit
#       knowing the possible range
# select == self._defaultState
# get the inclusive range of items between itemFrom and itemTo
# delete all of them (from end to avoid changing indices)
# stop counting (see comment below)
# "few" items change state
# just add the items to the selection
# stop counting them, we'll just eat gobs of memory
# for nothing at all - faster to refresh everything in
# this case
# we set it to None if there are many items changing state
# this item itself was in m_itemsSel, remove it from there
# and adjust the index of all which follow it
# forget about all items whose indices are now invalid if the size
# decreased
# remember the new number of items
# ----------------------------------------------------------------------------
# UltimateListItemAttr: a structure containing the visual attributes of an item
# ----------------------------------------------------------------------------
# setters
# accessors
# getters
# ----------------------------------------------------------------------------
# UltimateListItem: the item or column info, used to exchange data with UltimateListCtrl
# ----------------------------------------------------------------------------
# Indicates what fields are valid
# The zero-based item position
# Zero-based column, if in report mode
# The state of the item
# Which flags of self._state are valid (uses same flags)
# The label/header text
# The label/header tooltip text
# The zero-based indexes into an image list
# App-defined data
# Python-specific data
# left, right, centre
# width of column
# item text colour
# item font
# The checking state for the item (if kind > 0)
# Whether it is a normal, checkbox-like or a radiobutton-like item
# Whether the item is enabled or not
# indicates if the item is hypertext
# visited state for an hypertext item
# copy list item attributes
# resetting
# setters
# accessors
# creates self._attr if we don't have it yet
# the window is a complex one hold by a sizer
# simple window, without sizers
# We have to bind the wx.EVT_SET_FOCUS for the associated window
# No other solution to handle the focus changing from an item in
# UltimateListCtrl and the window associated to an item
# Do better strategies exist?
# The window is enabled only if the item is enabled
# This is needed as otherwise widgets that should be invisible
# are shown at the top left corner of ULC
# indicates if the item is hypertext
# visited state for an hypertext item
# If the window is associated to an item that currently is selected
# (has focus) we don't kill the focus. Otherwise we do it.
# ----------------------------------------------------------------------------
# ListEvent - the event class for the UltimateListCtrl notifications
# ----------------------------------------------------------------------------
# for wxEVT_COMMAND_LIST_CACHE_HINT only
# was label editing canceled? (for wxEVT_COMMAND_LIST_END_LABEL_EDIT only)
# ----------------------------------------------------------------------------
# UltimateListEvent is a special class for all events associated with list controls
#
# NB: note that not all accessors make sense for all events, see the event
#     descriptions below
# ----------------------------------------------------------------------------
# ============================================================================
# private classes
# ============================================================================
#-----------------------------------------------------------------------------
#  ColWidthInfo (internal)
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#  UltimateListItemData (internal)
#-----------------------------------------------------------------------------
# the list ctrl we are in
# the item coordinates are not used in report mode, instead this pointer
# is None and the owner window is used to retrieve the item position and
# size
# we can't use empty string for measuring the string width/height, so
# always return something
# the window is a complex one hold by a sizer
# simple window, without sizers
# We have to bind the wx.EVT_SET_FOCUS for the associated window
# No other solution to handle the focus changing from an item in
# UltimateListCtrl and the window associated to an item
# Do better strategies exist?
# The window is enabled only if the item is enabled
# the item image or -1
# user data associated with the item
# kind = 0: normal item
# kind = 1: checkbox-type item
# custom attributes or None
# by default, get everything for backwards compatibility
#-----------------------------------------------------------------------------
#  UltimateListHeaderData (internal)
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#  GeometryInfo (internal)
#  this is not used in report view
#-----------------------------------------------------------------------------
# total item rect
# label only
# icon only
# the part to be highlighted
# the checkbox/radiobutton rect (if any)
# extend all our rects to be centered inside the one of given width
#-----------------------------------------------------------------------------
#  UltimateListLineData (internal)
#-----------------------------------------------------------------------------
# the list of subitems: only may have more than one item in report mode
# is this item selected? [NB: not used in virtual mode]
# back pointer to the list ctrl
# we only need m_gi when we're not in report view so update as needed
# fg colour
# don't use foreground colour for drawing highlighted items - this might
# make them completely invisible (and there is no way to do bit
# arithmetics on wxColour, unfortunately)
# font
# bg colour
# horizontal gradient
# vertical gradient
# Vista selection style
# centre the image inside our rectangle, this looks nicer when items
# ae aligned in a row
# horizontal gradient
# vertical gradient
# Vista selection style
# We got a checkbox-type item
##                if images:
##                    width -= IMAGE_MARGIN_IN_REPORT_MODE - MARGIN_BETWEEN_TEXT_AND_ICON
# determine if the string can fit inside the current width
# it can, draw it using the items alignment
# otherwise, truncate and add an ellipsis if possible
# determine the base width
# continue until we have enough space or only one character left
# if still not enough space, remove ellipsis characters
# now draw the text
# calculate gradient coefficients
# calculate gradient coefficients
#-----------------------------------------------------------------------------
#  UltimateListHeaderWindow (internal)
#-----------------------------------------------------------------------------
# Custom renderer for every column
# column being resized or -1
# divider line position in logical (unscrolled) coords
# minimal position beyond which the divider line can't be dragged in
# logical coords
# needs refresh
# shift the DC origin to match the position of the main window horz
# scrollbar: this allows us to always use logical coords
# account for the horz scrollbar offset
# width and height of the entire header window
# Reset anything in the dc that a custom renderer might have changed
# do next column if not shown
# NB: The code below is not really Mac-specific, but since we are close
# to 2.8 release and I don't have time to test on other platforms, I
# defined this only for wxMac. If this behavior is desired on
# other platforms, please go ahead and revise or remove the #ifdef.
# mark as first column
# the width of the rect to draw: make it smaller to fit entirely
# inside the column rect
# The custom renderer will specify the color to draw the header text and buttons
# The custom renderer will specify the color to draw the header text and buttons
# see if we have enough space for the column label
# We got a checkbox-type item
# We draw it on the left, always
# for this we need the width of the text
# and the width of the icon, if any
# ignore alignment if there is not enough space anyhow
# if we have an image, draw it on the right of the label
# draw the text clipping it so that it doesn't overwrite the column
# boundary
# Fill in what's missing to the right of the columns, otherwise we will
# leave an unpainted area when columns are removed (and it looks better)
# Why does the custom renderer need this adjustment??
# mark as last column
# determine if the string can fit inside the current width
# determine the base width
# continue until we have enough space or only one character left
# if still not enough space, remove ellipsis characters
# we want to work with logical coords
# we don't draw the line beyond our window, but we allow dragging it
# there
# erase the line if it was drawn
# draw in the new location
# not dragging
# end of the current column
# find the column where this event occurred
# near the column border
# inside the column
# First check to see if we have a tooltip to display
#else: column resizing was vetoed by the user code
# click on a column
# record the selected state of the columns
# Let's see if it is a checkbox-type item
# User clicked on the checkbox
# No veto for the item checking
# the position should be relative to the parent window, not
# this one for compatibility with MSW and common sense: the
# user code doesn't know anything at all about this header
# window, so why should it get positions relative to it?
#-----------------------------------------------------------------------------
#  UltimateListRenameTimer (internal)
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#  UltimateListTextCtrl (internal)
#-----------------------------------------------------------------------------
# nothing changed, always accept
# when an item remains unchanged, the owner
# needs to be notified that the user decided
# not to change the tree item label, and that
# the edit has been cancelled
# vetoed by the user
# accepted, do rename the item
# Notify the owner about the changes
# Even if vetoed, close the control (consistent with MSW)
# auto-grow the textctrl:
# We must finish regardless of success, otherwise we'll get
# focus problems:
# We must let the native text control handle focus, too, otherwise
# it could have problems with the cursor (e.g., in wxGTK).
#-----------------------------------------------------------------------------
#  UltimateListMainWindow (internal)
#-----------------------------------------------------------------------------
# the list of column objects
# the array of all line objects for a non virtual list control (for the
# virtual list control we only ever use self._lines[0])
# currently focused item or -1
# the number of lines per page
# Automatically resized column - this column expands to fill the width of the window
# this flag is set when something which should result in the window
# redrawing happens (i.e. an item was added or deleted, or its appearance
# changed) and OnPaint() doesn't redraw the window while it is set which
# allows to minimize the number of repaintings when a lot of items are
# being added. The real repainting occurs only after the next OnIdle()
# call
# Background image settings
# Disabled items colour
# Gradient selection colours
# Vertical Gradient
# Vista Selection Styles
# Disabled items colour
# Hyperlinks things
# since this image didn't come from a .cur file, tell it where the hotspot is
# make the image into a cursor
# return True if this is a virtual list control
# return True if the control is in report mode
# return True if we are in single selection mode, False if multi sel
# do we have a header window?
# do we have a footer window?
# toggle the line state and refresh it
# get the size of the total line rect
# bring the current item into view
# override base class virtual to reset self._lineHeight when the font changes
# these are for UltimateListLineData usage only
# get the backpointer to the list ctrl
# get the brush to use for the item highlighting
# get the line data for the given index
# force us to recalculate the range of visible lines
# Called on EVT_SIZE to resize the _resizeColumn to fill the width of the window
# Avoid RuntimeError on Mac
# Nothing to resize.
# We're showing the vertical scrollbar -> allow for scrollbar width
# NOTE: on GTK, the scrollbar is included in the client size, but on
# Windows it is not included
# Width of all columns except last one.
# We haven't got the width to show the last column at its minimum
# width -> set it to its minimum width and allow the horizontal
# scrollbar to show.
# Resize the last column to take up the remaining available space.
# get the colour to be used for drawing the rules
# we need to recreate the dummy line if the number of columns in the
# control changed as it would have the incorrect number of fields
# otherwise
# ----------------------------------------------------------------------------
# line geometry (report mode only)
# ----------------------------------------------------------------------------
# we cache the line height as calling GetTextExtent() is slow
# and not self.IsVirtual():
#if (line, col) in self._shortItems:
#rect = wx.Rect(xOld, lineY, width, self.GetLineHeight(line))
# We got a checkbox-type item
# VS: Testing for "ld.HasText() || InReportView()" instead of
#     "ld.HasText()" is needed to make empty lines in report view
#     possible
# ----------------------------------------------------------------------------
# highlight (selection) handling
# ----------------------------------------------------------------------------
# !virtual
# many items changed state, refresh everything
# only a few items changed state, refresh only them
# iterate over all items in non report view
# !virtual
# !report
# TODO: this should be optimized...
# refresh till the bottom of the window
# !report
# TODO: how to do it more efficiently?
# !virtual
# NB: the test works as expected even if self._current == -1
# Note: a wxPaintDC must be constructed even if no drawing is
# done (a Windows requirement).
# nothing to draw or not the moment to draw it
# delay the repainting until we calculate all the items positions
# mrcs: draw additional items
# tell the caller cache to cache the data
# don't redraw unaffected lines to avoid flicker
# Don't draw the first one
# Draw last horizontal rule
# Draw vertical rules if required
# !report
# Don't draw rect outline under Mac at all.
# Draw it elsewhere on GTK
# Can we actually do something here (or in OnPaint()) To Handle
# background images that are stretchable or always centered?
# I tried but I get enormous flickering...
# we just have one item to turn off
# multi sel
# Do nothing here.  This prevents the default handler in wx.ScrolledWindow
# from needlessly scrolling the window when the edit control is
# dismissed.  See ticket #9563.
# set only for events which have position
# don't try to get the line info for virtual list controls: the main
# program has it anyhow and if we did it would result in accessing all
# the lines, even those which are not visible now and this is precisely
# what we're trying to avoid
#else: this happens for wxEVT_COMMAND_LIST_ITEM_FOCUSED event
#else: there may be no more such item
# as the current item changed, we shouldn't start editing it when the
# "slow click" timer expires as the click happened on another item
# vetoed by user code
# We have to call this here because the label in question might just have
# been added and no screen update taken place.
# Pending events dispatched by wx.SafeYield might have changed the item
# count
# modified
# let owner know that the edit was cancelled
# On wxMac we can't depend on the EVT_KILL_FOCUS event to properly
# shutdown the edit control when the mouse is clicked elsewhere on the
# listctrl because the order of events is different (or something like
# that,) so explicitly end the edit if it is active.
# let the base handle mouse wheel events.
# where did we hit it (if we did)?
# TODO: optimize it too! this is less simple than for report view but
#       enumerating all items is still not a way to do it!!
# if the text didn't fit in the column
# we have to report the raw, physical coords as we want to be
# able to call HitTest(event.m_pointDrag) from the user code to
# get the item being dragged
# we're going to drag this item
# remember the old cursor because we will change it while
# dragging
# unhighlight the previous drop target
# outside of any item
# The first click was on another item, so don't interpret this as
# a double click, but as a simple click instead
# select single line
# This wx.SYS_DCLICK_MSEC is not yet wrapped in wxPython...
# dclick = wx.SystemSettings.GetMetric(wx.SYS_DCLICK_MSEC)
# m_renameTimer->Start(dclick > 0 ? dclick : 250, True)
# This is necessary, because after a DnD operation in
# from and to ourself, the up event is swallowed by the
# DnD code. So on next non-up event (which means here and
# now) self._lineSelectSingleOnUp should be reset.
# If the item is already selected, do not update the selection.
# Multi-selections should not be cleared if a selected item is clicked.
# Allow generation of context menu event
# multi sel & current is highlighted & no mod keys
# change focus
# multi sel & either ctrl or shift is down
# !ctrl, !shift
# test in the enclosing if should make it impossible
# forceClick is only set if the previous click was on another item
# the next we need the range of lines shown it might be different, so
# recalculate it
# At least on Mac the visible lines value will get reset inside of
# Scroll *before* it actually scrolls the window because of the
# Update() that happens there, so it will still have the wrong value.
# So let's reset it again and wait for it to be recalculated in the
# next paint event.  I would expect this problem to show up in wxGTK
# too but couldn't duplicate it there.  Perhaps the order of events
# is different...  --Robin
# !report
# ----------------------------------------------------------------------------
# keyboard handling
# ----------------------------------------------------------------------------
# in single selection we just ignore Shift as we can't select several
# items anyhow
# refresh the old focus to remove it
# select all the items between the old and the new one
# !shift
# all previously selected items are unselected unless ctrl is held
# in a multi-selection control
# refresh the old focus to remove it
# we propagate the key event upwards
# we propagate the key event upwards
# we send a list_key event up
# propagate the char event upwards
# no item . nothing to do
# normal space press
# select it in ReverseHighlight() below if unselected
# ----------------------------------------------------------------------------
# focus handling
# ----------------------------------------------------------------------------
# wxGTK sends us EVT_SET_FOCUS events even if we had never got
# EVT_KILL_FOCUS before which means that we finish by redrawing the items
# which are already drawn correctly resulting in horrible flicker - avoid
# it
# checkbox
# radiobutton
# We have a custom PyImageList with variable image sizes
# calc the spacing from the icon size
# ensure that the line height will be recalc'd
# Image list to hold disabled versions of each control
# Get the Checkboxes
# Get the Radio Buttons
# ----------------------------------------------------------------------------
# columns
# ----------------------------------------------------------------------------
# invalidate it as it has to be recalculated
# check for column header's image availability
# TODO: determine the max width somehow...
# !virtual
#  if the cached column width isn't valid then recalculate it
# invalidate it as it has to be recalculated
# ----------------------------------------------------------------------------
# item state
# ----------------------------------------------------------------------------
# Set item state if user wants
#  update the Max Width Cache if needed
# update the item on screen
# first deal with selection
# set/clear select state
# optimized version for virtual listctrl.
# clear for non virtual (somewhat optimized by using GetNextItem())
# unfocus all: only one item can be focussed, so clearing focus for
# all items is simply clearing focus of the focussed item.
#(setting focus to all items makes no sense, so it is not handled here.)
# safe because of the check above
# do we need to change the focus?
# don't do anything if this item is already focused
# unfocus
# don't do anything if this item is not focused
# we must unselect the old current item as well or we
# might end up with more than one selected item in a
# single selection control
# do we need to change the selection state?
# selecting the item also makes it the focused one in the
# single sel mode
# off
# only the current item may be selected anyhow
# Get item state if user wants it
# Should we raise an error here?!?
# Blocked by user
# Handles the eventual window associated to the item
# ----------------------------------------------------------------------------
# item count
# ----------------------------------------------------------------------------
# scrollbars must be reset
# deal with the quick case first
# virtual controls remmebers all its selections itself
# TODO: we probably should maintain the number of items selected even for
#       non virtual controls as enumerating all lines is really slow...
# ----------------------------------------------------------------------------
# item position/size
# ----------------------------------------------------------------------------
# we need to find the longest/tallest label
# we need logical, not physical, coordinates here, so use
# GetLineRect() instead of GetItemRect()
# some fudge needed to make it look prettier
# account for the scrollbars if necessary
# ensure that we're laid out, otherwise we could return nonsense
# Adjust rect to specified column
# ----------------------------------------------------------------------------
# geometry calculation
# ----------------------------------------------------------------------------
# Note that we do not call GetClientSize() here but
# GetSize() and subtract the border size for sunken
# borders manually. This is technically incorrect,
# but we need to know the client area's size WITHOUT
# scrollbars here. Since we don't know if there are
# any scrollbars, we use GetSize() instead. Another
# solution would be to call SetScrollbars() here to
# remove the scrollbars and call GetClientSize() then,
# but this might result in flicker and - worse - will
# reset the scrollbars to 0 which is not good at all
# if you resize a dialog/window, but don't want to
# reset the window scrolling. RR.
# Furthermore, we actually do NOT subtract the border
# width as 2 pixels is just the extra space which we
# need around the actual content in the window. Other-
# wise the text would e.g. touch the upper border. RR.
# all lines have the same height and we scroll one line per step
# !report
# we have 3 different layout strategies: either layout all items
# horizontally/vertically (ULC_ALIGN_XXX styles explicitly given) or
# to arrange them in top to bottom, left to right (don't ask me why
# not the other way round...) order
# ULC_ALIGN_LEFT
# traverse the items again and tweak their sizes so that they are
# all the same in a row
# "flowed" arrangement, the most complicated case
# at first we try without any scrollbars, if the items don't fit into
# the window, we recalculate after subtracting the space taken by the
# scrollbar
# Now we have decided that the items do not fit into the
# client area, so we need a scrollbar
# We have reached the last item.
# Everything fits, no second try required.
# This item is selected - do whatever is needed with it
# notice that we start with the next item (or the first one if item == -1)
# and this is intentional to allow writing a simple loop to iterate over
# all selected items
# this is not an error because the index was ok initially, just no
# such item
# any will do
# ----------------------------------------------------------------------------
# deleting stuff
# ----------------------------------------------------------------------------
# we don't need to adjust the index for the previous items
# if the current item is being deleted, we want the next one to
# become selected - unless there is no next one - so don't adjust
# self._current in this case
#  mark the Column Max Width cache as dirty if the items in the line
#  we're deleting contain the Max Column Width
# we need to refresh the (vert) scrollbar as the number of items changed
# update all the items
#  we only cache max widths when in Report View
# invalidate it as it has to be recalculated
# nothing to do - in particular, don't send the event
# to make the deletion of all items faster, we don't send the
# notifications for each item deletion in this case but only one event
# for all of them: this is compatible with wxMSW and documented in
# DeleteAllItems() description
# ----------------------------------------------------------------------------
# scanning for an item
# ----------------------------------------------------------------------------
# We have to call this here because the label in question might just have
# been added and its position is not known yet
# TODO: optimize it too! this is less simple than for report view but
#       enumerating all items is still not a way to do it!!
# ----------------------------------------------------------------------------
# adding stuff
# ----------------------------------------------------------------------------
# calculate the width of the item and adjust the max column width
# If an item is selected at or below the point of insertion, we need to
# increment the member variables because the current row's index has gone
# up by one
# update all the items
# invalidate it as it has to be recalculated
# ----------------------------------------------------------------------------
# sorting
# ----------------------------------------------------------------------------
# function code
# ----------------------------------------------------------------------------
# scrolling
# ----------------------------------------------------------------------------
# update our idea of which lines are shown when we redraw the window the
# next time
# No variable row height
# this may happen if SetScrollbars() hadn't been called yet
# we redraw one extra line but this is needed to make the redrawing
# logic work when there is a fractional number of lines on screen
# empty control
# No colour given, generate a slightly darker from the
# UltimateListCtrl background colour
# 0 = Horizontal, 1 = Vertical
# Disabled items colour
# TODO: this should work in all views but is not implemented now
# see comment in MoveToItem() for why we do this
# -------------------------------------------------------------------------------------
# UltimateListCtrl
# -------------------------------------------------------------------------------------
# ----------------------------------------------------
# How do you translate all this blah-blah to wxPython?
# ----------------------------------------------------
#if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
#        wxFont font
#if wxOSX_USE_ATSU_TEXT
#        font.MacCreateFromThemeFont( kThemeSmallSystemFont )
#else
#        font.MacCreateFromUIFont( kCTFontSystemFontType )
#endif
#        m_headerWin->SetFont( font )
#endif
# ----------------------------------------------------
# How do you translate all this blah-blah to wxPython?
# ----------------------------------------------------
#if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
#        wxFont font
#if wxOSX_USE_ATSU_TEXT
#        font.MacCreateFromThemeFont( kThemeSmallSystemFont )
#else
#        font.MacCreateFromUIFont( kCTFontSystemFontType )
#endif
#        m_headerWin->SetFont( font )
#endif
# some styles can be set without recreating everything (as happens in
# SetAGWWindowStyleFlag() which calls ListMainWindow.DeleteEverything())
# we need to notify the main window about this change as it must
# update its data structures
# different from Windows ?
# This item is selected - do whatever is needed with it
# Sort items.
# The return value is a negative number if the first item should precede the second
# item, a positive number of the second item should precede the first,
# or zero if the two items are equivalent.
# function code
# ----------------------------------------------------------------------------
# event handlers
# ----------------------------------------------------------------------------
# We don't have the proper column sizes until we are visible so
# use CallAfter to resize the columns on the first display
# We need to override OnSize so that our scrolled
# window a) does call Layout() to use sizers for
# positioning the controls but b) does not query
# the sizer for their size and use that for setting
# the scrollable area as set that ourselves by
# calling SetScrollbar() further down.
# do it only if needed
# ----------------------------------------------------------------------------
# font/colours
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# methods forwarded to self._mainWin
# ----------------------------------------------------------------------------
# The test in window.cpp fails as we are a composite
# window, so it checks against "this", but not self._mainWin.
# Something is better than nothing...
# 100x80 is what the MSW version will get from the default
# wx.Control.DoGetBestSize
# ----------------------------------------------------------------------------
# virtual list control support
# ----------------------------------------------------------------------------
# this is a pure virtual function, in fact - which is not really pure
# because the controls which are not virtual don't need to implement it
# this is a pure virtual function, in fact - which is not really pure
# because the controls which are not virtual don't need to implement it
# this is a pure virtual function, in fact - which is not really pure
# because the controls which are not virtual don't need to implement it
# no attributes by default
#
# Generic UltimateListCtrl is more or less a container for two other
# windows which drawings are done upon. These are namely
# 'self._headerWin' and 'self._mainWin'.
# Here we override 'virtual wxWindow::Refresh()' to mimic the
# behaviour UltimateListCtrl has under wxMSW.
#
# The easy case, no rectangle specified.
# Refresh the header window
# Refresh the main window
# preserve all other attributes too
# --------------------------------------------------------------------------------- #
# XLSGRID wxPython IMPLEMENTATION
#
# Andrea Gavana @ 08 Aug 2011
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
#
# TODO List
#
# Current todo list:
#
# 1. There is currently no support for rich text, i.e. strings containing partial
#    bold, italic and underlined text, change of font inside a string, etc... xlrd
#    supports those (from version 0.7.2 in SVN) but there is no easy way to handle
#    changing fonts/colours/formatting in the same string in wxPython;
#
# 2. XLSGrid is sufficiently efficient and fast for reasonably small Excel files.
#    There might be some improvement to be made in the code to make it work with
#    bigger files and in a faster way;
#
# 3. There is currently no support for strikethrough fonts, although xlrd correctly
#    reports this format. The issue is a bug in wxWidgets itself which doesn't
#    allow the creation of strikethrough fonts (http://trac.wxwidgets.org/ticket/9907).
#
# For all kind of problems, requests of enhancements and bug reports, please write
# to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:         phoenix-port, documented, unittest, py3-port
#
# End of comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# Version Info
# Start the imports
#----------------------------------------------------------------------
# Constants used to translate xlrd stuff into wxPython stuff
#----------------------------------------------------------------------
# Unicode ordinals for Hebrew, Arabic and Syriac
# I don't know if there are other RTL languages
# To guess text direction we exclude digits and punctuation
#----------------------------------------------------------------------
# Images used to draw the hatching on Excel cells background
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#c14
# subscript/superscript
# No support for strike-through fonts in wxWidgets
#        if font.struck_out:
#            style = wx.FONTFLAG_DEFAULT
#            if bold:
#                style += wx.FONTFLAG_BOLD
#            if underline:
#                style += wx.FONTFLAG_UNDERLINED
#            if font.italic:
#                style += wx.FONTFLAG_ITALIC
#
#            style += wx.FONTFLAG_STRIKETHROUGH
#            self.font = wx.FFont(size, family, style, name.encode())
#        else:
# Accounting and currency shit
# Fall back to string
#," in number_format:
# clear the background
# The base class must be initialized *first*
# evt.GetRow() and evt.GetCol() would be nice to have here,
# but as this is a mouse event, not a grid event, they are not
# available and we need to compute them by hand.
# New in xlrd version 0.7.2 from SVN
# New in xlrd version 0.7.2 from SVN
# --------------------------------------------------------------------------------- #
# ZoomBar wxPython IMPLEMENTATION
#
# Andrea Gavana @ 19 Dec 2012, 21.00 GMT
#
#
# For all kind of problems, requests of enhancements and bug reports, please write
# to me at:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, obviously, to the wxPython mailing list!!!
#
# Tags:         phoenix-port, documented, unittest, py3-port
#
# End of comments
# --------------------------------------------------------------------------------- #
# our normal wxApp-derived class, as usual
# ----------------------------------------------------------------------------
# ZoomBar events and binding for handling them
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# Larger number gives a greater zoom effect
# Whether this is a reflection or not
# original button
# the reflection
# Zoom from the center. If True button zooms upwards.
# Whether you want reflections or not
# Allows us to nudge a reflection closer to original
# Extension of the reflection. BMP or PNG etc.
# Initial size of the buttons
# Show labels on hovering
# used internally
# reposition the buttons
# do any buttons on the right
# Reset
# now to the left
# only for 2nd and more
# method to add required buttons
# Sets up the initial buttons and sizes them from the center
# repositions the button centrally
# odd buttons one is central - even, half by half
# And the reflection if any
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         auibar.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:         31 March 2009
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# wxPython version string
# AuiToolBar events
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# normal, enabled
# ----------------------------------------------------------------------
# we only care about the text height here since the text
# will get cropped based on the width of the item
# draw an even lighter background for checked item hovers (since
# the hover background is the same colour as the check background)
# it's important to put this code in an else statment after the
# hover, otherwise hovers won't draw properly for checked items
# set the item's text colour based on if it is disabled
# it's important to put this code in an else statment after the
# hover, otherwise hovers won't draw properly for checked items
# set the item's text colour based on if it is disabled
# don't draw the label if it is wider than the item width
# set the label's text colour
# space between top border and bitmap
# space between bitmap and text
# space between left border and bitmap
# space between bitmap and text
# if the tool has a dropdown button, add it to the width
# no disabled bitmap specified, we need to make one
# if the item doesn't fit on the toolbar, return None
# apply tool packing
# if the item doesn't fit on the toolbar, return None
# TODO: wx.ToolBar compatibility
# TODO: wx.ToolBar compatibility
# ignore separators
# find out the mouse's current position
# find out if the mouse cursor is inside the dropdown rectangle
# this will prevent us from returning the index of the
# first separator in the toolbar since its id is equal to -1
# take the dropdown size into account
# take the dropdown size into account
# empty toolbar always 'fits'
# entire toolbar content fits if the last tool fits
# create the new sizer to add toolbar elements to
# add gripper area
# add "left" padding
# add tool packing
# add tool packing
# Make sure that there is only one sizer to this control
# proportional items will disappear from the toolbar if
# their min width is not set to something really small
# add tool packing
# add "right" padding
# add drop down area
# add drop down area only if there is any custom overflow
# item; otherwise, the overflow button should not affect the
# min size.
# the outside sizer helps us apply the "top" and "bottom" padding
# add "top" padding
# add the sizer that contains all of the toolbar elements
# add "bottom" padding
# remove old sizer
# calculate the rock-bottom minimum size
# reset the min sizes to what they were
# set control size
# make sure we aren't checking an item that can't be
# hide all flexible items and items that do not fit into toolbar
# show all items
# paint the gripper
# calculated how far we can draw items
# paint each individual tool
# draw a separator
# draw a text label only
# draw a regular button or dropdown button
# draw a regular toggle button or a dropdown one
# draw a toggle button
# draw the control's label
# fire a signal to see if the item wants to be custom-rendered
# paint the overflow button
# find aui manager
# gripper was clicked
# add custom overflow prepend items, if any
# only show items that don't fit in the dropdown
# add custom overflow append items, if any
# fire the tool dropdown event
# reset drag and drop member variables
# repaint immediately
# find aui manager
# reset drag and drop member variables
# right-clicked on the invalid area of the toolbar
# reset member variables
# reset member variables
# start a drag event
# no hit item, remove any hit item
# figure out tooltips
# if we've pressed down an item and we're hovering
# over it, make sure it's state is set to pressed
# figure out the dropdown button state (are we hovering or pressing it?)
# No previews here
# Wrong tool name
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         auibook.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:         31 March 2009
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# AuiNotebook events
# Define a new event for a drag cancelled
# Define events for editing a tab label
# Create event binders
# -----------------------------------------------------------------------------
# Auxiliary class: TabTextCtrl
# This is the temporary ExpandoTextCtrl created when you edit the text of a tab
# -----------------------------------------------------------------------------
# FIXME: what are all these hardcoded 4, 8 and 11s really?
# nothing changed, always accept
# when an item remains unchanged, the owner
# needs to be notified that the user decided
# not to change the tree item label, and that
# the edit has been cancelled
# vetoed by the user
# accepted, do rename the item
# Notify the owner about the changes
# Even if vetoed, close the control (consistent with MSW)
# auto-grow the textctrl:
# We must finish regardless of success, otherwise we'll get
# focus problems:
# We must let the native text control handle focus, too, otherwise
# it could have problems with the cursor (e.g., in wxGTK).
# ----------------------------------------------------------------------
# page's associated window
# caption displayed on the tab
# tab's bitmap
# tab's disabled bitmap
# tab's tooltip
# tab's hit rectangle
# True if the page is currently active
# True if the page is currently enabled
# true if the page is currently hidden
# True if the page has a close button using the style
# AUI_NB_CLOSE_ON_ALL_TABS
# A control can now be inside a tab
# If True, a tab can be renamed by a left double-click
# Last time this page was selected
# ----------------------------------------------------------------------
# button's id
# current state (normal, hover, pressed, etc.)
# buttons location (wxLEFT, wxRIGHT, or wxCENTER)
# button's hover bitmap
# button's disabled bitmap
# button's hit rectangle
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ---------------------------------------------------------------------------- #
# Class TabNavigatorProps
# ---------------------------------------------------------------------------- #
# Attributes
# Accessors
# ---------------------------------------------------------------------------- #
# Class TabNavigatorWindow
# ---------------------------------------------------------------------------- #
# Place a spacer of 2 pixels
# Out signpost bitmap is 24 pixels
# Connect events to the list box
# Process tab/shift-tab if dialog has focus also.
# Process tab/shift-tab if panel has focus also.
# Connect paint event to the panel
# Connect mouse events to the panel
# CentreOnMouse
# Set focus on the list box to avoid having to click on it to change
# the tab selection under GTK.
# Select next page
# Previous page
# Index of currently selected page
# Total number of pages
# List of (index, AuiNotebookPage)
# Sort pages using last access time. Most recently used is the
# first in line
# Manually add the current selection as first item
# Remaining ones are added in the next loop
# Select the next entry after the current selection
# Draw the caption title and place the bitmap
# get the bitmap optimal position, and draw it
# get the text position, and draw it
# ----------------------------------------------------------------------
# -- AuiTabContainer class implementation --
# check for new close button settings
# let the art provider know how many pages we have
# let the art provider know how many pages we have
# get page entry, make a copy of it
# remove old page entry
# insert page where it should be
# let the art provider know how many pages we have
# use the same layout direction as the window DC uses to ensure that the
# text is rendered correctly
# create off-screen bitmap
# prepare the tab-close-button array
# make sure tab button entries which aren't used are marked as hidden
# make sure there are enough tab button entries to accommodate all tabs
# find out if size of tabs is larger than can be
# afforded on screen
# determine if a close button is on this tab
# Calculate the width of visible buttons
# show left/right buttons
# hide left/right buttons
# Re-calculate the width of visible buttons (may have been hidden/shown)
# Shift the tab offset down to make use of available space
# determine whether left button should be enabled
# draw background
# draw buttons
# draw the buttons on the right side
# draw the buttons on the left side
# buttons before the tab offset must be set to hidden
# draw tab before tab offset
# draw the tabs
# determine if a close button is on this tab
# make sure to deactivate buttons which are off the screen to the right
# draw the active tab again so it stands in the foreground
# Hasn't been rendered yet assume it's visible
# First check if both buttons are disabled - if so, there's no need to
# check further for visibility.
# Tab must be visible
# If tab is less than the given offset, it must be invisible by definition
# draw buttons
# calculate size of the buttons on the right side
# calculate size of the buttons on the left side
# See if the given page is visible at the given tab offset (effectively scroll position)
# haven't found the tab, and we've run out of space, so return False
# If not all of the tab is visible, and supposing there's space to display it all,
# we could do better so we return False.
# Shouldn't really get here, but if it does, assume the tab is visible to prevent
# further looping in calling code.
# show new active page first
# hide all other pages
# ----------------------------------------------------------------------
# -- AuiTabCtrl class implementation --
# AuiNotebooks always want to receive this event
# even if the tab is already active, because they may
# have multiple tab controls
# make sure we're still clicking the button
# check if the mouse is hovering above a button
# if the mouse has moved from one tab to another then restart the
# tooltip timer.
# Create the custom draw image from the icons and the text of the item
# Capture the mouse cursor position offset relative to
# The tab image location
# Apply the drag images offset
# Not processed? Do an explicit tab into the page.
# We can't leave tab processing to the system on Windows, tabs and keys
# get eaten by the system and not processed properly if we specify both
# wxTAB_TRAVERSAL and wxWANTS_CHARS. And if we specify just wxTAB_TRAVERSAL,
# we don't key arrow key events.
# Not processed? Do an explicit tab into the page.
# ----------------------------------------------------------------------
# TODO: elif (GetAGWFlags() & AUI_NB_LEFT)
# TODO: elif (GetAGWFlags() & AUI_NB_RIGHT)
# avoid passing negative height to wx.Window.SetSize(), this
# results in assert failures/GTK+ warnings
# TODO: elif (GetAGWFlags() & AUI_NB_LEFT)
# TODO: elif (GetAGWFlags() & AUI_NB_RIGHT)
# does nothing
# ----------------------------------------------------------------------
# -- AuiNotebook class implementation --
# no dock size constraint
# Build list of panes/tabs
# add tab id's
# Add frame perspective
# Remove all tab ctrls (but still keep them in main index)
# find out which onscreen tab ctrl owns this tab
# remove the tab from ctrl
# No pages in this perspective...
# Get pane name
# create a new tab frame
# create a pane info structure with the information
# about where the pane should be added
# Get list of tab id's and move them to pane
# Check if this page has an 'active' marker
# Move tab to pane
# Load the frame perspective
# Force refresh of selection
# if window is already initialized, recalculate the tab height
# if window is already initialized, recalculate the tab height
# get the tab ctrl height we will use
# if the tab control height needs to change, update
# all of our tab controls with the new height
# the placeholder hint window should be set to this size
# count number of tab controls
# if there is only one tab control, the first split
# should happen around the middle
# this is in place of a more complicated calculation
# that needs to be implemented
# if a fixed tab ctrl height is specified,
# just return that instead of calculating a
# tab height
# find out new best tab height
# if the control is already initialized
# let all of the tab children know about the new style
# if there are currently no tabs, the first added
# tab must be active
# if that was the first page added, even if
# select is False, it must become the "current page"
# (though no select events will be fired)
# adjust selected index
# hide the window in advance, as this will
# prevent flicker
# save pointer of window being deleted
# make sure we found the page
# find out which onscreen tab ctrl owns this tab
# remove the tab from main catalog
# remove the tab from the onscreen tab ctrl
# set the active window since its index may be changed
# save pointer of window being hidden
# make sure we found the page
# find out which onscreen tab ctrl owns this tab
# hide the tab from main catalog
# hide the tab from the onscreen tab ctrl
# hide the tab ctrl if there is no shown tab.
# set new page as active in the tab split
# if the page hidden was the current page for the
# entire tab control, then record the window
# pointer of the new active page for activation
# set new active pane
# no shown page
# no active page on tab ctrl, set it to wnd
# no current page, set it to wnd
# update our own tab catalog
# update what's on screen
# update our own tab catalog
# update our own tab catalog
# tab height might have changed
# update what's on screen
# update our own tab catalog
# update our own tab catalog
# update our own tab catalog
# update what's on screen
# update our own tab catalog
# update our own tab catalog
# tab height might have changed
# update what's on screen
# tab height might have changed
# update what's on screen
# update our own tab catalog
# update what's on screen
#Update page access time
# don't change the page unless necessary
# however, clicking again on a tab should give it the focus.
# program allows the page change
# event is no longer allowed after handler
# set fonts
# Set the focus to the page if we're not currently focused on the tab.
# This is Firefox-like behaviour.
# since a tab was clicked, let the parent know that we received
# the focus, even if we will assign that focus immediately
# to the child tab in the SetSelection call below
# (the child focus event will also let AuiManager, if any,
# know that the notebook control has been activated)
# find the tab ctrl with the current page
# no current page, just find the first tab ctrl
# If there is no tabframe at all, create one
# get the page's window pointer
# notebooks with 1 or less pages can't be split
# find out which tab control the page currently belongs to
# choose a split size
# because there are two panes, always split them
# equally
# create a new tab frame
# create a pane info structure with the information
# about where the pane should be added
# remove the page from the source tabs
# add the page to the destination tabs
# force the set selection function reset the selection
# set the active page to the one we just split off
# remember the tab now selected
# select first tab as destination
# iterate all other tabs
# get win reference
# get tab title
# get page bitmap
# remove from notebook
# re-add in the same position so it will tab
# restore orignial selected tab
# Unsplit not allowed
# Hopefully it will work
# How did we get here?
# This is a bug on MSW, for disabled pages wx.FindWindowAtPoint
# returns the wrong window.
# See http://trac.wxwidgets.org/ticket/2942
# remove the page from the source tabs
# add the page to the destination tabs
# notify owner that the tabbar background has been double-clicked
# notify owner that the tabbar background has been double-clicked
# always hide the hint for inner-tabctrl drag
# if tab moving is not allowed, leave
# this is an inner-tab drag/reposition
# prevent jumpy drag
# if external drag is allowed, check if the tab is being dragged
# over a different AuiNotebook control
# if we aren't over any window, stop here
# Use CallAfter so we overwrite the hint that might be
# shown by our superclass:
# make sure we are not over the hint window
# we are either over a hint window, or not over a tab
# window, and there is no where to drag to, so exit
# Use CallAfter so we overwrite the hint that might be
# shown by our superclass:
# if there are less than two panes, split can't happen, so leave
# if tab moving is not allowed, leave
# get the mouse position, which will be used to determine the drop point
# check for an external move
# find out from the destination control
# if it's ok to drop this tab here
# dropping must be explicitly approved by control owner
# no answer or negative answer
# drop was allowed
# Check that it's not an impossible parent relationship
# get main index of the page
# make a copy of the page info
# remove the page from the source notebook
# reparent the page
# Reparent the control in a tab (if any)
# find out the insert idx
# add the page to the new notebook
# set the selection in the destination tab control
# notify owner that the tab has been dragged
# notify the target notebook that the tab has been dragged
# Use CallAfter so we our superclass can deal with the event first
# only perform a tab split if it's allowed
# If the pointer is in an existing tab frame, do a tab insert
# there is no suitable drop location here, exit out
# If there is no tabframe at all, create one
# remove the page from the source tabs
# add the page to the destination tabs
# force the set selection function reset the selection
# set the active page to the one we just split off
# notify owner that the tab has been dragged
# if we've just removed the last tab from the source
# tab set, the remove the tab control completely
# if we've just removed the last tab from the source
# tab set, the remove the tab control completely
# if we've just removed the last tab from the source
# tab set, the remove the tab control completely
# check to see if there is still a center pane
# if there isn't, make a frame the center pane
# if we're dragging a tab, don't change the current selection.
# This code prevents a bug that used to happen when the hint window
# was hidden.  In the bug, the focus would return to the notebook
# child, which would then enter this handler and call
# SetSelection, which is not desired turn tab dragging.
##        # change the tab selection to the child
##        # which was focused
##        idx = self._tabs.GetIdxFromWindow(event.GetWindow())
##        if idx != -1 and idx != self._curpage:
##            self.SetSelection(idx)
# Need to do CallAfter so that the selection and its
# associated events get processed outside the context of
# this key event. Not doing so causes odd issues with the
# window focus under certain use cases on Windows.
# a dialog is already opened
# change pages
# FIXME: the problem with this is that if we have a split notebook,
# we selection may go all over the place.
# we get this event in 3 cases
#
# a) one of our pages might have generated it because the user TABbed
# out from it in which case we should propagate the event upwards and
# our parent will take care of setting the focus to prev/next sibling
#
# or
#
# b) the parent panel wants to give the focus to us so that we
# forward it to our selected page. We can't deal with this in
# OnSetFocus() because we don't know which direction the focus came
# from in this case and so can't choose between setting the focus to
# first or last panel child
#
# or
#
# c) we ourselves (see MSWTranslateMessage) generated the event
#
# the wxObject* casts are required to avoid MinGW GCC 2.95.3 ICE
# no, it doesn't come from child, case (b) or (c): forward to a
# page but only if direction is backwards (TAB) or from ourselves,
# so that the page knows that the event comes from it's parent
# and is being propagated downwards
#else: page manages focus inside it itself
# otherwise set the focus to the notebook itself
# send this event back for the 'wraparound' focus.
# if the close button is to the right, use the active
# page selection to determine which page to close
# This is a notebook preview
# remove the page from the source tabs
# Don't fire the event
# ask owner if it's ok to close the tab
# notify owner that the tab has been closed
# patch event through to owner
# if the AUI_NB_MIDDLE_CLICK_CLOSE is specified, middle
# click should act like a tab close action.  However, first
# give the owner an opportunity to handle the middle up event
# for custom action
# check if we are supposed to close on middle-up
# simulate the user pressing the close button on the tab
# patch event through to owner
# patch event through to owner
# Recalculate tab container size based on new font
##        if focusWin:
##            focusWin.SetFocus()
# create the list control
# assign the image list to it
# create some items for the list
# update our own tab catalog
# update what's on screen
# let owner know that the edit was cancelled
# tab height might have changed
# vetoed by user
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         aui_constants.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:         31 March 2009
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# ------------------------- #
# - AuiNotebook Constants - #
# ------------------------- #
# For tabart
# --------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# For auibook
# -----------
# not implemented yet
# not implemented yet
#----------------------------------------------------------------------
# -------------------------- #
# - FrameManager Constants - #
# -------------------------- #
# Docking Styles
# Floating/Dragging Styles
# Panes Customization
# Caption Gradient Type
# Pane Button State
# Pane minimize mode
# Button kind
# Pane Insert Level
# Action constants
# Drop/Float constants
# some built in bitmaps
#000000",
#FFFFFF",
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# ------------------------ #
# - AuiToolBar Constants - #
# ------------------------ #
# AuiToolBar settings
# AuiToolBar text orientation
# unused/unimplemented
# unused/unimplemented
# AuiToolBar tool orientation
# standard
# rotation of 90 on the right
# rotation of 90 on the left
# --------------------- #
# - AuiMDI* Constants - #
# --------------------- #
# ----------------------------- #
# - AuiDockingGuide Constants - #
# ----------------------------- #
# ------------------------------- #
# - AuiSwitcherDialog Constants - #
# ------------------------------- #
# Easy image extraction.
# Create directory.
## print(globals())
## print(key, bitmap)
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         aui_switcherdialog.py
# Purpose:
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, documented, py3-port
#----------------------------------------------------------------------------
# Add the main windows and toolbars, in two separate columns
# We'll use the item 'id' to store the notebook selection, or -1 if not a page
# Now add the wxAuiNotebook pages
# Select the focused window
# Show the switcher dialog
# In GTK+ we can't use Ctrl+Tab; we use Ctrl+/ instead and tell the switcher
# to treat / in the same was as tab (i.e. cycle through the names)
# Define a translation function
# If on Windows XP/Vista, use more appropriate colours
#x += textMarginX
# Start off allowing for an icon
# Find the first item from the end whose row matches and whose column is equal or lower
# Find the first item from the end whose row matches and whose column is equal or lower
# NOTE: this is odd but it is the only way for the focus to
#       work correctly on wxMac...
# Spacing between edge of window or between columns
# Inter-row spacing
# Make sure we don't orphan a group
# Repeat the last item, in the next column
# Attributes
# Draw border around the HTML control
# Convert a colour to a 6-digit hex string
#") + backgroundColourHex + _("\"><b>") + item.GetTitle() + _("</b>")
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         aui_utilities.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:         31 March 2009
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# ialpha is 0..200 where 0 is completely black
# and 200 is completely white and 100 is the same
# convert that to normal alpha 0.0 - 1.0
# blend with white
# 0 = transparent fg 1 = opaque fg
# blend with black
# 0 = transparent fg 1 = opaque fg
# if the colour is especially dark, then
# make the contrast even lighter
# first check if the text fits with no problems
# the base_colour is too pale to use as our base colour,
# so darken it a bit
# We take the percent way of the colour from colour -. white
# Process events starting with the window with the focus, if any.
# Check if this is a descendant of this frame.
# If not, win will be set to NULL.
# get the text height
# get the text width
#---------------------------------------------------------------------------
# TabDragImage implementation
# This class handles the creation of a custom image when dragging
# AuiNotebook tabs
#---------------------------------------------------------------------------
# Gtk and Windows unfortunatly don't do so well with transparent
# drawing so this hack corrects the image to have a transparent
# background.
# Whidbey docking guides
# Aero docking style
# Create a DC for the whole screen area
# Create a Bitmap that will later on hold the screenshot image
# Note that the Bitmap must have a size big enough to hold the screenshot
# -1 means using the current default colour depth
# Create a memory DC that will be used for actually taking the screenshot
# Tell the memory DC to use our Bitmap
# all drawing action on the memory DC will go to the Bitmap now
# Blit (in this case copy) the actual screen on the memory DC
# and thus the Bitmap
# Copy to this X coordinate
# Copy to this Y coordinate
# Copy this width
# Copy this height
# From where do we copy?
# What's the X offset in the original DC?
# What's the Y offset in the original DC?
# Select the Bitmap out of the memory DC by selecting a new
# uninitialized Bitmap
# Select the Bitmap out of the memory DC by selecting a new
# uninitialized Bitmap
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         dockart.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:         31 March 2009
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# Try to import winxptheme for ModernDockArt
# -- AuiDefaultDockArt class implementation --
# default metric values
# This really should be implemented in wx.SystemSettings
# There is no way to do this that I am aware outside of using
# the cocoa python bindings. 8 pixels looks correct on my system
# so hard coding it for now.
# How do I translate this?!? Not sure of the below implementation...
# SInt32 height;
# GetThemeMetric( kThemeMetricSmallPaneSplitterHeight , &height );
# self._sash_size = height;
# Carbon.Appearance.kThemeMetricPaneSplitterHeight
# No custom bitmaps for the pane close button
# Change the MAC close bitmap colour
# No custom bitmaps for the pane close button
# Change the MAC close bitmap colour
# AG: How do we make this work?!?
# RendererNative does not use the sash_brush chosen by the user
# and the rect.GetSize() is ignored as the sash is always drawn
# 3 pixel wide
# wx.RendererNative.Get().DrawSplitterSash(window, dc, rect.GetSize(), pos, orient)
# we have to clear first, otherwise we are drawing a light striped pattern
# over an already darker striped background
# Draw the icon centered vertically
# text offset
# button padding
# draw the background behind the button
# Darker the bitmap a bit
# draw the button itself
# horizontal sash
# Get the size of a small close button (themed)
# We only highlight the active pane with the caption text being in bold.
# So we do not want a special colour for active elements.
# text offset
# button padding
# If rect x/y values are negative rc.right/bottom values will overflow and winxptheme.DrawThemeBackground
# will raise a TypeError. Ensure they are never negative.
# Get the real button position (compensating for borders)
# Draw the themed close button
# CBS_DISABLED
# CBS_NORMAL
# CBS_HOT
# CBS_PUSHED
# inactive pane
# CBS_NORMAL
# CBS_HOT
# CBS_PUSHED
# Fallback to default closebutton if themes are not enabled
# -*- coding: utf-8 -*-
# --------------------------------------------------------------------------- #
# AUI Library wxPython IMPLEMENTATION
#
# Original C++ Code From Kirix (wxAUI). You Can Find It At:
#
#    License: wxWidgets license
#
# http:#www.kirix.com/en/community/opensource/wxaui/about_wxaui.html
#
# Current wxAUI Version Tracked: wxWidgets 2.9.4 SVN HEAD
#
#
# Python Code By:
#
# Andrea Gavana, @ 23 Dec 2005
# Latest Revision: 17 Feb 2013, 21.00 GMT
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# just for isinstance
# Define this as a translation function
# AUI Events
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# window representing the docking target
# dock direction (top, bottom, left, right, center)
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #
# event declarations/classes
# ---------------------------------------------------------------------------- #
# used internally
# used internally
# used internally
# used internally
# By defaulting to 1000, the tab will get placed at the end
# Remove any floating frame
# Copy over the members that pertain to docking position
# Null AuiPaneInfo reference
# ---------------------------------------------------------------------------- #
# ============================================================================
# implementation
# ============================================================================
# ---------------------------------------------------------------------------
# AuiDockingGuideWindow
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# AuiSingleDockingGuide
# ---------------------------------------------------------------------------
# Use of FRAME_SHAPED on wxMac causes the frame to be visible
# breaking the docking hints.
# Skip the event on wxGTK
# HACK so we don't crash when SetShape is called
# ---------------------------------------------------------------------------
# AuiCenterDockingGuide
# ---------------------------------------------------------------------------
# top-left diamond
# bottom-left diamond
# top-right diamond
# bottom-right diamond
# Skip the event on wxGTK
# ----------------------------------------------------------------------------
# AuiDockingHintWindow
# ----------------------------------------------------------------------------
# Having the shaped frame causes the frame to not be visible
# with the transparent style hints.
# Can't set background colour on a frame on wxMac
# so add a panel to set the colour on.
# Reverse the order of the bottom 4 bits
# HACK so we don't crash when SetShape is called
# Need to manually do layout since its a borderless frame.
# ---------------------------------------------------------------------------- #
# -- AuiFloatingFrame class implementation --
# On wxMac we always use native miniframes
# Carry over the minimum size
# if the best size is smaller than the min size
# then set the min size to the best size as well
# if the frame window's max size is greater than the min size
# then set the max size to the min size as well
# because SetSizeHints() calls Fit() too (which sets the window
# size to its minimum allowed), we keep the size before calling
# SetSizeHints() and reset it afterwards...
# if we do not do this, then we can crash...
# skip the first move event
# As on OSX moving windows are not getting all move events, only sporadically, this difference
# is almost always big on OSX, so avoid this early exit opportunity
# skip if moving too fast to avoid massive redraws and
# jumping hint windows
# However still update the internally stored position to avoid
# snapping back to the old one later.
# prevent frame redocking during resize
# notify the owner manager that the pane has started to move
# notify the owner manager that the pane is moving
# notify the owner manager that the pane has finished moving
# -- static utility functions --
# Windows Vista
# Draw the nice XP style splitter
# make adjustments for toolbars
# Convenience function
# With Core Graphics on Mac, it's not possible to show sash feedback,
# so we'll always use live update instead.
# Convenience function
# With Core Graphics on Mac, it's not possible to show sash feedback,
# so we'll always use live update instead.
# ---------------------------------------------------------------------------- #
# is the pane dockable?
# if a key modifier is pressed while dragging the frame,
# don't dock the window
# we are not interested in typeDock, because this space
# isn't used to draw anything, just for measurements
# besides, the entire dock area is covered with other
# rectangles, which we are interested in.
# if we already have a hit on a more specific item, we are not
# interested in a pane hit.  If, however, we don't already have
# a hit, returning a pane hit is necessary for some operations
# if the point is inside the rectangle, we have a hit
# SetAGWFlags() and GetAGWFlags() allow the owner to set various
# options which are global to AuiManager
# if the owner is going to manage an MDI parent frame,
# we need to add the MDI client window as the default
# center pane
# first, give the owner frame a chance to override
# Get the size of a small close button (themed)
# delete the last art provider, if any
# assign the new art provider
# This Is Addpane2
# check if the pane has a valid window
# check if the pane already exists
# check if the pane name already exists, this could reveal a
# bug in the library user's application
# if the new pane is docked then we should undo maximize
# set the pane window
# if the pane's name identifier is blank, create a random string
# set initial proportion (if not already set)
# prevent duplicate gripper -- both AuiManager and AuiToolBar
# have a gripper control.  The toolbar's built-in gripper
# meshes better with the look and feel of the control than ours,
# so turn AuiManager's gripper off, and the toolbar's on.
# GetClientSize() doesn't get the best size for
# a toolbar under some newer versions of wxWidgets,
# so use GetBestSize()
# this is needed for Win2000 to correctly fill toolbar backround
# it should probably be repeated once system colour change happens
# Add new item to notebook
# we also want to remove our captions sometimes
# shift the panes around, depending on the insert level
# if the window already exists, we are basically just moving/inserting the
# existing window.  If it doesn't exist, we need to add it and insert it
# if the new pane is docked then we should undo maximize
# we have a floating frame which is being detached. We need to
# reparent it to self._frame and destroy the floating frame
# reduce flicker
# reparent to self._frame and destroy the pane
# make sure there are no references to this pane in our uiparts,
# just in case the caller doesn't call Update() immediately after
# the DetachPane() call.  This prevets obscure crashes which would
# happen at window repaint if the caller forgets to call Update()
# if we were maximized, restore
# first, hide the window
# if we have a frame, destroy it
# make sure that we are the parent of this window
# if we are a notebook page, remove ourselves...
# the  code would index out of bounds
# if the last page of a sub-notebook was closed
# because the notebook would be deleted, before this
# code is executed.
# This code just prevents an out-of bounds error.
# now we need to either destroy or hide the pane
# close page if its IsDestroyOnClose flag is set
# Note: this could change our paneInfo reference ...
# save hidden state
# hide the pane, because only the newly
# maximized pane should show
# mark ourselves maximized
# last, show the window
# restore all the panes
# mark ourselves non-maximized
# last, show the window
# restore all the panes
# This is so we can get the tab-drag event.
# replace escaped characters so we can
# split up the string easily
# replace escaped characters so we can
# split up the string easily
# check layout string version
#    'layout1' = wxAUI 0.9.0 - wxAUI 0.9.2
#    'layout2' = wxAUI 0.9.2 (wxWidgets 2.8)
# mark all panes currently managed as docked and hidden
# see restorecaption param
# dock the notebook pages
# clear out the dock array; this will be reconstructed
# replace escaped characters so we can
# split up the string easily
# if the string is empty, we're done parsing
# Undo our escaping as LoadPaneInfo needs to take an unescaped
# name so it can be called by external callers
# restore pane caption from code
# notebook controls - auto add...
# the pane window couldn't be found
# in the existing layout -- skip it
# find the pane marked as our action pane
# set up each panes default position, and
# determine the size (width or height, depending
# on the dock's orientation) of each pane
# if there is no action pane, just return the default
# positions (as specified in pane.pane_pos)
# if the dock mode is fixed, make sure none of the panes
# overlap we will bump panes that overlap
#sizer_item = wx.SizerItem()
# find out the orientation of the item (orientation for panes
# is the same as the dock's orientation)
# this variable will store the proportion
# value that the pane will receive
# add pane buttons to the caption
# create the caption sizer
# create the caption sizer
# add pane buttons to the caption
# if we have buttons, add a little space to the right
# of them to ease visual crowding
# add the caption sizer
# add the pane window itself
# Make sure that there is only one sizer to this window
# determine if the pane should have a minimum size if the pane is
# non-resizable (fixed) then we must set a minimum size. Alternatively,
# if the pane.min_size is set, we must use that value as well
# add the vertical/horizontal sizer (caption, pane window) to the
# horizontal sizer (gripper, vertical sizer)
# finally, add the pane sizer to the dock sizer
# allowing space for the pane's border
#        sizer_item = wx.SizerItem()
# resizable bottom and right docks have a sash before them
# create the sizer for the dock
# add each pane to the dock
# figure out the real pane positions we will
# use, without modifying the each pane's pane_pos member
# at the end add a very small stretchable background area
# if this is not the first pane being added,
# we need to add a pane sizer
#  top and left docks have a sash after them
# empty all docks out
# always reset fixed docks' sizes, because
# the contained windows may have been resized
# iterate through all known panes, filing each
# of them into the appropriate dock. If the
# pane does not exist in the dock, add it
# don't layout hidden panes.
# find any docks with the same dock direction, dock layer, and
# dock row as the pane we are working on
# dock was not found, so we need to create a new one
# get the sizes of any docks that might
# overlap with our restored dock
# make list of widths or heights from the size in the dock rects
# set max size allowing for sashes and absolute minimum
# remove the pane from any existing docks except this one
# pane needs to be added to the dock,
# if it doesn't already exist
# remove the pane from any existing docks
# remove any empty docks
# configure the docks further
# sort the dock pane array by the pane's
# dock position (dock_pos), in ascending order
#~ dock.panes.sort(PaneSortFunc)
# for newly created docks, set up their initial size
# add space for the border (two times), but only
# if at least one pane inside the dock has a pane border
# if pane is on the top or bottom, add the caption height,
# but only if at least one pane inside the dock has a caption
# new dock's size may not be more than the dock constraint
# parameter specifies.  See SetDockSizeConstraint()
# absolute minimum size for a dock is 10 pixels
# determine the dock's minimum size
# if the pane's current size is less than it's
# minimum, increase the dock's size to it's minimum
# determine the dock's mode (fixed or proportional)
# determine whether the dock has only toolbars
# if the dock mode is proportional and not fixed-pixel,
# reassign the dock_pos to the sequential 0, 1, 2, 3
# e.g. remove gaps like 1, 2, 30, 500
# update dock_pos to its index in notebook
# if the dock mode is fixed, and none of the panes
# are being moved right now, make sure the panes
# do not overlap each other.  If they do, we will
# adjust the panes' positions
# shrink docks if needed
##        docks = self.SmartShrink(docks, AUI_DOCK_TOP)
##        docks = self.SmartShrink(docks, AUI_DOCK_LEFT)
# discover the maximum dock layer
# clear out uiparts
# create a bunch of box sizers,
# from the innermost level outwards.
# find any docks in this layer
# if there aren't any, skip to the next layer
# create a container which will hold this layer's
# docks (top, bottom, left, right)
# find any top docks in this layer
# fill out the middle layer (which consists
# of left docks, content area and right docks)
# find any left docks in this layer
# add content dock (or previous layer's sizer
# to the middle
# find any center docks
# there are no center docks, add a background area
# find any right docks in this layer
# find any bottom docks in this layer
# no sizer available, because there are no docks,
# therefore we will create a simple background area
# destroy floating panes which have been
# redocked or are becoming non-floating
# because the pane is no longer in a floating, we need to
# reparent it to self._frame and destroy the floating frame
# reduce flicker
# the following block is a workaround for bug #1531361
# (see wxWidgets sourceforge page).  On wxGTK (only), when
# a frame is shown/hidden, a move event unfortunately
# also gets fired.  Because we may be dragging around
# a pane, we need to cancel that action here to prevent
# a spurious crash.
# hide the frame
# reparent to self._frame and destroy the pane
# Only the master manager should create/destroy notebooks...
# delete old sizer first
# create a layout for all of the panes
# hide or show panes as necessary,
# and float panes as necessary
# we need to create a frame for this
# pane, which has recently been floated
# on MSW and Mac, if the owner desires transparent dragging, and
# the dragging is happening right now, then the floating
# window should have this style by default
# frame already exists, make sure it's position
# and size reflect the information in AuiPaneInfo
# update whether the pane is resizable or not
# if "active panes" are no longer allowed, clear
# any optionActive values from the pane states
# apply the new sizer
# now that the frame layout is done, we need to check
# the new pane rectangles against the old rectangles that
# we saved a few lines above here.  If the rectangles have
# changed, the corresponding panes must also be updated
# Workout how many notebooks we need.
# destroy floating panes which have been
# redocked or are becoming non-floating
# We are the master of our domain
# Remove pages from notebooks that no-longer belong there ...
# Check each tab ...
# Add notebook pages that aren't there already...
# Update title and icon ...
# Wire-up newly created notebooks
# sort the panes with dock_pos
# Delete empty notebooks, and convert notebooks with 1 page to
# normal panes...
# Convert notebook page to pane...
# It's a keeper.
# Apply remap...
# Make sure buttons are correct ...
# todo: remove min/max
# todo: remove min/max
# todo: remove close
# Combine arrays
# guide will be centered around point 'pt'
# get the rectangle of the UI part
# originally, this code looked like this:
#    part.rect = wx.Rect(part.sizer_item.GetPosition(),
#                       part.sizer_item.GetSize())
# this worked quite well, with one exception: the mdi
# client window had a "deferred" size variable
# that returned the wrong size.  It looks like
# a bug in wx, because the former size of the window
# was being returned.  So, we will retrieve the part's
# rectangle via other means
# the only way to accurately calculate the dock's
# offset is to actually run a theoretical layout
# determine the total proportion of all resizable panes,
# and the total size of the dock minus the size of all
# the fixed panes
##            if tmpPane.min_size.IsFullySpecified():
##
##                if dock.IsHorizontal():
##                    totalPixsize -= tmpPane.min_size.x
##                else:
##                    totalPixsize -= tmpPane.min_size.y
# Get minimum size of the most inner area
# Get opposite docks
# Sum size of the opposite docks and their sashes
# if it's not a toolbar add the sash_size too
# a dock may not be resized if it has a single
# pane which is not resizable
# panes that may not be resized should be ignored here
# It's one of ours!
# set initial float position - may have to think about this
# offset a bit more later ...
# float the window
# The call to Update may result in
# the notebook that generated this
# event being deleted, so we have
# to do the call asynchronously.
# not our window
# veto it because we will call "RemovePage" ourselves
# Now ask the app if they really want to close...
# fire pane close event
# Close/update asynchronously, because
# the notebook which generated the event
# (and triggered this method call) will
# be deleted.
# The result should always be shown
# Check to see if the toolbar has been dragged out of the window
# Allow directional change when the cursor leaves this rect
# Check to see if the toolbar has been dragged to edge of the frame
# If the windows is floating and out of the client area, do nothing
# Ok, can't drop on edge - check internals ...
# toolbars may only be moved in and to fixed-pane docks,
# otherwise we will try to float the pane.  Also, the pane
# should float if being dragged over center pane windows
# calculate the offset from where the dock begins
# to the point where the user dropped the pane
# search the dock guides.
# reverse order to handle the center first.
# do hit testing on the guide
# point was outside of the dock guide
# target is a single dock guide
# Add a new notebook pane with the original as a tab...
# Add new item to notebook
# The result should always be shown
# "new row pixels" will be set to the default, but
# must never exceed 20% of the window size
# determine if the mouse pointer is in a location that
# will cause a new row to be inserted.  The hot spot positions
# are along the borders of the center pane
# determine the mouse offset and the pane size, both in the
# direction of the dock itself, and perpendicular to the dock
# if we are in the top/left part of the pane,
# insert the pane before the pane being hovered over
# if we are in the bottom/right part of the pane,
# insert the pane before the pane being hovered over
# remove the last hint rectangle
# clip all floating windows, so we don't draw over them
# wxGTK returns the client size, not the whole frame size
# As we can only hide the hint by redrawing the managed window, we
# need to clip the region to the managed window too or we get
# nasty redrawn problems.
#  Only fade if we need to
# start fade in timer
# hides a transparent window hint if there is one
# we need to paint a hint rectangle to find out the exact hint rectangle,
# we will create a new temporary layout and then measure the resulting
# rectangle we will create a copy of the docking structures (self._docks)
# so that we don't modify the real thing on screen
# remove any pane already there which bears the same window
# this happens when you are moving a pane around in a dock
# find out where the new pane would be
# For a notebook page, actually look for the notebook itself.
# check for floating frame ...
# actually show the hint rectangle on the screen
# Mirror rectangle in RTL mode
# try to find the pane
# try to find the pane
# fire pane close event
# close the pane, but check that it
# still exists in our pane array first
# (the event handler above might have removed it)
# Check if we can snap to the left
# Check if we can snap to the top
# Check if we can snap to the right
# Check if we can snap to the bottom
# try to find the pane
# set the caption as active
# if the frame is about to be deleted, don't bother
# don't draw hidden pane items or items that aren't windows
# Figure out which dc to use; if one
# has been specified, use it, otherwise
# make a client dc
# If the frame has a toolbar, the client area
# origin will not be (0, 0).
# Render all the items
# try to find the pane
# It's a floating tab from a AuiNotebook
# float the window
# for MDI parent frames, this event must not
# be "skipped".  In other words, the parent frame
# must not be allowed to resize the client window
# after we are finished processing sizing changes
# For the snap to screen...
# Initialize to None
# See it this window wants to overwrite
# if no, it must be us
# determine cursor
# now repaint the button with hover state
# if the frame has a toolbar, the client area
# origin will not be (0,0).
# draw the resize hint
# if we are managing a AuiFloatingFrame window, then
# we are an embedded AuiManager inside the AuiFloatingFrame.
# We want to initiate a toolbar drag in our owner manager
# Handles double click on AuiNotebook sashes to unsplit
# determine the new pixel size that the user wants
# this will help us recalculate the pane's proportion
# prevent division by zero
# adjust for the surplus
# calculate the new proportion of the pane
# borrow the space from our neighbor pane to the
# right or bottom (depending on orientation)
##            self._frame.Freeze()
##            self._frame.Thaw()
# cancel the operation in progress, if any
# This event is probably triggered by a theme change
# so we have to re-init the art provider.
# when a child pane has it's focus set, we should change the
# pane's active state to reflect this. (this is only true if
# active panes are allowed by the owner)
# Ignore EVT_CHILD_FOCUS events originating from dialogs not
# managed by AUI
# we need to check if the mouse is now being dragged
# dragged -- we need to change the mouse action to 'drag'
# set initial float position
# float the window
# adjust action offset for window frame
# action offset is used here to make it feel "natural" to the user
# to drag a docked pane and suddenly have it become a floating frame.
# Sometimes, however, the offset where the user clicked on the docked
# caption is bigger than the width of the floating frame itself, so
# in that case we need to set the action offset to a sensible value
# make sure we're still over the item that was originally clicked
# fire button-click event
# skip the first move event
# skip if moving too fast to avoid massive redraws and
# jumping hint windows
# try to find the pane
# update floating position
# Move the pane window
# and not self.CheckPaneMove(pane):
# return
# HACK: Terrible hack on wxMSW (!)
# calculate the offset from the upper left-hand corner
# of the frame to the mouse pointer
# is the pane dockable?
# Try to find the pane.
# Draw a hint for where the window will be moved.
# Reduces flicker.
# try to find the pane
# calculate the offset from the upper left-hand corner
# of the frame to the mouse pointer
# is the pane dockable?
# do the drop calculation
# if the pane is still floating, update it's floating
# position (that we store)
# reorder for dropping to a new notebook
# (caution: this code breaks the reference!)
# Try to find the pane.
# Hide the hint as it is no longer needed.
# is the pane dockable?
# Move the pane to new position.
# do the drop calculation
# Update the layout to realize new position and e.g. form notebooks if needed.
# Ensure active before doing actual display.
# Make changes visible to user.
# Cancel the action and release the mouse.
# is the pane dockable?
# do the drop calculation
# update floating position
# move the pane window
# and not self.CheckPaneMove(pane):
# return
# HACK: Terrible hack on wxMSW (!)
# when release the button out of the window.
# TODO: a better fix is needed.
# try to find the pane
# save the new positions
# fire pane close event
# close the pane, but check that it
# still exists in our pane array first
# (the event handler above might have removed it)
# mn this performs the minimizing of a pane
# fire pane close event
# fire pane close event
# We are already minimized
# Basically the idea is this.
#
# 1) create a toolbar, with a restore button
#
# 2) place the new toolbar in the toolbar area representative of the location of the pane
#  (NORTH/SOUTH/EAST/WEST, central area always to the right)
#
# 3) Hide the minimizing pane
# personalize the toolbar style
# Create a new toolbar
# give it the same name as the minimized pane with _min appended
# mark ourselves minimized
# last, hide the window
# Create base notebook pane ...
# add original pane as tab ...
# it seems the notebook isnt created by this stage, so remove
# the caption a moment later
# Already minimized
# No wx.ScreenDC on the Mac...
# No easy way to handle this on Vista...
# try to find the pane
# if the frame is about to be deleted, don't bother
# check if there's already a center pane (except our dummy pane)
# there's our dummy pane and also another center pane, therefor let's remove our dummy
# if we get here, there's no center pane, create our dummy
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         tabart.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:         31 March 2009
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# -- GUI helper classes and functions --
# Get proper highlight colour for focus rectangle from the
# current Mac theme.  kThemeBrushFocusHighlight is
# available on Mac OS 8.5 and higher
# draw background
# TODO: else if (agwFlags & AUI_NB_LEFT)
# TODO: else if (agwFlags & AUI_NB_RIGHT)
#for AUI_NB_TOP
# draw base lines
# TODO: else if (agwFlags & AUI_NB_LEFT)
# TODO: else if (agwFlags & AUI_NB_RIGHT)
# for AUI_NB_TOP
# if the caption is empty, measure some temporary text
# figure out the size of the tab
# select pen, brush and font for the tab to be drawn
# create points that will make the tab outline
# since the above code above doesn't play well with WXDFB or WXCOCOA,
# we'll just use a rectangle for the clipping region for now --
#if (agwFlags & AUI_NB_TOP)
# TODO: else if (agwFlags & AUI_NB_LEFT)
# TODO: else if (agwFlags & AUI_NB_RIGHT)
# draw active tab
# draw base background colour
# this white helps fill out the gradient at the top of the tab
# these two points help the rounded corners appear more antialiased
# set rectangle down a bit for gradient drawing
# draw gradient background
# draw inactive tab
# start the gradent up a bit and leave the inside border inset
# by a pixel for a 3D look.  Only the top half of the inactive
# tab will have a slight gradient
# -- draw top gradient fill for glossy look
# -- draw bottom fill for glossy look
# draw tab outline
# there are two horizontal grey lines at the bottom of the tab control,
# this gets rid of the top one of those lines in the tab control
# TODO: else if (agwFlags & AUI_NB_LEFT)
# TODO: else if (agwFlags & AUI_NB_RIGHT)
# for AUI_NB_TOP
# draw bitmap
# bitmap padding
# draw tab text
# draw focus rectangle
# draw close button if necessary
# add padding around the text
# if the close button is showing, add space for it
# if there's a bitmap, add space for it
# right side bitmap padding
# add padding
# sometimes a standard bitmap size needs to be enforced, especially
# if some tabs have bitmaps and others don't.  This is important because
# it prevents the tab control from resizing when tabs are added.
# we don't use the caption text because we don't
# want tab heights to be different in the case
# of a very short piece of text on one tab and a very
# tall piece of text on another tab
# if there is no caption, make it a space.  This will prevent
# an assert in the menu code.
# Save longest caption width for calculating menu width with
# draw background
# draw base line
# if the caption is empty, measure some temporary text
# figure out the size of the tab
# select pen, brush and font for the tab to be drawn
# -- draw line --
# set minimum text offset
# chop text if necessary
# draw tab text
# draw focus rectangle
# TODO:
# This should be uncommented when DrawFocusRect will become
# available in wxPython
# wx.RendererNative.Get().DrawFocusRect(wnd, dc, focusRect, 0)
# draw close button if necessary
# draw the background behind the button
# draw the button itself
# Visual studio 7.1 style
# This code is based on the renderer included in FlatNotebook
# figure out the size of the tab
# We dont draw a rectangle for non selected tabs, but only
# vertical line on the right
# if (agwFlags & AUI_NB_TOP)
# draw bitmap
# bitmap padding
# if the caption is empty, measure some temporary text
# draw tab text
# draw focus rectangle
# draw 'x' on tab (if enabled)
# Indent the button if it is pressed down:
# add some vertical padding
# Firefox 2 style
# figure out the size of the tab
# Draw the tab as rounded rectangle
# draw bitmap
# bitmap padding
# if the caption is empty, measure some temporary text
# draw tab text
# draw focus rectangle
# draw 'x' on tab (if enabled)
# Indent the button if it is pressed down:
# Define the rounded rectangle base on the given rect
# we need an array of 9 points for it
# Define the top region
# Incase we use bottom tabs, switch the colours
# add some padding
# Visual Studio 8 style
# figure out the size of the tab
# If we draw the first tab or the active tab,
# we draw a full tab, else we draw a truncated tab
#
#             X(2)                  X(3)
#        X(1)                            X(4)
#
#                                           X(5)
#
# X(0),(7)                                  X(6)
#
#
# Delete the bottom line (or the upper one, incase we use wxBOTTOM)
# draw bitmap
# bitmap padding
# if the caption is empty, measure some temporary text
# draw tab text
# draw focus rectangle
# draw 'x' on tab (if enabled)
# Indent the button if it is pressed down:
# add some padding
# Chrome tab style
# figure out the size of the tab
# draw bitmap
# bitmap padding
# if the caption is empty, measure some temporary text
# draw tab text
# draw 'x' on tab (if enabled)
# Indent the button if it is pressed down:
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         auimdi.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:         31 March 2009
# Licence:      wxWindows license
# Tags:         phoenix-port, documented
#----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# AuiMDIParentFrame
#-----------------------------------------------------------------------------
# this style can be used to prevent a window from having the standard MDI
# "Window" menu
# Replace the window menu from the currently loaded menu bar.
# Remove the Window menu from the old menu bar
# Add the Window menu to the new menu bar.
# No Child, set Our menu bar back.
# Make sure we know our menu bar is in use
# Do we need to save the current bar?
# stops the same event being processed repeatedly
# let the active child (if any) process the event first.
# if the event was not handled this frame will handle it,
# which is why we need the protection code at the beginning
# of this method
# Remove old window menu
# failure
#-----------------------------------------------------------------------------
# AuiMDIChildFrame
#-----------------------------------------------------------------------------
# see comment in constructor
# create the window off-screen to prevent flicker
# this is the currently active child
# There are two ways to create an tabbed mdi child fram without
# making it the active document.  Either Show(False) can be called
# before Create() (as is customary on some ports with wxFrame-type
# windows), or wx.MINIMIZE can be passed in the style flags.  Note that
# AuiMDIChildFrame is not really derived from wxFrame, as MDIChildFrame
# is, but those are the expected symantics.  No style flag is passed
# onto the panel underneath.
# deactivate ourself
# replace current menu bars
# get icon with the system icon size
# we don't have any help text for this item,
# but may be the MDI frame does?
# do nothing
# no toolbar bars
# no maximize etc
# renamed from Show().
#-----------------------------------------------------------------------------
# AuiMDIClientWindow
#-----------------------------------------------------------------------------
# don't do anything if the page doesn't actually change
# notify old active child that it has been deactivated
# notify new active child that it has been activated
# regardless of the result of wnd.Close(), we've
# already taken care of the close operations, so
# suppress further processing
# notify AUI which frame to use
# create several text controls
# add the panes to the manager
# tell the manager to "commit" all the changes just made
# deinitialize the frame manager
# our normal wxApp-derived class, as usual
# -*- coding: utf-8 -*-
# --------------------------------------------------------------------------- #
# PersistentControls Library wxPython IMPLEMENTATION
#
# Inspired by the wxWidgets implementation by Vadim Zeitlin.
#
# License: wxWidgets license
#
# Python Code By:
#
# Andrea Gavana, @ 16 Nov 2009
# Latest Revision: 27 Mar 2013, 21.00 GMT
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# Specifies custom wx.Config object to use (i.e., custom file names)
# Specifies custom key in the wx.Config object to use
# Specifies whether a custom config handler exists, so that we will not use
# wx.FileConfig (i.e., ConfigObj, ConfigParser etc...)
# Specifies the PersistenceManager style
# Set these values to True if we should restore/save the settings (it doesn't
# make much sense to use this class when both of them are False but setting
# one of them to False may make sense in some situations)
# Flag set to True when PersistenceManager has restored any window
# map with the registered objects as keys and associated
# PersistentObjects as values
# Create the data folder, it still doesn't exist
# protect for RuntimeError
# Control has persist support
# Control has persist support
# Control has persist support
# Control has persist support
# an individual control wants to be saved
# an individual control wants to be saved
# -*- coding: utf-8 -*-
# --------------------------------------------------------------------------- #
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# PersistenceManager styles
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# String constants used by BookHandler
# To save and restore wx.lib.agw.aui.AuiNotebook perspectives
# ----------------------------------------------------------------------------------- #
# String constants used by TreebookHandler
# this key contains the indices of all expanded nodes in the tree book
# separated by PERSIST_SEP
# ----------------------------------------------------------------------------------- #
# String constants used by TLWHandler
# we use just "Window" to keep configuration files and such short, there
# should be no confusion with wx.Window itself as we don't have persistent
# windows, just persistent controls which have their own specific kind strings
# Names for various persistent options
# To save and restore wx.aui and wx.lib.agw.aui perspectives
# ----------------------------------------------------------------------------------- #
# String constants used by CheckBoxHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ListBoxHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ListCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by CheckListBoxHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ChoiceComboHandler
# ----------------------------------------------------------------------------------- #
# String constants used by RadioBoxHandler
# ----------------------------------------------------------------------------------- #
# String constants used by RadioButtonHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ScrolledWindowHandler
# ----------------------------------------------------------------------------------- #
# String constants used by SliderHandler
# ----------------------------------------------------------------------------------- #
# String constants used by SpinHandler
# ----------------------------------------------------------------------------------- #
# String constants used by SplitterHandler
# ----------------------------------------------------------------------------------- #
# String constants used by TextCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ToggleButtonHandler
# ----------------------------------------------------------------------------------- #
# String constants used by TreeCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by TreeListCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by CalendarCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by CollapsiblePaneHandler
# ----------------------------------------------------------------------------------- #
# String constants used by DatePickerHandler
# ----------------------------------------------------------------------------------- #
# String constants used by MediaCtrlHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ColourPickerHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FileDirPickerHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FontPickerHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FileHistoryHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FindReplaceHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FontDialogHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ColourDialogHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ChoiceDialogHandler
# ----------------------------------------------------------------------------------- #
# String constants used by MenuBarHandler
# ----------------------------------------------------------------------------------- #
# String constants used by ToolBarHandler
# ----------------------------------------------------------------------------------- #
# String constants used by FoldPanelBarHandler
# -*- coding: utf-8 -*-
# --------------------------------------------------------------------------- #
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------- #
# use this instead of wx.gizmos.TreeListCtrl
# Will likely not be wrapped
# import wx.aui
# Not wrapped, unmaintained
# import wx.gizmos
# Not wrapped yet, coming soon
# import wx.media
# ----------------------------------------------------------------------------------- #
# need to move the import to here, otherwise we error in Python 3
# ----------------------------------------------------------------------------------- #
# Allowed to save and restore perspectives
# Allowed to save and restore perspectives
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# Save the AUI perspectives if PersistenceManager allows it
# Allowed to save and restore perspectives
# Restore the AUI perspectives if PersistenceManager allows it
# Allowed to save and restore perspectives
# ----------------------------------------------------------------------------------- #
# Notice that we use GetSize() here and not GetClientSize() because
# the latter doesn't return correct results for the minimized windows
# (at least not under Windows)
#
# Of course, it shouldn't matter anyhow usually, the client size
# should be preserved as well unless the size of the decorations
# changed between the runs
# To avoid making the window completely invisible if it had been
# shown on a monitor which was disconnected since the last run
# (this is pretty common for notebook with external displays)
#
# NB: we should allow window position to be (slightly) off screen,
#     it's not uncommon to position the window so that its upper
#     left corner has slightly negative coordinate
# else: should we try to adjust position/size somehow?
# Note that the window can be both maximized and iconized
# The most important property of the window that we restore is its
# size, so disregard the value of hasPos here
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# This includes wx.SimpleHtmlListBox and wx.HtmlListBox
# wx.ListCtrl
# Loop until told to stop
# No item selected
# Found one item, append to the list of condemned
# We don't want to save selected items
# We don't want to save selected items
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# KnobCtrl
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# Top and bottom panes
# Left and right panes
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# We don't want to save selected items
# We want to restore selected items
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# Nothing to save
# Nothing to restore
# ----------------------------------------------------------------------------------- #
# Nothing to save
# Nothing to save
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
# ----------------------------------------------------------------------------------- #
#ULC.UltimateListCtrl (later)
#    ("MediaCtrlHandler", (wx.media.MediaCtrl, )), not wrapped yet
# ----------------------------------------------------------------------------------- #
# if control has a handler, just return it
# ----------------------------------------------------------------------------------- #
# if control has a handler, just return it
# Very important step!!
# Do not use the default name!!
# Nothing was restored, so choose the default page ourselves
# our normal wxApp-derived class, as usual
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         art.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# RibbonArtSetting
# RibbonScrollButtonStyle
# RibbonButtonKind
# RibbonButtonBarButtonState
# RibbonGalleryButtonState
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         art_aui.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# Map primary & secondary luminance from [0, 1] to [0.15, 0.85]
# TODO: Remove next line once this provider stops piggybacking MSW
# To preserve space, a single tab need not be displayed. We still need
# one pixel of border though.
# Draw the left hand edge of the tab only for the first tab (subsequent
# tabs use the right edge of the prior tab as their left edge). As this is
# outside the rectangle for the tab, only draw it if the leftmost part of
# the tab is within the clip rectangle (the clip region has to be cleared
# to draw outside the tab).
# enough for a few chars
# gap between label and bitmap
# No explicit separators between tabs
# Background
# Border
# Foreground
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         art_default.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# MAC has still no art provider for a ribbon, so we'll use
# The AUI one. Waiting for a RibbonOSXArtProvider :-D
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         art_internal.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# colour is a shade of grey
# Max == blue
# colour is a shade of grey
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         art_msw.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
#FF00FF", b"     ", b"  x  ", b" xxx ", b"xxxxx", b"     "]
#FF00FF", b"     ", b"xxxxx", b" xxx ", b"  x  ", b"     "]
#FF00FF", b"   x ", b"  xx ", b" xxx ", b"  xx ", b"   x "]
#FF00FF", b" x   ", b" xx  ", b" xxx ", b" xx  ", b" x   "]
#FF00FF", b"xxxxx", b"     ", b"xxxxx", b" xxx ", b"  x  "]
#FF00FF", b"xxxxxx ", b"x      ", b"x      ",
# valid visibilities are in range [0, 1]
# tertiary not used for anything
# Map primary saturation from [0, 1] to [.25, .75]
# Map primary luminance from [0, 1] to [.23, .83]
# Map secondary saturation from [0, 1] to [0.16, 0.84]
# Map secondary luminance from [0, 1] to [0.1, 0.9]
# SetColour used so that the relevant bitmaps are generated
# Invalidate cached tab separator
# Need to reload some bitmaps when flags change
# TODO: active and hovered
# Give the tab a curved outward border at the bottom
# Technically the first two points are the wrong colour, but they're near enough
# The tab separator is relatively expensive to draw (for its size), and is
# usually drawn multiple times sequentially (in different positions), so it
# makes sense to draw it once and cache it.
# Page background isn't dependant upon the width of the page
# (at least not the part of it intended to be painted by this
# function). Set to wider than the page itself for when externally
# expanded panels need a background - the expanded panel can be wider
# than the bar.
# upper_rect, lower_rect, paint_rect are all in page co-ordinates
# Page scroll buttons do not have the luxury of rendering on top of anything
# else, and their size includes some padding, hence the background painting
# and size adjustment.
# NB: Code for handling hovered/active state is temporary
# Test if there is enough length for 3 letters and ...
# Not enough room for three characters and ...
# Display the entire label and just crop it
# Room for some characters and ...
# Display as many characters as possible and append ...
# Outline
# Divider between items and buttons
# Divider between items and buttons
# Assume the window is a child of a ribbon page, and also check for a
# hovered panel somewhere between the window and the page, as it causes
# the background to change.
# No page found - fallback to painting with a stock brush
# TODO
# Background
# Border
# Foreground
# enough for a few chars
# gap between label and bitmap
# To preserve space, a single tab need not be displayed. We still need
# two pixels of border / padding though.
# Left / top padding
# Right / bottom padding
# Right / bottom padding
# Flow is vertical - put buttons on bottom
# Flow is horizontal - put buttons on right
# Width and height both changed - redraw everything
# Only width changed - redraw right hand side
# Nothing changed (should never happen) - redraw nothing
# Height changed - need to redraw everything (as the background
# gradient is done vertically).
# Small bitmap, no label
# Small bitmap, with label to the right
# no break
# Large bitmap, with label below (possibly split over 2 lines)
# Assume two lines even when only one is used
# (to give all buttons a consistent height)
# Allow for differences between this DC and a paint DC
# Padding
# Second line for dropdown button
# Label alongside icon
# Label beneath icon
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         art_msw.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         bar.py
# Licence:      wxWindows license
#
# Tags:         phoenix-port, unittest, documented, py3-port
#
# RIBBONBAR Library wxPython IMPLEMENTATION
#
# Original C++ Code From Peter Cawley.
#
# Current wxRibbon Version Tracked: wxWidgets 2.9.0 SVN HEAD
#
#
# Python Code By:
#
# Andrea Gavana, @ 15 Oct 2009
# Latest Revision: 27 Dec 2012, 21.00 GMT
#
# For All Kind Of Problems, Requests Or Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@gmail.com
# andrea.gavana@maerskoil.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# End Of Comments
#---------------------------------------------------------------------------
# info.rect not set (intentional)
# Most likely case is that self new page is not the active tab
# It is quite likely that the mouse moved a small amount and is still over the same tab
# But be careful, if tabs can be scrolled, then parts of the tab rect may not be valid
# The ribbon bar is (usually) at the top of a window, and at least on MSW, the mouse
# can leave the window quickly and leave a tab in the hovered state.
# Simple case: everything at ideal width
# Simple case: everything minimum with scrollbar
# Complex case: everything sized such that: minimum <= width < ideal
#
#   Strategy:
#     1) Uniformly reduce all tab widths from ideal to small_must_have_separator_width
#     2) Reduce the largest tab by 1 pixel, repeating until all tabs are same width (or at minimum)
#     3) Uniformly reduce all tabs down to their minimum width
#
# Do (1)
# Do (2)
# Sneaky obj array trickery to not copy the tab descriptors
# Do (3)
# initial guess
# Nothing to do in the tab area, and the page area is handled by the active page
# Background painting done in main paint handler to reduce screen flicker
# TODO: Decide on best course of action when min height is unspecified
# - should we specify it to the tab minimum, or leave it unspecified?
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         buttonbar.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# All painting done in main paint handler to minimise flicker
# don't waste time updating state of tools in a hidden toolbar
# Clear existing layouts
# Best layout : all buttons large, stacking horizontally
# Collapse the rightmost buttons and stack them vertically
# If height isn't preserved (i.e. it is reduced), then the minimum
# size for the button bar will decrease, preventing the original
# layout from being used (in some cases).
# It may be a good idea to always preverse the height, but for now
# it is only done when the first button is involved in a collapse.
##        # Sanity check
##        if layout.overall_size.GetWidth() >= original.overall_size.GetWidth() or \
##           layout.overall_size.GetHeight() > original.overall_size.GetHeight():
##
##            del layout
##            return False, count
# may have been Noneed by event handler
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         control.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# Dummy implementation for code which doesn't check for IsSizingContinuous() == true
# Dummy implementation for code which doesn't check for IsSizingContinuous() == true
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         gallery.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# The 2nd click of a double-click should be handled as a click in the
# same way as the 1st click of the double-click. This is useful for
# scrolling through the gallery.
# All painting done in main paint handler to minimise flicker
# The best size is displaying several items
# No need to grow if the given size can already display every item
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         page.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# As scroll buttons need to be rendered on top of a page's child windows, the
# buttons themselves have to be proper child windows (rather than just painted
# onto the page). In order to get proper clipping of a page's children (with
# regard to the scroll button), the scroll buttons are created as children of
# the ribbon bar rather than children of the page. This could not have been
# achieved by creating buttons as children of the page and then doing some Z-order
# manipulation, as self causes problems on win32 due to ribbon panels having the
# transparent flag set.
# Do nothing - all painting done in main paint handler
# All painting done in main paint handler to minimise flicker
# No foreground painting done by the page itself, but a paint DC
# must be created anyway.
# When a resize triggers the scroll buttons to become visible, the page is resized.
# This resize from within a resize event can cause (MSW) wxWidgets some confusion,
# and report the 1st size to the 2nd size event. Hence the most recent size is
# remembered internally and used in Layout() where appropiate.
# Simplify other calculations by pretending new size is zero in both
# X and Y
# When size == 0, no point in doing any layout
# ... and then proceed as normal
# Scroll buttons already visible - not going to be able to downsize any more
# Reset the origin
# For "large" growth, grow self panel a bit, and then re-allocate
# the remainder (which may come to self panel again anyway)
# For a more consistent panel layout, try to collapse panels which
# were recently expanded.
# For "large" contraction, reduce self panel a bit, and
# then re-allocate the remainder of the quota (which may
# come to this panel again anyway)
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         panel.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# Unknown / none
# Unknown / none
# Window enter / leave events count for only the window in question, not
# for children of the window. The panel wants to be in the hovered state
# whenever the mouse cursor is within its boundary, so the events need to
# be attached to children too.
# At least on MSW, changing the size of a window will cause GetSize() to
# report the new size, but a size event may not be handled immediately.
# If self minimised check was performed in the OnSize handler, then
# GetSize() could return a size much larger than the minimised size while
# IsMinimised() returns True. This would then affect layout, as the panel
# will refuse to grow any larger while in limbo between minimised and non.
# we have no information on size change direction
# so check both
# All painting done in main paint handler to minimise flicker
# A panel never sizes continuously, even if all of its children can,
# as it would appear out of place along side non-continuous panels.
# JS 2012-03-09: introducing wxRIBBON_PANEL_STRETCH to allow
# the panel to fill its parent page. For example we might have
# a list of styles in one of the pages, which should stretch to
# fill available space.
# Next size depends upon children, who are currently in the
# expanded panel
# Get smallest non minimised size
# and adjust to child_relative for parent page
# Simple (and common) case of single ribbon child or Sizer
# Use fallback if !(sizer/child = 1)
# Fallback: Decrease by 20% (or minimum size, whichever larger)
# Next size depends upon children, who are currently in the
# expanded panel
# We could just let the sizer expand in flow direction but see comment
# in IsSizingContinuous()
# and adjust for page in non flow direction
# Simple (and common) case of single ribbon child
# Use fallback if !(sizer/child = 1)
# Fallback: Increase by 25% (equal to a prior or subsequent 20% decrease)
# Note that due to rounding errors, this increase may not exactly equal a
# matching decrease - an ideal solution would not have these errors, but
# avoiding them is non-trivial unless an increase is by 100% rather than
# a fractional amount. This would then be non-ideal as the resizes happen
# at very large intervals.
# Minimum size depends upon children, who are currently in the
# expanded panel
# Ask sizer if present
# Common case of no sizer and single child taking up the entire panel
# Called from Realize() to set self._smallest_unminimised_size and from other
# functions to get the minimum size.
# The panel will be invisible when minimised and sizer calcs will be 0
# Uses self._smallest_unminimised_size in preference to self.GetSizer().CalcMin()
# to eliminate flicker.
# Check if is visible and not previously calculated
# else use previously calculated self._smallest_unminimised_size
# TODO allow panel to increase its size beyond minimum size
# by steps similarly to ribbon control panels (preferred for aesthetics)
# or continuously.
# Ask sizer if present
# Common case of no sizer and single child taking up the entire panel
# Ask sizer if there is one present
# No point in having a minimised size which is larger than the
# minimum size which the children can go to.
# Children are all invisible when minimised
# SetSize and Layout()
# Common case of no sizer and single child taking up the entire panel
# Need a top-level frame to contain the expanded panel
# Move all children to the new panel.
# Conceptually it might be simpler to reparent self entire panel to the
# container and create a new panel to sit in its place while expanded.
# This approach has a problem though - when the panel is reinserted into
# its original parent, it'll be at a different position in the child list
# and thus assume a new position.
# NB: Children iterators not used as behaviour is not well defined
# when iterating over a container which is being emptied
# Move sizer to new panel
# For an expanded panel, filter events between being sent up to the
# floating top level window or to the dummy panel sitting in the ribbon
# bar.
# Child focus events should not be redirected, as the child would not be a
# child of the window the event is redirected to. All other command events
# seem to be suitable for redirecting.
# Should never happen, but a check can't hurt
# Do not skip event, as the panel has been de-expanded, causing the
# child with focus to be reparented (and hidden). If the event
# continues propogation then bad things happen.
# Move children back to original panel
# NB: Children iterators not used as behaviour is not well defined
# when iterating over a container which is being emptied
# TODO: Move sizer back
# Strategy:
# 1) Determine primary position based on requested direction
# 2) Move the position so that it sits entirely within a display
#    (for single monitor systems, this moves it into the display region,
#     but for multiple monitors, it does so without splitting it over
#     more than one display)
# 2.1) Move in the primary axis
# 2.2) Move in the secondary axis
# Tried moving in primary axis, but failed.
# Hence try moving in the secondary axis.
# Squaring makes secondary moves more expensive (and also
# prevents a negative cost)
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         toolbar.py
# Purpose:
#
# Author:       Andrea Gavana <andrea.gavana@gmail.com>
#
# Created:
# Version:
# Date:
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# To identify the group as a RibbonToolBarToolBase
# Find the position where insert tool
# Prepend group
# Append group
# Add an empty group at the end of the bar.
# Remove tool
# Remove separator
# There is a splitter in front of every group except for the first
# If only one group, no separator.
# Increment pos for group separator.
# Pick the smallest of our sizes which are larger than the given size
# Calculate the size of each group and the position/size of each tool
# Calculate the minimum size for each possible number of rows
# See if we're sizing flexibly (i.e. wrapping), and set min size differently
# Without this, there will be redundant horizontal space because SetMinSize will
# use the smallest possible height (and therefore largest width).
# Give it the min size in either direction regardless of row,
# so that we're able to vary the size of the panel according to
# the space the toolbar takes up.
# Position the groups
# Choose row count with largest possible area
# See if we're sizing flexibly, and set min size differently
# Without this, there will be redundant horizontal space because SetMinSize will
# use the smallest possible height (and therefore largest width).
# Assign groups to rows and calculate row widths
# Calculate row positions
# Set group y positions
# Choose row count with largest possible area
# A toolbar should maximize its width whether vertical or horizontal, so
# force the major axis to be horizontal. Without this, there will be
# redundant horizontal space.
# All painting done in main paint handler to minimise flicker
# Notice that m_active_tool could have been reset by the event handler
# above so we need to test it again.
# don't waste time updating state of tools in a hidden toolbar
# --------------------------------------------------------------------------------- #
# ribbon wxPython IMPLEMENTATION
#
# Andrea Gavana, @ 03 Nov 2006
#
#
# TODO List
#
#
# For All Kind Of Problems, Requests Of Enhancements And Bug Reports, Please
# Write To Me At:
#
# andrea.gavana@maerskoil.com
# andrea.gavana@gmail.com
#
# Or, Obviously, To The wxPython Mailing List!!!
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
# End Of Comments
# --------------------------------------------------------------------------------- #
# Show toggle buttons behaviour
# our normal wxApp-derived class, as usual
# AnalogClock's main class
#   E. A. Tacao <e.a.tacao |at| estadao.com.br>
#   http://j.domaindlx.com/elements28/wxpython/
#   15 Fev 2006, 22:00 GMT-03:00
# Distributed under the wxWidgets license.
#
# For more info please see the __init__.py file.
# Tags:     phoenix-port
#----------------------------------------------------------------------
# Base size for scale calc purposes.
# Store some references.
# Initialize clock face.
#
# By default we don't use colours or borders on the clock face.
# Initialize tick marks.
#
# TickSet is a set of tick marks; there's always two TickSets defined
# regardless whether they're being shown or not.
# Box holds the clock face and tick marks.
# Initialize hands.
#
# HandSet is the set of hands; there's always one HandSet defined
# regardless whether hands are being shown or not.
#
# A 'lenfac = 0.95', e.g., means that the length of that hand will
# be 95% of the maximum allowed hand length ('nice' maximum length).
# Create the customization dialog.
# Make a context menu.
# Set event handlers.
# Set initial size based on given size, or best size
# Do initial drawing (in case there is not an initial size event)
# Initialize the timer that drives the update of the clock face.
# Update every half second to ensure that there is at least one true
# update during each realtime second.
# Just pull a number out of the air.  If there is a way to
# calculate this then it should be done...
# Recalc all coords.
# Try to find a 'nice' maximum length for the hands so that they won't
# overlap the tick marks. OTOH, if you do want to allow overlapping the
# lenfac value (defined on __init__ above) has to be set to
# something > 1.
# Public methods --------------------------------------------------
# For backwards compatibility -----------------------------------------
# Test stuff ----------------------------------------------------------
# AnalogClock's base classes
#   E. A. Tacao <e.a.tacao |at| estadao.com.br>
#   http://j.domaindlx.com/elements28/wxpython/
#   15 Fev 2006, 22:00 GMT-03:00
# Distributed under the wxWidgets license.
# Tags:     phoenix-port
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Is this hand supposed to be drawn?
# Is this the hours hand?
# else prevent exceptions on leap seconds
# and adjust idx offset for minutes and non-leap seconds
#----------------------------------------------------------------------
# Are we a set of hours?
# Should we show all hours ticks?
# Or is this tick a quarter and should we show only quarters?
# Are we a set of minutes and minutes should be shown?
# If this tick occupies the same position of an hour/quarter
# tick, should we still draw it anyway?
# Right, sir. I promise I won't overlap any tick.
# Ensure that this tick won't overlap an hour tick.
# Ensure that this tick won't overlap a quarter tick.
# We're not drawing quarters nor hours, so we can draw all
# minutes ticks.
# Try to find a 'good' max size for text-based ticks.
# If we are a set of hours, the number of elements of this tickset is
# 12 and ticks are separated by a distance of 30 degrees;
# if we are a set of minutes, the number of elements of this tickset is
# 60 and ticks are separated by a distance of 6 degrees.
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Relationship between styles and ticks class names.
#
##
### eof
# AnalogClock setup dialog
#   E. A. Tacao <e.a.tacao |at| estadao.com.br>
#   http://j.domaindlx.com/elements28/wxpython/
#   15 Fev 2006, 22:00 GMT-03:00
# Distributed under the wxWidgets license.
# Tags:     phoenix-port
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Acquire a reference to the shared custom colours up in the dialog
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# AnalogClock constants
#   E. A. Tacao <e.a.tacao |at| estadao.com.br>
#   http://j.domaindlx.com/elements28/wxpython/
#   15 Fev 2006, 22:00 GMT-03:00
# Distributed under the wxWidgets license.
# Style options that control the general clock appearance,
# chosen via SetClockStyle.
# Style options that control the appearance of tick marks,
# chosen via SetTickStyle.
# Constants that may be used as 'target' keyword value in
# the various Get/Set methods.
#
##
### eof
# History:
#
# Version 0.02:
#   - Module/namespace rearranges;
#   - All '-1' occurrences meaning "use any id" were eliminated or replaced
#     to 'wx.ID_ANY'.
#   - Better names to the methods triggered by the context menu events.
#   - Included small demo class code in analogclock.py.
# Version 0.01:
#   - Initial release.
#----------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         buttontreectrlpanel.py
# Purpose:
#
# Author:       E. A. Tacao <e.a.tacao |at| estadao.com.br>
#
# Created:
# Version:      0.03
# Date:         12 Fev 2006, 22:00 GMT-03:00
# Licence:
# Tags:         phoenix-port
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# # Images generated by encode_bitmaps.py -----------------------------
# AnalogClock's font selector for setup dialog
#   E. A. Tacao <e.a.tacao |at| estadao.com.br>
#   http://j.domaindlx.com/elements28/wxpython/
#   15 Fev 2006, 22:00 GMT-03:00
# Distributed under the wxWidgets license.
# Tags:     phoenix-port
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#Boa:PyImgResource:
#----------------------------------------------------------------------
# This file was generated by famfamfam_flags.py
#
#-----------------------------------------------------------------------------
# Name:        img2pyartprov.py
# Purpose:
#
# Author:      Riaan Booysen
#
# Copyright:   (c) 2006
# Licence:     wxPython
#-----------------------------------------------------------------------------
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxPyColorChooser -> PyColorChooser
# o wxPyColourChooser -> PyColourChooser
#
# Tags:     phoenix-port
# Initialize the buffer to the background colour
# Make each logical unit of the buffer equal to 1 pixel
# GetPixel seems to always return (-1, -1, -1, 255)
# on OS X so this is a workaround for that issue.
# Perform an intial sizing
# Register event handlers
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxPyColorChooser -> PyColorChooser
# o wxPyColourChooser -> PyColourChooser
#
# Tags:     phoenix-port
# XXX This code has been disabled for now until I can figure out
# how to get this to work reliably across all platforms.
#A wxColourPtr is returned in windows, making this difficult
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxPyColorChooser -> PyColorChooser
# o wxPyColourChooser -> PyColourChooser
# o Added wx.InitAllImageHandlers() to test code since
#   that's where it belongs.
#
# Tags:     phoenix-port
# _
# Generate the custom colours. These colours are shared across
# all instances of the colour chooser
# Since we're going to be constructing widgets that require some serious
# computation, let's process any events (like redraws) right now
# Create the basic colours palette
# Create the custom colours palette
# Register mouse events for dragging across the palette
# Update the colour panel and then the slider accordingly
# Store the colour and slider position so we can restore the
# custom colours just as they were
# Snap to exact min/max values
# Allow values to go full range from 0 to 255
# This allows colours to be exactly 0,0,0 or 255, 255, 255
# Allow pure white
# Set the color info
# Update the Vslider and the HS current selection dot
# Convert RGB to (x,y) == (hue, saturation)
# Temporary bindings
# Update the RGB entries
# Convert to HSV
# Now with the slider updated, update all controls
# Update display
# We don't move on the palette...
# width, height = self.palette.GetSize()
# x = width * h
# y = height * (1 - s)
# self.palette.HighlightPoint(x, y)
# Prevent mouse from leaving window, so that we will also get events
# when mouse is dragged along the edges of the rectangle.
# Must call once for each CaputreMouse()
# I don't think we have to call ReleaseMouse in this event
# Get the colour value, combine with H slider value, and update
# Update colour, but do not move V slider
# Update display
# Highlight a fresh selected area
# infinite loop?
# should be an event. :(
# Added here because that's where it's supposed to be,
# not embedded in the library. If it's embedded in the
# library, debug messages will be generated for duplicate
# handlers.
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxPyColorChooser -> PyColorChooser
# o wxPyColourChooser -> PyColourChooser
#
# Set the base colour first since our base class calls the buffer
# drawing function
# Snap to max
# Snap to 0
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxPyColorChooser -> PyColorChooser
# o wxPyColourChooser -> PyColourChooser
# o Commented out wx.InitAllImageHandlers() (see comments at that
#   point for explanation
#
# Size of Image
# Load the pre-generated palette XPM
# Leaving this in causes warning messages in some cases.
# It is the responsibility of the app to init the image
# handlers, IAW RD
#wx.InitAllImageHandlers()
# simply iterate over hue (horizontal) and saturation (vertical)
# this code is now simpler (and works)
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxPyColorChooser -> PyColorChooser
# o wxPyColourChooser -> PyColourChooser
#
# For the American in you
#----------------------------------------------------------------------
# Name:        wx.lib.editor.Editor
# Purpose:     An intelligent text editor with colorization capabilities.
#
# Original
# Authors:      Dirk Holtwic, Robin Dunn
#
# New
# Authors:      Adam Feuer, Steve Howell
#
# History:
#   This code used to support a fairly complex subclass that did
#   syntax coloring and outliner collapse mode.  Adam and Steve
#   inherited the code, and added a lot of basic editor
#   functionality that had not been there before, such as cut-and-paste.
#
#
# Created:     15-Dec-1999
# Copyright:   (c) 1999-2016 by Dirk Holtwick, 1999
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxEditor -> Editor
#
#----------------------------
#----------------------------
#----------------------------------------------------------------------
##------------------ Init stuff
##------------------- Platform-specific stuff
#
# this will be obsolete when we get the new wxWindows patch
#
# 12/14/03 - jmg
#
# Which patch? I don't know if this is needed, but I don't know
# why it's here either. Play it safe; leave it in.
#
##-------------------- UpdateView/Cursor code
# TODO: We need a code review on this.  It appears that Linux
# improperly reports window dimensions when the scrollbar's there.
##-------------------- Drawing code
# r, g, b = emacsOrange
##------------------ eofMarker stuff
##------------------ cursor-related functions
#-1 ?
##-------- Enforcing screen boundaries, cursor movement
##----------------- data structure helper functions
##-------------------------- Mouse scroll timing functions
# we don't rely on the windows system to scroll for us; we just
# redraw the screen manually every time
# seconds
##-------------------------- Mouse off screen functions
##------------------------ mousing functions
#------------------------- Scrolling
#------------ backspace, delete, return
##----------- selection routines
#-------------- Keyboard movement implementations
#-------------- Key handler mapping tables
# subclass implements
##-------------- Logic for key handlers
# regular ascii
#----------------------- Eliminate memory leaks
#--------------------  Abstract methods for subclasses
# images converted with wxPython's img2py.py tool
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# selection either starts or ends on this line
#----------------------------------------------------------------------
# Name:        wx.lib.editor
# Purpose:     A package containing a colourizable text editor
#
# Author:      Robin Dunn
#
# Created:     30-Dec-1999
# Copyright:   (c) 1999-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxEditor -> Editor
#
# This file makes this directory into a Python package
# import the main classes into the package namespace.
#----------------------------------------------------------------------------
# Name:         FCEvents.py
# Purpose:      A convenient place to put all event types and binders for
#               FloatCanvas, and to help avoid circular imports.
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
## Create all the mouse events -- this is for binding to Objects
## these two are for the hit-test stuff, I never make them real Events
## fixme: could I use the PyEventBinder for the Object events too?
##Create all mouse event binding objects -- for binding to the Canvas
#----------------------------------------------------------------------------
# Name:         FCObjects.py
# Purpose:      Contains all the drawing objects FloatCanvas supports
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
## A global variable to hold the Pixels per inch that wxWindows thinks is in use
## This is used for scaling fonts.
## This can't be computed on module __init__, because a wx.App might not have initialized yet.
# why do we do this here, causes a Sphinx build crash
#ComputeFontScale()
## fixme: This should probably be re-factored into a class
# NOTE: can the Mac not just use the DC?
# Mac can't work with bitmap when selected into a DC.
#This class contains a series of static dictionaries:
#* BrushList
#* PenList
#* FillStyleList
#* LineStyleList
## these are the defaults
## this gets re-set by the subclasses if necessary
# I pre-define all these as class variables to provide an easier
# interface, and perhaps speed things up by caching all the Pens
# and Brushes, although that may not help, as I think wx now
# does that on it's own. Send me a note if you know!
##fixme: Way too much Canvas Manipulation here!
# first call to prevent the background color from being used.
# put the object in the hit dict, indexed by it's color
# put the object in the hit dict, indexed by its color
## fixme: this only removes one from each list, there could be more.
## + patch by Tim Ansel
##fixme: should I really re-set the style?
#print("Setting Brush, BrushList length:", len(self.BrushList))
## Just to make sure that they will always be there
##   the appropriate ones should be overridden in the subclasses
# Just to provide a consistant interface
# so that it will do something reasonable
## This may get overwritten in some subclasses
# shifts the points 5 in the x dir, and 10 in the y dir.
# Sets the points to the same array as it was
# Make sure it is a NX2 array, even if there is only one point
# this DOES need to make a copy
#.tolist()
# Make sure it is a length 2 vector
##fixme: How should the HitTest be drawn?
##    def CalcArrowPoints(self):
##        L = self.Length
##        S = self.ArrowHeadSize
##        phi = self.ArrowHeadAngle * N.pi / 360
##        theta = (self.Direction-90.0) * N.pi / 180
##        ArrowPoints = N.array( ( (0, L, L - S*N.cos(phi),L, L - S*N.cos(phi) ),
##                               (0, 0, S*N.sin(phi),    0, -S*N.sin(phi)    ) ),
##                             N.float )
##        RotationMatrix = N.array( ( ( N.cos(theta), -N.sin(theta) ),
##                                  ( N.sin(theta), N.cos(theta) ) ),
##                                N.float
##                                )
##        ArrowPoints = N.matrixmultiply(RotationMatrix, ArrowPoints)
##        self.ArrowPoints = N.transpose(ArrowPoints)
# Make sure it is a NX2 array, even if there is only one point
# Make sure it is a NX2 array, even if there is only one point
# A Little optimization for a diameter2 - point
##fixme: I really should add a DrawCircleList to wxPython
# Make sure it is a length 2 vector
# Make sure it is a length 2 vector
# these define the behaviour when zooming makes the objects really small.
# you need this in case Width or Height are negative
# don't try to draw it too tiny
# don't try to draw it too tiny
# just to keep it compatible with others
# these define the behaviour when zooming makes the objects really small.
# just to keep it compatible with others
# you need this in case Width or Height are negative
# don't try to draw it too tiny
## I'm caching fonts, because on GTK, getting a new font can take a
## while. However, it gets cleared after every full draw as hanging
## on to a bunch of large fonts takes a massive amount of memory.
# font size used for calculating layout
#wx.FontFromPixelSize((0.45*Size,Size), # this seemed to give a decent height/width ratio on Windows
## store the function that shift the coords for drawing text. The
## "c" parameter is the correction for world coordinates, rather
## than pixel coords as the y axis is reversed
## pad is the extra space around the text
## if world = 1, the vertical shift is done in y-up coordinates
# Input size in in Pixels, compute points size from FontScaleinfo.
# fixme: for printing, we'll have to do something a little different
##fixme: this can be depricated and jsut use ScaledTextBox with different defaults.
# Experimental max font size value on wxGTK2: this works OK on
# my system. If it's a lot  larger, there is a crash, with the
# message:
#
# The application 'FloatCanvasDemo.py' lost its
# connection to the display :0.0; most likely the X server was
# shut down or you killed/destroyed the application.
#
# Windows and OS-X seem to be better behaved in this regard.
# They may not draw it, but they don't crash either!
# this can be changed to set a minimum size
# This will be called when the text is re-set
# nothing much to be done here
## this isn't exact, as fonts don't scale exactly.
#wxMac needs a Bitmap selected for GetTextExtent to work.
# pts This effectively determines the resolution that the BB is computed to.
# compute the font size:
# only need a y coordinate length
## Check to see if the font size is large enough to blow up the X font server
## If so, limit it. Would it be better just to not draw it?
## note that this limit is dependent on how much memory you have, etc.
# smallest size you want - default to 0
# Draw the Text
# don't try to draw a zero sized font!
# compute the shift, and adjust the coordinates, if neccesary
# This had to be put in here, because it changes with Zoom, as
# fonts don't scale exactly.
# the default is just a little bit of padding
# Experimental max font size value on wxGTK2: this works OK on
# my system. If it's a lot  larger, there is a crash, with the
# message:
#
# The application 'FloatCanvasDemo.py' lost its
# connection to the display :0.0; most likely the X server was
# shut down or you killed/destroyed the application.
#
# Windows and OS-X seem to be better behaved in this regard.
# They may not draw it, but they don't crash either!
# this can be changed to set a larger minimum size
#wxMac needs a Bitmap selected for GetTextExtent to work.
# pts This effectively determines the resolution that the BB is computed to.
#Width to wrap to
#beginning = True
#wxMac needs a Bitmap selected for GetTextExtent to work.
# pts This effectively determines the resolution that the BB is computed to.
# use the defined Width
## Scale to World Coords.
#(x,y) = self.ShiftFun(self.XY[0], self.XY[1], BoxWidth, BoxHeight, world=1)
# compute the font size:
# only need a y coordinate length
## Check to see if the font size is large enough to blow up the X font server
## If so, limit it. Would it be better just to not draw it?
## note that this limit is dependent on how much memory you have, etc.
# smallest size you want - default to 1
# Draw The Box
# Draw the Text
# don't try to draw a zero sized font!
# Draw the hit box.
# Note the BB is just the point, as the size in World coordinates is not fixed
## this isn't exact, as fonts don't scale exactly.
## fixme: this should all accommodate different scales for X and Y
##fixme: should this have a y = -1 to shift to y-up?
#print("bmpWH:", self.bmpWH)
#print("Width, Height:", self.WH)
#print("self.BmpScale", self.BmpScale)
# cache of the last existing scaled bitmap
## this isn't exact, as fonts don't scale exactly.
##fixme: this may only works for Yup projection!
##       and may only work for top left position
#if True: #fixme: (self.ScaledBitmap is None) or (H != self.ScaledHeight) :
#print("Scaling to:", W, H)
# this defines the cached bitmap
#print("Using Cached bitmap")
# figure out subimage:
# fixme: this should be able to be done more succinctly!
# off the bitmap
# draw at origin
# off the bitmap
# draw at origin
#off the screen --  This should never happen!
# off the screen --  This should never happen!
# add the 0.5 to  round
#print("rescaling with High quality")
# this defines the cached bitmap
#XY = self.ShiftFun(XY[0], XY[1], W, H)
#fixme: get the shiftfun working!
#print("Using cached bitmap")
##fixme: The cached bitmap could be used if the one needed is the same scale, but
##       a subset of the cached one.
## first see if entire bitmap is displayed:
#print("Drawing entire bitmap with old code")
#BBbitmap = BBox.fromPoints(self.WorldToBitmap(BBworld))
#print("Drawing a sub-bitmap")
#print("Not Drawing -- no part of image is showing")
##fixme: this could use vstack or something with numpy
# making sure to get the last point
# an extra is OK
# Use cross shaped markers
#Horizontal lines
# Vertical Lines
# use dots
## Note: this code borrowed from Pointset -- it really shouldn't be repeated here!.
##fixme: I really should add a DrawCircleList to wxPython
# There is probably a more elegant way to do this next section
# The bounding box just gets set to the WH of a circle, with center at CenterXY
# This is suitable for a pie chart as it will be a circle anyway
#self.BoundingBox = array((self.XY, (self.XY + self.WH)), Float)
#Finish the setup; allocate color,style etc.
#Why isn't this working ???
##fixme: this should be a longer and better designed set.
##       Maybe one from: http://geography.uoregon.edu/datagraphics/color_scales.htm
#["Red", "Green", "Blue", "Purple", "Yellow", "Cyan"]
# add the zero point to start
# just the x-coord
# this one uses a proprty for _Canvas...
## re-define _Canvas property so that the sub-objects get set up right
## slight variation on DrawObject Bind Method:
## fixme: There is a lot of repeated code from the DrawObject method, but
## it all needs a lot of cleaning up anyway.
# first call to prevent the background color from being used.
# Set all contained objects to the same Hit color:
# put the object in the hit dict, indexed by it's color
#----------------------------------------------------------------------------
# Name:         FloatCanvas.py
# Purpose:
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# add a circle
# add a rectangle
## Custom Exceptions:
## Import all EVT_* event types and event binders
#---------------------------------------------------------------------------
## CHB: I'm leaving these out for now.
#self.Bind(wx.EVT_ENTER_WINDOW, self. )
#self.Bind(wx.EVT_LEAVE_WINDOW, self. )
# making sure the arrribute exists
# make the default Mouse Mode.
# timer to give a delay when re-sizing so that buffers aren't re-built too many times.
#        self.InitializePanel()
#        self.MakeNewBuffers()
#        self.CreateCursors()
## create the Hit Test Dicts:
# No Projection to start!
# default Transformation
# these were determined essentially arbitrarily
# Set mode
# this lets the old mode clean up.
# make sure the mode is linked to this canvas
##fixme: Should this just be None if nothing has been bound?
#print("Using hit test code for 2.8")
#print("using pre-2.8 hit test code")
##fixme: Can this be cleaned up?
# this means the enter event isn't bound for that object
# the mouse is still on the same object
## Is the mouse on a different object as it was...
# call the leave object callback
# this means the leave event isn't bound for that object
# this means the enter event isn't bound for that object
## set the new object under mouse
# no objects under mouse bound to mouse-over events
## Add the hit coords to the Object
# this means the leave event isn't bound for that object
## fixme: There is a lot of repeated code here
##        Is there a better way?
##    probably -- shouldn't there always be a GUIMode?
##    there could be a null GUI Mode, and use that instead of None
##fixme: this looks like tortured logic!
# Make new offscreen bitmap:
## Note: the foreground and backround HT bitmaps are in separate functions
##       so that they can be created separate --i.e. when a foreground is
##       added after the backgound is drawn
## OS-X sometimes gives a Size event when the panel is size (0,0)
# lrk: added for speed in WorldToPixel
## this was so that rubber band boxes and the like could get drawn here
##  but it looks like a wx.ClientDC is a better bet still.
#try:
#    self.GUIMode.DrawOnTop(dc)
#except AttributeError:
#    pass
# it's possible for this to get called before being properly initialized.
## If an object was just added to the Foreground, there might not yet be a buffer
## I got some strange errors (linewidths wrong) if I didn't make a new DC here
#Draw the background HT buffer to the foreground HT buffer
# If the canvas is in the middle of a zoom or move,
# the Rubber Band box needs to be re-drawn
##fixme: maybe GUIModes should never be None, and rather have a Do-nothing GUI-Mode.
## Clear the font cache. If you don't do this, the X font server
## starts to take up Massive amounts of memory This is mostly a
## problem with very large fonts, that you get with scaled text
## when zoomed in.
# lrk: Returns the objects that should be redrawn
## fixme: should this check be moved into the object?
# convert from panel coordinates
# convert from pixel coordinates
# No conversion
#override input if they don't give a center point.
# Compute the new Scale
# this does need to make a copy!
# this will happen if the BB has zero width or height
#width == 0
# height == 0
#zero size! (must be a single point)
# Reset the shifting and scaling to defaults when there is no BB
##fixme: Using the list.remove method is kind of slow
# if there are only NullBBoxes in DrawLists
#Note: this can be called by users code for various reasons, so N.asarray is needed.
# put in a reference to the Canvas, so remove and other stuff can work
#i = 0
# for speed
# for speed
# for speed
# for speed
# for speed
## lrk's code for doing this in module __init__
#----------------------------------------------------------------------------
# Name:         GUIMode.py
# Purpose:
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# use 16X16 cursors for wxMac
# use 24X24 cursors for GTK and Windows
# set the FloatCanvas for the mode
# it gets set when the Mode is set on the Canvas.
# Handlers
## some mix-ins for use with the other modes:
# Handlers
## The Move event always gets raised, even if there is a hit-test
# process the object hit test for EVT_MOTION bindings
# process enter and leave events
# then raise the event on the canvas
## timer to give a delay when moving so that buffers aren't re-built too many times.
# Always raise the Move event.
# reset the canvas without re-drawing
## The screen has been re-drawn, so StartMove needs to be reset.
#xy1 = N.array( event.GetPosition() )
##fixme: This sure could be cleaner!
##   This is all to fill in the background with the background color
##   without flashing as the image moves.
#self.Canvas.Update()
# if mouse has moved less that ten pixels, don't use the box.
# Always raise the Move event.
#if False:
# Always raise the Move event.
#----------------------------------------------------------------------------
# Name:         NavCanvas.py
# Purpose:      Combines FloatCanvas with Navigation controls
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
#Add the Canvas
# add a circle
# add a rectangle
## Create the vertical sizer for the toolbar and Panel
# default to first mode
#self.ToolBar.ToggleTool(self.PointerTool.GetId(), True)
## fixme: remove this when the bug is fixed!
#wx.CallAfter(self.HideShowHack) # this required on wxPython 2.8.3 on OS-X
#self.ZoomOutTool = tb.AddRadioTool(wx.ID_ANY, bitmap=Resources.getMagMinusBitmap(), shortHelp = "Zoom Out")
#self.Bind(wx.EVT_TOOL, lambda evt : self.SetMode(Mode=self.GUIZoomOut), self.ZoomOutTool)
##fixme: remove this when the bug is fixed!
# Otherwise the focus stays on the Button, and wheel events are lost.
#----------------------------------------------------------------------
# This file was generated by /usr/local/bin/img2py
#
#q\xff\x07U\x8b\xd2\xd9\xa7k\xe9\xa1U\x94,\xbf\xe4\x88\
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#e\xd5w\xfb\x8d\xa7\xea.\xa6j\x06\xec\xeaU\
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#\xdf|\x8be\x98\x16\xd0]\x0c\x9e\xae~.\xeb\
#----------------------------------------------------------------------
#J+\x98\xf2"\xd8\x0c/$\x88j0\
#Y{\x16\x08$?\xe0\xb4JR7h\x0e:\xd3\xcc\xb3\xe8\x06WX\xdd-\
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#K\x84\xf7\x86\xd5.\xf6\r\xcf\xad\x192u\xd6&Z~\xfekm\xf0\xa0\
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#mfSw\xd35\xcf\
#\x1bw\xe4\x1f\xcdj\x01:\x9a\xc1\xd3\xd5\xcfe\
#----------------------------------------------------------------------
# This file was generated by /usr/local/bin/img2py
#
#X\xff\xff\x06Q\x191j\x1c\x88\xce%x\xa9\xe6\xec\n\xfe\
#\
#@\xc4\xe9\x91\xa42{\x95\x1e>\xa4@\x82\x0cv\x99\xd03\xec\xbf\xae\
#\x04\x83?\'\xaf\
#\xbdc\xfcl\x89\xee\xe1X2\xac\x19\x1e\xa3\x98\xc4\x11\xeb\xc2\xb1\
#\x18\xe1\xd2D\x1d\xadw\xad8\x0f\xf0?\x83\xfai\xcfh1?3\
#J\xf0\xe6\xca:\xe8\xae.3\xcbT\xa0\x99\xc48\x07u\x9dI^\x9ekyW3\xba\
#I\x94\xf4S\xbf\xd7_y\xfc\xf0\
#:<Sq\xb4\
#X\x1f>\x89\xd2\x80\xb60\xaf\xc1LB|oW\xa6*\
#\xbbf\x91\xf3k\xeb\xcb3/\xad\xf6\xebLDq\xea\xda\x1dc\x8d\xc5\x01L\xc8\
#\xe4.d\xd9\xe9)$\x89\x8b\xc0X\n\tE\xd9\
#\xed\x1b\
#\xa3Eb\xec\x93~\xf4C\x02)\xfb\x10%\
#\xc6\xe3\n\
#\x89\x83\xdd\xaaG\xf5\x07y\xa8\xf6-On\xe5N\xc6*\xeba\xb5\xe70V\xfa\
#O^\xa0MX\xfa\xfd\xf2\x88\xb5\x19\xe9g\xa8\xf8\xa3\
#Jf\xa2\xcdCm\xb3=}\x03~\xfe\xa2/Z\x1bn\x9b\
#2\x06\x95\x05\x1c\x93t\xed\xf7\x8e\x17\xf1\xfbf6\x95\x07\
#x\xb4\x85\x82\x93W\\\x06\
#&aa\xfe\x91K\xa8\x99y\xde\tR\xec\
#\xb2$\xb1\x8e;\xdf\
#\x07\xb0\xb7\x850\'ar\xb2(\xe6rjz\xfe\xa2J\xc3^zR\x1d\x18~\xa6&\xd4\
#*\xdd\x1d\xd8%]\x1e7q\x9c\xc7\
#\xd2\xdd\xdb\
#]dN\xa1\xda\x8c\x1a\x95\xcd\x83\xc0\xd7\xb5\xa0\xf3\xad\xf8\
#\xec"\xb6\x85-\
#p\x08%\xb8\xe9\xfef.\xca\xfc\xbb\x10\x1c\xd9\
#\xf9\xe7\xef\xa14Z\x8a;a\x8bMG\xde\x9d\
#\\\x04\x1b\xac_\xde\xf8}\xf5\xd4n\xb7\\A=\x7f\x19\xff\x8f\x19\xdc}>{\t\
#};`%\x95\xd1>8\xfd\xcf\xc6\xb6&\x11\xd0:\xa2\x9f\xe1\x90iUT\x91\xbc\xe3\
#\xb7\x03\x1a\x9e\xb2r\xba\xb50\xf3\xb5\x04y\
#\
#y\\\xafU\xd28\xbc<0S\xc3\xb3m\xca\x8f~/W\n\xc6<\x82\xb0\xfd\xebXjf_\
#\x8fP\xdf|U\xd9C\xac\x97@\x8c|\xb1/\xbb\xaeo\
#\x80\x17\x85\x85\x80-C^\xf6\xb4\xc6}\xfepr\xdb\x0bJ\x99P}\x04\xe2*\xe4{\
#\x16\xaf\xd7\xc6\xa0\xd4\xbf{\xc2\xf129\
#R\xea\xf3\xf0\xff\x00\x1e\x17\x17\x14\xfe\x04\x00\xcb\xac+\
#`\
#\xb2M\xa5\xbb\xab\xab\xce\x1bl-ZTd\
#\xd7\
#\x14\x1f\xb0\x8bR\x9d\
#\xefm\xce\xe3-g\x89:k\xb2\x19\xef\
#\xcc\xe4\xd9\xff\xb3\x0f\x11\
#w~\xc7H%z~,\x83\xc3\xe2\xff)\
#\'\x9a\x99Z\xb0\
#\
#\xd8u\xd7h\x06W\x0e\
#\xf4P\xbc\x1c\xe1\
#,%\t5\x8a5\xefgK\
#z\xb94@?6\x95\xcd\x97\xb8?\x89_5\xab\x94\xa1\xf1%i\x8a\x93\
#\x93\xa7\xe5u\x8e\x03\xf6_\x8d\xaf\x19\
#\xa8*\xa6\xa6\x86\x82\xc8\x134\xd2\xc8f\xf8\xab\x7f\xef\xfd\xc6\x04|Rx~\
#\
#0C\xfb\x9aC\xd9\xfbX\xb8"\nJ\x95\xbfP\x03\x0b\x84\x97\xfb<\x93\xc7\xcd|\
#\xd2-^\x0b\xb1\xe0#\x8e\xfb\xcc7\xd7\xf1\x92*\x8e\xdb\x96\xab\xf5\
#\xeav\xc9N\xdf\x15o@z\x99\xa8\
#\xf2\xb2\xd0\xa7-\x86\x08\xa8\x1e\
#h\x1b\x0f\x9ds\xd5dB8q\'\xa4\xb0\x13l\xd6\x9e\xa1$\xcd\xca\xeb\
#\xd1\xbd\x91\\r0\xca\
#&\xaf\xac\xfb/\xdc~\x7f\x8b\xf7\x8ew\
#w\xcf\xaa\xa5\x94\xef\xbcF\tP\xe1\x86\xcds\
#\x9d9\xa2\x9fyNmA \xca\xf9C\x0c\xa6\tw\xe7\xa9\
#\xadtA[\xfe\xdcP\xfe\xeed\xfc\xcb\xfbm\xe9\x8f\xb4N\xb6\xf1&\
#\xec\x847\xb8f\x9f"\x9c\x8d\xcb6W\
#\xb2\xe3?\x0e\xbfe\xc2{\x94\xa9H[\xf4\
#\x92\xde\xac\x06l\xe9\xa1\x1f\x08\
#_\x93g\x8e\x0b(\xe0\x92\
#I\x13%E\xcdi\x1d\xfc0\xc9\xc2\xaf, \xff\xaa\xd9~\xd3m\x8d\xdd4l8N\xdb\x9e\
#\x99\xc5\xd3\x883f\
#\xb6n\x1c\xf1\xa7\xc7c2)?0SZ\xbc\xdf\xcdF\x90\x05\xcc\xadi\x98[\xd3\
#6\'\x99\xd8\xbc\xe0\xe2*K\x92f\xad\xf6q_\x98\xac\xb1\xb4\x07c\
#\x82\
#;Y\x96\xf3\
#jp\x9d\xf6\
#R\xe9e\xff\xfez\x0c\xfc\xb7\x05Z\x93.\xaa\xd2\x1a\x17\x83\
#\x96\xaf\xcen\xc4\xe4\xbb\xceD\xc7\xffn\x06\
#(^\x10\xed!3\x16Y1\xf3\xb1K\xe0jp\
#0\x86\x02\x0b\xca\xce\x9b\x82\xb2\xf3"I9\
#\x9e\\\xfb\x98\xacsM\xb4\x92\xa80\x928\xe4\xd6\xe2\xa8\
#N\xee\xdf7\x93\xa0H\n\x07\xd7|\x82\xc9w\x9f%\xb9\xd4\xb1\xab\
#P\xd0K\xb7\xa7\xd4%0\x08\xa1\x08\x98:J`n\x1e\x03BF\xd7/n\xf68 <\x1d\xcb\
#g\xefTh|\xf2\xaa\xd6Q\x14\x85\x7f\xfd\xeb#l\xda\xb4-\xad\x15\x1a\
#\xfc\x05\xfc\xa9:\x04\xa9\
#rE;\x96\x88\xdfZ\xf7\x01>\xf9\xe4;\x04\x02\xfct\xe2\xbc\xca\
#\\D\xcbC\x167\x9c\x93\x0fA?\x90\x03\xcb\x911\x92]\xddl\x82y\xfd\
#U*Z\xa7\x15\xe9i\xb6\x98\xc9Px\xf3\
#\x1fyB\x87q+\x92\xe8D\x92\x010nt\xe6\xef\x1e\
#30b`z\x18Ss\xe7\xa3\xc4\xac\x15\xb4D\x99\xf8\xb8P\x056J\x17\x8c\
#\x16\xe6\xb6r\xe8{i#@L\xbc\x01``\x80~\xfe\x10\x01\x1dl\x87jd\x19\x1fJ\
#\
#Bf\xfe?3\xa9\x0f\xc05\xb1\
#}\xb8\xf4\x9b\xa0\xe7\x83\xfa\x8b\xc4\
#\x13\x10k\
#\xdf\xfd\xa7\xf5\x983\xbe\
#^q\x97D)--\xc5\x8c\x193\xa2\xd6\xdd\xdd\
#\xe0JX\xe0\x01\x81\x18\x92V\xc4\xbaf\xa3\xf1\
#>%R\x8cX\tm\xcc\xdfH\xa9\xfb#\x9e\x15\
#H`\xc6-\xea\
#f\xd3\
#\x14\xe4{\xbffw\xc4\xcf\xde\x0f\xe4\x0e\x804\xf8\xa0\
#\xb4n3\xf4N;\xf4\
#\xde\x0c\x8b\xb6/SE\\\x00bU\xcdC\xd9Q\x95CE%\
#\xc7\xfa\x96[=-\x93`\'\xb0\xa9HG\x15p\
#E\xb8\xd7\xfe\x92\x0e\
#\xd1\xfaN\xb4\n\x9b\x10\xb1\
#\x0f)\xd6\xa7TV4Q8[\xa2x\x8f\xc4\xb8\xb1\x9a\
#\x9aD\xadn6r-\
#\xe2\x99\x04\xbbz\xda\xba\xf6Scn\xbb\xeezZ\xcc_)[\x9a\x90\x8830b\
#\x16\xae\xd5\x9d.\xcb\x9baJ\xf7{\x98\
#\x96\x8c\x14\xefa\x86q\xa9\'\xc2H\
#\xa2\xd7\x9b\xee\xab\x91\xc4pX\xdf\x13\x1c\x9fet\xec\x9b+\
#m=\x10\x97L\xa6\xa7n\xb1qx@}r\x04\xf0s|\xbd\
#\
#\xa7\x02\x97\x94\x81\x80a\xf7\xf4\xb0\x15\xae\x14L6z\xdf\x9a>\xe4\xdd\
#EQ\x18\x1c\x12g\x9b\
#\
#\x03\xa0\x9c~ @\x81\xb8}\x8e"\x97\
#\x19\x98:\xe9j\xb7\xb2\
#\
#\xce(Z\x8a\xbbpW\xd4\xfa\xc2\
#\xfbZ\x85\x12\xd8\xc4\x9a\xbb\xa8\xc4G\x8d\x81\x8fV(\
#\xef\xacE\xfe\x95\
#\xe6\'\xf7\x01~\xad\x03\xad\xe6\xef\xc2\xe7$\x11\xc4a\
#\xb4X\xb6\x01\x00\x08\x82\xc0\xc9\
#\x00\xca\xd9\xd2|c\x90\x1b+ \xe0\xe2a$\
#Zy`\x80\xdcv\xff\x1a:\xdf\x81\xc4j\xd1\xdf^\xc3(\x04\xb3\
#\x7f\xe6\x0c,\xffU\x18\x86`$\x87\xc4\
#\x8b\xd5\x19\xf6\xec\xf7\x8f\
#\xd8O\x93M\x98\xd5\xben\x94\x9eM\xee\x19\xdf/\xaf\x02\
#\xd4\x9e\
#\x8d\xf3\xb1\xb7]\x7f\xb7\x1f\x90\xc8c\xdep\x1d$\x1e\
#Q\x8d\xe2\x9bX\n\xe8#\x1d\xc2Q&\xb0\nY\x7f*\
#\xc1\x00\xff4bC[TA\xdd\x81\x9d\xa8*T\xb2\x9c\xcd.\x00\x10\xf8\
#4\x07\xc4\xafkYf\x99\xc6\xf24\xe6\xc5E\xd1\x9a\x87w\xab*\x84\xaf3\xb2\
#\xd3\xda\x05\xf3\x1aI\x11\x84\xb5\x1d\x06\xa3\x04\xde\x0c\x1c\xb3\
#\xd3\xcc\x05\tgn\x8f\x06\x8d\x94\xe4\x86\
#\xbb\xafR3\xa1\x83\
#|\n\
#V\x8b\xa2\x1fZ\x03\xc6J\x9b\xf5\xe6\x8d\xfe\xa2\
#\xd4+\x9cS\xaa\xca\xf73\xaf\x1a\xfc\xd5\xdb\xac\xb4\xa1\xfd\xaf\x055\xc1=\
#Y\x1e\xc7\x82\
#\x07\
#\x87MK\xd4\xb3I\x84\x1b3y4\xaf\x999x.\xb2\xbe\x0b\xdf\xe2\xba-\x92\x11\
#`\x9fj+\xfa\x9b\xc4\xc4i\xaf;\
#\xc0 \xec\x07\xd6\x83T\xb1\xd4\xef\x0b\xee\xd1_\xeaU\xd2a\xb9\x06\x1f\
#r\x85\xbb\x9e\x0e\xe1\xbbR( \x9aX\x83\xf9i)[\x07\xeb\x0c\
#\xfb\xa9X\
#\x0b\x15\xf9;\x8ab\x19\
#\x93\x10p\t\xe9\xbb(\xc7\xe8\xab\
#`\xea\xdf\xb3C\xa3\xbd\x1dS\xc9P\x07\
#WI\x8f\xf8c\n\x98\xab\xd60\xd0\xcf\xa3\xf3\xafb\xa8K\xda\xdeO\xec<{\xd1\
#<*_\x08\
##\xc1Kb\x8d\xfc\x87\xb3\xbc\x9f3\x8c\xfe\xe9L\
#\xb5\x83\x99\x92\x9a\xd7b\x15\xf0\
#\x83w\x17\xa0t\x99o\x11\
#\xde\xf8\x92"\xe0\x84\xe5\xd7\x96E\xa1\xfc\x0f\xfe\x0c\xc0]\x97\\9\
# \xfe\xa39\xee\x07\xfbUS\xe8\x95\x16r\xb8\xad,\xe1J|\x882\x13L\xad\xa4t\
#\x1d\xd9\xd2\xd8\xf1@E\x82e\xfdqN\x83\xd4\xa4\xb2;\xa7\xea\x07\xeb\
#X\x11\xcfR\xf64\x15\\I\xbd\xc4\xf4&\xbf\x96f7B\x17\xc3\x1d.\xae\xfe\x94\
#!\x18\xcca3\x16\xf9\x80\xf2\x0f\xc6\xe0\xe4\x7f\xa9\xd6\x7fWYB\x90\
#{\xdb\xce\x7f\xd8\xe0\r/$>\x85w\xbc\x1d\x83\xe7\xf5tn\x9dx\xfc\xd7\x9d\
#\xd3\
#\xaa\xbfY\x12\xaed6k3C`c;\xe6-Y\xb7{\xa8\x82\xaa\xedT\x16\x84f\
#\x88\xe2\xa5\xd4\xa9\xdc\xd9\
#----------------------------------------------------------------------------
# Name:         __init__.py
# Purpose:      The FloatCanvas package
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         BBox.py
# Purpose:
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# note: zero sized BB OK.
## BB may be a regular array, so I can't use IsNull
## fixme: it would be nice to add setter, too.
### This could be used for a make BB from a bunch of BBs
#~ def _getboundingbox(bboxarray): # lrk: added this
#~ # returns the bounding box of a bunch of bounding boxes
#~ upperleft = N.minimum.reduce(bboxarray[:,0])
#~ lowerright = N.maximum.reduce(bboxarray[:,1])
#~ return N.array((upperleft, lowerright), N.float)
#~ _getboundingbox = staticmethod(_getboundingbox)
## Save the ndarray __eq__ for internal use.
## BB may be a regular array, so I can't use IsNull
#upperleft = N.minimum.reduce(BBarray[:,0])
#lowerright = N.maximum.reduce(BBarray[:,1])
#   BBarray = N.asarray(BBarray, N.float).reshape(-1,2)
#   arr = N.vstack( (BBarray.min(0), BBarray.max(0)) )
#return asBBox( (upperleft, lowerright) ) * 2
#----------------------------------------------------------------------------
# Name:         Colors.py
# Purpose:      Contains color lists used in FloatCanvas
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
## Categorical 12-step scheme, after ColorBrewer 11-step Paired Scheme
## From: http://geography.uoregon.edu/datagraphics/color_scales.htm
# CategoricalColor1 = [ (255, 191, 127),
#                       (255, 127,   0),
#                       (255, 255, 153),
#                       (255, 255,  50),
#                       (178, 255, 140),
#                       ( 50, 255,   0),
#                       (165, 237, 255),
#                       (25, 178, 255),
#                       (204, 191, 255),
#                       (101,  76, 255),
#                       (255, 153, 191),
#                       (229,  25,  50),
#                       ]
# tiny test app
#----------------------------------------------------------------------------
# Name:         GUI.py
# Purpose:      Contains GUI related utilities for FloatCanvas
#
# Author:
#
# Created:
# Version:
# Date:
# Licence:
# Tags:         phoenix-port, unittest, documented, py3-port
#----------------------------------------------------------------------------
# this will be set when the mode is set on a Canvas
# draw the RB box
# Start drawing
# Stop Drawing
#----------------------------------------------------------------------
# Name:        wx.lib.gizmos.dynamicsash
# Purpose:     A Python port of the C++ wxDynamicSashWindow from the
#              old wxCode library.
#
# Author:      Robin Dunn
#
# Created:     30-Oct-2017
# Copyright:   (c) 2018 by Total Control Software
# Licence:     wxWindows license
# Tags:
#----------------------------------------------------------------------
#----------------------------------------------------------------------------
# Styles
# DS_MANAGE_SCROLLBARS is a default style of DynamicSashWindow which
# will cause it to respond to scrollbar events for your application by
# automatically scrolling the child view.
# DS_DRAG_CORNER style indicates that the views can also be resized by
# dragging the corner piece between the scrollbars, and which is reflected up
# to the frame if necessary.
# Default style
#----------------------------------------------------------------------------
# Events
#----------------------------------------------------------------------------
# The public window class
# set default attributes
# break possible cycles and etc.
#==========================================================================
# Just internal "implementation details" from here down
# DynamicSashWindow works by internally storing a tree of Implementation
# objects (_DynamicSsahWindowImpl) and Leaf objects (_DynamicSashWindowLeaf).
# The DynamicSashWindow has a pointer to one implementation, and each
# implementation either has a pointer to a one leaf (_leaf) or a pointer to
# two children implementation objects (_child[]).  The leaves each are
# responsible for drawing the frame and decorations around one user-provided
# views and for responding to mouse and scrollbar events.
#
# A resulting tree might look something like this:
#
# DynamicSashWindow
#  |
#  +- _DynamicSashWindowImpl
#      |
#      +- _DynamicSashWindowLeaf
#      |   |
#      |   +- user view window
#      |
#      +- _DynamicSashWindowImpl
#          |
#          +- _DynamicSashWindowLeaf
#          |   |
#          |   +- user view window
#          |
#          +- _DynamicSashWindowLeaf
#              |
#              +- user view window
#
# Each time a split occurs, one of the implementation objects removes its
# leaf, generates two new implementation object children, each with a new
# leaf, and reparents the user view which was connected to its old leaf to be
# one of the new leaf's user view, and sends a Split event to the user view in
# the hopes that it will generate a new user view for the other new leaf.
#
# When a unification occurs, an implementation object is replaced by one of
# its children, and the tree of its other child is pruned.
#
# One quirk is that the top-level implementation object (m_top) always keeps a
# pointer to the implementation object where a new child is needed.
# (_add_child_target).  This is so that when a new user view is added to the
# hierarchy, AddChild() is able to reparent the new user view to the correct
# implementation object's leaf.
# enum DynamicSashRegion
#----------------------------------------------------------------------------
# break possible cycles and other cleanup
# these are not needed for this implementation
# It would be nice if moving *this* sash didn't implicitly move
# the sashes of our children (if any).  But this will do.
#----------------------------------------------------------------------------
# Since the parent's AddWindow is called during the construction of
# the C++ part of the child, there isn't a proxy object created for
# the child window yet. When we later try to use the widget object
# given here then it will come up as being already deleted (because
# the real proxy exists now.) So instead of saving the `window` here
# we'll just save the object's address instead, and then use that to
# fetch the real proxy object when it's needed later.
# Delay the reparenting until after the AddChild has finished.
#  Umm, the scrollbars are doing something insane under GTK+ and subtracting
#  one from the position I pass in.  This works around that.
# not DS_MANAGE_SCROLLBARS
#(y = sy; y < h - 2; y += 4)
#(x = sx; x < w - 2; x += 4)
#----------------------------------------------------------------------
# Name:        wx.lib.gizmos.ledctrl
# Purpose:
#
# Author:      Robin Dunn
#
# Created:     26-Oct-2017
# Copyright:   (c) 2018 by Total Control Software
# Licence:     wxWindows license
# Tags:
#----------------------------------------------------------------------
# constants used internally
# set default attributes
# flags
# event bindings
# Draw the background
# Iterate the digits and draw each
# Draw faded lines if wanted.
# draw the decimal point in the previous segment
# skip spaces
# Count the number of characters in the string; '.' characters are not
# included because they do not take up space in the display
# Create a pen and draw the lines.
#
#  **** THIS IS STILL A WIP ****
#
#----------------------------------------------------------------------
# Name:        wx.lib.gizmos.treelistctrl
# Purpose:     A simple derivation from wx.lib.agw.hypertreelist.HyperTreeListCtrl
#              to provide a class that is mostly compatible with the
#              TreeListCtrl class from the old gizmos module and the
#              wxCode library.
#
# Author:      Robin Dunn
#
# Created:     16-Nov-2017
# Copyright:   (c) 2018 by Total Control Software
# Licence:     wxWindows license
# Tags:
#----------------------------------------------------------------------
#--------------------------------------------------------------------------
# Styles and flags
#
# Most of these are the same as what's in the wx module, but a few are
# specific to HyperTreeList so replicate them all here so they are easier to
# find and use.
#--------------------------------------------------------------------------
#-------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.gizmos
# Purpose:     Python ports of some of the wrapped C++ classes in the
#              wx.gizmos module in Classic wxPython
#
# Author:      Robin Dunn
#
# Created:     26-Oct-2017
# Copyright:   (c) 2018 by Total Control Software
# Licence:     wxWindows license
# Tags:
#----------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:         masked.combobox.py
# Authors:      Will Sadkin
# Email:        wsadkin@nameconnector.com
# Created:      02/11/2003
# Copyright:    (c) 2003 by Will Sadkin, 2003
# License:      wxWidgets license
#
# Tags:         py3-port, phoenix-port, unittest, documented
#
#----------------------------------------------------------------------------
#
# This masked edit class allows for the semantics of masked controls
# to be applied to combo boxes.
#
#----------------------------------------------------------------------------
# jmg 12/9/03 - when we cut ties with Py 2.2 and earlier, this would
# be a good place to implement the 2.3 logger class
##dbg = Logger()
##dbg(enable=1)
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
## Because calling SetSelection programmatically does not fire EVT_COMBOBOX
## events, we have to do it ourselves when we auto-complete.
## defeat automatic full selection
## run internal validator
## select field under cursor on dclick
## bring up an appropriate context menu
## handle each keypress
## for special processing of up/down keys
## for processing the rest of the control keys
## (next in evt chain)
## to bring otherwise completely independent base
## ctrl selection into maskededit framework
## color control appropriately & keep
## track of previous value for undo
## set up maskededit to work with choice list too
## Since combobox completion is case-insensitive, always validate same way
##        dbg('self._choices:', self._choices)
## setup event handling by default):
# This is necessary, because wxComboBox currently provides no
# method for determining later if this was specified in the
# constructor for the control...
## must have been called via XRC, therefore base class is constructed
## set up maskededit to work with choice list too
## Since combobox completion is case-insensitive, always validate same way
##        dbg('self._choices:', self._choices)
# Set control font - fixed width by default
# ensure value is width of the mask of the control:
## Setup event handling functions through event handler object,
## to guarantee processing prior to giving event callbacks from
## outside the class:
# clean up associated event handler object:
##            dbg('calculated size:', self._CalcSize())
##            dbg('setting client size to:', (width, height))
##        dbg('MaskedComboBox::_GetSelection()')
##        dbg('MaskedComboBox::_SetSelection: setting mark to (%d, %d)' % (sel_start, sel_to))
##        dbg('MaskedComboBox::_GetInsertionPoint()', indent=1)
##        ret = self.GetInsertionPoint()
# work around new bug in 2.5, in which the insertion point
# returned is always at the right side of the selection,
# rather than the start, as is the case with TextCtrl.
##        dbg('returned', ret, indent=0)
##        dbg('MaskedComboBox::_SetInsertionPoint(%d)' % pos)
# For wxComboBox, ensure that values are properly padded so that
# if varying length choices are supplied, they always show up
# in the window properly, and will be the appropriate length
# to match the mask:
# Record current selection and insertion point, for undo
##        dbg('MaskedComboBox::_SetValue(%s), selection beforehand: %d' % (value, self.GetSelection()))
##        dbg('MaskedComboBox::_SetValue(%s), selection now: %d' % (value, self.GetSelection()))
# text change events don't always fire, so we check validity here
# to make certain formatting is applied:
##        dbg('MaskedComboBox::SetValue(%s)' % value, indent=1)
# revert to base control behavior
##            dbg('no mask; deferring to base class', indent=0)
# else...
# empty previous contents, replacing entire value:
##        dbg('MaskedComboBox::SetValue: selection beforehand: %d' % (self.GetSelection()))
# value shorter than control
# and it's a numeric control
# and it's a right-aligned control
# try to intelligently "pad out" the value to the right size:
##            dbg('padded value = "%s"' % value)
# For wxComboBox, ensure that values are properly padded so that
# if varying length choices are supplied, they always show up
# in the window properly, and will be the appropriate length
# to match the mask:
# make SetValue behave the same as if you had typed the value in:
# (clear current assumptions)
# (clear current assumptions)
# If date, year might be 2 digits vs. 4; try adjusting it:
##        dbg('adjusted value: "%s"' % value)
# Attempt to compensate for fact that calling .SetInsertionPoint() makes the
# selection index -1, even if the resulting set value is in the list.
# So, if we are setting a value that's in the list, use index selection instead.
####            dbg('queuing insertion after .SetValue', replace_to)
##        dbg(indent=0)
# call the mixin's Cut method
# else revert to base control behavior
# call the mixin's Paste method
# else revert to base control behavior
# else revert to base control behavior
##            dbg('updated choice:', choice)
# (for shorthand)
# Not all wx platform implementations have .GetMark, so we make the following test,
# and fall back to our old hack if they don't...
#
##            dbg(suspend=1)  # turn off debugging around this function
##            dbg('MaskedComboBox::GetMark', indent=1)
##                dbg(indent=0)
# no selection possible for editing
##            sel_start, sel_to = wxComboBox.GetMark(self)        # what I'd *like* to have!
##            dbg("current sel_start:", sel_start)
##            dbg('value: "%s"' % value)
# tell _OnTextChange() to ignore next event (if any)
##            dbg("value after Cut operation:", newvalue)
# something was selected; calculate extent
##                dbg("something selected")
# restore original value and selection (still ignoring change)
# tell _OnTextChange() to pay attn again
##            dbg('computed selection:', sel_start, sel_to, indent=0, suspend=0)
##            dbg('MaskedComboBox::GetMark()', indent = 1)
##            dbg('returned', ret, indent=0)
##        dbg('MaskedComboBox::SetSelection(%d)' % index, indent=1)
##        dbg('selection now: %d' % self.GetCurrentSelection(), indent=0)
##        dbg('MaskedComboBox::OnKeyDownInComboBox(%d)' % key)
# WANTS_CHARS with CB_READONLY apparently prevents navigation on WXK_TAB;
# ensure we can still navigate properly, as maskededit mixin::OnChar assumes
# that event.Skip() will just work, but it doesn't:
# else pass
##                dbg('calling OnChar()')
# let mixin default KeyDown behavior occur
##        dbg(indent=0)
##        dbg('MaskedComboBox::OnDropdownSelect(%d)' % event.GetSelection(), indent=1)
##            dbg('replacing EVT_COMBOBOX')
##            dbg('skipping EVT_COMBOBOX')
##        dbg(indent=0)
##        dbg('MaskedComboBox::OnSelectChoice', indent=1)
##            dbg('setting selection to', match_index)
# issue appropriate event to outside:
##                dbg('selecting 1st value in list')
# attempt field-level auto-complete
##                dbg(indent=0)
##        dbg('keep processing?', keep_processing, indent=0)
##        dbg('MaskedComboBox::OnAutoSelect(%d, %s)' % (field._index, repr(match_index)), indent=1)
##        field._autoCompleteIndex = match
##                dbg('issuing combo selection event')
##            dbg('field._autoCompleteIndex:', match)
##            dbg('self.GetCurrentSelection():', self.GetCurrentSelection())
##            dbg('scheduling set of end position to:', end)
# work around bug in wx 2.5
##            dbg('CallAfter SetValue')
#  Preserve the textbox contents
#  See commentary in _OnReturn docstring.
####            dbg('queuing insertion after .SetValue', replace_to)
##        dbg(indent=0)
##        dbg('MaskedComboBox::OnReturn', indent=1)
##        dbg('current value: "%s"' % self.GetValue(), 'current selection:', self.GetCurrentSelection())
##            dbg('attempting to correct the selection to make it %d' % self._ctrl_constraints._autoCompleteIndex)
##            wx.CallAfter(self.SetSelection, self._ctrl_constraints._autoCompleteIndex)
# Not doing this causes the item to be empty after hitting return on a non-selection while the drop
# down is showing. Not all masked comboboxes require choices from an autocomplete list.
##        dbg(indent=0)
##        dbg('MaskedComboBox::LostFocus; Selection=%d, value="%s"' % (self.GetSelection(), self.GetValue()))
##            dbg('attempting to correct the selection to make it %d' % self._ctrl_constraints._autoCompleteIndex)
# This should really be wx.EVT_WINDOW_CREATE but it is not
# currently delivered for native controls on all platforms, so
# we'll use EVT_SIZE instead.  It should happen shortly after the
# control is created as the control is set to its "best" size.
## CHANGELOG:
## ====================
##  Version 1.4
##  1. Added handler for EVT_COMBOBOX to address apparently inconsistent behavior
##     of control when the dropdown control is used to do a selection.
##     NOTE: due to misbehavior of wx.ComboBox re: losing all concept of the
##      current selection index if SetInsertionPoint() is called, which is required
##      to support masked .SetValue(), this control is flaky about retaining selection
##      information.  I can't truly fix this without major changes to the base control,
##      but I've tried to compensate as best I can.
##     TODO: investigate replacing base control with ComboCtrl instead...
##  2. Fixed navigation in readonly masked combobox, which was not working because
##      the base control doesn't do navigation if style=CB_READONLY|WANTS_CHARS.
##
##
##  Version 1.3
##  1. Made definition of "hack" GetMark conditional on base class not
##     implementing it properly, to allow for migration in wx code base
##     while taking advantage of improvements therein for some platforms.
##
##  Version 1.2
##  1. Converted docstrings to reST format, added doc for ePyDoc.
##  2. Renamed helper functions, vars etc. not intended to be visible in public
##     interface to code.
##
##  Version 1.1
##  1. Added .SetFont() method that properly resizes control
##  2. Modified control to support construction via XRC mechanism.
##  3. Added AppendItems() to conform with latest combobox.
#----------------------------------------------------------------------------
# Name:         wx.lib.masked.ctrl.py
# Author:       Will Sadkin
# Created:      09/24/2003
# Copyright:   (c) 2003 by Will Sadkin
# License:     wxWindows license
# Tags:        py3-port
#----------------------------------------------------------------------------
# 12/09/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace (minor)
#
# 12/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Removed wx prefix
#
# "type" enumeration for class instance factory function
# for ease of import
#----------------------------------------------------------------------------
# Name:         masked.ipaddrctrl.py
# Authors:      Will Sadkin
# Email:        wsadkin@nameconnector.com
# Created:      02/11/2003
# Copyright:    (c) 2003 by Will Sadkin, 2003
# License:      wxWidgets license
#
# Tags:        phoenix-port, py3-port, unittest, documented
#
#----------------------------------------------------------------------------
# NOTE:
#   Masked.IpAddrCtrl is a minor modification to masked.TextCtrl, that is
#   specifically tailored for entering IP addresses.  It allows for
#   right-insert fields and provides an accessor to obtain the entered
#   address with extra whitespace removed.
#
#----------------------------------------------------------------------------
# jmg 12/9/03 - when we cut ties with Py 2.2 and earlier, this would
# be a good place to implement the 2.3 logger class
##from wx.tools.dbg import Logger
##dbg = Logger()
##dbg(enable=0)
# add non-british spellings, for backward-compatibility
###.###.###.###"
# set up individual field parameters as well:
# require "valid" string; this prevents entry of any value > 255, but allows
# intermediate constructions; overall control validation requires well-formatted value.
# This makes '.' act like tab:
# for "shift-."
##        dbg('IpAddrCtrl::OnDot', indent=1)
# clip data in field to the right of pos, if adjusting fields
# when not at delimeter; (assumption == they hit '.')
##        dbg(indent=0)
# remove spaces from the value
##        dbg("IpAddrCtrl::_OnCtrl_S")
##        dbg('IpAddrCtrl::SetValue(%s)' % str(value), indent=1)
##            dbg(indent=0)
# assume True
# non-empty part
# allow empty sections for SetValue (will result in "invalid" value,
# but this may be useful for initializing the control:
# convert empty field to 3-char length
##            dbg(indent=0)
##            dbg('parts:', parts)
##        dbg(indent=0)
## CHANGELOG:
## ====================
##  Version 1.2
##  1. Fixed bugs involving missing imports now that these classes are in
##     their own module.
##  2. Added doc strings for ePyDoc.
##  3. Renamed helper functions, vars etc. not intended to be visible in public
##     interface to code.
##
## Version 1.1
##  Made ipaddrctrls allow right-insert in subfields, now that insert/cut/paste works better
#----------------------------------------------------------------------------
# Name:         maskededit.py
# Authors:      Will Sadkin, Jeff Childers
# Email:        wsadkin@parlancecorp.com, jchilders_98@yahoo.com
# Created:      02/11/2003
# Copyright:    (c) 2003 by Jeff Childers, Will Sadkin, 2003
# Portions:     (c) 2002 by Will Sadkin, 2002-2007
#
# License:      wxWidgets license
# Tags:         phoenix-port, py3-port
#----------------------------------------------------------------------------
# NOTE:
#   MaskedEdit controls are based on a suggestion made on [wxPython-Users] by
#   Jason Hihn, and borrows liberally from Will Sadkin's original masked edit
#   control for time entry, TimeCtrl (which is now rewritten using this
#   control!).
#
#   MaskedEdit controls do not normally use validators, because they do
#   careful manipulation of the cursor in the text window on each keystroke,
#   and validation is cursor-position specific, so the control intercepts the
#   key codes before the validator would fire.  However, validators can be
#   provided to do data transfer to the controls.
#
#----------------------------------------------------------------------------
#
# This file now contains the bulk of the logic behind all masked controls,
# the MaskedEditMixin class, the Field class, and the autoformat codes.
#
#----------------------------------------------------------------------------
#
# 03/30/2004 - Will Sadkin (wsadkin@parlancecorp.com)
#
# o Split out TextCtrl, ComboBox and IpAddrCtrl into their own files,
# o Reorganized code into masked package
#
# 12/09/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace. No guarantees. This is one huge file.
#
# 12/13/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Missed wx.DateTime stuff earlier.
#
# 12/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o MaskedEditMixin -> MaskedEditMixin
# o wxMaskedTextCtrl -> maskedTextCtrl
# o wxMaskedComboBoxSelectEvent -> MaskedComboBoxSelectEvent
# o wxMaskedComboBox -> MaskedComboBox
# o wxIpAddrCtrl -> IpAddrCtrl
# o wxTimeCtrl -> TimeCtrl
#
# Tags:        phoenix-port, unittest, documented, py3-port
#
###) ###-####')
# sign.
#       Allow numeric only (0-9)
###' means "field 0 = '&', field 1 = '###'", but there's
# characters and one optional decimal point
#s shown in red by default.) Can be
###) ###-####'
#{6}.#{2}', formatcodes = '_,-',
#{6}.#{2}', formatcodes = '_,-R'  # will right-adjust value for right-aligned control
###-####',
###-####')
######', the control will treat it as an integer
###.##'), the control will act as a floating point control
## Setup event handlers
## defeat automatic full selection
## run internal validator
## select field under cursor on dclick
## bring up an appropriate context menu
## capture control events not normally seen, eg ctrl-tab.
## handle each keypress
## color control appropriately & keep
## track of previous value for undo
# jmg 12/9/03 - when we cut ties with Py 2.2 and earlier, this would
# be a good place to implement the 2.3 logger class
##dbg = Logger()
##dbg(enable=1)
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
## Constants for identifying control keys and classes of keys:
## These keys are not already defined in wx
# Because unicode can go over the ansi character range, we need to explicitly test
# for all non-visible keystrokes, rather than just assuming a particular range for
# visible characters:
# Hardware-specific buttons
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
## Constants for masking. This is where mask characters
## are defined.
##  maskchars used to identify valid mask characters from all others
##   # - allow numeric 0-9 only
##   A - allow uppercase only. Combine with forceupper to force lowercase to upper
##   a - allow lowercase only. Combine with forcelower to force upper to lowercase
##   C - allow any letter, upper or lower
##   X - allow string.letters, string.punctuation, string.digits
##   & - allow string.punctuation only (doesn't include all unicode symbols)
##   * - allow any visible character
## Note: locale settings affect what "uppercase", lowercase, etc comprise.
## Note: '|' is not a maskchar, in that it is a mask processing directive, and so
## does not appear here.
##
#","A","a","X","C","N",'*','&')
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
## The following dictionary defines the current set of autoformats:
###) ###-#### x:###",
###-###-#### x:###",
###) ###-####",
###-###-####",
##/##/#### ##:##:## AM",
##-##-#### ##:##:## AM",
##/##/#### ##:##:##",
##-##-#### ##:##:##",
##/##/#### ##:## AM",
##/##/#### ##:##",
##-##-#### ##:## AM",
##-##-#### ##:##",
##/##/####",
##/##/##",
##-##-####",
####/##/##",
####.##.##",
##/##/####",
##.##.####",
##.CCC.####",
##/CCC/####",
####/##/## ##:##:## AM",
####.##.## ##:##:## AM",
##/##/#### ##:##:## AM",
##.##.#### ##:##:## AM",
####/##/## ##:## AM",
####.##.## ##:## AM",
##/##/#### ##:## AM",
##.##.#### ##:## AM",
####/##/## ##:##:##",
####.##.## ##:##:##",
##/##/#### ##:##:##",
##.##.#### ##:##:##",
####/##/## ##:##",
####.##.## ##:##",
##/##/#### ##:##",
##.##.#### ##:##",
##:##:## AM",
##:## AM",
##:##:##",
##:##",
###-##-####",
#"
####-####-####-####",
##/##",
#####",
#####-####",
##",
###",
#!+='\"",
###.###.###.###",
# build demo-friendly dictionary of descriptions of autoformats
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
## which field of mask; set by parent control.
## mask chars for this field
## (edit start, edit_end) of field; set by parent control.
## codes indicating formatting options for the control
## used as initial value for each mask position if initial value is not given
## used with numeric fields; indicates what char groups 3-tuple digits
## used with numeric fields; indicates what char separates integer from fraction
## used with numeric fields, indicates what is above the decimal point char on keyboard
## used with numeric fields, indicates that () should be used vs. - to show negative numbers.
## use if you want different positional defaults vs. all the same fillChar
## optional string of chars to exclude even if main mask type does
## optional string of chars to allow even if main mask type doesn't
## optional regular expression to use to validate the control
## Optional hi-low range for numerics
## Optional list for character expressions
## If choices supplied this specifies if valid value must be in the list
## Optional flag to indicate whether or not to use case-insensitive list search
## Set to True to try auto-completion on each keystroke:
## Optional function for defining additional, possibly dynamic validation constraints on contrl
## Set to True to disallow input that results in an invalid value
## Set to True to make EMPTY = INVALID
## primarily for autoformats, but could be useful elsewhere
## if True, paste into field will cause ValueError
## if True, disallow field navigation out of invalid field
# This list contains all parameters that when set at the control level should
# propagate down to each field:
####        dbg('Field::Field', indent=1)
# Validate legitimate set of parameters:
####                dbg(indent=0)
# Set defaults for each parameter for this instance, and fully
# populate initial parameter list for configuration:
####        dbg(indent=0)
##        dbg(suspend=1)
##        dbg('maskededit.Field::_SetParameters', indent=1)
# Validate keyword arguments:
##                dbg(indent=0, suspend=0)
##        if self._index is not None: dbg('field index:', self._index)
##        dbg('parameters:', indent=1)
##            dbg('%s:' % key, value)
##        dbg(indent=0)
# store so we can change choice lists accordingly if it changes
# First, Assign all parameters specified:
# (set/changed)
####            dbg("self._old_fillChar: '%s'" % self._old_fillChar)
# (set/changed)
##            dbg('isInt?', self._isInt, 'self._mask:"%s"' % self._mask)
##        dbg(indent=0, suspend=0)
##        dbg(suspend=1)
##        dbg('maskededit.Field::_ValidateParameters', indent=1)
##        if self._index is not None: dbg('field index:', self._index)
####        dbg('parameters:', indent=1)
##        for key, value in kwargs.items():
####            dbg('%s:' % key, value)
####        dbg(indent=0)
####        dbg("self._old_fillChar: '%s'" % self._old_fillChar)
# Verify proper numeric format params:
##            dbg(indent=0, suspend=0)
# Now go do validation, semantic and inter-dependency parameter processing:
# (set/changed)
# (set/changed)
##                    dbg(indent=0, suspend=0)
# (set/changed)
##                    dbg(indent=0, suspend=0)
# (set/changed)
##                dbg(indent=0, suspend=0)
##                        dbg(indent=0, suspend=0)
##                dbg('len(%s)' % self._mask, length, 'len(self._choices):', len(self._choices), 'length:', length, 'self._alignRight?', self._alignRight)
# changed mask without respecifying choices; readjust the width as appropriate:
##                    dbg('aligned choices:', self._choices)
# Verify each choice specified is valid:
# allow empty values even if invalid, (just colored differently)
##                            dbg(indent=0, suspend=0)
####        dbg("'fillChar' in kwargs?", 'fillChar' in kwargs, "len(self._choices) > 0?", len(self._choices) > 0)
####        dbg("self._old_fillChar:'%s'" % self._old_fillChar, "self._fillChar: '%s'" % self._fillChar)
##            dbg('updated choices:', self._choices)
##                dbg('no list to auto complete; ignoring "autoSelect=True"')
# reset field validity assumption:
##        dbg(indent=0, suspend=0)
##        dbg('Field::IsEmpty("%s")' % slice, indent=1)
##            dbg(indent=0)
##        dbg('self._template: "%s"' % self._template)
##        dbg('self._defaultValue: "%s"' % str(self._defaultValue))
##            dbg(indent=0)
####                dbg('slice[%(pos)d] != self._fillChar?' %locals(), slice[pos] != self._fillChar[pos])
##            dbg("IsEmpty? %(empty)d (do all mask chars == fillChar?)" % locals(), indent=0)
##            dbg("IsEmpty? 0 (slice doesn't match template)", indent=0)
##        dbg(suspend=1)
##        dbg('Field[%s]::IsValid("%s")' % (str(self._index), slice), indent=1)
# assume true to start
##            dbg(indent=0, suspend=0)
##            dbg("(member of list required)")
# do case-insensitive match on list; strip surrounding whitespace from slice (already done for choices):
##                dbg('updated slice:"%s"' % slice)
##            dbg('validating against range')
# allow float as well as int ranges (int comparisons for free.)
##            dbg('validating against regex')
##            dbg('validating against supplied function')
##        dbg('valid?', valid, indent=0, suspend=0)
##        dbg('Field::_AdjustField("%s")' % slice, indent=1)
####        dbg('length(self._mask):', length)
####        dbg('self._useParensForNegatives?', self._useParensForNegatives)
# drop sign, if any
# drop sign, if any
# drop extra spaces
# drop extra fillchars
# drop sign, if any
# lose commas/dots
####            dbg('intStr:"%s"' % intStr)
####            dbg('raw int str: "%s"' % intStr)
####            dbg('self._groupdigits:', self._groupdigits, 'self._formatcodes:', self._formatcodes)
# expanded string will still fit and leave room for sign:
# else... leave it without the commas...
##            dbg('padzero?', self._padZero)
##            dbg('len(intStr):', len(intStr), 'field length:', length)
# we had a sign before; restore it
# - was before digits
# must have had ')' but '(' was before field; re-add ')'
# drop extra spaces
## Only if right-alignment is enabled
##        dbg('adjusted slice: "%s"' % slice, indent=0)
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
## mask string for formatting this control
## optional auto-format code to set format from masktags dictionary
## optional list/dictionary of maskededit.Field class instances, indexed by position in mask
## optional date style for date-type values. Can trigger autocomplete year
## Optional list of additional keycodes which will invoke field-auto-complete
## Use fixed-width font instead of default for base control
## optional argument to indicate unicode codec to use (unicode ctrls only)
## Set this to true if setting control-level parameters independently,
## from field validation constraints
# set up flag for doing optional things to base control if possible
# Set internal state var for keeping track of whether or not a character
# action results in a modification of the control, since .SetValue()
# doesn't modify the base control's internal state:
# Validate legitimate set of parameters:
## Set up dictionary that can be used by subclasses to override or add to default
## behavior for individual characters.  Derived subclasses needing to change
## default behavior for keys can either redefine the default functions for the
## common keys or add functions for specific keys to this list.  Each function
## added should take the key event as argument, and return False if the key
## requires no further processing.
##
## Initially populated with navigation and function control keys:
# default navigation keys and handlers:
# default function control keys and handlers:
## bind standard navigational and control keycodes to this instance,
## so that they can be augmented and/or changed in derived classes:
## Dynamically evaluate and store string constants for mask chars
## so that locale settings can be made after this module is imported
## and the controls created after that is done can allow the
## appropriate characters:
#': string.digits,
# to give it a value, but now allows any non-wxcontrol character
## self._ignoreChange is used by MaskedComboBox, because
## of the hack necessary to determine the selection; it causes
## EVT_TEXT messages from the combobox to be ignored if set.
# These are used to keep track of previous value, for undo functionality:
# Set defaults for each parameter for this instance, and fully
# populate initial parameter list for configuration:
####                dbg('%s: "%s"' % (key, repr(value)))
# Create a "field" that holds global parameters for control constraints
##        dbg(suspend=1)
##        dbg('MaskedEditMixin::SetCtrlParameters', indent=1)
####        dbg('kwargs:', indent=1)
##        for key, value in kwargs.items():
####            dbg(key, '=', value)
####        dbg(indent=0)
# Validate keyword arguments:
# for b-c, and standard wxPython spelling
##                dbg(indent=0, suspend=0)
# handle "parochial name" backward compatibility:
##            dbg('autoformat:', autoformat)
# gather rest of any autoformat parameters:
# (must be present; already accounted for)
##            dbg('autoformat not selected')
##                dbg('mask:', mask)
## Assign style flags
##            dbg('preserving previous mask')
# preserve previous mask
##            dbg('mask (re)set')
# wipe out previous fields; preserve new control-level constraints
# do field parameter type validation, and conversion to internal dictionary
# as appropriate:
##                        dbg(indent=0, suspend=0)
##                        dbg(indent=0, suspend=0)
##                dbg(indent=0, suspend=0)
# Assign constraint parameters for entire control:
####        dbg('control constraints:', indent=1)
##        for key, value in constraint_kwargs.items():
####            dbg('%s:' % key, value)
####        dbg(indent=0)
# determine if changing parameters that should affect the entire control:
# (processed separately)
# Validate color parameters, converting strings to named colors and validating
# result if appropriate:
# replace attribute with wxColour object:
# attach a python dynamic attribute to wxColour for debug printouts
##        dbg('self._retainFieldValidation:', self._retainFieldValidation)
# Build dictionary of any changing parameters which should be propagated to the
# component fields:
####                dbg('%s in kwargs?' % arg, arg in kwargs)
####                dbg('getattr(self._ctrl_constraints, _%s)?' % arg, getattr(self._ctrl_constraints, '_'+arg))
####                dbg('reset_args[%s]?' % arg, reset_args[arg])
# Set the control-level constraints:
# This routine does the bulk of the interdependent parameter processing, determining
# the field extents of the mask if changed, resetting parameters as appropriate,
# determining the overall template value for the control, etc.
# now that we've propagated the field constraints and mask portions to the
# various fields, validate the constraints
# Validate that all choices for given fields are at least of the
# necessary length, and that they all would be valid pastes if pasted
# into their respective fields:
####        dbg('validating choices')
# Set _dateExtent, used in date validation to locate date in string;
# always set as though year will be 4 digits, even if mask only has
# 2 digits, so we can always properly process the intended year for
# date validation (leap years, etc.)
#'
# Auto-decide datestyle:
# Give derived controls a chance to react to parameter changes before
# potentially changing current value of the control.
# Then the base control is available for configuration;
# take action on base control based on new settings, as appropriate.
# Set control font - fixed width by default
##                dbg('reset mask')
##                        dbg('attempting to _SetInitialValue(%s)' % self._GetValue())
##                        dbg('exception caught:', e)
##                        dbg("current value doesn't work; attempting to reset to template")
##                    dbg('attempting to _SetInitialValue() with template')
# Adjust for new mask:
##                    dbg('reconfiguring value for parens:"%s"' % newvalue)
# disallow undo of sign type
##                dbg('calculated size:', self._CalcSize())
##                dbg('setting client size to:', (width, height))
# Set value/type-specific formatting
##        dbg(indent=0, suspend=0)
## This idea worked, but Boa was unable to use this solution...
##    def _attachMethod(self, func):
##        import new
##        setattr(self, func.__name__, new.instancemethod(func, self, self.__class__))
##
##
##    def _DefinePropertyFunctions(exposed_params):
##        for param in exposed_params:
##            propname = param[0].upper() + param[1:]
##
##            exec('def Set%s(self, value): self.SetCtrlParameters(%s=value)' % (propname, param))
##            exec('def Get%s(self): return self.GetCtrlParameter("%s")''' % (propname, param))
##            self._attachMethod(locals()['Set%s' % propname])
##            self._attachMethod(locals()['Get%s' % propname])
##
##            if param.find('Colour') != -1:
##                # add non-british spellings, for backward-compatibility
##                propname.replace('Colour', 'Color')
##
##                exec('def Set%s(self, value): self.SetCtrlParameters(%s=value)' % (propname, param))
##                exec('def Get%s(self): return self.GetCtrlParameter("%s")''' % (propname, param))
##                self._attachMethod(locals()['Set%s' % propname])
##                self._attachMethod(locals()['Get%s' % propname])
##
# set parameters as requested:
# Possibly reprogram control template due to resulting changes, and ensure
# control-level params are still propagated to fields:
# this is tricky, because, as Robin explains:
# "Basically there are two sizes to deal with, that are potentially
#  different.  The client size is the inside size and may, depending
#  on platform, exclude the borders and such.  The normal size is
#  the outside size that does include the borders.  What you are
#  calculating (in _CalcSize) is the client size, but the sizers
#  deal with the full size and so that is the minimum size that
#  we need to set with SetInitialSize.  The root of the problem is
#  that in _calcSize the current client size height is returned,
#  instead of a height based on the current font.  So I suggest using
#  _calcSize to just get the width, and then use GetBestSize to
#  get the height."
# Set value/type-specific formatting
##        dbg('_processMask: mask', mask, indent=1)
# regular expression for parsing c{n} syntax:
# found an(other) occurrence
# char to be repeated
# the number of times
# the resulting substr
#account for trailing '}'
# look for another such entry in mask
####        dbg('self._signOk?', self._signOk, 'self._useParens?', self._useParens)
####        dbg('isFloatingPoint(%s)?' % (s), _isFloatingPoint(s),
##            'ctrl regex:', self._ctrl_constraints._validRegex)
# Now, go build up a dictionary of booleans, indexed by position,
# indicating whether or not a given position is masked or not.
# Also, strip out any '|' chars, adjusting the mask as necessary,
# marking the appropriate positions for field boundaries:
# if escaped character:
#     mark position as not a mask char
#     if another char follows...
#         elide the '\'
#         if next char also a '\', char is a literal '\'
#             elide the 2nd '\' as well
# increment to next char
#         elide the '|'
# keep index where it is:
# else if special char, mark position accordingly
####                dbg('ismasked[%d]:' % i, ismasked[i], ''.join(s))
# increment to next char
####        dbg('ismasked:', ismasked)
##        dbg('new mask: "%s"' % s, indent=0)
## Create dictionary of positions,characters in mask
# For the current mask, create an ordered list of field extents
# and a dictionary of positions that map to field indices:
# Skip field "discovery", and just construct a 2-field control with appropriate
# constraints for a floating-point entry.
# .setdefault always constructs 2nd argument even if not needed, so we do this
# the old-fashioned way...
##                dbg('decimal pos =', self._decimalpos)
# Skip field "discovery", and just construct a 1-field control with appropriate
# constraints for a integer entry.
# generic control; parse mask to figure out where the fields are:
# go to 1st entry point:
# no editable chars!
# figure out field for 1st editable space:
####                    dbg('searching: outer field loop: i = ', i)
####                        dbg('1st char is mask char; recording edit_start=', i)
# Skip to end of editable part of current field:
####                        dbg('edit_end =', i)
####                        dbg('%d in self._fields?' % field_index, field_index in self._fields)
# go to next field:
####                    dbg('next entry:', i)
# if past end, we're done
####                        dbg('next field:', field_index)
####        dbg('lookupField map:', indent=1)
##        for i in range(len(self._mask)):
####            dbg('pos %d:' % i, self._lookupField[i])
####        dbg(indent=0)
# Verify that all field indices specified are valid for mask:
##        dbg('default set?', default_set)
# Determine overall new template for control, and keep track of previous
# values, so that current control value can be modified as appropriate:
####            dbg('pos:', pos)
####            dbg('field:', field._index)
# always make 1st 1st position blank, regardless of fillchar
# Replace any current old fillchar with new one in current value;
# if action required, set reset_value flag so we can take that action
# after we're all done
####                    dbg('no default value')
####                    dbg('len(field._defaultValue):', len(field._defaultValue))
####                    dbg('pos-start:', pos-start)
####                        dbg('field._defaultValue[pos-start]: "%s"' % field._defaultValue[pos-start])
####                        dbg('field default not long enough; using fillChar')
####                        dbg('using control default')
####                        dbg('ctrl default not long enough; using fillChar')
####                dbg('field[%d]._template now "%s"' % (field._index, field._template))
####                dbg('self._template now "%s"' % self._template)
# (for consistency)
# had an old value, put new one back together
##            dbg('self._defaultValue:', self._defaultValue)
####                dbg(indent=0)
# if no fillchar change, but old value == old template, replace it:
##            dbg('resetting value to: "%s"' % newvalue)
# (reset for field)
####                dbg('%s in reset_args?' % param, param in reset_args)
####                dbg('%(param)s in reset_args and reset_args[%(param)s]?' % locals(), param in reset_args and reset_args[param])
####                    dbg('inherit_args[%s]' % param, inherit_args[param])
##                    dbg('skipping (duplicate) choice validation of field 0')
####                dbg('checking for choices for field', field._index)
####                dbg('start, end, length:', start, end, field_length)
####                    dbg('testing "%s"' % choice)
####                        dbg(indent=0)
####                        dbg(indent=0)
####                    dbg(choice, 'valid in field', index)
##        dbg(suspend=1)
##        dbg('MaskedEditMixin::_configure("%s")' % mask, indent=1)
# Preprocess specified mask to expand {n} syntax, handle escaped
# mask characters, etc and build the resulting positionally keyed
# dictionary for which positions are mask vs. template characters:
####        dbg('processed mask:', self._mask)
# Preserve original mask specified, for subsequent reprocessing
# if parameters change.
##        dbg('mask: "%s"' % self._mask, 'previous mask: "%s"' % self._previous_mask)
# save unexpanded mask for next time
# Set expanded mask and extent of field -1 to width of entire control:
# Go parse mask to determine where each field is, construct field
# instances as necessary, configure them with those extents, and
# build lookup table mapping each position for control to its corresponding
# field.
####        dbg('calculating field extents')
# Go process defaultValues and fillchars to construct the overall
# template, and adjust the current value as necessary:
####        dbg('calculating template')
# Propagate control-level formatting and character constraints to each
# field if they don't already have them; if only one field, propagate
# control-level validation constraints to field as well:
####        dbg('propagating constraints')
####        dbg('fields:', indent=1)
##        for i in [-1] + self._field_indices:
####            dbg('field %d:' % i, self._fields[i].__dict__)
####        dbg(indent=0)
# Set up special parameters for numeric control, if appropriate:
# assume it starts here, but it will move around on floats
####                dbg('value: "%s"' % value, 'len(value):', len(value),
##                    'len(self._ctrl_constraints._mask):',len(self._ctrl_constraints._mask))
##                    dbg('old value: "%s"' % value)
##                    dbg('new value: "%s"' % newvalue)
##                        dbg('exception raised:', e, 'resetting to initial value')
##                    dbg('old value: "%s"' % value)
##                    dbg('new value: "%s"' % newvalue)
##                        dbg('exception raised:', e, 'resetting to initial value')
##                    dbg('old value: "%s"' % value)
##                    dbg('new value: "%s"' % newvalue)
##                        dbg('exception raised:', e, 'resetting to initial value')
# Replace up/down arrow default handling:
# make down act like tab, up act like shift-tab:
####            dbg('Registering numeric navigation and control handlers (if not already set)')
# (adds "shift" to up arrow, and calls _OnChangeField)
# (adds "shift" to up arrow, and calls _OnChangeField)
# On ., truncate contents right of cursor to decimal point (if any)
# leaves cursor after decimal point if floating point, otherwise at 0.
# (Shift-'.' == '>' on US keyboards)
# Allow selective insert of groupchar in numbers:
##        dbg(indent=0, suspend=0)
##        dbg('MaskedEditMixin::_SetInitialValue("%s")' % value, indent=1)
# don't apply external validation rules in this case, as template may
# not coincide with "legal" value...
# note the use of "raw" ._ChangeValue()...
# note the use of "raw" ._SetValue()...
##                dbg('exception thrown:', e, indent=0)
# Otherwise apply validation as appropriate to passed value:
####            dbg('value = "%s", length:' % value, len(value))
# use public (validating) .SetValue()
##                dbg('exception thrown:', e, indent=0)
# Set value/type-specific formatting
##        dbg(indent=0)
####        dbg('MaskedEditMixin::_calcSize', indent=1)
####            dbg('isinstance(self, wx.lib.masked.numctrl.NumCtrl): "%s"' % self.__class__)
# sizing of numctrl when using proportional font and
# wxPython 2.9 is not working when using "M"
# GetTextExtent returns a width which is way to large
# instead we use '9' for numctrl and a selection of
# characters instead of just 'M' for textctrl and combobox
# where the mask is larger then 10 characters long
# give it a little extra space
# give it even a little more...
####            dbg('len(sizing_text):', len(sizing_text), 'sizing_text: "%s"' % sizing_text)
####            dbg('size:', size, indent=0)
####        dbg('MaskedEditMixin::_setFont', indent=1)
# get size, weight, etc from current font
# Set to teletype font (guaranteed to be mappable to all wxWindows
# platforms:
####            dbg('font string: "%s"' % font.GetNativeFontInfo().ToString())
####        dbg(indent=0)
##        dbg('MaskedEditMixin::_OnTextChange: value: "%s"' % newvalue, indent=1)
# ie. if an "intermediate text change event"
##            dbg(indent=0)
##! WS: For some inexplicable reason, every wx.TextCtrl.SetValue
## call is generating two (2) EVT_TEXT events.  On certain platforms,
## (eg. linux/GTK) the 1st is an empty string value.
## This is the only mechanism I can find to mask this problem:
##            dbg('ignoring bogus text change event', indent=0)
##            dbg('curvalue: "%s", newvalue: "%s", len(newvalue): %d' % (self._curValue, newvalue, len(newvalue)))
##                    dbg('clearing self._isNeg')
# Recolor control as appropriate
##            dbg('calling event.Skip()')
# save for undo
# Save last seen value for next iteration
##        dbg(indent=0)
# Get keypress value, adjusted by control options (e.g. convert to upper etc)
# then this is the only place we will likely see these events;
# process them now:
##            dbg('MaskedEditMixin::OnKeyDown: calling _OnChar')
# else allow regular EVT_CHAR key processing
##        dbg('MaskedEditMixin::_OnChar', indent=1)
# Get keypress value, adjusted by control options (e.g. convert to upper etc)
##        dbg('keycode = ', key)
##        dbg('current pos = ', orig_pos)
##        dbg('current selection = ', self._GetSelection())
##            dbg(indent=0)
# If no format string for this control, or the control is marked as "read-only",
# skip the rest of the special processing, and just "do the standard thing:"
##            dbg(indent=0)
# Process navigation and control keys first, with
# position/selection unadulterated:
##                    dbg(indent=0)
##                dbg(indent=0)
# Else... adjust the position as necessary for next input key,
# and determine resulting selection:
## get insertion position, adjusted as needed
## check for a range of selected text
##        dbg("pos, sel_start, sel_to:", pos, sel_start, sel_to)
# Capture user past end of format field
##            dbg("field length exceeded:",pos)
# apply formatting constraints to key:
# there's an override for default behavior; use override function instead
##            dbg('using supplied key handler:', self._keyhandlers[key])
##                dbg(indent=0)
# else skip default processing, but do final formatting
##            dbg('key in wx_control_keycodes')
# non-printable; let base control handle it
# (must work if we got this far)
##                dbg('unicode char:', char)
##                dbg("key allowed by mask")
# insert key into candidate new value, but don't change control yet:
##                dbg("str with '%s' inserted:" % char, '"%s"' % newstr)
##                    dbg('not valid; checking to see if adjusted string is:')
##                        dbg('adjusted str:', newstr)
##                            dbg("it is!")
##                        dbg("key disallowed by validation")
# special case: adjust date value as necessary:
##                    dbg('adjusted newstr:', newstr)
# Adjust insertion point on date if just entered 2 digit year, and there are now 4 digits:
##                    dbg('queuing insertion point: (%d)' % newpos)
##                        dbg('matched field')
##                        dbg('queuing selection: (%d, %d)' % (newpos, new_select_to))
##                            dbg('queuing insertion point: (%d)' % newfield._extent[0])
##                            dbg('queuing selection: (%d, %d)' % (newfield._extent[0], newfield._extent[1]))
##                dbg('char not allowed')
# Move to next insertion point
##                dbg("moving from %(pos)d to next valid entry: %(next_entry)d" % locals())
##        dbg(indent=0)
###) ###-####,
##        dbg('MaskedEditMixin::_FindFieldExtent(pos=%s, getslice=%s)' % (str(pos), str(getslice)) ,indent=1)
##            dbg('edit_start:', edit_start, 'edit_end:', edit_end, 'slice: "%s"' % slice)
##            dbg(indent=0)
##            dbg('edit_start:', edit_start, 'edit_end:', edit_end)
##            dbg(indent=0)
####        dbg('MaskedEditMixin::_FindField(pos=%s)' % str(pos) ,indent=1)
##            dbg(indent=0)
# else...
####        dbg(indent=0)
##        dbg("MaskedEditMixin::ClearValue - value reset to default value (template)")
##        dbg("MaskedEditMixin::ClearValueAlt - value reset to default value (template)")
##        dbg('MaskedEditMixin::_OnUpNumeric', indent=1)
##        dbg('event.ShiftDown()?', event.ShiftDown())
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_OnArrow", indent=1)
##                dbg("can't advance", indent=0)
##            dbg('adjusting field')
# treat as shifted up/down arrows as tab/reverse tab:
# remove "shifting" and treat as (forward) tab:
# call _OnChangeField to handle "ctrl-shifted event"
# (which moves to previous field and selects it.)
# when changing field to the right, ensure don't accidentally go left instead
# treat arrows as normal, allowing selection
# as appropriate:
##                dbg('using base ctrl event processing')
# treat arrows as normal, allowing selection
# as appropriate:
##                dbg('using base event processing')
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_OnCtrl_S")
##        dbg("MaskedEditMixin::_OnCtrl_X", indent=1)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_OnCtrl_V", indent=1)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_OnInsert", indent=1)
# (else do nothing)
# (else do nothing)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_OnDelete", indent=1)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_OnCtrl_Z", indent=1)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_OnErase", indent=1)
## check for a range of selected text
# called as action routine from Cut() operation.
# If trying to erase beyond "legal" bounds, disallow operation:
##            dbg(indent=0)
# an insert-right field
# and field not empty
# and selection starts in field
# and no selection
# and cursor at right edge
# and either delete or backspace key
# or
# backspacing
# and selection ends at right edge
# or allow right insert at any point in field
##            dbg('delete left')
# if backspace but left of cursor is empty, adjust cursor right before deleting
##            dbg('sel_start, start:', sel_start, start)
# handle sign char moving from outside field into the field:
##            dbg('cut newfield: "%s"' % newfield)
# handle what should fill in from the left:
# this can produce strange results in combination with default values...
##            dbg('filled newfield: "%s"' % newfield)
# (handle sign located in "mask position" in front of field prior to delete)
# handle erasure of (left) sign, moving selection accordingly...
# selection (if any) falls within current insert-capable field:
# determine where cursor should end up:
# don't move cusor
# erase right sign, but don't move cursor; (matching left sign handled later)
# no deletion; just move cursor
# no deletion; just move cursor
##                    dbg("retained ='%s'" % value[erase_to:end], 'sel_to:', sel_to, "fill: '%s'" % self._template[end - erase_len:end])
# need to shift ) into the field:
##                    dbg("left='%s', right ='%s', newfield='%s'" %(left, right, newfield))
##                    dbg("current sel_start, sel_to:", sel_start, sel_to)
##                        dbg("new sel_start, sel_to:", sel_start, sel_to)
# preceding chars (if any) are zeros, blanks or fillchar; new char should be 0:
## get an original template character to "clear" the current char
##                    dbg('value = "%s"' % value, 'value[%d] = "%s"' %(sel_start, value[sel_start]))
# erasing "template" sign char
# allow "change sign" by removing both parens:
# force non-insert-right behavior, by selecting char to be replaced:
# selection made
# put cursor back at beginning of selection
# account for resultant unbalanced parentheses:
# erased left-sign marker; get rid of right sign marker:
# erased right-sign marker; get rid of left-sign marker:
##        dbg("oldstr:'%s'" % value, 'oldpos:', oldstart)
##        dbg("newstr:'%s'" % newstr, 'pos:', pos)
# if erasure results in an invalid field, disallow it:
##        dbg('field._validRequired?', field._validRequired)
##        dbg('field.IsValid("%s")?' % newstr[start:end], field.IsValid(newstr[start:end]))
##            dbg(indent=0)
# If the caller just wants the erased value without validation
# (because a just pressed key might make this string valid again)
# then return it.
##            dbg(indent=0)
# if erasure results in an invalid value, disallow it:
##            dbg(indent=0)
# else...
##        dbg('setting value (later) to', newstr)
##        dbg('setting insertion point (later) to', pos)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_OnEnd", indent=1)
# go to end of control
# account for reserved char at end
# pick different end point if either:
# - cursor not in same field
# - or at or past last input already
# - or current selection = end of current field:
####            dbg('field != field_end?', field != field_end)
####            dbg('sel_to >= end_of_input?', sel_to >= end_of_input)
####                dbg('edit_end:', edit_end)
####                dbg('sel_to:', sel_to)
####                dbg('sel_to == edit_end?', sel_to == edit_end)
####                dbg('field._index < self._field_indices[-1]?', field._index < self._field_indices[-1])
# go to end of next field:
##                    dbg('end moved to', end)
# already at edit end of last field; select to end of control:
##                    dbg('end moved to', end)
# select to end of current field
##                    dbg('end moved to ', end)
# select to current end of input
####        dbg('pos:', pos, 'end:', end)
##                dbg("shift-end; select to end of control")
##                dbg("shift-ctrl-end; select to end of non-whitespace")
##                dbg('go to end of control:')
##        dbg(indent=0)
##         dbg('MaskedEditMixin::OnReturn')
##        dbg("MaskedEditMixin::_OnHome", indent=1)
# There are 5 cases here:
# 1) shift: select from start of control to end of current
#    selection.
##            dbg("shift-home; select to start of control")
# 2) no shift, no control: move cursor to beginning of control.
##            dbg("home; move to start of control")
# 3) No shift, control: move cursor back to beginning of field; if
#    there already, go to beginning of previous field.
# 4) shift, control, start of selection not at beginning of control:
#    move sel_start back to start of field; if already there, go to
#    start of previous field.
# go to start of previous field:
# go to literal beginning if edit start
# not at that point
##                dbg("ctrl-home; move to beginning of field")
##                dbg("shift-ctrl-home; select to beginning of field")
# 5) shift, control, start of selection at beginning of control:
#    unselect by moving sel_to backward to beginning of current field;
#    if already there, move to start of previous field.
# find end of previous field:
##            dbg("shift-ctrl-home; unselect to beginning of field")
##        dbg('queuing new sel_start, sel_to:', (start, end))
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_OnChangeField', indent = 1)
# determine end of current field:
##        dbg('current pos:', pos)
# no fields; process tab normally
# sel_to == -1 would cause an index error in _FindField
##                dbg('tab to next ctrl')
# As of 2.5.2, you don't call event.Skip() to do
# this, but instead force explicit navigation, if
# wx.TE_PROCESS_TAB is used (like in the masked edits)
#else: do nothing
##            dbg(indent=0)
##        dbg('field._stopFieldChangeIfInvalid?', field._stopFieldChangeIfInvalid)
##        dbg('field.IsValid(slice)?', field.IsValid(slice))
##            dbg('field invalid; field change disallowed')
##            dbg(indent=0)
# "Go backward"
# NOTE: doesn't yet work with SHIFT-tab under wx; the control
# never sees this event! (But I've coded for it should it ever work,
# and it *does* work for '.' in IpAddrCtrl.)
##                dbg('cursor before 1st field; cannot change to a previous field')
##                dbg(indent=0)
##                dbg('queuing select to beginning of field:', field_start, pos)
##                dbg(indent=0)
# We're already in the 1st field; process shift-tab normally:
##                    dbg('tab to previous ctrl')
# As of 2.5.2, you don't call event.Skip() to do
# this, but instead force explicit navigation, if
# wx.TE_PROCESS_TAB is used (like in the masked edits)
##                    dbg('position at beginning')
##                dbg(indent=0)
# find beginning of previous field:
##                dbg('repositioning to', begin_prev)
##                    dbg('queuing selection to (%d, %d)' % (edit_start, edit_end))
##                dbg(indent=0)
# "Go forward"
##                dbg('queuing select to end of field:', pos, field_end)
##                dbg(indent=0)
##                    dbg('cursor before 1st field; go to start of field')
# else...
##                dbg('end of current field:', field_end)
##                dbg('go to next field')
##                        dbg('tab to next ctrl')
# As of 2.5.2, you don't call event.Skip() to do
# this, but instead force explicit navigation, if
# wx.TE_PROCESS_TAB is used (like in the masked edits)
##                        dbg('position at end')
##                    dbg(indent=0)
# we have to find the start of the next field
##                        dbg('already in last field')
##                            dbg('tab to next ctrl')
# As of 2.5.2, you don't call event.Skip() to do
# this, but instead force explicit navigation, if
# wx.TE_PROCESS_TAB is used (like in the masked edits)
#else: do nothing
##                        dbg(indent=0)
# move cursor to appropriate point in the next field and select as necessary:
##                            dbg('move to ', next_pos)
##                            dbg('queuing select', edit_start, edit_end)
##                            dbg('move to ', next_pos)
##                        dbg(indent=0)
##                dbg(indent=0)
##        dbg('MaskedEditMixin::_OnDecimalPoint', indent=1)
## handle float value, move to decimal place
##            dbg('key == Decimal tab; decimal pos:', self._decimalpos)
##                dbg('value: "%s"' % self._GetValue(), "clipped_text:'%s'" % clipped_text)
##                dbg('queuing selection after decimal point to:', (start, end))
## handle integer value, truncate from current position
##            dbg('key == Integer decimal event')
##            dbg('value: "%s"' % self._GetValue(), "clipped_text:'%s'" % clipped_text)
##            dbg('newstr: "%s"' % newstr)
# (don't move past right paren)
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_OnChangeSign', indent=1)
####        dbg('adjusted pos:', pos)
##            dbg('cursign:', cursign)
## flip value
##            dbg('isNeg?', self._isNeg)
##            dbg('text:"%s"' % text, 'signpos:', self._signpos, 'right_signpos:', self._right_signpos)
####                dbg('self._isNeg?', self._isNeg, 'self.IsValid(%s)' % text, self.IsValid(text))
##                dbg('clearing self._isNeg')
##            dbg('pos:', pos, 'signpos:', self._signpos)
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_OnGroupChar', indent=1)
##            dbg("str with '%s' inserted:" % groupchar, '"%s"' % newstr)
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_findNextEntry', indent=1)
# if changing fields, pay attn to flag
# else within a field; flag not relevant
# if changing fields, and we've been told to adjust insert point,
# look at new field; if empty and right-insert field,
# adjust to right edge:
##        dbg('final pos:', pos, indent=0)
##        dbg('MaskedEditMixin::_OnAutoCompleteField', indent =1)
# (assume True to start)
##        dbg('field._hasList?', field._hasList)
##            dbg('choices:', field._choices)
##            dbg('compareChoices:', field._compareChoices)
# Select the 1st thing from the list:
# We're allowed to auto-complete:
##                dbg('match found')
##                dbg('setting value to "%s"' % newvalue)
# recolor as appopriate
# treat as left right arrow if unshifted, tab/shift tab if shifted.
# remove "shifting" and treat as (forward) tab:
# else some other key; keep processing the key
##        dbg('keep processing?', keep_processing, indent=0)
##        dbg('MaskedEditMixin::OnAutoSelect', field._index)
##        dbg('autoComplete(direction=', direction, 'choices=',choices, 'value=',value,'compareNoCase?', compareNoCase, 'current_index:', current_index, indent=1)
##            dbg('nothing to match against', indent=0)
##            dbg('"%s" in', choices)
##            dbg('matched "%s" (%d)' % (choices[index], index))
##                dbg('going to previous')
##            dbg('change value to "%s" (%d)' % (choices[index], index))
##            dbg('no match; try to auto-complete:')
##            dbg('searching for "%s"' % value)
##                    dbg('range(current_index+1 (%d), len(choices) (%d)) + range(%d):' % (current_index+1, len(choices), current_index+1), indices)
##                    dbg('range(current_index-1 (%d), -1) + range(len(choices)-1 (%d)), current_index-1 (%d):' % (current_index-1, len(choices)-1, current_index-1), indices)
####            dbg('indices:', indices)
##                    dbg('match found:', choice)
##                    dbg('choice: "%s" - no match' % choice)
##                dbg('matched', match)
##                dbg('no match found')
##        dbg(indent=0)
##            dbg('old value: "%s"\nnew value: "%s"' % (value, newvalue))
##        dbg('_adjustPos', pos, key, indent=1)
# If a numeric or decimal mask, and negatives allowed, reserve the
# first space for sign, and last one if using parens.
##            dbg('adjusted pos:', pos, indent=0)
##            dbg('field._insertRight?', field._insertRight)
##            if self._signOk: dbg('self._signpos:', self._signpos)
# if allow right-insert
# if cursor at right edge of field
# if not filled or supposed to stay in field, keep current position
####                    dbg('pos==end')
####                    dbg('len (slice):', len(slice))
####                    dbg('field_len?', field_len)
####                    dbg('pos==end; len (slice) < field_len?', len(slice) < field_len)
####                    dbg('not field._moveOnFieldFull?', not field._moveOnFieldFull)
# move cursor to next field:
# restore selection
# remove selection
# leave cursor alone
# if at start of control, move to right edge
# move to right edge
##                    elif sel_start <= start and sel_to == end:
##                        # select to right edge of field - 1 (to replace char)
##                        pos = end - 1
##                        self._SetInsertionPoint(pos)
##                        # restore selection
##                        self._SetSelection(sel_start, pos)
# if selected to beginning and signed, and not changing sign explicitly:
# adjust to past reserved sign position:
##                        dbg('adjusting field to ', pos)
# but keep original selection, to allow replacement of any sign:
# leave position/selection alone
# else make sure the user is not trying to type over a template character
# If they are, move them to the next valid entry position
# don't move to next field without explicit cursor movement
# find next valid position
# restore selection
##        dbg('adjusted pos:', pos, indent=0)
##        dbg('MaskedEditMixin::_adjustFloat, candidate = "%s"' % candidate, indent=1)
## Get integer, fraction lengths
##        dbg('value = "%(value)s"' % locals(), 'len(value):', len(value))
##        dbg('adjusted intStr: "%s"' % intStr)
# add trailing spaces to decimal
##        dbg('intStr "%(intStr)s"' % locals())
##        dbg('lenInt:', lenInt)
##        dbg('right-justifed intStr = "%(intStr)s"' % locals())
# Finally, align string with decimal position, left-padding with
# fillChar:
##        dbg('newvalue = "%s"' % newvalue)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_adjustInt", candidate)
# drop extra spaces
##        dbg('adjusted field: "%s"' % intStr)
# space for right paren position
# ensure closing right paren:
## Only if right-alignment is enabled
##        dbg("MaskedEditMixin::_adjustDate", indent=1)
##        dbg('text=', text)
##        dbg('getYear: "%s"' % _getYear(text, self._datestyle))
# drop extra fillChars
##        dbg('self._datestyle:', self._datestyle, 'year:', year, 'Month', month, 'day:', day)
## user entered less than four digits and changing fields or past point where we could
## enter another digit:
##                dbg('bad year=', year)
# Fix year adjustment to be less "20th century" :-) and to adjust heuristic as the
# years pass...
# "this century"
# "this year" (2 digits)
# if separation between today's 2-digit year and typed value > 50,
#      assume last century,
# else assume this century.
#
# Eg: if 2003 and yearVal == 30, => 2030
#     if 2055 and yearVal == 80, => 2080
#     if 2010 and yearVal == 96, => 1996
#
# pad with 0's to make a 4-digit year
##        dbg('newdate: "%s"' % text, indent=0)
##        dbg("MaskedEditMixin::_goEnd; getPosOnly:", getPosOnly, indent=1)
####        dbg('text: "%s"' % text)
####                dbg('i:', i, 'self._isMaskChar(%d)' % i, self._isMaskChar(i))
####                    dbg("text[%d]: '%s'" % (i, char))
##        dbg('next pos:', pos)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_goHome; getPosOnly:", getPosOnly, indent=1)
##        dbg(indent=0)
## entry, get mask approved characters
# convert okchars to unicode if required; will force subsequent appendings to
# result in unicode strings
## Allow spaces?
## any additional included characters?
####        dbg('okchars[%d]:' % pos, okchars)
#)
#)
##        dbg('_isCharAllowed', char, pos, checkRegex, indent=1)
# sign can move out of field, so don't consider it in length
# can't get the current "value", so use 0
# if entire field is selected or position is at end and field is not full,
# or if allowed to right-insert at any point in field and field is not full and cursor is not at a fillChar
# or the field is a singleton integer field and is currently 0 and we're at the end:
##                dbg('pos = end - 1 = ', pos, 'right_insert? 1')
# where character will go
##                dbg('pos = sel_to - 1 = ', pos, 'right_insert? 1')
# else leave pos alone...
##                dbg('pos stays ', pos, 'right_insert? 0')
## if a template character, return empty
##            dbg('%d is a template character; returning False' % pos, indent=0)
####            dbg('%s in %s?' % (char, okChars), char in okChars)
##                dbg("checking appropriate regex's")
# move the position to the right side of the insertion:
##                dbg('newvalue: "%s"' % newvalue)
# includes fields[-1] == "ctrl_constraints"
##                        dbg('checking vs. regex')
##                        dbg('approved?', approved)
##            dbg(indent=0)
##            dbg('%d is a !???! character; returning False', indent=0)
##            dbg(indent=0)
##        dbg(suspend=1)
##        dbg('MaskedEditMixin::_applyFormatting', indent=1)
# Handle negative numbers
##            dbg('text: "%s", signpos:' % text, signpos)
##                dbg('no valid sign found; new sign:', self._isNeg)
##                dbg('setting _isNeg to True')
##            dbg('self._isNeg:', self._isNeg)
##        dbg('setting foreground to', c)
##            dbg('valid')
##            dbg('invalid')
##        dbg('setting background to', c)
##        dbg(indent=0, suspend=0)
##        dbg('MaskedEditMixin::_getAbsValue; candidate="%s"' % candidate, indent=1)
##                    dbg('no - found; searching for (')
##                    dbg('- found at', signpos)
##                    dbg('signpos still -1')
##                    dbg('len(%s) (%d) < len(%s) (%d)?' % (text, len(text), self._mask, self._masklength), len(text) < self._masklength)
##                        dbg('len(%s) (%d), len(%s) (%d)' % (text, len(text), self._mask, self._masklength))
##                        dbg('len(%s) - (len(%s) + 1):' % (text, text.lstrip()) , len(text) - (len(text.lstrip()) + 1))
# empty value; use penultimate space
##                dbg('signpos:', signpos)
# figure out where it ought to go:
# initial guess
##                    dbg('not right-aligned')
##                dbg('right_signpos:', right_signpos)
##                dbg('invalid number', indent=0)
# float value
##                dbg('value:', value)
# look forwards up to the decimal point for the 1st non-digit
##                dbg('decimal pos:', self._decimalpos)
##                dbg('text: "%s"' % text)
# prevent checking for empty string - Tomo - Wed 14 Jan 2004 03:19:09 PM CET
##                dbg('signpos:', signpos)
##                dbg('invalid number')
##        dbg('abstext = "%s"' % text, 'signpos:', signpos, 'right_signpos:', right_signpos)
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_getSignedValue; candidate="%s"' % candidate, indent=1)
##                dbg(indent=0)
# this can happen if value passed is too big; sign assumed to be
# in position 0, but if already filled with a digit, prepend sign...
##        dbg('signedtext = "%s"' % text, 'signpos:', signpos, 'right_signpos', right_signpos)
##        dbg(indent=0)
##        dbg('MaskedEditMixin::GetPlainValue; candidate="%s"' % candidate, indent=1)
##            dbg('returned ""', indent=0)
##                dbg('plain so far: "%s"' % plain)
##                dbg('plain after sign regularization: "%s"' % plain)
# must be in reserved position; add to "plain value"
##                dbg('plain after pad and group:"%s"' % plain)
##            dbg('returned "%s"' % plain.rstrip(), indent=0)
####            dbg("IsEmpty? 1 (value == self._template and not self._defaultValue)")
# (all mask chars == fillChar by defn)
####                dbg('isMaskChar(%(pos)d)?' % locals(), self._isMaskChar(pos))
####                dbg('value[%(pos)d] != self._fillChar?' %locals(), value[pos] != self._fillChar[pos])
####            dbg("IsEmpty? %(empty)d (do all mask chars == fillChar?)" % locals())
####            dbg("IsEmpty? 0 (value doesn't match template)")
####        dbg('MaskedEditMixin::IsValid("%s")' % value, indent=1)
####        dbg(indent=0)
##        dbg("MaskedEditMixin::_eraseSelection", indent=1)
## check for a range of selected text
##        dbg('value: "%s"' % value)
##        dbg("current sel_start, sel_to:", sel_start, sel_to)
##                dbg('found sign (%s) at' % newvalue[i], i)
# balance parentheses:
##        dbg('new value: "%s"' % value)
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_insertKey', "\'" + char + "\'", pos, sel_start, sel_to, '"%s"' % value, indent=1)
# if >= 2 chars selected in a right-insert field, do appropriate erase on field,
# then set selection to end, and do usual right insert.
# if right-insert
# and allow insert at any point in field
# and selection all in same field
# remove selection before insert
##                dbg('text after (left)erase: "%s"' % text)
# adjustpos must have moved the position; make selection match:
##        dbg('field._insertRight?', field._insertRight)
##        dbg('field._allowInsert?', field._allowInsert)
##        dbg('sel_start, end', sel_start, end)
##            dbg('text[sel_start] != field._fillChar?', text[sel_start] != field._fillChar)
# field allows right insert
# and whole field selected
# or nothing selected
# and cursor at right edge
# or field allows right-insert
# next to other char in field:
##            dbg('insertRight')
# if zero padding field, or a single digit, and currently a value of 0, allow erasure of 0:
####            dbg("fstr[0]:'%s'" % fstr[0])
####            dbg('field_index:', field._index)
####            dbg("fstr[0] in erasable_chars?", fstr[0] in erasable_chars)
####            dbg("self._signOk and field._index == 0 and fstr[0] in ('-','(')?", self._signOk and field._index == 0 and fstr[0] in ('-','('))
####                dbg('value:      "%s"' % text)
####                dbg('fstr:       "%s"' % fstr)
####                dbg("erased:     '%s'" % erased)
##                dbg('left fstr:  "%s"' % fstr[1:field_sel_start])
##                dbg('right fstr: "%s"' % fstr[field_sel_to:end])
##                pos += (field_len - len(fstr))    # move cursor right by deleted amount
##                dbg('setting pos to:', pos)
# adjust the field accordingly
##            dbg('field str: "%s"' % fstr)
##            dbg('newtext: "%s"' % newtext)
# account for sign position
####            dbg('field._moveOnFieldFull?', field._moveOnFieldFull)
####            dbg('len(fstr.lstrip()) == end-start?', len(fstr.lstrip()) == end-start)
# if field now full
# and we either don't care about valid
# or we do and the current field value is valid
#   go to next field
# else keep cursor at current position
##            dbg('not newtext')
##                dbg('newpos:', newpos)
##                dbg('inserting within a left-insert-capable field')
####                dbg("current field:'%s'" % text[start:end])
####                dbg("before:'%s'" % before, "after:'%s'" % after)
# (for inserted char)
####                dbg('new_len:', new_len)
####                dbg("left:'%s'" % left, "retained:'%s'" % retained)
# convert the keyboard constant to a unicode value, to
# ensure it can be concatenated into the control value:
####            dbg('left:    "%s"' % left)
####            dbg('right:   "%s"' % right)
####            dbg('newtext: "%s"' % newtext)
# Balance parentheses:
# erased '('; remove ')'
# just replaced right-paren
# we just erased '); erase '('
# replaced with digit; move ') over
##                                dbg('old_right_signpos:', old_right_signpos, 'right signpos now:', right_signpos)
# if insert-right field (but we didn't start at right edge)
# and should move cursor when full
# and field now full
# and we either don't care about valid
# or we do and the current field value is valid
#   go to next field
##                dbg('newpos = nextentry =', newpos)
##                dbg('pos:', pos, 'newpos:', pos+1)
# (default return values)
# (always forward)
# adjust position to just after partial match in field
# (always forward)
# adjust position to just after partial match in control:
##            dbg('newtext: "%s"' % newtext, 'newpos:', newpos, 'new_select_to:', new_select_to)
##            dbg(indent=0)
##            dbg('newtext: "%s"' % newtext, 'newpos:', newpos)
##            dbg(indent=0)
##        dbg('MaskedEditMixin::_OnFocus')
##        dbg(suspend=1)
##        dbg('MaskedEditMixin::_CheckValid: candidate="%s"' % candidate, indent=1)
##        dbg('value: "%s"' % value)
# assume True
## Date type validation
##            dbg("valid date?", valid)
##            dbg("valid time?", valid)
## Numeric type
##            dbg("valid Number?", valid)
# and not self.IsDefault(value):    ## generic validation accounts for IsDefault()
## valid so far; ensure also allowed by any list or regex provided:
##            dbg("valid value?", valid)
##        dbg('valid?', valid)
##                dbg('validity changed: oldValid =',oldValid,'newvalid =', self._valid)
##                dbg('oldvalue: "%s"' % oldvalue, 'newvalue: "%s"' % self._GetValue())
##        dbg(indent=0, suspend=0)
# assume True
# process global constraints first:
##                    dbg('require_digit_at:', require_digit_at)
##                    dbg("value[rda]: '%s'" % value[require_digit_at])
# else...
##            dbg('number:', number)
# group char present
##                dbg('groupchar found at', groupcharpos)
# 1st one found on right-hand side is past decimal point
##                    dbg('groupchar in fraction; illegal')
##                dbg("integer:'%s'" % integer)
##                dbg('parts:', parts)
##                        dbg('group 0 too long; illegal')
##                        dbg('group %i (%s) not right size; illegal' % (i, parts[i]))
##            dbg('value not a valid number')
##        dbg('MaskedEditMixin::_validateDate', indent=1)
##        dbg('value = "%s"' % value)
## Fix the date up before validating it
##        dbg('text =', text)
# assume True until proven otherwise
# replace fillChar in each field with space:
##            dbg('self._dateExtent:', self._dateExtent)
##            dbg('year, month, day:', year, month, day)
##            dbg('cannot convert string to integer parts')
##            dbg('cannot convert string to integer month')
# use wxDateTime to unambiguously try to parse the date:
# ### Note: because wxDateTime is *brain-dead* and expects months 0-11,
# rather than 1-12, so handle accordingly:
##                    dbg("trying to create date from values day=%d, month=%d, year=%d" % (day,month,year))
##                    dbg("succeeded")
##                    dbg('cannot convert string to valid date')
# wxDateTime doesn't take kindly to leading/trailing spaces when parsing,
# so we eliminate them here:
## time portion of the string
##                    dbg('timeStr: "%s"' % timeStr)
##                        dbg('cannot convert string to valid time')
##        if valid: dbg('valid date')
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_validateTime', indent=1)
# wxDateTime doesn't take kindly to leading/trailing spaces when parsing,
# so we eliminate them here:
##        dbg('value = "%s"' % value)
# assume True until proven otherwise
##            dbg('checkTime:', checkTime, 'len(value)', len(value))
##            dbg('cannot convert string to valid time')
##        if valid: dbg('valid time')
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_OnKillFocus', 'isDate=',self._isDate, indent=1)
## Call valid handler
## Provided for subclass use
##        dbg(indent=0)
##        dbg('MaskedEditMixin::_fixSelection', indent=1)
# can get here if called with wx.CallAfter after underlying
# control has been destroyed on close, but after focus
# events
##            dbg(indent=0)
##        dbg('sel_start, sel_to:', sel_start, sel_to, 'self.IsEmpty()?', self.IsEmpty())
#(can be greater in numeric controls because of reserved space)
# This isn't normally allowed, and so assume we got here by the new
# "tab traversal" behavior, so we need to reset the selection
# and insertion point:
##            dbg('entire text selected; resetting selection to start of control')
##                    dbg('select on field entry:')
##                    dbg('moving insertion point to end')
##                    dbg('numeric ctrl is empty; start at beginning after sign')
## Move past minus sign space if signed
##            dbg('cursor beyond the end of the user input; go to end of it')
##            dbg('sel_start, sel_to:', sel_start, sel_to, 'self._masklength:', self._masklength)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_Cut", indent=1)
##        dbg('current value: "%s"' % value)
## check for a range of selected text
##        dbg('selected text: "%s"' % value[sel_start:sel_to].strip())
##        dbg(indent=0)
# WS Note: overriding Copy is no longer necessary given that you
# can no longer select beyond the last non-empty char in the control.
#
##    def _Copy( self ):
##        """
##        Override the wx.TextCtrl's .Copy function, with our own
##        that does validation.  Need to strip trailing spaces.
##        """
##        sel_start, sel_to = self._GetSelection()
##        select_len = sel_to - sel_start
##        textval = wx.TextCtrl._GetValue(self)
##
##        do = wx.TextDataObject()
##        do.SetText(textval[sel_start:sel_to].strip())
##        wx.TheClipboard.Open()
##        wx.TheClipboard.SetData(do)
##        wx.TheClipboard.Close()
# Remove leading and trailing spaces before evaluating contents
##        dbg(suspend=1)
##        dbg('MaskedEditMixin::_validatePaste("%(paste_text)s", %(sel_start)d, %(sel_to)d), raise_on_invalid? %(raise_on_invalid)d' % locals(), indent=1)
##        dbg('sel_to - sel_start:', maxlength)
##        dbg('maxlength:', maxlength)
##            dbg('paste text will not fit into the %s:' % item, indent=0)
##                dbg(indent=0, suspend=0)
##                dbg(indent=0, suspend=0)
##        dbg('length_considered:', length_considered)
# remainder of paste matches template; skip char-by-char analysis
##                dbg('remainder paste_text[%d:] (%s) matches template[%d:%d]' % (i, paste_text[i:], replace_to, length_considered))
# else:
##            dbg('char:', "'"+char+"'", 'i =', i, 'replace_to =', replace_to)
##            dbg('self._isTemplateChar(%d)?' % replace_to, self._isTemplateChar(replace_to))
##                dbg("not template(%(replace_to)d) and charAllowed('%(char)s',%(replace_to)d)" % locals())
##                dbg("replacement_text:", '"'+replacement_text+'"')
##                dbg("'%(char)s' == template(%(replace_to)d)" % locals())
##                dbg("replacement_text:", '"'+replacement_text+'"')
##                    dbg("skipping template; next_entry =", next_entry)
##                    dbg("replacement_text:", '"'+replacement_text+'"')
# so next_entry will be considered on next loop
##            dbg('raising exception', indent=0, suspend=0)
##                dbg('raising exception', indent=0, suspend=0)
##        dbg('valid_paste?', valid_paste)
##            dbg('replacement_text: "%s"' % replacement_text, 'replace to:', replace_to)
##        dbg(indent=0, suspend=0)
##        dbg('MaskedEditMixin::_Paste (value = "%s")' % value, indent=1)
##            dbg('paste text: "%s"' % paste_text)
# (conversion will raise ValueError if paste isn't legal)
##            dbg('selection:', (sel_start, sel_to))
# special case: handle allowInsert fields properly
# want to paste to the left; see if it will fit:
##                    dbg('len(left_text):', len(left_text))
##                    dbg('len(paste_text):', len(paste_text))
##                    dbg('sel_start - (len(left_text) + len(paste_text)) >= edit_start?', sel_start - (len(left_text) + len(paste_text)) >= edit_start)
# will fit! create effective paste text, and move cursor back to do so:
##                        dbg('modified paste_text to be: "%s"' % paste_text)
##                        dbg('modified selection to:', (sel_start, sel_to))
##                        dbg("won't fit left;", 'paste text remains: "%s"' % paste_text)
##                    dbg("allow insert, but not insert right;", 'paste text set to: "%s"' % paste_text)
# store for subsequent positioning
##                dbg('paste within insertable field; adjusted paste_text: "%s"' % paste_text, 'end:', edit_end)
##                dbg('expanded selection to:', (sel_start, sel_to))
# Another special case: paste won't fit, but it's a right-insert field where entire
# non-empty value is selected, and there's room if the selection is expanded leftward:
# text won't fit within selection, but left of selection is empty;
# check to see if we can expand selection to accommodate the value:
##                    dbg('expanded selection to:', (sel_start, sel_to))
# another special case: deal with signed values properly:
# if paste text will result in signed value:
####                dbg('paste_signpos != -1?', paste_signpos != -1)
####                dbg('sel_start:', sel_start, 'signpos:', signpos)
####                dbg('field._insertRight?', field._insertRight)
####                dbg('sel_start - len(paste_text) >= signpos?', sel_start - len(paste_text) <= signpos)
# remove "sign" from paste text, so we can auto-adjust for sign type after paste:
##                dbg('unsigned paste text: "%s"' % paste_text)
# another special case: deal with insert-right fields when selection is empty and
# cursor is at end of field:
####            dbg('field._insertRight?', field._insertRight)
####            dbg('sel_start == edit_end?', sel_start == edit_end)
####            dbg('sel_start', sel_start, 'sel_to', sel_to)
##                dbg('adjusted selection:', (sel_start, sel_to))
##                dbg('exception thrown', indent=0)
##                dbg('paste text not legal for the selection or portion of the control following the cursor;')
##                dbg(indent=0)
# else...
##            dbg("new_text:", '"'+new_text+'"')
##                dbg(indent=0)
##            dbg(indent=0)
##        dbg(indent=0)
##        dbg("MaskedEditMixin::_Undo", indent=1)
##        dbg('current value:  "%s"' % value)
##        dbg('previous value: "%s"' % prev)
##            dbg('no previous value', indent=0)
# Determine what to select: (relies on fixed-length strings)
# (This is a lot harder than it would first appear, because
# of mask chars that stay fixed, and so break up the "diff"...)
# Determine where they start to differ:
# (both are same length in masked control)
# handle signed values carefully, so undo from signed to unsigned or vice-versa
# works properly:
# eliminate source of "far-end" undo difference if using balanced parens:
# Determine where they stop differing in "undo" result:
##            dbg('i,j,k = ', (i,j,k), 'value[i:i+k] = "%s"' % value[i:i+k], 'prev[j:j+k] = "%s"' % prev[j:j+k] )
# no match found; select to end
##                    dbg("%7s value[%d:%d] (%s) prev[%d:%d] (%s)" % (op, i1, i2, value[i1:i2], j1, j2, prev[j1:j2]))
# look backward through operations needed to produce "previous" value;
# first change wins:
##                    dbg('value[i1:i2]: "%s"' % value[i1:i2], 'template[i1:i2] "%s"' % self._template[i1:i2])
##                        dbg('insert found: selection =>', (j1, j2))
##                        dbg('delete found: selection =>', (sel_start, sel_to))
##                        dbg('replace found: selection =>', (sel_start, sel_to))
# now go forwards, looking for earlier changes:
##                    dbg('searching forward...')
# if replace with spaces in an insert-right control, ignore "forward" replace
##                                    dbg('setting sel_start to', j1)
##                                    dbg('setting sel_start to', i1)
##                                dbg('setting sel_start to', i1)
##                            dbg('saw replace; breaking')
##                            dbg('forward %s found' % op)
##                                dbg('item to insert non-empty; setting sel_start to', j1)
##                                dbg('setting sel_start to inserted space:', j1)
##                            dbg('delete; field._insertRight?', field._insertRight, 'value[%d:%d].lstrip: "%s"' % (i1,i2,value[i1:i2].lstrip()))
##                                    dbg('setting sel_start to ', j1)
##                                    dbg('breaking loop')
##                                dbg('saw delete; breaking')
##                            dbg('unknown code!')
# we've got what we need
##                    dbg('no insert,delete or replace found (!)')
# do "left-insert"-centric processing of difference based on l.c.s.:
# match starts after start of selection
# select to start of match
# (change ends at j)
# There are several situations where the calculated difference is
# not what we want to select.  If changing sign, or just adding
# group characters, we really don't want to highlight the characters
# changed, but instead leave the cursor where it is.
# Also, there a situations in which the difference can be ambiguous;
# Consider:
#
# current value:    11234
# previous value:   1111234
#
# Where did the cursor actually lie and which 1s were selected on the delete
# operation?
#
# Also, difflib can "get it wrong;" Consider:
#
# current value:    "       128.66"
# previous value:   "       121.86"
#
# difflib produces the following opcodes, which are sub-optimal:
#    equal value[0:9] (       12) prev[0:9] (       12)
#   insert value[9:9] () prev[9:11] (1.)
#    equal value[9:10] (8) prev[11:12] (8)
#   delete value[10:11] (.) prev[12:12] ()
#    equal value[11:12] (6) prev[12:13] (6)
#   delete value[12:13] (6) prev[13:13] ()
#
# This should have been:
#    equal value[0:9] (       12) prev[0:9] (       12)
#  replace value[9:11] (8.6) prev[9:11] (1.8)
#    equal value[12:13] (6) prev[12:13] (6)
#
# But it didn't figure this out!
#
# To get all this right, we use the previous selection recorded to help us...
##                dbg('calculated selection', (sel_start, sel_to), "doesn't match previous", self._prevSelection)
# change of sign; leave cursor alone...
##                    dbg("prev[sel_start] in ('-', '(', ')')?", prev[sel_start] in ('-', '(', ')'))
##                    dbg("value[sel_start] in ('-', '(', ')')?", value[sel_start] in ('-', '(', ')'))
##                    dbg('setting selection to previous one')
# do not highlight grouping changes
##                    dbg('value[sel_start:sel_to] == field._groupChar?', value[sel_start:sel_to] == field._groupChar)
##                    dbg('prev[sel_start:sel_to] == field._groupChar?', prev[sel_start:sel_to] == field._groupChar)
##                    dbg('setting selection to previous one')
##                    dbg('sel_start == prev_sel_start', sel_start == prev_sel_start)
##                    dbg('sel_to > prev_sel_to', sel_to > prev_sel_to)
# old selection was bigger; trust it:
##                        dbg('prev_select_len >= calc_select_len?', prev_select_len >= calc_select_len)
##                            dbg('setting selection to previous one')
##                            dbg('setting selection to', (sel_start, sel_to))
# calculated select past last selection
# and prev_sel_to not at end of control
# and calculated selection goes to end of control
##                        dbg('i,j,k = ', (i,j,k), 'value[i:i+k] = "%s"' % value[i:i+k], 'prev[j:j+k] = "%s"' % prev[j:j+k] )
# difflib must not have optimized opcodes properly;
# look for possible ambiguous diff:
# if last change resulted in no selection, test from resulting cursor position:
# determine which way to search from last cursor position for ambiguous change:
##                        dbg('test selection:', (test_sel_start, test_sel_to))
##                        dbg('calc change: "%s"' % prev[sel_start:sel_to])
##                        dbg('test change: "%s"' % prev[test_sel_start:test_sel_to])
# if calculated selection spans characters, and same characters
# "before" the previous insertion point are present there as well,
# select the ones related to the last known selection instead.
# finally, make sure that the old and new values are
# different where we say they're different:
##            dbg('sel_start, sel_to:', sel_start, sel_to)
##            dbg('previous value: "%s"' % prev)
##            dbg(indent=0)
# else...
##            dbg('no difference between previous value')
##            dbg(indent=0)
##        dbg('MaskedEditMixin::OnContextMenu()', indent=1)
# ## WSS: The base control apparently handles
# enable/disable of wx.ID_CUT, wx.ID_COPY, wx.ID_PASTE
# and wx.ID_CLEAR menu items even if the menu is one
# we created.  However, it doesn't do undo properly,
# so we're keeping track of previous values ourselves.
# Therefore, we have to override the default update for
# that item on the menu:
##        dbg(indent=0)
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
# Define the default set of attributes exposed by the most generic masked controls:
# (base class already has this)
# add non-british spellings, for backward-compatibility
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
## these are helper subroutines:
##/##/####",
##-##-####",
##.##.####",
####/##/##",
####-##-##",
####.##.##",
##/CCC/####",
##.CCC.####",
##/##/##$",
##/##/## ",
##/CCC/##$",
##.CCC.## ",)
##:##(:##)?( (AM|PM))?"
#]+\.[#]+\n")
#]+\n")
# (got part of time; drop it)
## year, month, date parts
## year, month, date parts
## year, month, date parts
## year, month, date parts
## year, month, date parts
## year, month, date parts
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
#1", size = (700,600))
##            self.panel.SetDefaultItem(self.command1 )
# The following list is of the controls for the demo. Feel free to play around with
# the options!
#description        mask                    excl format     regexp                              range,list,initial
###) ###-#### x:###", "", 'F!^-R',    "^\(\d\d\d\) \d\d\d-\d\d\d\d",    (),[],''),
#",      "###-##-####",          "", 'F',        "\d{3}-\d{2}-\d{4}",                (),[],''),
#{5}-#{4}",            "", 'F',        "\d{5}-(\s{4}|\d{4})",(),[],''),
###",              "", 'F!',      "C[A-Z]{2}-\d{3}",                   (),[],''),
##/##/#### ##:## AM",  'BCDEFGHIJKLMNOQRSTUVWXYZ','DFR!',"",                (),[], r'03/05/2003 12:00 AM'),
#{9}.##",              "", 'F-R,',     "",                                 (),[], ''),
#{6}",                 "", 'F-R',      "",                                 (),[], '0     '),
######",      "", 'F',        "",                                 (1,399),[], '1     '),
#/##",                 "", 'F',        "^\d\/\d\d?",                       (),
#-2]:
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
#2 -- AutoFormats", size = (550,600))
# The following list is of the controls for the demo. Feel free to play around with
# the options!
#","USSOCIALSEC"),
## ---------- ---------- ---------- ---------- ---------- ---------- ----------
##
## Current Issues:
## ===================================
##
## 1. WS: For some reason I don't understand, the control is generating two (2)
##      EVT_TEXT events for every one (1) .SetValue() of the underlying control.
##      I've been unsuccessful in determining why or in my efforts to make just one
##      occur.  So, I've added a hack to save the last seen value from the
##      control in the EVT_TEXT handler, and if *different*, call event.Skip()
##      to propagate it down the event chain, and let the application see it.
##
## 2. WS: MaskedComboBox is deficient in several areas, all having to do with the
##      behavior of the underlying control that I can't fix.  The problems are:
##      a) The background coloring doesn't work in the text field of the control;
##         instead, there's a only border around it that assumes the correct color.
##      b) The control will not pass WXK_TAB to the event handler, no matter what
##         I do, and there's no style wxCB_PROCESS_TAB like wxTE_PROCESS_TAB to
##         indicate that we want these events.  As a result, MaskedComboBox
##         doesn't do the nice field-tabbing that MaskedTextCtrl does.
##      c) Auto-complete had to be reimplemented for the control because programmatic
##         setting of the value of the text field does not set up the auto complete
##         the way that the control processing keystrokes does.  (But I think I've
##         implemented a fairly decent approximation.)  Because of this the control
##         also won't auto-complete on dropdown, and there's no event I can catch
##         to work around this problem.
##      d) There is no method provided for getting the selection; the hack I've
##         implemented has its flaws, not the least of which is that due to the
##         strategy that I'm using, the paste buffer is always replaced by the
##         contents of the control's selection when in focus, on each keystroke;
##         this makes it impossible to paste anything into a MaskedComboBox
##         at the moment... :-(
##      e) The other deficient behavior, likely induced by the workaround for (d),
##         is that you can can't shift-left to select more than one character
##         at a time.
##
##
## 3. WS: Controls on wxPanels don't seem to pass Shift-WXK_TAB to their
##      EVT_KEY_DOWN or EVT_CHAR event handlers.  Until this is fixed in
##      wxWindows, shift-tab won't take you backwards through the fields of
##      a MaskedTextCtrl like it should.  Until then Shifted arrow keys will
##      work like shift-tab and tab ought to.
##
## To-Do's:
## =============================##
##  1. Add Popup list for auto-completable fields that simulates combobox on individual
##     fields.  Example: City validates against list of cities, or zip vs zip code list.
##  2. Allow optional monetary symbols (eg. $, pounds, etc.) at front of a "decimal"
##     control.
##  3. Fix shift-left selection for MaskedComboBox.
##  5. Transform notion of "decimal control" to be less "entire control"-centric,
##     so that monetary symbols can be included and still have the appropriate
##     semantics.  (Big job, as currently written, but would make control even
##     more useful for business applications.)
## CHANGELOG:
## ====================
##  Version 1.13
##  1. Added parameter option stopFieldChangeIfInvalid, which can be used to relax the
##     validation rules for a control, but make best efforts to stop navigation out of
##     that field should its current value be invalid.  Note: this does not prevent the
##     value from remaining invalid if focus for the control is lost, via mousing etc.
##
##  Version 1.12
##  1. Added proper support for NUMPAD keypad keycodes for navigation and control.
##
##  Version 1.11
##  1. Added value member to ValueError exceptions, so that people can catch them
##     and then display their own errors, and added attribute raiseOnInvalidPaste,
##     so one doesn't have to subclass the controls simply to force generation of
##     a ValueError on a bad paste operation.
##  2. Fixed handling of unicode charsets by converting to explicit control char
##     set testing for passing those keystrokes to the base control, and then
##     changing the semantics of the * maskchar to indicate any visible char.
##  3. Added '|' mask specification character, which allows splitting of contiguous
##     mask characters into separate fields, allowing finer control of behavior
##     of a control.
##
##
##  Version 1.10
##  1. Added handling for WXK_DELETE and WXK_INSERT, such that shift-delete
##     cuts, shift-insert pastes, and ctrl-insert copies.
##
##  Version 1.9
##  1. Now ignores kill focus events when being destroyed.
##  2. Added missing call to set insertion point on changing fields.
##  3. Modified SetKeyHandler() to accept None as means of removing one.
##  4. Fixed keyhandler processing for group and decimal character changes.
##  5. Fixed a problem that prevented input into the integer digit of a
##     integerwidth=1 numctrl, if the current value was 0.
##  6. Fixed logic involving processing of "_signOk" flag, to remove default
##     sign key handlers if false, so that SetAllowNegative(False) in the
##     NumCtrl works properly.
##  7. Fixed selection logic for numeric controls so that if selectOnFieldEntry
##     is true, and the integer portion of an integer format control is selected
##     and the sign position is selected, the sign keys will always result in a
##     negative value, rather than toggling the previous sign.
##
##
##  Version 1.8
##  1. Fixed bug involving incorrect variable name, causing combobox autocomplete to fail.
##  2. Added proper support for unicode version of wxPython
##  3. Added * as mask char meaning "all ansi chars" (ordinals 32-255).
##  4. Converted doc strings to use reST format, for ePyDoc documentation.
##  5. Renamed helper functions, classes, etc. not intended to be visible in public
##     interface to code.
##
##  Version 1.7
##  1. Fixed intra-right-insert-field erase, such that it doesn't leave a hole, but instead
##     shifts the text to the left accordingly.
##  2. Fixed _SetValue() to place cursor after last character inserted, rather than end of
##     mask.
##  3. Fixed some incorrect undo behavior for right-insert fields, and allowed derived classes
##     (eg. numctrl) to pass modified values for undo processing (to handle/ignore grouping
##     chars properly.)
##  4. Fixed autoselect behavior to work similarly to (2) above, so that combobox
##     selection will only select the non-empty text, as per request.
##  5. Fixed tabbing to work with 2.5.2 semantics.
##  6. Fixed size calculation to handle changing fonts
##
##  Version 1.6
##  1. Reorganized masked controls into separate package, renamed things accordingly
##  2. Split actual controls out of this file into their own files.
##  Version 1.5
##  (Reported) bugs fixed:
##   1. Crash ensues if you attempt to change the mask of a read-only
##      MaskedComboBox after initial construction.
##   2. Changed strategy of defining Get/Set property functions so that
##      these are now generated dynamically at runtime, rather than as
##      part of the class definition.  (This makes it possible to have
##      more general base classes that have many more options for configuration
##      without requiring that derivations support the same options.)
##   3. Fixed IsModified for _Paste() and _OnErase().
##
##   Enhancements:
##   1. Fixed "attribute function inheritance," since base control is more
##      generic than subsequent derivations, not all property functions of a
##      generic control should be exposed in those derivations.  New strategy
##      uses base control classes (eg. BaseMaskedTextCtrl) that should be
##      used to derive new class types, and mixed with their own mixins to
##      only expose those attributes from the generic masked controls that
##      make sense for the derivation.  (This makes Boa happier.)
##   2. Renamed (with b-c) MILTIME autoformats to 24HRTIME, so as to be less
##      "parochial."
##
##  Version 1.4
##  (Reported) bugs fixed:
##   1. Right-click menu allowed "cut" operation that destroyed mask
##      (was implemented by base control)
##   2. MaskedComboBox didn't allow .Append() of mixed-case values; all
##      got converted to lower case.
##   3. MaskedComboBox selection didn't deal with spaces in values
##      properly when autocompleting, and didn't have a concept of "next"
##      match for handling choice list duplicates.
##   4. Size of MaskedComboBox was always default.
##   5. Email address regexp allowed some "non-standard" things, and wasn't
##      general enough.
##   6. Couldn't easily reset MaskedComboBox contents programmatically.
##   7. Couldn't set emptyInvalid during construction.
##   8. Under some versions of wxPython, readonly comboboxes can apparently
##      return a GetInsertionPoint() result (655535), causing masked control
##      to fail.
##   9. Specifying an empty mask caused the controls to traceback.
##  10. Can't specify float ranges for validRange.
##  11. '.' from within a the static portion of a restricted IP address
##      destroyed the mask from that point rightward; tab when cursor is
##      before 1st field takes cursor past that field.
##
##  Enhancements:
##  12. Added Ctrl-Z/Undo handling, (and implemented context-menu properly.)
##  13. Added auto-select option on char input for masked controls with
##      choice lists.
##  14. Added '>' formatcode, allowing insert within a given or each field
##      as appropriate, rather than requiring "overwrite".  This makes single
##      field controls that just have validation rules (eg. EMAIL) much more
##      friendly.  The same flag controls left shift when deleting vs just
##      blanking the value, and for right-insert fields, allows right-insert
##      at any non-blank (non-sign) position in the field.
##  15. Added option to use to indicate negative values for numeric controls.
##  16. Improved OnFocus handling of numeric controls.
##  17. Enhanced Home/End processing to allow operation on a field level,
##      using ctrl key.
##  18. Added individual Get/Set functions for control parameters, for
##      simplified integration with Boa Constructor.
##  19. Standardized "Colour" parameter names to match wxPython, with
##      non-british spellings still supported for backward-compatibility.
##  20. Added '&' mask specification character for punctuation only (no letters
##      or digits).
##  21. Added (in a separate file) wx.MaskedCtrl() factory function to provide
##      unified interface to the masked edit subclasses.
##
##
##  Version 1.3
##   1. Made it possible to configure grouping, decimal and shift-decimal characters,
##      to make controls more usable internationally.
##   2. Added code to smart "adjust" value strings presented to .SetValue()
##      for right-aligned numeric format controls if they are shorter than
##      than the control width,  prepending the missing portion, prepending control
##      template left substring for the missing characters, so that setting
##      numeric values is easier.
##   3. Renamed SetMaskParameters SetCtrlParameters() (with old name preserved
##      for b-c), as this makes more sense.
##
##  Version 1.2
##   1. Fixed .SetValue() to replace the current value, rather than the current
##      selection. Also changed it to generate ValueError if presented with
##      either a value which doesn't follow the format or won't fit.  Also made
##      set value adjust numeric and date controls as if user entered the value.
##      Expanded doc explaining how SetValue() works.
##   2. Fixed EUDATE* autoformats, fixed IsDateType mask list, and added ability to
##      use 3-char months for dates, and EUDATETIME, and EUDATEMILTIME autoformats.
##   3. Made all date autoformats automatically pick implied "datestyle".
##   4. Added IsModified override, since base wx.TextCtrl never reports modified if
##      .SetValue used to change the value, which is what the masked edit controls
##      use internally.
##   5. Fixed bug in date position adjustment on 2 to 4 digit date conversion when
##      using tab to "leave field" and auto-adjust.
##   6. Fixed bug in _isCharAllowed() for negative number insertion on pastes,
##      and bug in ._Paste() that didn't account for signs in signed masks either.
##   7. Fixed issues with _adjustPos for right-insert fields causing improper
##      selection/replacement of values
##   8. Fixed _OnHome handler to properly handle extending current selection to
##      beginning of control.
##   9. Exposed all (valid) autoformats to demo, binding descriptions to
##      autoformats.
##  10. Fixed a couple of bugs in email regexp.
##  11. Made maskchardict an instance var, to make mask chars to be more
##      amenable to international use.
##  12. Clarified meaning of '-' formatcode in doc.
##  13. Fixed a couple of coding bugs being flagged by Python2.1.
##  14. Fixed several issues with sign positioning, erasure and validity
##      checking for "numeric" masked controls.
##  15. Added validation to IpAddrCtrl.SetValue().
##
##  Version 1.1
##   1. Changed calling interface to use boolean "useFixedWidthFont" (True by default)
##      vs. literal font facename, and use wxTELETYPE as the font family
##      if so specified.
##   2. Switched to use of dbg module vs. locally defined version.
##   3. Revamped entire control structure to use Field classes to hold constraint
##      and formatting data, to make code more hierarchical, allow for more
##      sophisticated masked edit construction.
##   4. Better strategy for managing options, and better validation on keywords.
##   5. Added 'V' format code, which requires that in order for a character
##      to be accepted, it must result in a string that passes the validRegex.
##   6. Added 'S' format code which means "select entire field when navigating
##      to new field."
##   7. Added 'r' format code to allow "right-insert" fields. (implies 'R'--right-alignment)
##   8. Added '<' format code to allow fields to require explicit cursor movement
##      to leave field.
##   9. Added validFunc option to other validation mechanisms, that allows derived
##      classes to add dynamic validation constraints to the control.
##  10. Fixed bug in validatePaste code causing possible IndexErrors, and also
##      fixed failure to obey case conversion codes when pasting.
##  11. Implemented '0' (zero-pad) formatting code, as it wasn't being done anywhere...
##  12. Removed condition from OnDecimalPoint, so that it always truncates right on '.'
##  13. Enhanced IpAddrCtrl to use right-insert fields, selection on field traversal,
##      individual field validation to prevent field values > 255, and require explicit
##      tab/. to change fields.
##  14. Added handler for left double-click to select field under cursor.
##  15. Fixed handling for "Read-only" styles.
##  16. Separated signedForegroundColor from 'R' style, and added foregroundColor
##      attribute, for more consistent and controllable coloring.
##  17. Added retainFieldValidation parameter, allowing top-level constraints
##      such as "validRequired" to be set independently of field-level equivalent.
##      (needed in TimeCtrl for bounds constraints.)
##  18. Refactored code a bit, cleaned up and commented code more heavily, fixed
##      some of the logic for setting/resetting parameters, eg. fillChar, defaultValue,
##      etc.
##  19. Fixed maskchar setting for upper/lowercase, to work in all locales.
##
##
##  Version 1.0
##   1. Decimal point behavior restored for decimal and integer type controls:
##      decimal point now trucates the portion > 0.
##   2. Return key now works like the tab character and moves to the next field,
##      provided no default button is set for the form panel on which the control
##      resides.
##   3. Support added in _FindField() for subclasses controls (like timecontrol)
##      to determine where the current insertion point is within the mask (i.e.
##      which sub-'field'). See method documentation for more info and examples.
##   4. Added Field class and support for all constraints to be field-specific
##      in addition to being globally settable for the control.
##      Choices for each field are validated for length and pastability into
##      the field in question, raising ValueError if not appropriate for the control.
##      Also added selective additional validation based on individual field constraints.
##      By default, SHIFT-WXK_DOWN, SHIFT-WXK_UP, WXK_PAGEUP and WXK_PAGEDOWN all
##      auto-complete fields with choice lists, supplying the 1st entry in
##      the choice list if the field is empty, and cycling through the list in
##      the appropriate direction if already a match.  WXK_DOWN will also auto-
##      complete if the field is partially completed and a match can be made.
##      SHIFT-WXK_UP/DOWN will also take you to the next field after any
##      auto-completion performed.
##   5. Added autoCompleteKeycodes=[] parameters for allowing further
##      customization of the control.  Any keycode supplied as a member
##      of the _autoCompleteKeycodes list will be treated like WXK_PAGEDOWN.  If
##      requireFieldChoice is set, then a valid value from each non-empty
##      choice list will be required for the value of the control to validate.
##   6. Fixed "auto-sizing" to be relative to the font actually used, rather
##      than making assumptions about character width.
##   7. Fixed GetMaskParameter(), which was non-functional in previous version.
##   8. Fixed exceptions raised to provide info on which control had the error.
##   9. Fixed bug in choice management of MaskedComboBox.
##  10. Fixed bug in IpAddrCtrl causing traceback if field value was of
##     the form '# #'.  Modified control code for IpAddrCtrl so that '.'
##     in the middle of a field clips the rest of that field, similar to
##     decimal and integer controls.
##
##
##  Version 0.0.7
##   1. "-" is a toggle for sign; "+" now changes - signed numerics to positive.
##   2. ',' in formatcodes now causes numeric values to be comma-delimited (e.g.333,333).
##   3. New support for selecting text within the control.(thanks Will Sadkin!)
##      Shift-End and Shift-Home now select text as you would expect
##      Control-Shift-End selects to the end of the mask string, even if value not entered.
##      Control-A selects all *entered* text, Shift-Control-A selects everything in the control.
##   4. event.Skip() added to onKillFocus to correct remnants when running in Linux (contributed-
##      for some reason I couldn't find the original email but thanks!!!)
##   5. All major key-handling code moved to their own methods for easier subclassing: OnHome,
##      OnErase, OnEnd, OnCtrl_X, OnCtrl_A, etc.
##   6. Email and autoformat validations corrected using regex provided by Will Sadkin (thanks!).
##   (The rest of the changes in this version were done by Will Sadkin with permission from Jeff...)
##   7. New mechanism for replacing default behavior for any given key, using
##      ._SetKeycodeHandler(keycode, func) and ._SetKeyHandler(char, func) now available
##      for easier subclassing of the control.
##   8. Reworked the delete logic, cut, paste and select/replace logic, as well as some bugs
##      with insertion point/selection modification.  Changed Ctrl-X to use standard "cut"
##      semantics, erasing the selection, rather than erasing the entire control.
##   9. Added option for an "default value" (ie. the template) for use when a single fillChar
##      is not desired in every position.  Added IsDefault() function to mean "does the value
##      equal the template?" and modified .IsEmpty() to mean "do all of the editable
##      positions in the template == the fillChar?"
##  10. Extracted mask logic into mixin, so we can have both MaskedTextCtrl and MaskedComboBox,
##      now included.
##  11. MaskedComboBox now adds the capability to validate from list of valid values.
##      Example: City validates against list of cities, or zip vs zip code list.
##  12. Fixed oversight in EVT_TEXT handler that prevented the events from being
##      passed to the next handler in the event chain, causing updates to the
##      control to be invisible to the parent code.
##  13. Added IPADDR autoformat code, and subclass IpAddrCtrl for controlling tabbing within
##      the control, that auto-reformats as you move between cells.
##  14. Mask characters [A,a,X,#] can now appear in the format string as literals, by using '\'.
##  15. It is now possible to specify repeating masks, e.g. #{3}-#{3}-#{14}
##  16. Fixed major bugs in date validation, due to the fact that
##      wxDateTime.ParseDate is too liberal, and will accept any form that
##      makes any kind of sense, regardless of the datestyle you specified
##      for the control.  Unfortunately, the strategy used to fix it only
##      works for versions of wxPython post 2.3.3.1, as a C++ assert box
##      seems to show up on an invalid date otherwise, instead of a catchable
##      exception.
##  17. Enhanced date adjustment to automatically adjust heuristic based on
##      current year, making last century/this century determination on
##      2-digit year based on distance between today's year and value;
##      if > 50 year separation, assume last century (and don't assume last
##      century is 20th.)
##  18. Added autoformats and support for including HHMMSS as well as HHMM for
##      date times, and added similar time, and militaray time autoformats.
##  19. Enhanced tabbing logic so that tab takes you to the next field if the
##      control is a multi-field control.
##  20. Added stub method called whenever the control "changes fields", that
##      can be overridden by subclasses (eg. IpAddrCtrl.)
##  21. Changed a lot of code to be more functionally-oriented so side-effects
##      aren't as problematic when maintaining code and/or adding features.
##      Eg: IsValid() now does not have side-effects; it merely reflects the
##      validity of the value of the control; to determine validity AND recolor
##      the control, _CheckValid() should be used with a value argument of None.
##      Similarly, made most reformatting function take an optional candidate value
##      rather than just using the current value of the control, and only
##      have them change the value of the control if a candidate is not specified.
##      In this way, you can do validation *before* changing the control.
##  22. Changed validRequired to mean "disallow chars that result in invalid
##      value."  (Old meaning now represented by emptyInvalid.)  (This was
##      possible once I'd made the changes in (19) above.)
##  23. Added .SetMaskParameters and .GetMaskParameter methods, so they
##      can be set/modified/retrieved after construction.  Removed individual
##      parameter setting functions, in favor of this mechanism, so that
##      all adjustment of the control based on changing parameter values can
##      be handled in one place with unified mechanism.
##  24. Did a *lot* of testing and fixing re: numeric values.  Added ability
##      to type "grouping char" (ie. ',') and validate as appropriate.
##  25. Fixed ZIPPLUS4 to allow either 5 or 4, but if > 5 must be 9.
##  26. Fixed assumption about "decimal or integer" masks so that they're only
##      made iff there's no validRegex associated with the field.  (This
##      is so things like zipcodes which look like integers can have more
##      restrictive validation (ie. must be 5 digits.)
##  27. Added a ton more doc strings to explain use and derivation requirements
##      and did regularization of the naming conventions.
##  28. Fixed a range bug in _adjustKey preventing z from being handled properly.
##  29. Changed behavior of '.' (and shift-.) in numeric controls to move to
##      reformat the value and move the next field as appropriate. (shift-'.',
##      ie. '>' moves to the previous field.
##  Version 0.0.6
##   1. Fixed regex bug that caused autoformat AGE to invalidate any age ending
##      in '0'.
##   2. New format character 'D' to trigger date type. If the user enters 2 digits in the
##      year position, the control will expand the value to four digits, using numerals below
##      50 as 21st century (20+nn) and less than 50 as 20th century (19+nn).
##      Also, new optional parameter datestyle = set to one of {MDY|DMY|YDM}
##   3. revalid parameter renamed validRegex to conform to standard for all validation
##      parameters (see 2 new ones below).
##   4. New optional init parameter = validRange. Used only for int/dec (numeric) types.
##      Allows the developer to specify a valid low/high range of values.
##   5. New optional init parameter = validList. Used for character types. Allows developer
##      to send a list of values to the control to be used for specific validation.
##      See the Last Name Only example - it is list restricted to Smith/Jones/Williams.
##   6. Date type fields now use wxDateTime's parser to validate the date and time.
##      This works MUCH better than my kludgy regex!! Thanks to Robin Dunn for pointing
##      me toward this solution!
##   7. Date fields now automatically expand 2-digit years when it can. For example,
##      if the user types "03/10/67", then "67" will auto-expand to "1967". If a two-year
##      date is entered it will be expanded in any case when the user tabs out of the
##      field.
##   8. New class functions: SetValidBackgroundColor, SetInvalidBackgroundColor, SetEmptyBackgroundColor,
##      SetSignedForeColor allow accessto override default class coloring behavior.
##   9. Documentation updated and improved.
##  10. Demo - page 2 is now a wxFrame class instead of a wxPyApp class. Works better.
##      Two new options (checkboxes) - test highlight empty and disallow empty.
##  11. Home and End now work more intuitively, moving to the first and last user-entry
##      value, respectively.
##  12. New class function: SetRequired(bool). Sets the control's entry required flag
##      (i.e. disallow empty values if True).
##
##  Version 0.0.5
##   1. get_plainValue method renamed to GetPlainValue following the wxWindows
##      StudlyCaps(tm) standard (thanks Paul Moore).  ;)
##   2. New format code 'F' causes the control to auto-fit (auto-size) itself
##      based on the length of the mask template.
##   3. Class now supports "autoformat" codes. These can be passed to the class
##      on instantiation using the parameter autoformat="code". If the code is in
##      the dictionary, it will self set the mask, formatting, and validation string.
##      I have included a number of samples, but I am hoping that someone out there
##      can help me to define a whole bunch more.
##   4. I have added a second page to the demo (as well as a second demo class, test2)
##      to showcase how autoformats work. The way they self-format and self-size is,
##      I must say, pretty cool.
##   5. Comments added and some internal cosmetic revisions re: matching the code
##      standards for class submission.
##   6. Regex validation is now done in real time - field turns yellow immediately
##      and stays yellow until the entered value is valid
##   7. Cursor now skips over template characters in a more intuitive way (before the
##      next keypress).
##   8. Change, Keypress and LostFocus methods added for convenience of subclasses.
##      Developer may use these methods which will be called after EVT_TEXT, EVT_CHAR,
##      and EVT_KILL_FOCUS, respectively.
##   9. Decimal and numeric handlers have been rewritten and now work more intuitively.
##
##  Version 0.0.4
##   1. New .IsEmpty() method returns True if the control's value is equal to the
##      blank template string
##   2. Control now supports a new init parameter: revalid. Pass a regular expression
##      that the value will have to match when the control loses focus. If invalid,
##      the control's BackgroundColor will turn yellow, and an internal flag is set (see next).
##   3. Demo now shows revalid functionality. Try entering a partial value, such as a
##      partial social security number.
##   4. New .IsValid() value returns True if the control is empty, or if the value matches
##      the revalid expression. If not, .IsValid() returns False.
##   5. Decimal values now collapse to decimal with '.00' on losefocus if the user never
##      presses the decimal point.
##   6. Cursor now goes to the beginning of the field if the user clicks in an
##      "empty" field intead of leaving the insertion point in the middle of the
##      field.
##   7. New "N" mask type includes upper and lower chars plus digits. a-zA-Z0-9.
##   8. New formatcodes init parameter replaces other init params and adds functions.
##      String passed to control on init controls:
##        _ Allow spaces
##        ! Force upper
##        ^ Force lower
##        R Show negative #s in red
##        , Group digits
##        - Signed numerals
##        0 Numeric fields get leading zeros
##   9. Ctrl-X in any field clears the current value.
##   10. Code refactored and made more modular (esp in OnChar method). Should be more
##       easy to read and understand.
##   11. Demo enhanced.
##   12. Now has _doc_.
##
##  Version 0.0.3
##   1. GetPlainValue() now returns the value without the template characters;
##      so, for example, a social security number (123-33-1212) would return as
##      123331212; also removes white spaces from numeric/decimal values, so
##      "-   955.32" is returned "-955.32". Press ctrl-S to see the plain value.
##   2. Press '.' in an integer style masked control and truncate any trailing digits.
##   3. Code moderately refactored. Internal names improved for clarity. Additional
##      internal documentation.
##   4. Home and End keys now supported to move cursor to beginning or end of field.
##   5. Un-signed integers and decimals now supported.
##   6. Cosmetic improvements to the demo.
##   7. Class renamed to MaskedTextCtrl.
##   8. Can now specify include characters that will override the basic
##      controls: for example, includeChars = "@." for email addresses
##   9. Added mask character 'C' -> allow any upper or lowercase character
##   10. .SetSignColor(str:color) sets the foreground color for negative values
##       in signed controls (defaults to red)
##   11. Overview documentation written.
##
##  Version 0.0.2
##   1. Tab now works properly when pressed in last position
##   2. Decimal types now work (e.g. #####.##)
##   3. Signed decimal or numeric values supported (i.e. negative numbers)
##   4. Negative decimal or numeric values now can show in red.
##   5. Can now specify an "exclude list" with the excludeChars parameter.
##      See date/time formatted example - you can only enter A or P in the
##      character mask space (i.e. AM/PM).
##   6. Backspace now works properly, including clearing data from a selected
##      region but leaving template characters intact. Also delete key.
##   7. Left/right arrows now work properly.
##   8. Removed EventManager call from test so demo should work with wxPython 2.3.3
##
#----------------------------------------------------------------------------
# Name:         wx.lib.masked.numctrl.py
# Author:       Will Sadkin
# Created:      09/06/2003
# Copyright:   (c) 2003-2007 by Will Sadkin
#
# License:     wxWidgets license
# Tags:        phoenix-port, py3-port, unittest, documented
#----------------------------------------------------------------------------
# NOTE:
#   This was written to provide a numeric edit control for wxPython that
#   does things like right-insert (like a calculator), and does grouping, etc.
#   (ie. the features of masked.TextCtrl), but allows Get/Set of numeric
#   values, rather than text.
#
#   Masked.NumCtrl permits integer, and floating point values to be set
#   retrieved or set via .GetValue() and .SetValue() (type chosen based on
#   fraction width, and provides an masked.EVT_NUM() event function for trapping
#   changes to the control.
#
#   It supports negative numbers as well as the naturals, and has the option
#   of not permitting leading zeros or an empty control; if an empty value is
#   not allowed, attempting to delete the contents of the control will result
#   in a (selected) value of zero, thus preserving a legitimate numeric value.
#   Similarly, replacing the contents of the control with '-' will result in
#   a selected (absolute) value of -1.
#
#   masked.NumCtrl also supports range limits, with the option of either
#   enforcing them or simply coloring the text of the control if the limits
#   are exceeded.
#
#   masked.NumCtrl is intended to support fixed-point numeric entry, and
#   is derived from BaseMaskedTextCtrl.  As such, it supports a limited range
#   of values to comply with a fixed-width entry mask.
#----------------------------------------------------------------------------
# 12/09/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for wx namespace
#
# 12/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxMaskedEditMixin -> MaskedEditMixin
# o wxMaskedTextCtrl -> masked.TextCtrl
# o wxMaskedNumNumberUpdatedEvent -> masked.NumberUpdatedEvent
# o wxMaskedNumCtrl -> masked.NumCtrl
#
# (constants should be in upper case)
##dbg = Logger()
##dbg(enable=1)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# add non-british spellings, for backward-compatibility
#----------------------------------------------------------------------------
# by default allow all 32-bit integers
# by default, use integers
# by default, use '.' for decimal point
# by default, allow negative numbers
# by default, use '-' to indicate negatives
# by default, don't insert grouping
# by default, use ',' for grouping
# by default, no bounds set
# by default, no limiting even if bounds set
# by default, don't limit if changing fields, even if bounds set
# by default, don't allow empty value
# by default, select the value of each field on entry
# use base control default font, instead of fixed width one
# by default, set the width of the control based on the mask
##        dbg('masked.NumCtrl::__init__', indent=1)
# Set defaults for control:
##        dbg('setting defaults:')
# This is done this way to make setattr behave consistently with
# "private attribute" name mangling
# Assign defaults for all attributes:
##        dbg('kwargs:', kwargs)
##        dbg('init_args:', indent=1)
##            dbg('%s:' % key, param_value)
##        dbg(indent=0)
# Process initial fields for the control, as part of construction:
#{%d}' % self._fractionWidth
##            dbg('fracmask:', fracmask)
#{%d}' % (self._integerWidth + self._groupSpace)
##        dbg('intmask:', intmask)
# don't bother to reprocess these arguments:
# initial value of state vars
# Construct the base control:
## defeat automatic full selection
## run internal validator
## select field under cursor on dclick
## bring up an appropriate context menu
## capture control events not normally seen, eg ctrl-tab.
## handle each keypress
## color control appropriately & keep
## track of previous value for undo
# Establish any additional parameters, with appropriate error checking
# right alignment with prefixed blanks doesn't work with wxPython 2.9+
# Set the value requested (if possible)
##        wxCallAfter(self.SetValue, value)
# Ensure proper coloring:
##        dbg('finished NumCtrl::__init__', indent=0)
##        dbg('NumCtrl::SetParameters', indent=1)
#{%d}' % self._fractionWidth
##            dbg('fracmask:', fracmask)
##                    dbg(indent=0)
##                    dbg(indent=0)
#{%d}' % (self._integerWidth + self._groupSpace)
##            dbg('intmask:', intmask)
# don't bother to reprocess these arguments:
# save so we can reformat properly
##            dbg("old_groupchar: '%s'" % old_groupchar)
##            dbg("old_decimalchar: '%s'" % old_decimalchar)
# Add sanity check to make sure these are distinct, and if not,
# raise attribute error
# for all other parameters, assign keyword args as appropriate:
# disallow explicit setting of mask
##        dbg('kwargs:', kwargs)
# reprocess existing format codes to ensure proper resulting format:
##            dbg("kwargs['selectOnEntry']?", kwargs['selectOnEntry'], "'S' in formatcodes?", 'S' in formatcodes)
# top-level mask should only be right insert if no fractional
# part will be shown; ie. if reconfiguring control, remove
# previous "global" setting.
##        dbg('maskededit_kwargs:', maskededit_kwargs)
# Go ensure all the format codes necessary are present:
# Record end of integer and place cursor there unless selecting, or select entire field:
# include any sign
# Set min and max as appropriate:
##                dbg('examining min')
##                        dbg('min will not fit into control; ignoring', indent=0)
##                dbg('accepted min')
##                dbg('ignoring min')
##                dbg('examining max')
##                        dbg('max will not fit into control; ignoring', indent=0)
##                dbg('accepted max')
##                dbg('ignoring max')
# Ensure current value of control obeys any new restrictions imposed:
##        dbg('text value: "%s"' % text)
##            dbg('old_groupchar: "%s" newgroupchar: "%s"' % (old_groupchar, self._groupChar))
# ensure latest decimal char is in "numeric value" so it won't be removed
# when going to the GUI:
##            dbg('calling wx.TextCtrl.ChangeValue(self, %s)' % newtext)
##        dbg('self._allowNegative?', self._allowNegative)
##            dbg('abs(value):', value)
##            dbg('Set to min value:', self._min)
##            dbg('Setting to max value:', self._max)
# reformat current value as appropriate to possibly new conditions
##            dbg('Reformatting value:', value)
# recolor as appropriate
##        dbg('finished NumCtrl::SetParameters', indent=0)
##        dbg('NumCtrl::_OnChangeSign', indent=1)
##        dbg(indent=0)
##        dbg('NumCtrl::_disallowValue')
# limited and -1 is out of bounds
##        dbg('queuing reselection of (%d, %d)' % (sel_start, sel_to))
# preserve current selection/position
##        dbg('NumCtrl::_OnFieldChange', indent=1)
##            dbg('oob - field change disallowed',indent=0)
##            dbg(indent=0)
# call the baseclass function
##        dbg('NumCtrl::_LostFocus', indent=1)
##            dbg("limiting on loss of focus")
##                dbg('Set to min value:', self._min)
##                dbg('Setting to max value:', self._max)
# (else do nothing.)
# (else do nothing.)
##        dbg(indent=0)
##        dbg('NumCtrl::_SetValue("%s")' % value, indent=1)
##        dbg('cleansed value: "%s"' % numvalue)
##                dbg('calling base BaseMaskedTextCtrl._SetValue(self, "%s")' % value)
##                dbg(indent=0)
##            dbg('empty value; setting replacement:', replacement)
# Go get the integer portion about to be set and verify its validity
##            dbg('intstart, intend:', intstart, intend)
##            dbg('raw integer:"%s"' % value[intstart:intend])
##            dbg('integer: "%s"' % int)
# if a float value, this will implicitly verify against limits,
# and generate an exception if out-of-bounds and limited
# if not a float, it will just return 0.0, and we therefore
# have to test against the limits explicitly after testing
# special cases for handling -0 and empty controls...
##                dbg('Exception:', e, 'must be out of bounds; disallow value')
##                dbg(indent=0)
# (can be 0 for floats as well as integers)
# we have to do special testing to account for emptying controls, or -0
# and/or just leaving the sign character or changing the sign,
# so we can do appropriate things to the value of the control,
# we can't just immediately test to see if the value is valid
# If all of these special cases are not in play, THEN we can do
# a limits check and see if the value is otherwise ok...
##                dbg('self._isNeg?', self._isNeg)
##                    dbg('just a negative sign; old value < 0; setting replacement of 0')
##                        dbg('-0; setting replacement of 0')
##                        dbg('-0; setting replacement of -1')
# limited and -1 is out of bounds
##                        dbg(indent=0)
##                        dbg('just a negative sign; setting replacement of -1')
# limited and -1 is out of bounds
##                        dbg(indent=0)
# changed sign resulting in value that's now out-of-bounds;
# disallow
##                    dbg(indent=0)
# integer requested is not legal.  This can happen if the user
# is attempting to insert a digit in the middle of the control
# resulting in something like "   3   45". Disallow such actions:
##                        dbg('>>>>>>>>>>>>>>>> "%s" does not convert to a long!' % int)
##                        dbg('queuing reselection of (%d, %d)' % (sel_start, sel_to))
# preserve current selection/position
##                        dbg(indent=0)
##                    dbg('numvalue: "%s"' % numvalue.replace(' ', ''))
# finally, (potentially re) verify that numvalue will pass any limits imposed:
##                        dbg('Exception:', e, 'must be out of bounds; disallow value')
##                        dbg(indent=0)
##                        dbg('modified value: "%s"' % value)
# reset state var
# Value presented wasn't a legal number, but control should do something
# reasonable instead:
##            dbg('setting replacement value:', replacement)
# find where it put the 1, so we can select it
##            dbg('queuing selection of (%d, %d)' %(sel_start, sel_to))
##            dbg(indent=0)
# Otherwise, apply appropriate formatting to value:
# Because we're intercepting the value and adjusting it
# before a sign change is detected, we need to do this here:
##        dbg('value:"%s"' % value, 'self._useParens:', self._useParens)
##        dbg('adjusted value: "%s"' % adjvalue)
# record current insertion point
##        dbg('calling BaseMaskedTextCtrl._SetValue(self, "%s")' % adjvalue)
# After all actions so far scheduled, check that resulting cursor
# position is appropriate, and move if not:
##        dbg('finished NumCtrl::_SetValue', indent=0)
# If current insertion point is before the end of the integer and
# its before the 1st digit, place it just after the sign position:
##        dbg('NumCtrl::CheckInsertionPoint', indent=1)
##            dbg('setting selection(%d, %d)' % (signpos+1, signpos+1))
##        dbg(indent=0)
##        dbg('NumCtrl::_OnErase', indent=1)
# called as action routine from Cut() operation.
#if grouping digits, make sure deletes next to group char always
# delete next digit to appropriate side:
# if 1st selected char is group char, select to previous digit
# elif previous char is group char, select to previous digit
##        dbg(indent=0)
##        dbg('NumCtrl::OnTextChange', indent=1)
##            dbg(indent=0)
# else... legal value
##                dbg(indent=0)
# let normal processing of the text continue
# record for next event
##        dbg(indent=0)
##        dbg('NumCtrl::SetValue(%s)' % value, indent=1)
##        dbg(indent=0)
##        dbg('NumCtrl::ChangeValue(%s)' % value, indent=1)
##        dbg(indent=0)
##        dbg('NumCtrl::SetMin(%s)' % repr(min), indent=1)
##        dbg(indent=0)
##        dbg('IsInBounds(%s)' % repr(value), indent=1)
##                dbg('error getting NumValue(self._toGUI(value)):', e, indent=0)
# if bounds set, and value is None, return False
##            dbg('finished IsInBounds', indent=0)
##            dbg('finished IsInBounds', indent=0)
# (Other parameter accessors are inherited from base class)
##        dbg('NumCtrl::_toGUI(%s)' % repr(value), indent=1)
##            dbg(indent=0)
##            dbg('cleansed num value: "%s"' % value)
##                    dbg(indent=0)
##                    dbg('exception raised:', e, indent=0)
# else...
##                dbg('exception raised:', e, indent=0)
##            dbg(indent=0)
##                dbg(indent=0)
##                dbg(indent=0)
##        dbg('len(%s):' % self._mask, len(self._mask))
##        dbg('adjustwidth - groupSpace:', adjustwidth - self._groupSpace)
##        dbg('adjustwidth:', adjustwidth)
##        dbg('s:"%s"' % s, 'len(s):', len(s))
##            dbg(indent=0)
##            dbg(indent=0)
##        dbg('returned: "%s"' % s, indent=0)
##        dbg(suspend=0)
##        dbg('NumCtrl::_fromGUI(%s)' % value, indent=1)
# One or more of the underlying text control implementations
# issue an intermediate EVT_TEXT when replacing the control's
# value, where the intermediate value is an empty string.
# So, to ensure consistency and to prevent spurious ValueErrors,
# we make the following test, and react accordingly:
#
##                dbg('empty value; not allowed,returning 0', indent = 0)
##                dbg('empty value; returning None', indent = 0)
##            dbg('Num value: "%s"' % value)
##                    dbg(indent=0)
##                    dbg("couldn't convert to float; returning None")
##                    dbg(indent=0)
##                       dbg(indent=0)
##                       dbg("couldn't convert to long; returning None")
##                    dbg('exception occurred; returning None')
##        dbg('NumCtrl::_Paste (value = "%s")' % value, indent=1)
##        dbg('selection:', (sel_start, sel_to))
#
# handle possibility of groupChar being a space:
# want to paste to the left; see if it will fit:
##            dbg('len(left_text):', len(left_text))
##            dbg('len(paste_text):', len(paste_text))
##            dbg('sel_start - (len(left_text) + len(paste_text)) >= edit_start?', sel_start - (len(left_text) + len(paste_text)) >= edit_start)
# will fit! create effective paste text, and move cursor back to do so:
# decrease by amount selected
##                dbg("won't fit left;", 'paste text remains: "%s"' % paste_text)
##                dbg('adjusted start before accounting for grouping:', sel_start)
##                dbg('adjusted paste_text before accounting for grouping: "%s"' % paste_text)
# remove group chars from adjusted paste string, and left pad to wipe out
# old characters, so that selection will remove the right chars, and
# readjust will do the right thing:
##                dbg('adjusted start after accounting for grouping:', sel_start)
##                dbg('adjusted paste_text after accounting for grouping: "%s"' % paste_text)
##            dbg(indent=0)
##            dbg(indent=0)
##        dbg('NumCtrl::_Undo', indent=1)
##            dbg('resetting "prev selection" to', self._prevSelection)
##            dbg(indent=0)
# else...
# move selection to account for "ungrouped" value:
##        dbg('adjusting "previous" selection from', (sel_start, sel_to), 'to:', (adjsel_start, adjsel_to))
# determine appropriate selection for ungrouped undo
# adjust new selection based on grouping:
# for numbers, we don't care about leading whitespace; adjust selection if
# it includes leading space.
##        dbg('adjusted selection accounting for grouping:', (new_sel_start, new_sel_to))
##        dbg('resetting "prev selection" to', self._prevSelection)
##        dbg(indent=0)
#===========================================================================
## To-Do's:
## =============================##
##   1. Add support for printf-style format specification.
##   2. Add option for repositioning on 'illegal' insertion point.
##
## Version 1.4
##   1. In response to user request, added limitOnFieldChange feature, so that
##      out-of-bounds values can be temporarily added to the control, but should
##      navigation be attempted out of an invalid field, it will not navigate,
##      and if focus is lost on a control so limited with an invalid value, it
##      will change the value to the nearest bound.
##
## Version 1.3
##   1. fixed to allow space for a group char.
##
## Version 1.2
##   1. Allowed select/replace digits.
##   2. Fixed undo to ignore grouping chars.
##
## Version 1.1
##   1. Fixed .SetIntegerWidth() and .SetFractionWidth() functions.
##   2. Added autoSize parameter, to allow manual sizing of the control.
##   3. Changed inheritance to use wxBaseMaskedTextCtrl, to remove exposure of
##      nonsensical parameter methods from the control, so it will work
##      properly with Boa.
##   4. Fixed allowNone bug found by user sameerc1@grandecom.net
##
#----------------------------------------------------------------------------
# Name:         masked.textctrl.py
# Authors:      Jeff Childers, Will Sadkin
# Email:        jchilders_98@yahoo.com, wsadkin@nameconnector.com
# Created:      02/11/2003
# Copyright:    (c) 2003 by Jeff Childers, Will Sadkin, 2003
# Portions:     (c) 2002 by Will Sadkin, 2002-2003
# License:      wxWidgets license
#----------------------------------------------------------------------------
#
# This file contains the most typically used generic masked control,
# masked.TextCtrl.  It also defines the BaseMaskedTextCtrl, which can
# be used to derive other "semantics-specific" classes, like masked.NumCtrl,
# masked.TimeCtrl, and masked.IpAddrCtrl.
#
# Tags:        phoenix-port, unittest, documented
#
#----------------------------------------------------------------------------
# jmg 12/9/03 - when we cut ties with Py 2.2 and earlier, this would
# be a good place to implement the 2.3 logger class
##dbg = Logger()
##dbg(enable=1)
## Setup event handlers
## defeat automatic full selection
## run internal validator
## select field under cursor on dclick
## bring up an appropriate context menu
## capture control events not normally seen, eg ctrl-tab.
## handle each keypress
## color control appropriately & keep
## track of previous value for undo
####        dbg("MaskedTextCtrl::_SetSelection(%(sel_start)d, %(sel_to)d)" % locals())
##    def SetSelection(self, sel_start, sel_to):
##        """
##        This is just for debugging...
##        """
##        dbg("MaskedTextCtrl::SetSelection(%(sel_start)d, %(sel_to)d)" % locals())
##        wx.TextCtrl.SetSelection(self, sel_start, sel_to)
####        dbg("MaskedTextCtrl::_SetInsertionPoint(%(pos)d)" % locals())
##    def SetInsertionPoint(self, pos):
##        """
##        This is just for debugging...
##        """
##        dbg("MaskedTextCtrl::SetInsertionPoint(%(pos)d)" % locals())
##        wx.TextCtrl.SetInsertionPoint(self, pos)
##        dbg('MaskedTextCtrl::_SetValue("%(value)s", use_change_value=%(use_change_value)d)' % locals(), indent=1)
# Record current selection and insertion point, for undo
##        dbg(indent=0)
##        dbg('MaskedTextCtrl::_ChangeValue("%(value)s", use_change_value=%(use_change_value)d)' % locals(), indent=1)
# Record current selection and insertion point, for undo
##        dbg(indent=0)
##        dbg('MaskedTextCtrl::ModifyValue("%(value)s", use_change_value=%(use_change_value)d)' % locals(), indent=1)
# revert to base control behavior
# revert to base control behavior
# empty previous contents, replacing entire value:
# add place holder for reserved space for right paren
# value shorter than control
# and it's a numeric control
# and it's a right-aligned control
##            dbg('len(value)', len(value), ' < self._masklength', self._masklength)
# try to intelligently "pad out" the value to the right size:
##            dbg('padded value = "%s"' % value)
# make Set/ChangeValue behave the same as if you had typed the value in:
# (clear current assumptions)
# (clear current assumptions)
# If date, year might be 2 digits vs. 4; try adjusting it:
##                dbg('adjusted value: "%s"' % value)
##                dbg('exception thrown', indent=0)
# note: to preserve similar capability, .SetValue()
# does not change IsModified()
####        dbg('queuing insertion after ._Set/ChangeValue', replace_to)
# set selection to last char replaced by paste
##        dbg(indent=0)
##            dbg('calculated size:', self._CalcSize())
##            dbg('setting client size to:', (width, height))
##        dbg("MaskedTextCtrl::Clear - value reset to default value (template)")
# else revert to base control behavior
##        dbg('MaskedTextCtrl::_Refresh', indent=1)
##        dbg(indent=0)
##        dbg('MaskedTextCtrl::Refresh', indent=1)
##        dbg(indent=0)
# call the mixin's Cut method
# else revert to base control behavior
# call the mixin's Paste method
# else revert to base control behavior
# else revert to base control behavior
# This should really be wx.EVT_WINDOW_CREATE but it is not
# currently delivered for native controls on all platforms, so
# we'll use EVT_SIZE instead.  It should happen shortly after the
# control is created as the control is set to its "best" size.
## CHANGELOG:
## ====================
##  Version 1.3
##  - Added support for ChangeValue() function, similar to that of the base
##    control, added in wxPython 2.7.1.1.
##
##  Version 1.2
##  - Converted docstrings to reST format, added doc for ePyDoc.
##    removed debugging override functions.
##
##  Version 1.1
##  1. Added .SetFont() method that properly resizes control
##  2. Modified control to support construction via XRC mechanism.
#----------------------------------------------------------------------------
# Name:         timectrl.py
# Author:       Will Sadkin
# Created:      09/19/2002
# Copyright:    (c) 2002 by Will Sadkin, 2002
# License:      wxWindows license
#
# Tags:        phoenix-port, unittest, documented
#
#----------------------------------------------------------------------------
# NOTE:
#   This was written way it is because of the lack of masked edit controls
#   in wxWindows/wxPython.  I would also have preferred to derive this
#   control from a wxSpinCtrl rather than wxTextCtrl, but the wxTextCtrl
#   component of that control is inaccessible through the interface exposed in
#   wxPython.
#
#   TimeCtrl does not use validators, because it does careful manipulation
#   of the cursor in the text window on each keystroke, and validation is
#   cursor-position specific, so the control intercepts the key codes before the
#   validator would fire.
#
#   TimeCtrl now also supports .SetValue() with either strings or wxDateTime
#   values, as well as range limits, with the option of either enforcing them
#   or simply coloring the text of the control if the limits are exceeded.
#
#   Note: this class now makes heavy use of wxDateTime for parsing and
#   regularization, but it always does so with ephemeral instances of
#   wxDateTime, as the C++/Python validity of these instances seems to not
#   persist.  Because "today" can be a day for which an hour can "not exist"
#   or be counted twice (1 day each per year, for DST adjustments), the date
#   portion of all wxDateTimes used/returned have their date portion set to
#   Jan 1, 1970 (the "epoch.")
#----------------------------------------------------------------------------
# 12/13/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o Updated for V2.5 compatibility
# o wx.SpinCtl has some issues that cause the control to
#   lock up. Noted in other places using it too, it's not this module
#   that's at fault.
#
# 12/20/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxMaskedTextCtrl -> masked.TextCtrl
# o wxTimeCtrl -> masked.TimeCtrl
#
# 2/4/2018   - jensgoe (mail@jensgoepfert.de)
# o wx.Validator_IsSilent() -> wx.Validator.IsSilent()
#
##dbg(enable=0)
# This class of event fires whenever the value of the time changes in the control:
# add non-british spellings, for backward-compatibility
# default format code
# by default, shows seconds
# by default, no bounds set
# by default, no limiting even if bounds set
# by default, use a fixed-width font
# by default, the default masked.TextCtrl "invalid" color
# set defaults for control:
##        dbg('setting defaults:')
# force/change default positional argument
# (will countermand explicit set to False too.)
# force/change default positional argument
# (will countermand explicit set to False too.)
# This is done this way to make setattr behave consistently with
# "private attribute" name mangling
# create locals from current defaults, so we can override if
# specified in kwargs, and handle uniformly:
# handle deprecated keword argument name:
# (handle positional arg (from original release) differently from rest of kwargs:)
# allow control over font selection:
# allow for explicit size specification:
# override (and remove) "autofit" autoformat code in standard time formats:
# This allows range validation if set
# This allows range limits to affect insertion into control or not
# dynamically without affecting individual field constraint validation
# Now we can initialize the base control:
# This makes ':' act like tab (after we fix each ':' key event to remove "shift")
# This makes the up/down keys act like spin button controls:
# This allows ! and c/C to set the control to the current time:
# Set up event handling ourselves, so we can insert special
# processing on the ":' key to remove the "shift" attribute
# *before* the default handlers have been installed, so
# that : takes you forward, not back, and so we can issue
# EVT_TIMEUPDATE events on changes:
## defeat automatic full selection
## run internal validator
## limit selections to single field
## select field under cursor on dclick
## capture control events not normally seen, eg ctrl-tab.
## remove "shift" attribute from colon key event,
## then call BaseMaskedTextCtrl._OnChar with
## the possibly modified event.
## color control appropriately and EVT_TIMEUPDATE events
# Validate initial value and set if appropriate
# bind spin button up/down events to this control
##        dbg('TimeCtrl::SetParameters(%s)' % repr(kwargs), indent=1)
# always apply format if specified
# assign keyword args as appropriate:
# handle both local or generic 'maskededit' autoformat codes:
# Set hour field to zero-pad, right-insert, require explicit field change,
# select entire field on entry, and require a resultant valid entry
# to allow character entry:
# Set hour field to allow spaces (at start), right-insert,
# require explicit field change, select entire field on entry,
# and require a resultant valid entry to allow character entry:
# Field 1 is always a zero-padded right-insert minute field,
# similarly configured as above:
# second field has same constraints as field 1
# set fields argument:
# This allows range validation if set
# This allows range limits to affect insertion into control or not
# dynamically without affecting individual field constraint validation
# set appropriate parameters
# Validate initial value and set if appropriate
##            dbg(indent=0)
# no arguments to return
##            dbg(indent=0)
##        dbg('TimeCtrl::BindSpinButton')
# bind event handlers to spin ctrl
##        dbg('TimeCtrl::SetValue(%s)' % repr(value), indent=1)
##            dbg('validation failed', indent=0)
##        dbg('strtime:', strtime)
##        dbg(indent=0)
##        dbg('TimeCtrl::ChangeValue(%s)' % repr(value), indent=1)
##            dbg('validation failed', indent=0)
##        dbg('strtime:', strtime)
##        dbg(indent=0)
##        dbg(suspend=1)
##        dbg('TimeCtrl::GetWxDateTime(%s)' % repr(value), indent=1)
##            dbg('getting control value')
##            dbg('value = "%s"' % value)
# assume true
# convert to regular string
# Construct constant wxDateTime, then try to parse the string:
##            dbg('attempting conversion')
# (parser doesn't like leading spaces)
# deal with bug/deficiency in wx.DateTime:
# couldn't parse the AM/PM field
##                dbg(indent=0, suspend=0)
# Not a valid function argument
##                dbg(indent=0, suspend=0)
##        dbg('wxdt:', wxdt, indent=0, suspend=0)
# Convert string 1st to wxDateTime, then use components, since
# mx' DateTime.Parser.TimeFromString() doesn't handle AM/PM:
##        dbg('TimeCtrl::SetMin(%s)'% repr(min), indent=1)
##                dbg('exception occurred', indent=0)
# force limited value:
##        dbg('ret:', ret, indent=0)
##        dbg(suspend=1)
##        dbg('TimeCtrl::GetMin, as_string?', as_string, indent=1)
##            dbg('(min is None)')
##            dbg('ret:', ret)
##                dbg(suspend=0)
##                dbg('exception occurred', indent=0)
##            dbg('ret:', repr(ret))
##        dbg(indent=0, suspend=0)
##        dbg('TimeCtrl::SetMax(%s)' % repr(max), indent=1)
##                dbg('exception occurred', indent=0)
##        dbg('max:', repr(self.__max))
# force limited value:
##        dbg('ret:', ret, indent=0)
##        dbg(suspend=1)
##        dbg('TimeCtrl::GetMin, as_string?', as_string, indent=1)
##            dbg('(max is None)')
##            dbg('ret:', ret)
##                dbg(suspend=0)
##                dbg('exception occurred', indent=0)
##            dbg('ret:', repr(ret))
##        dbg(indent=0, suspend=0)
##        dbg('TimeCtrl::SetLimited(%d)' % limited, indent=1)
##            dbg(indent=0)
##        dbg('requiring valid value')
##            dbg('both bounds not set; no further action taken')
# can't limit without 2 bounds
# set value to the nearest bound:
##                dbg('exception occurred', indent=0)
# valid range doesn't span midnight
##                dbg('min <= max')
# which makes the "nearest bound" computation trickier...
# determine how long the "invalid" pie wedge is, and cut
# this interval in half for comparison purposes:
# Note: relies on min and max and value date portions
# always being the same.
# hours
# minutes
# seconds
# msec
# min is on next day, so use value on
# "next day" for "nearest" interval calculation:
# "before midnight; ok
##                    dbg('forcing value to min (%s)' % min.FormatTime())
##                    dbg('forcing value to max (%s)' % max.FormatTime())
##                dbg('max < min')
# therefore  max < value < min guaranteed to be true,
# so "nearest bound" calculation is much easier:
# current value closer to min; pick that edge of pie wedge
##                    dbg('forcing value to min (%s)' % min.FormatTime())
##                    dbg('forcing value to max (%s)' % max.FormatTime())
##        dbg(indent=0)
# try to regularize passed value
##                dbg('ValueError getting wxDateTime for %s' % repr(value), indent=0)
##        dbg('TimeCtrl::IsInBounds(%s)' % repr(value), indent=1)
##            dbg(indent=0)
##                dbg('exception occurred', indent=0)
##        dbg('value:', value.FormatTime())
# Get wxDateTime representations of bounds:
# they don't span midnight
# have to break into 2 tests; to be in bounds
# either "min" <= value (<= midnight of *next day*)
# or midnight <= value <= "max"
##        dbg('in bounds?', ret, indent=0)
#-------------------------------------------------------------------------------------------------------------
# these are private functions and overrides:
##        dbg('TimeCtrl::OnTextChange', indent=1)
# Allow Maskedtext base control to color as appropriate,
# and Skip the EVT_TEXT event (if appropriate.)
##! WS: For some inexplicable reason, every wxTextCtrl.SetValue()
## call is generating two (2) EVT_TEXT events. (!)
## The the only mechanism I can find to mask this problem is to
## keep track of last value seen, and declare a valid EVT_TEXT
## event iff the value has actually changed.  The masked edit
## OnTextChange routine does this, and returns True on a valid event,
## False otherwise.
##        dbg('firing TimeUpdatedEvent...')
##        dbg(indent=0)
##        dbg('TimeCtrl::SetInsertionPoint', pos, indent=1)
# (causes EVT_TEXT event to fire)
##        dbg(indent=0)
##        dbg('TimeCtrl::SetSelection', sel_start, sel_to, indent=1)
# Adjust selection range to legal extent if not already
# force selection and insertion point to match
##        dbg(indent=0)
# changes the value
# Ensure adjusted control regains focus and has adjusted portion
# selected:
##        dbg('current position:', self.__posCurrent)
##        dbg('TimeCtrl::OnSpinUp', indent=1)
##        dbg(indent=0)
##        dbg('TimeCtrl::OnSpinDown', indent=1)
##        dbg(indent=0)
##        dbg('TimeCtrl::OnChar', indent=1)
##        dbg('keycode:', keycode)
##            dbg('colon seen! removing shift attribute')
## handle each keypress
##        dbg(indent=0)
##        dbg('TimeCtrl::LimitSelection', indent=1)
# only allow selection to end of current cell:
##        dbg('new pos =', self.__posCurrent, 'select to ', sel_to)
##        dbg(indent=0)
##        dbg('TimeCtrl::IncrementValue', key, pos, indent=1)
##        dbg('field: ', field._index)
# adjusting this field is trickier, as its value can affect the
# am/pm setting.  So, we use wxDateTime to generate a new value for us:
# (Use a fixed date not subject to DST variations:)
##            dbg('text: "%s"' % text)
##            dbg('current hour:', currenthour)
##            dbg('newhour:', newhour)
##            dbg('converter.GetHour():', converter.GetHour())
# take advantage of auto-conversion for am/pm in .SetValue()
# minute or second field; handled the same way:
# must not be in bounds:
##        dbg(indent=0)
##        dbg('TimeCtrl::__validateValue(%s)' % repr(value), indent=1)
##            dbg(indent=0)
# assume true
# regularize form; can generate ValueError if problem doing so
##            dbg('exception occurred', indent=0)
##            dbg(indent=0)
##        dbg(indent=0)
#----------------------------------------------------------------------------
# Test jig for TimeCtrl:
##            dbg('OnTimeChange: value = ', event.GetValue())
##            dbg('wxdt =', wxdt.GetHour(), wxdt.GetMinute(), wxdt.GetSecond())
##                dbg('mxdt =', mxdt.hour, mxdt.minute, mxdt.second)
## CHANGELOG:
## ====================
##  Version 1.3
##  1. Converted docstrings to reST format, added doc for ePyDoc.
##  2. Renamed helper functions, vars etc. not intended to be visible in public
##     interface to code.
##
## Version 1.2
##   1. Changed parameter name display_seconds to displaySeconds, to follow
##      other masked edit conventions.
##   2. Added format parameter, to remove need to use both fmt24hr and displaySeconds.
##   3. Changed inheritance to use BaseMaskedTextCtrl, to remove exposure of
##      nonsensical parameter methods from the control, so it will work
##      properly with Boa.
#----------------------------------------------------------------------
# Name:        wx.lib.masked
# Purpose:     A package containing the masked edit controls
#
# Author:      Will Sadkin, Jeff Childers
#
# Created:     6-Mar-2004
# Copyright:   (c) 2004
# License:     wxWidgets license
# Tags:        phoenix-port, py3-port
#----------------------------------------------------------------------
# import relevant external symbols into package namespace:
#----------------------------------------------------------------------------
# Name:        wx.lib.mixins.grid
# Purpose:     Helpful mix-in classes for wx.Grid
#
# Author:      Robin Dunn
#
# Created:     5-June-2001
# Copyright:   (c) 2001-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------------
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
# o Untested
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxGridAutoEditMixin -> GridAutoEditMixin
#
#----------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.mixins.gridlabelrenderer
# Purpose:     A Grid mixin that enables renderers to be plugged in
#              for drawing the row and col labels, similar to how the
#              cell renderers work.
#
# Author:      Robin Dunn
#
# Created:     20-Mar-2009
# Copyright:   (c) 2009-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
#----------------------------------------------------------------
# NOTE: These helpers or something like them should probably be publicly
# available in the C++ wxGrid class, but they are currently protected so
# for now we will have to calculate them ourselves.
# These two can be used to duplicate the default wxGrid label drawing
# These classes draw approximately the same things that the built-in
# label windows do in C++, but are adapted to fit into this label
# renderer scheme.
#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:        wx.lib.mixins.imagelist
# Purpose:     Helpful mix-in classes for using a wxImageList
#
# Author:      Robin Dunn
#
# Created:     15-May-2001
# Copyright:   (c) 2001-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------------
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
# o Untested.
#
#----------------------------------------------------------------------------
### LAZYTREE and LISTCONTROL Methods
### Local methods...
### Customisation point...
#----------------------------------------------------------------------------
# Name:        wx.lib.mixins.inspection
# Purpose:     A mix-in class that can add PyCrust-based inspection of the
#              app's widgets and sizers.
#
# Author:      Robin Dunn
#
# Created:     21-Nov-2006
# Copyright:   (c) 2006-2018 by Total Control Software
# Licence:     wxWindows license
#
# Tags: phoenix-port, documented, unittest
#----------------------------------------------------------------------------
#
# NOTE: This class was originally based on ideas sent to the
# wxPython-users mail list by Dan Eloff.
# initialize the inspection tool
#----------------------------------------------------------------------------
# compatibility alias
# get the current widget under the mouse
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Name:        wx.lib.mixins.listctrl
# Purpose:     Helpful mix-in classes for wxListCtrl
#
# Author:      Robin Dunn
#
# Created:     15-May-2001
# Copyright:   (c) 2001-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, py3-port
#----------------------------------------------------------------------------
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
# o ListCtrlSelectionManagerMix untested.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o wxColumnSorterMixin -> ColumnSorterMixin
# o wxListCtrlAutoWidthMixin -> ListCtrlAutoWidthMixin
# ...
# 13/10/2004 - Pim Van Heuven (pim@think-wize.com)
# o wxTextEditMixin: Support Horizontal scrolling when TAB is pressed on long
#       ListCtrls, support for WXK_DOWN, WXK_UP, performance improvements on
#       very long ListCtrls, Support for virtual ListCtrls
#
# 15-Oct-2004 - Robin Dunn
# o wxTextEditMixin: Added Shift-TAB support
#
# 2008-11-19 - raf <raf@raf.org>
# o ColumnSorterMixin: Added GetSortState()
#
# python 3 lacks cmp:
#----------------------------------------------------------------------------
# (decending, ascending) image IDs
# Make changes to list items... then resort
#--- Internationalization of string sorting with locale module
# both are unicode (py2) or str (py3)
# at least one is a str (py2) or byte (py3)
#---
# If the items are equal then pick something else to make the sort value unique
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# =====================
# == Private Methods ==
# =====================
# avoid a PyDeadObject error
# avoid an endless update bug when the height is small.
# Nothing to resize.
# Get total width
# Width of all columns except last one.
# We haven't got the width to show the last column at its minimum
# width -> set it to its minimum width and allow the horizontal
# scrollbar to show.
# Resize the last column to take up the remaining available space.
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#for i in getListCtrlSelection(ctrl, SEL_FOC):
#    ctrl.SetItemState(i, 0, SEL_FOC)
#        self.Connect(-1, -1, self.wxEVT_DOPOPUPMENU, self.OnLCSMDoPopup)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Yellow
# black
#editor = wx.TextCtrl(self, -1, pos=(-1,-1), size=(-1,-1),
#                     style=wx.TE_PROCESS_ENTER|wx.TE_PROCESS_TAB \
#                     |wx.TE_RICH2)
# self.curRow keeps track of the current row
# the following should really be done in the mixin's init but
# the wx.ListCtrl demo creates the columns after creating the
# ListCtrl (generally not a good idea) on the other hand,
# doing this here handles adjustable column widths
# give the derived class a chance to Allow/Veto this edit.
# user code doesn't allow the edit.
# scroll forward
# don't start scrolling unless we really need to
# scroll a bit more than what is minimum required
# so we don't have to scroll everytime the user presses TAB
# which is very tireing to the eye
# but be careful at the end of the list
# Since we can not programmatically scroll the ListCtrl
# close the editor so the user can scroll and open the editor
# again
# FIXME: this function is usually called twice - second time because
# it is binded to wx.EVT_KILL_FOCUS. Can it be avoided? (MW)
# post wxEVT_COMMAND_LIST_END_LABEL_EDIT
# Event can be vetoed. It doesn't has SetEditCanceled(), what would
# require passing extra argument to CloseEditor()
# replace by whather you use to populate the virtual ListCtrl
# data source
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Create default checkbox images if none were specified
# Monkey-patch in a new InsertItem so we can also set the image ID for the item
# XXX what if the previous item is deleted or new items
# are inserted?
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Mode Flags
# Highlight the Odd rows
# Highlight the Even rows
# Attributes
# Event Handlers
# This part of the loop should only happen once if self._defaultb is None.
#----------------------------------------------------------------------------
#---------------------------------------------------------------------------
# Name:        wx.lib.mixins.rubberband
# Purpose:     A mixin class for doing "RubberBand"-ing on a window.
#
# Author:      Robb Shecter and members of wxPython-users
#
# Created:     11-September-2002
# Copyright:   (c) 2002 by db-X Corporation
# Licence:     wxWindows license
# Tags:        phoenix-port
#---------------------------------------------------------------------------
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
# o Tested, but there is an anomaly between first use and subsequent uses.
#   First use is odd, subsequent uses seem to be OK. Init error?
#   -- No, the first time it uses an aspect ratio, but after the reset it doesn't.
#
#
# Some miscellaneous mathematical and geometrical functions
#
#print('paint')
# First make sure we have started a box.
# No box started yet.  Set cursor to the initial kind.
# No RB Box, so start a new one.
# Starting a sizing operation.  Change the origin.
# Use the cursor type to determine operation
# Simple mouse movement event
# Implement the correct behavior for dragging a side
# of the box:  Only change one dimension.
# Are we on the bounding box?
# Avoid redundant calls
#
# The public API:
#
# Add a panel that the rubberband will work on.
# Create the rubberband
# Add a button that creates a new rubberband
# Layout the frame
#---------------------------------------------------------------------------
# Name:        treemixin.py
# Purpose:     This module provides three mixin classes that can be used with tree
#              controls
#
# Author:
#
# Created:
# RCS-ID:
# Date:        24 September 2007
# Copyright:
# Version:     1.1
# Licence:     wxWidgets license
# Tags:        phoenix-port
#---------------------------------------------------------------------------
# If our super class has a method called methodName, call it,
# otherwise return the default value.
# Only TreeListCtrl has columns, return 0 if we are mixed in
# with another tree control.
# Only CustomTreeCtrl has different item types, return the
# default item type if we are mixed in with another tree control.
# CustomTreeCtrl doesn't support changing the item type on the fly,
# so we create a new item and delete the old one. We currently only
# keep the item text, would be nicer to also retain other attributes.
# Only CustomTreeCtrl supports checkable items, return False if
# we are mixed in with another tree control.
# For consistency's sake, provide a 'Get' and 'Set' method for
# checkable items.
# For consistency's sake, provide a 'Get' and 'Set' method for
# checkable items.
# Only TreeListCtrl has a separate main window, return self if we are
# mixed in with another tree control.
# CustomTreeCtrl always wants the which argument, so provide it
# TreeListCtr.GetItemImage has a different order of arguments than
# the other tree controls. Hide the differenes.
# The SetItemImage signature is different for TreeListCtrl and
# other tree controls. This adapter method hides the differences.
# Unselect all items, regardless of whether we are in multiple
# selection mode or not.
# CustomTreeCtrl Unselect() doesn't seem to work in all cases,
# also invoke UnselectAll just to be sure.
# TreeListCtrl correctly ignores the root item when it is hidden,
# but doesn't count the root item when it is visible
# Always return a list of selected items, regardless of whether
# we are in multiple selection mode or not.
# If the root item is hidden, it should never be selected,
# unfortunately, CustomTreeCtrl allows it to be selected.
# TreeListCtrl raises an exception or even crashes when invoking
# GetFirstVisibleItem on an empty tree.
# Prevent the hidden root from being selected, otherwise TreeCtrl
# crashes
# TreeListCtrl wants an item as argument. That's an inconsistency with
# the TreeCtrl API. Also, TreeCtrl doesn't allow invoking ExpandAll
# on a tree with hidden root node, so prevent that.
# TreeListCtrl and CustomTreeCtrl don't have ExpandallChildren
# Other code here
# There's no corresponding item for index, because its parent
# has not been expanded yet.
# We need to refresh the children when the item is expanded and
# when the item has no children, because in the latter case we
# might have to delete old children from the tree:
# Refresh images in first column:
# Refresh images in remaining columns, if any:
# Other code here
# We allow only one item to be dragged at a time, to keep it simple
# Other code here
#----------------------------------------------------------------------
# Name:        wx.lib.mixins
# Purpose:     A package for helpful wxPython mix-in classes
#
# Author:      Robin Dunn
#
# Created:     15-May-2001
# Copyright:   (c) 2001-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 12/14/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o 2.5 compatibility update.
#
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         basic.py
# Purpose:      The basic OGL shapes
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-05-08
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# Control points ('handles') redirect control to the actual shape,
# to make it easier to override sizing behaviour.
# Can override this to prevent or intercept line reordering.
# Set up a default region. Much of the above will be put into
# the region eventually (the duplication is for compatibility)
# Allowance for inaccurate mousing
# If within the bounding box, check the attachment points
# within the object.
# GetAttachmentPosition[Edge] takes a logical attachment position,
# i.e. if it's rotated through 90%, position 0 is East-facing.
# Format a text string according to the region size, adding
# strings with positions to region text list
# Don't try to resize an object with more than one image (this
# case should be dealt with by overriden handlers)
# If we are a descendant of a composite, must make sure
# the composite gets resized properly
# Where infinite recursion might happen if we didn't stop it
# Get the top - most (non-division) ancestor, or self
# Region functions
# Name all _regions in all subimages recursively
# Get a region by name, possibly looking recursively into composites
# Finds all region names for this image (composite or simple).
# Want to set the ends of all attached links
# to point to / from this object
# Erase links
#  Returns TRUE if pt1 <= pt2 in the sense that one point comes before
#  another on an edge of the shape.
# attachmentPoint is the attachment point (= side) in question.
# This is the default, rectangular implementation.
# Is (x, y) on this object? If so, find the new attachment point
# the user has moved the point to
# The links in a new ordering
# First, add all links to the new list
# Delete the line object from the list of links; we're going to move
# it to another position in the list
# Reorders the lines according to the given list
# Now add any lines that haven't been listed in linesToSort
# This is a temporary store of all the lines at this attachment
# point. We'll tick them off as we've processed them.
# Done this one
# Now add any lines that haven't been listed in linesToSort
# New policy: don't erase shape until end of drag.
# self.Erase(dc)
# New policy: erase shape at end of drag.
#region.ClearText()
# Add line FROM this object
# Don't preserve old ordering if we have new ordering instructions
# Don't preserve old ordering if we have new ordering instructions
# Default - make 6 control points
# Offsets from main object
# Offsets from main object
# Children of divisions are contained objects,
# so stop here
# Children of divisions are contained objects,
# so stop here.
# This test bypasses the type facility for speed
# (critical when drawing)
# Children of divisions are contained objects,
# so stop here
# Should return the MAXIMUM attachment point id here,
# so higher-level functions can iterate through all attachments,
# even if they're not contiguous.
# Assume is rectangular
# wtf?
# Simplified code
# Assuming the attachment lies along a vertical or horizontal line,
# calculate the position on that point.
# Are we horizontal or vertical?
# Align line according to the next handle along
# Midpoint
# Align line according to the next handle along
# Midpoint
#            |________|
#                 | <- root
#                 | <- neck
# shoulder1 ->---------<- shoulder2
#             | | | | |
#                      <- branching attachment point N-1
# Number of lines at this attachment
# Assume that we have attachment points 0 to 3: top, right, bottom, left
# Assume that we have attachment points 0 to 3: top, right, bottom, left
# Draw or erase the branches (not the actual arcs though)
# Draw neck
# Draw shoulder-to-shoulder line
# Draw all the little branches
# Calculate as if to edge, not branch
# Can't handle -- assume the same
# Control points ('handles') redirect control to the actual shape, to
# make it easier to override sizing behaviour.
# Maintain the same centre point
# Constrain sizing according to what control point you're dragging
# Don't maintain the same centre point
# Choose the 'opposite corner' of the object as the stationary
# point in case this is non-centring resizing.
# We may require the old width and height
# Constrain sizing according to what control point you're dragging
# Don't maintain the same centre point
# The next operation could destroy this control point (it does for
# label objects, via formatting the text), so save all values we're
# going to use, or we'll be accessing garbage.
#return
# Recursively redraw links if we have a composite
# Assume (x1, y1) is centre of box (most generally, line end at box)
# Duplicate the list of points
# Width and height. Centre of object is centre of box
# Imagine four lines radiating from this point. If all of these lines
# hit the polygon, we're inside it, otherwise we're not. Obviously
# we'd need more radiating lines to be sure of correct results for
# very strange (concave) shapes.
# We assume it's inside the polygon UNLESS one or more
# lines don't hit the outline.
# If a hit, check the attachment points within the object
# Really need to be able to reset the shape! Otherwise, if the
# points ever go to zero, we've lost it, and can't resize.
# Multiply all points by proportion of new size to old size
# Make the original points the same as the working points
# Assume (x1, y1) is centre of box (most generally, line end at box)
# First check for situation where the line is vertical,
# and we would want to connect to a point on that vertical --
# oglFindEndForPolyline can't cope with this (the arrow
# gets drawn to the wrong place).
# Look for the point we'd be connecting to. This is
# a heuristic...
# Multiply all points by proportion of new size to old size
# Make as many control points as there are vertices
# Rotate attachment points
# Added by Pierre Hjälm. If we don't do this the outline will be
# the wrong size. Hopefully it won't have any ill effects.
# Control points ('handles') redirect control to the actual shape, to
# make it easier to override sizing behaviour.
# Code for CTRL-drag in C++ version commented out
# Code for CTRL-drag in C++ version commented out
# If we're changing shape, must reset the original points
# There are 4 attachment points on an ellipse - 0 = top, 1 = right,
# 2 = bottom, 3 = left.
# We now have the point on the bounding box: but get the point
# on the ellipse by imagining a vertical line from
# (x, self._ypos - self._height - 500) to (x, self._ypos) intersecting
# the ellipse.
# Don't even attempt to draw any text - waste of time
# Implement resizing of canvas object
# Implement resizing polygon or moving the vertex
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         bmpshape.py
# Purpose:      Bitmap shape
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-05-08
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         _canvas.py
# Purpose:      The canvas class
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-05-08
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# make sure you clear the bitmap!
# Make sure we don't try to create a 0 size bitmap
# Check if we're within the tolerance for mouse movements.
# If we're very close to the position we started dragging
# from, this may not be an intentional drag at all.
# the difference between two logical coordinates is a logical coordinate
# If we've ignored the tolerance once, then ALWAYS ignore
# tolerance in this drag, even if we come back within
# the tolerance range.
# Dragging - note that the effect of dragging is left entirely up
# to the object, so no movement is done unless explicitly done by
# object.
# If the object isn't m_draggable, transfer message to canvas
# Continue dragging
# Continue dragging
# All following events sent to canvas, not object
# Continue dragging
# Continue dragging
# Non-dragging events
# Find the nearest object
# Object event
# N.B. Only register a click if the same object was
# identified for down *and* up.
# Canvas event
# Go backward through the object list, since we want:
# (a) to have the control points drawn LAST to overlay
#     the other objects
# (b) to find the control points FIRST if they exist
# First pass for lines, which might be inside a container, so we
# want lines to take priority over containers. This first loop
# could fail if we clickout side a line, so then we'll
# try other shapes.
# A line is trickier to spot than a normal object.
# For a line, since it's the diagonal of the box
# we use for the hit test, we may have several
# lines in the box and therefore we need to be able
# to specify the nearest point to the centre of the line
# as our hit criterion, to give the user some room for
# manouevre.
# On second pass, only ever consider non-composites or
# divisions. If children want to pass up control to
# the composite, that's up to them.
# If we've hit a container, and we have already
# found a line in the first pass, then ignore
# the container in case the line is in the container.
# Check for division in case line straddles divisions
# (i.e. is not wholly contained).
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         composit.py
# Purpose:      Composite class
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-05-08
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# Like aligned, but with the objects centred on the respective edge
# of the reference object.
# Alignment
# Mid-alignment
# Check if within the constraining object...
# Otherwise, use default spacing
# Now position the objects
# Check if within the constraining object...
# Otherwise, use default spacing
# Now position the objects
# Check if within the constraining object...
# Otherwise, use default spacing
# Check if within the constraining object...
# Otherwise, use default spacing
# Now position the objects
# In case it's a container
# For debug purposes /pi
#dc.DrawRectangle(x1, y1, self._width, self._height)
# Scale the position first
# Now set the scaled size
# Ensure we add at the right position
# Delete the constraint if no participants left
# If not found, try children
# Recalculate size of composite objects because may not conform
# to size it was set to - depends on the children.
# Implement resizing of canvas object
# Need to check it's within the bounds of the parent composite
# Need to check it has not made the division zero or negative
# width / height
# Try it out first...
# Should subtract 1 pixel if drawing under Windows
# For testing purposes, draw a rectangle so we know
# how big the division is.
#dc.SetBrush(wx.RED_BRUSH)
#dc.DrawRectangle(x1, y1, self.GetWidth(), self.GetHeight())
# Experimental
# Calculate existing top-left, bottom-right
# Dividing vertically means notionally putting a horizontal
# line through it.
# Break existing piece into two.
# Anything adjoining the bottom of this division now adjoins the
# bottom of the new division.
# CHANGE: Need to insert this division at start of divisions in the
# object list, because e.g.:
# 1) Add division
# 2) Add contained object
# 3) Add division
# Division is now receiving mouse events _before_ the contained
# object, because it was added last (on top of all others)
# Add after the image that visualizes the container
# Dividing horizontally means notionally putting a vertical line
# through it.
# Break existing piece into two.
# Anything adjoining the left of this division now adjoins the
# left of the new division.
# Resize adjoining divisions.
# Behaviour should be as follows:
# If right edge moves, find all objects whose left edge
# adjoins this object, and move left edge accordingly.
# If left..., move ... right.
# If top..., move ... bottom.
# If bottom..., move top.
# If size goes to zero or end position is other side of start position,
# resize to original size and return.
#
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         diagram.py
# Purpose:      Diagram class
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-05-08
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         divided.py
# Purpose:      DividedShape class
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-05-08
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# Find the old top and bottom of this region,
# and calculate the new proportion for this region
# if legal.
# Save values
# Check that we haven't gone above this region or below
# next region.
# Now calculate the new proportions of this region and the next region
# Now reformat text
# For efficiency, don't do this under X - doesn't make
# any visible difference for our purposes.
# Zero is top, n + 1 is bottom
# Align line according to the next handle along
# Align line according to the next handle along
# Left or right
# Calculate top and bottom of region
# Assuming we can trust the absolute size and
# position of these regions
# Align line according to the next handle along
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         drawn.py
# Purpose:      DrawnShape class
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-08-25
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# License:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# Drawing operations
# Check for overriding this operation for outline colour
# Check for overriding this operation for outline or fill colour
# Need to construct a brush to match the outline pen's colour
# Assume only 0, 90, 180, 270 degree rotations.
# oldX1, oldY1 represents the top left corner. Find the
# bottom right, and rotate that. Then the width/height is
# the difference between x/y values.
# Now find the new top-left, bottom-right coordinates.
# width
# height
# Add rotation to angles
# no offsets in DrawSpline
# Multiply all points by proportion of new size to old size
# First check for situation where the line is vertical,
# and we would want to connect to a point on that vertical --
# oglFindEndForPolyline can't cope with this (the arrow
# gets drawn to the wrong place).
# Look for the point we'd be connecting to. This is
# a heuristic...
# TODO
# Scale to fit size
# TODO: don't yet know how to calculate the bounding box
# for an arc. So pretend it's a line; to get a correct
# bounding box, draw a blank rectangle first, of the
# correct size.
# Calculate size from current operations
# By Pierre Hjälm: This is NOT in the old version, which
# gets this totally wrong. Since the drawing is centered, we
# cannot get the width by measuring from left to right, we
# must instead make enough room to handle the largest
# coordinates
#self.SetSize(boundMaxX - boundMinX, boundMaxY - boundMinY)
# Set of functions for drawing into a pseudo metafile
# flags:
# oglMETAFLAGS_OUTLINE: will be used for drawing the outline and
#                       also drawing lines/arrows at the circumference.
# oglMETAFLAGS_ATTACHMENTS: will be used for initialising attachment
#                       points at the vertices (perhaps a rare case...)
# Pass pen and brush in case we have force outline
# and fill colours
# theta is absolute rotation from the zero position
# Rotate metafile
# Rotate attachment points
# Which metafile do we use now? Based on current rotation and validity
# of metafiles.
# Default... just use a rectangle
# Get the perimeter point using the special outline op, if there is one,
# otherwise use default wxRectangleShape scheme
# Set of functions for drawing into a pseudo metafile.
# They use integers, but doubles are used internally for accuracy
# when scaling.
# TODO: AttachmentPoint does not excist as per PyLint, what should it be???
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         lines.py
# Purpose:      LineShape class
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-05-08
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# Line alignment flags
# Vertical by default
# Implement movement of Line point
# Divert left and right clicks to line object
# Clear any existing regions (created in an earlier constructor)
# and make the three line regions.
# pi: added _initialised to keep track of when we have set
# the middle points to something other than (-999, -999)
# Just move the first and last control points
# If any of the line points are at -999, we must
# initialize them by placing them half way between the first
# and the last.
# Initialize the size if zero
# Get offset from x, y
# First, clear a rectangle for the text IF there is any
# Now draw the text
# Get offset from x, y
# Want to take the middle section for the label
# Find middle of this line
# Find centre point
# Get absolute positions of ends
# Look at label regions in case mouse is over a label
# Offset region from default label position
# For inaccurate mousing allow 8 pixel corridor
# Distance along line of each arrow: space them out evenly
# If specified, x offset is proportional to line length
# Position of start point of line, at the end of which we draw the arrow
# If we're using a proportional offset, calculate just where this
# will be on the line.
# If we're using a proportional offset, calculate just where this
# will be on the line.
# Choose a point half way between the last and penultimate points
# If we're using a proportional offset, calculate just where this
# will be on the line.
# Add yOffset to arrow, if any
# The translation that the y offset may give
#                             |(x4, y4)
#                             |d
#                             |
#   (x1, y1)--------------(x3, y3)------------------(x2, y2)
#   x4 = x3 - d * math.sin(theta)
#   y4 = y3 + d * math.cos(theta)
#
#   Where theta = math.tan(-1) of (y3-y1) / (x3-x1)
# Negate so +offset is above line
# Find point on line of centre of circle, which is a radius away
# from the end position
# Find point on line of centre of object, which is a half-width away
# from the end position
#
#                 width
#  <-- start pos  <-----><-- positionOnLineX
#                 _____
#  --------------|  x  | <-- e.g. rectangular arrowhead
#                 -----
#
# Calculate theta for rotating the metafile.
#
# |
# |     o(x2, y2)   'o' represents the arrowhead.
# |    /
# |   /
# |  /theta
# | /(x1, y1)
# |______________________
#
# Rotate about the centre of the object, then place
# the object on the line.
# If erasing, just draw a rectangle
# Make erasing rectangle slightly bigger or you get droppings
# Undraw text regions
# Undraw line
# Drawing over the line only seems to work if the line has a thickness
# of 1.
# For a node image of interest, finds the position of this arc
# amongst all the arcs which are attached to THIS SIDE of the node image,
# and the number of same.
# Find number of lines going into / out of this particular attachment point
# This is the nth line attached to 'image'
# Increment num count if this is the same side (attachment number)
# This is the nth line attached to 'image'
# Increment num count if this is the same side (attachment number)
# Move temporary label rectangles if necessary
# Do each end - nothing in the middle. User has to move other points
# manually if necessary
# pi: The first time we go through FindLineEndPoints we can't
# use the middle points (since they don't have sane values),
# so we just do what we do for a normal line. Then we call
# Initialise to set the middle points, and then FindLineEndPoints
# again, but this time (and from now on) we use the middle
# points to calculate the end points.
# This was buggy in the C++ version too.
# Do a second time, because one may depend on the other
# Try to move control points with the arc
# Only move control points if it's a self link. And only works
# if attachment mode is ON
# Do each end - nothing in the middle. User has to move other points
# manually if necessary.
# pi: If we have a segmented line and this is the first time,
# do this as a straight line.
# Not incoming
# Incoming
# For some reason, last point isn't drawn under Windows
# Problem with pen - if not a solid pen, does strange things
# to the arrowhead. So make (get) a new pen that's solid.
# Draw temporary label rectangles if necessary
# Erase temporary label rectangles if necessary
# Control points ('handles') redirect control to the actual shape, to
# make it easier to override sizing behaviour.
# Redraw start and end objects because we've left holes
# when erasing the line
# Move the control point back to where it was;
# MoveControlPoint will move it to the new position
# if it decides it wants. We only moved the position
# during user feedback so we could redraw the line
# as it changed shape.
# This is called only when a non-end control point is moved
# Add arrowhead at a particular position in the arrowhead list
# First check whether we need to insert in front of list,
# because this arrowhead is the first in the reference
# list and should therefore be first in the current list.
# Matching: advance current arrow pointer
# Check if we're at the correct position in the
# reference list
# Calculate the minimum width a line
# occupies, for the purposes of drawing lines in tools.
# We have ABSOLUTE minimum now. So
# scale it to give it reasonable aesthetics
# when drawing with line.
# Find distances from centre, start and end. The smallest wins
# Must be END of line, so we want (n - 1)th control point.
# But indexing ends at n-1, so subtract 2.
# Find position in line's region list
# Set the region's offset, relative to the default position for
# each region.
# Need to reformat to fit region
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
# Name:         oglmisc.py
# Purpose:      Miscellaneous OGL support functions
#
# Author:       Pierre Hjälm (from C++ original by Julian Smart)
#
# Created:      2004-05-08
# Copyright:    (c) 2004 Pierre Hjälm - 1998 Julian Smart
# Licence:      wxWindows license
# Tags:         phoenix-port, unittest, py3-port, documented
#----------------------------------------------------------------------------
# Control point types
# Rectangle and most other shapes
# Line
# Types of formatting: can be combined in a bit list
# Left justification
# Centre horizontally
# Centre vertically
# Resize shape to contents
# Attachment modes
# Shadow mode
# Sub-modes for branching attachment mode
# logical function to use when drawing rubberband boxes, etc.
# Types of arrowhead
# (i) Built-in
# (ii) Custom
# Position of arrow on line
# Line alignment flags
# Vertical by default
# was defined in canvas and in composit
# Now, make a list of strings which can fit in the box
# FORCE NEW LINE
# Don't fit within the bounding box if we're fitting
# shape to contents
# Deal with first word being wider than box
# First, get maximum dimensions of box enclosing text
# Store text extents for speed
# +1 to allow for rounding errors
# Check for parallel lines
# Check for intersection
# Now must check that other line hits
# Do last (implicit) line if last and first doubles are not identical
# Do last (implicit) line if last and first doubles are not identical
# Check that x2 != x3
# Calculate the x and y coordinates of the point where arc intersects ellipse
# In this case the line intersects the ellipse, so calculate intersection
# in this case, arc does not intersect ellipse, so just draw arc
# Name:         buttonpanel.py
# Package:      wx.lib.pdfviewer
#
# Purpose:      A button panel class for pdf viewer
#
# Author:       David Hughes     dfh@forestfield.co.uk
# Copyright:    Forestfield Software Ltd
# Licence:      Same as wxPython host
# History:      Created 26 Jun 2009
#
# Tags:         phoenix-port, documented
#
#----------------------------------------------------------------------------
# reference to viewer is set by their common parent
# string value and client data
#light slate
# white smoke
# not used
# used?
# save last good value
# selection from list
# combo text
# ignore percent sign
# numeric value
# valid text?
# will send update to set zoomtext
# restore last good value
#----------------------------------------------------------------------
# This file was generated by ./encode_bitmaps.py
#
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:         viewer.py
# Package:      wx.lib.pdfviewer
#
# Purpose:      A PDF report viewer class
#
# Author:       David Hughes     dfh@forestfield.co.uk
# Copyright:    Forestfield Software Ltd
# Licence:      Same as wxPython host
# History:      Created 17 Jun 2009
#
#               08 Oct 2011, Michael Hipp    michael@redmule.com
#               Added prompt, printer_name, orientation options to
#               pdfViewer.Print(). Added option to pdfViewer.LoadFile() to
#               accept a file-like object as well as a path string
#
# Tags:         phoenix-port, documented, unittest
#
#----------------------------------------------------------------------------
# see http://pythonhosted.org/PyMuPDF - documentation & installation
# see http://pythonhosted.org/PyPDF2
# New PageObject method added by Forestfield Software
# Inject this method into the PageObject class
# If reportlab is installed, use its stringWidth metric. For justifying text,
# where widths are cumulative, dc.GetTextExtent consistently underestimates,
# possibly because it returns integer rather than float.
#----------------------------------------------------------------------------
# recommended in wxWidgets docs
# reference to panel is set by their common parent
# fit page to screen width
# nominal inter-page gap (points)
# pixels per scrollbar increment
# in case buffer now smaller than visible window
#----------------------------------------------------------------------------
# This section defines the externally callable methods:
# LoadFile, Save, Print, SetZoom, and GoPage
# also the getter and setter for ShowLoadProgress
# that is only applicable if using PyPDF2
# a filename/path string, save its name
# remove comment from next line to test using a file-like object
# pdf_file = create_fileobject(pdf_file)
# in case this is a re-LoadFile
# to get initial visible page range
# draw and display the minimal set of pages
# now draw full set of pages
# PrintData does not return actual PrintQuality - it can't as printer_name not known
# but it defaults to wx.PRINT_QUALITY_HIGH, overriding user's own setting for the
# printer. However calling SetQuality with a value of 0 seems to leave the printer
# setting untouched
# calling GoPage now will trigger rendering at the new size but the page location
# will be calculated based on the old zoom scale - so save the required page number
# and call GoPage again *after* rendering at the new size
# calling Scroll sometimes doesn't raise wx.EVT_SCROLLWIN eg Windows 8 64 bit - so
#----------------------------------------------------------------------------
# This section is concerned with rendering a sub-set of drawing commands on demand
# pixels per inch/points per inch
# for Windows only with wx.GraphicsContext the rendered font size is too big
# in the ratio of screen pixels per inch to points per inch
# and font metrics are too big in the same ratio for both for Cairo and wx.GC
# fit width
# fit page
# adjust inter-page gap so Ypagepixels is a whole number of scroll increments
# and page numbers change precisely on a scroll click
# Inform buttonpanel controls of any changes
# via external setting
# page range unchanged? whole visible area will always be inside page buffer
# due to page buffer change
# Initialize the buffer bitmap.
# must persist
# Cairo/wx.GraphicsContext API
# white background
# scaling is done inside RenderPage
# Show inter-page gap
#mid grey
# Blit appropriate area of new or existing page buffer to screen
# ensure we stay on the same page after zoom scale is changed
#mid grey
#============================================================================
# a filename/path string, pass the name to fitz.open
# assume it is a file-like object, pass the stream content to fitz.open
# and a '.pdf' extension in pathname to identify the stream type
# not positioned at start
#set if memory errors during render
# MUST be keyword arg(s)
# report once only
#============================================================================
# These methods interpret the PDF contents as a set of drawing commands
# state is reset with every new page
# scale font if requested by printer DC
# reset font scaling in case RenderPage call is repeated
# remove the leading '/'
# new transformation matrix
# some operands need inverting because directions of y axis
# in pdf and graphics context are opposite
# save state
# restore state
# Stroke RGB
# Fill RGB
# Stroke CMYK
# Fill CMYK
# Line width
# Line cap
# Line join
# Line dash pattern
# path defining ops
# path drawing ops
# begin text object
# end text object
# text matrix
# text leading
#elif operator == 'Tc':     # character spacing
#    g.charSpacing = float(operand[0])
# word spacing
# super/subscript
# next line via offsets
# next line via leading
# text font
# show text
# invoke named XObject
# may be unimplemented decode
# special pyPdf case + operand is a dict
# may be unimplemented decode
# report once
# Fix bitmap transform. Move the scaling from any transform matrix that precedes
# a DrawBitmap operation into the op itself - the width and height extracted from
# the bitmap is the size of the original PDF image not the size it is to be drawn
# y position
# width
# height
# dummy dc for text extents
# use ReportLab stringWidth if available
# update current x position
# close path
# move (to) current point
# draw line
# draw rectangle
# draw Bezier curve
# insert contents into current page drawing
# extract if not already done
# push state & apply matrix
# add form contents
# restore original state
# may be unimplemented
# may be unimplemented
# any error
#----------------------------------------------------------------------------
# used for both shapes & text
#------------------------------------------------------------------------------
# zero based
# pixels per inch/ppi
# Name:          __init__.py
# Package:      wx.lib.pdfviewer
#
# Purpose:      A PDF file viewer
#
# Author:       David Hughes     dfh@forestfield.co.uk
# Copyright:    Forestfield Software Ltd
# Licence:      Same as wxPython host
# History:      Created 17 Aug 2009
#
# Tags:         phoenix-port, documented
#
#----------------------------------------------------------------------------
# introduce buttonpanel and viewer to each other
# version-specific site-packages
# -*- coding: utf-8 -*-
# pylint: disable=E1101, C0330, C0103
#   E1101: Module X has no Y member
#   C0330: Wrong continued indentation
#   C0103: Invalid attribute/variable/method name
# Standard Library
# Third-Party
# Package
# Create some mouse events for zooming
# scrollbar events
# set curser as cross-hairs
# Things for printing
# scrollbar variables
# Zooming variables
# left mouse down corner
# left mouse up corner
# Drawing Variables
# Initial Plot Options
# Fonts
# pointLabels
# (NOT src) XOR dst
# wx.EQUIV not supported on Mac OS X
# OnSize called to make sure the buffer is initialized.
# This might result in OnSize getting called twice on some
# platforms at initialization, but little harm done.
# sets the initial size based on client size
# Default Pens
### Pen Properties
# SaveFile
# Save a Windows bitmap file.
# Save an X bitmap file.
# Save an XPM bitmap file.
# Save a JPG file.
# Save a PNG file.
# implicit str concat
# FileDialog exists: Check for extension
# FileDialog doesn't exist: just check one
# exit without saving
# Save Bitmap
# updates page parameters from dialog
# updates print_data
# search up tree to find frame instance
# no change, so don't do anything
# TODO: Rename Bottomleft-TopRight, Bottomright-Topleft
# XXX: why not `if not isinstance(value, bool):`?
# will erase existing pointLabel if present
# TODO: this conflicts with enableXAxisLabel and enableYAxisLabel
# reset pointLabel
# reset pointLabel
# reset pointLabel
# min, max points of graphics
# in user units
# min, max points of graphics
# check Axis is either tuple or none
# check case for axis = (a,b) where a==b caused by improper zooms
# sets new dc and clears it
# XXX: Yucky.
# high precision: each logical unit is 1/20 of a point
# on Linux, we need to correct the font size by a certain
# factor if wx.GCDC is used, to make text the same size as
# if wx.GCDC weren't used
# dc.Clear()
# set font size for every thing but title and legend
# sizes axis to axis type, create lower left and upper right
# corners of plot
# One or both axis not specified in Draw
# min, max points of graphics
# in user units
# Adjust bounding box for axis spec
# lower left corner user scale (xmin,ymin)
# upper right corner user scale (xmax,ymax)
# Both axis specified in Draw
# lower left corner user scale (xmin,ymin)
# upper right corner user scale (xmax,ymax)
# saves most recent values
# Get ticks and textExtents for axis if required
# No text for ticks
# w h of x axis text last number on axis
# make sure we have enough room to display SI notation.
# TextExtents for Title and Axis Labels
# TextExtents for Legend
# room around graph area
# use larger of number width or legend width
# make plot area smaller by text size
# shift plot area by this amount
# Draw the labels (title, axes labels)
# drawing legend makers and text
# allow for scaling and shifting plotted points
# make available for mouse events
# thicken up lines and markers if printing
# set clipping area so drawing does not occur outside axis box
# allow graph to overlap axis lines by adding units to w and h
# Draw the lines and markers
#        start = _time.perf_counter()
#        time_str = "entire graphics drawing took: {} seconds"
#        print(time_str.format(_time.perf_counter() - start))
# remove the clipping region
# reset pointLabel
# reset maker
# no graph available
# check there are points in the curve
# go to next obj
#[curveNum, legend, closest pt index, pointXY, scaledXY, dist]
# closest points on screen based on screen scaling (pointScaled=True)
# no graph present
# find one with least distance
# Min dist
# index for min dist
# this is the closest point on closest curve
# compare pointXY
# closest changed
# erase old
# plot new
# just plot new with no erase
# plot new
# save for next erase
# event handlers **********************************
# TODO: some of these event handlers can be modified
#       Meaning: only bind the event if the item is enabled. Disable
#       the event when the item is disabled.
#
#       Example::
#
#           if self._zoomEnabled:
#               self.Bind(stuff)
#           else:
#               self.UnBind(stuff)   # or equivalent
#
#           def OnZoom(self, event):
#               # process zoom event.
#
#       What this change would do is remove most of the if statements
#       within these event handlers.
# remove old
# add new
# remove old
# reset flag
# reset pointLabel
# else: # A box has not been drawn, zoom in on a point
# this interfered with the double click, so I've disables it.
#    X,Y = self._getXY(event)
#    self.Zoom( (X,Y), (self._zoomInFactor,self._zoomInFactor) )
# Give a little time for the click to be totally finished
# before (possibly) removing the scrollbars and trigering
# size events, etc.
# All that is needed here is to draw the buffer to screen
# erase old
# The Buffer init is done here, to make sure the buffer is always
# the same size as the Window
# Make new offscreen bitmap: this bitmap will always have the
# current drawing in it, so it can be used to save the image to
# a file, or whatever.
# reset pointLabel
# erase old
# Private Methods **************************************************
# high precision
# high precision
# line thickness on printer is very thin at 600 dot/in. Markers small
# custom user pointLabel func
# this will erase if called twice
# top right hand corner of graph box is ref corner
# border space between legend sym and graph box
# 1.1 used as space between lines
# draw marker with legend
# draw line with legend
# draw legend txt
# reset
# TextExtents for Title and Axis Labels
# find max symbol size
# find max legend text extent
# padding .1 for lhs of legend box and space between lines
# draw rectangle
# Linux speed up to get font from cache rather than X font server
# yeah! cache hit
# convert to screen coords
# make height and width positive
# Upper left corner
# Lower right corner
#        elif type(spec) == type(()):
# increases thickness for printing only
# TODO: add option for ticks to extend outside of graph
#       - done via negative ticklength values?
#           + works but the axes values cut off the ticks.
# increases thickness for printing only
# lengthen lines for printing
# I don't like this :-/
# increases thickness for printing only
# increases thickness for printing only
# get the tick lengths so that labels don't overlap
# only care about negative (out of plot area) tick lengths.
# TODO: More code duplication? Same as _drawGrid and _drawTicks?
# TODO: update the bounding boxes when adding right and top values
# get the tick lengths so that labels don't overlap
# only care about negative (out of plot area) tick lengths.
# TODO: axes values get big when this is turned off
# bug fix for Linux
#lower,upper = map(np.log10,[lower,upper])
# print('logticks',lower,upper)
# horizontal scrollbar
# vertical scrollbar
# -*- coding: utf-8 -*-
# pylint: disable=E1101, C0330, C0103
#   E1101: Module X has no Y member
#   C0330: Wrong continued indentation
#   C0103: Invalid attribute/variable/method name
# Standard Library
# Third-Party
# Package
# TODO: Implement symmetric log scale
# TODO: Implement symmetric log scale threshold
# need the copy
# TODO: get rid of the
# need for copy
# work on X:
# TODO: implement symLogScale
# Should symLogScale override absScale? My vote is no.
# Should symLogScale override logScale? My vote is yes.
#   - symLogScale could be a parameter passed to logScale...
# work on Y:
# TODO: implement symLogScale
# no curves to draw
# defaults to (-1,-1) and (1,1) but axis can be set in Draw
# no curves to draw
# TODO: Can we remove the if statement alltogether? Does
#       scaleAndShift ever get called when the current value equals
#       the new value?
# cast everything to list: some might be np.ndarray objects
# update point scaling
# else unchanged use the current scaling
# Using screen coords
# Using user coords
# determine distance for each point
# sqrt(dx^2+dy^2)
# bugfix for Mac OS X
# draw legend line
# Straight line between points.
# Up/down to next Y, then right to next X
# Right to next X, then up/down to Y
# need 3 lines between points: right -> up/down -> right
# need 3 lines between points: up/down -> right -> up/down
# draw legend line
# bugfix for Mac OS X
# draw legend marker
# Scale the points to the plot area
# Convert to (left, top, width, height) for drawing
# X (left)
# Y (top)
# Width
# Height
# left, top
# right, bottom
# use a single width for all bars
# use a separate width for each bar
# invalid attribute type
# draw legend line
# define the bins and center x locations
# left, top
# right, bottom
# draw legend line
# Set various attributes
# Determine the X position and create a 1d dataset.
# Calculate the box plot points and the outliers
# Create a jitter for the outliers
# Init the parent class
# clean out NaN and infinity values.
# combine the outliers with the box plot data
# Use screen coords
# Using user coords
# determine distnace for each point
# sqrt(dx^2+dy^2)
# TODO: does this need to be updated?
# median after box
# We draw it as one line and then hide the middle part with
# the IQR rectangle
# left, top
# right, bottom
# Scale it to the plot area
# rectangles are drawn (left, top, width, height) so adjust
# X (left)
# Y (top)
# Width
# Height
# Set the pen
# Scale the data for plotting
# Draw the outliers
# XXX: error checking done by PolyPoints class
#        if not isinstance(logscale, tuple) and len(logscale) != 2:
#            raise TypeError("logscale must be a 2-tuple of bools")
# XXX: error checking done by PolyPoints class
#        if not isinstance(absscale, tuple) and len(absscale) != 2:
#            raise TypeError("absscale must be a 2-tuple of bools")
#            t=_time.perf_counter()          # profile info
#            print(o, "time=", _time.perf_counter()-t)
# -------------------------------------------------------------------------
# Used to layout the printer page
# Do not change method names in this class,
# we have to override wx.Printout methods here!
# disable page numbers
# allows using floats for certain functions
#        print("PPI Printer",self.GetPPIPrinter())
#        print("PPI Screen", self.GetPPIScreen())
#        print("DC GetSize", dc.GetSize())
#        print("GetPageSizePixels", self.GetPageSizePixels())
# Note PPIScreen does not give the correct number
# Calulate everything for printer and then scale for preview
# printer dots/inch (w,h)
# PPIScreen= self.GetPPIScreen()          # screen dots/inch (w,h)
# DC size
# high precision - each logical unit is 1/20 of a point
# page size in terms of pixcels
# find what the margins are (mm)
# calculate offset and scale for dc
# mm*(dots/in)/(mm/in)
# ratio offset and scale to screen size if preview
# rescale plot to page or preview plot area
# Set offset and scale
# Thicken up pens and increase marker size for printing
# tickens up pens for printing
# rescale back to original
# to get point label scale and shift correct
# -*- coding: utf-8 -*-
# pylint: disable=E1101, C0330, C0103
#   E1101: Module X has no Y member
#   C0330: Wrong continued indentation
#   C0103: Invalid attribute/variable/method name
# Standard Library
# Third Party
# TODO: Do I want to replace with __slots__?
#       Not much memory gain because this class is only called a small
#       number of times, but it would remove the need for part of
#       __setattr__...
# for now, just return the str representation
# TODO: replace with wx.DCPenChanger/wx.DCBrushChanger, etc.
#       Alternatively, replace those with this function...
# Using as a method decorator:
# same as @TempStyle('both')
# dc must be 1st arg (beside self)
# edit pen and brush here
# Or as a context manager:
# do stuff
# fake the 'with' block. This solves:
# 1.  plots only being shown on 2nd menu selection in demo
# 2.  self.dc compalaining about not having a super called when
#     trying to get or set the pen/brush values in __enter__ and
#     __exit__:
#         RuntimeError: super-class __init__() of type
#         BufferedDC was never called
#import copy                    # copy solves issue #1 above, but
#self.dc = copy.copy(dc)        # possibly causes issue #2.
#with self:
#    print('in with')
#    func(instance, dc, *args, **kwargs)
# True means exceptions *are* suppressed.
# TODO: for 2-tuple, do not change other sides? rather than set to False.
# turns on or off all axes
# -*- coding: utf-8 -*-
# pylint: disable=C0413
#   C0413: Import should be placed at the top of the module
# For those who still use ``from package import *`` for some reason
# Expose items so that the old API can still be used.
# Old: import wx.lib.plot as wxplot
# New: from wx.lib import plot as wxplot
# For backwards compat.
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# pylint: disable=E1101, C0330, C0103
#   E1101: Module X has no Y member
#   C0330: Wrong continued indentation
#   C0103: Invalid attribute/variable/method name
# Third Party
# Needs NumPy
# ---------------------------------------------------------------------------
### Drawing Functions
# ---------------------------------------------------------------------------
# 100 points sin function, plotted as green circles
# 50 points cos function, plotted as red line and markers
# A few more points...
# 100 points sin function, plotted as green dots
# 25 points cos function, plotted as red dot-dash with steps.
# data points for the 25pt cos function.
# A few more points...
# Points
# Line
# Bins can also be arbitrary widths:
# ---------------------------------------------------------------------------
### Demo Application
# ---------------------------------------------------------------------------
# -----------------------------------------------------------------------
### UI Initialization
# -----------------------------------------------------------------------
# Now Create the menu bar and items
# A status bar to tell people what's happening
# define the function for drawing pointLabels
#        self.client.SetPointLabelFunc(self.DrawPointLabel)
# Create mouse event for showing cursor coords in status bar
# Show closest point when enabled
### SubMenu for Grid
### SubMenu for Axes
# -----------------------------------------------------------------------
### Event Handling
# -----------------------------------------------------------------------
# allows plotCanvas OnMouseLeftDown to be called
# show closest point (when enbled)
# make up dict with info for the pointLabel
# I've decided to mark the closest point on the closest curve
# returns [] if none
# make up dictionary to pass to my user function (see
# DrawPointLabel)
# pass dict to update the pointLabel
# go to next handler
# -----------------------------------------------------------------------
### PlotDraw Events
# -----------------------------------------------------------------------
# profile
#        start = _time.perf_counter()
# for x in range(10):
# self.client.Draw(drawObj)
##        print("10x of Draw4 took: %f sec."%(_time.perf_counter() - start))
# profile end
# make the axis X= (0,5), Y=(0,10)
# (default with None is X= (-1,1), Y= (-1,1))
# self.client.SetEnableLegend(True)   #turn on Legend
# self.client.SetEnableGrid(True)     #turn on Grid
# -----------------------------------------------------------------------
### Other Events
# -----------------------------------------------------------------------
#CCCCCC")
# -----------------------------------------------------------------------
### Enable Grid Events
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
### Enable Axes Events
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
### Enable Ticks Events
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
### Enable AxesValues Events
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
### Other Enable Events
# -----------------------------------------------------------------------
# scaled x,y of closest point
# 10by10 square centered on point
# make a string to display
# %i, '%s', Pt. (%.2f,%.2f), PtInd %i" % (
# -*- coding: utf-8 -*-
# Third Party
# Generate some Data
# most items require data as a list of (x, y) pairs:
#    [[1x, y1], [x2, y2], [x3, y3], ..., [xn, yn]]
# Create your Poly object(s).
# Use keyword args to set display properties.
# Color: olive
# create your graphics object
# create your canvas
# Edit panel-wide settings
# draw the graphics object on the canvas
#print `policies.msgProtocolTransStage`, `policies.msgDataProtocol`, \
#      `policies.senderKwargNameAny`, `policies.msgDataArgName`
#print 'override "arg1" protocol arg name:', argName
#: major API version
# DO NOT CHANGE: automatically updated by VCS
# listener stuff:
# topic stuff:
# topioc defn provider stuff
# publisher stuff:
# misc:
# --------- Publisher singleton and bound methods ------------------------------------
# ---------- default TopicManager instance and bound methods ------------------------
#---------------------------------------------------------------------------
# Copyright (c) 2010-2013 Benjamin Peterson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# Useful for very coarse version differentiation.
# Jython always uses 32 bits.
# It's possible to have sizeof(long) != sizeof(Py_ssize_t).
# 32-bit
# 64-bit
# This is a bit ugly, but it avoids running this again.
# This is about 2x faster than the implementation above on 3.2+
## your listener wants topic name ## (string unlikely to be used by caller)'
# must be a functor (instance of a class that has __call__ method)
#print 'Function', getID(callable_)
#print 'Method', getID(callable_)
# Method is bound, don't care about the self arg
#print 'Functor', getID(callable_)
# don't care about the self arg
#args, firstArgIdx, defaultVals, acceptsAllKwargs=False):
#args, firstArgIdx, defaultVals, acceptsAllKwargs
# does nothing if firstArgIdx == 0
# if listener wants topic, remove that arg from args/defaultVals
#del self.defaults[indx]
# figure out what is the actual function object to inspect:
# Since we may exit via an exception, close fp explicitly.
# set call policies
# save identity now in case callable dies:
#
# only last four digits of id
# then rhs is not a Listener, compare with c1
# both side of == are Listener, but always compare unequal if both dead
# ignore all other arg settings, and set all of them to true:
# how many args in this method
#1 during app development, and once stable, use
#2. This is easiest to do in combination with
# unsubscribe all listeners from all topics
# specification not given
# all args specified
# check that all args marked as required are in argsDocs
# py3: iter keys ok
# iter keys ok
# name of method in class name assumed to represent topic's listener signature
# which will get checked against topic's Message Data Specification (MDS)
# ok get the info from class
# assume definition is implicitly that listener has no args
# iterator is now out of sync, so reset it; obviously this would
# screw up getNextTopic which is why we had to test for self.__iterStarted
# make sure to update rootTopics BEFORE we recurse, so that toplevel
# topics come first in the list
# we only keep track of topics that are documented, so that
# multiple providers can co-exist without having to duplicate
# information
# now can find its subtopics
# ignore special and non-public methods
# hyphen and any number of blanks
# remove the temporary module and its compiled version (*.pyc)
# py3.2+ uses special folder/filename for .pyc files
# will instantiate SomeNewImporter(source)
# End of topic tree definition. Note that application may load
# more than one definitions provider.
# create exporter
##############################################################
#INDENT_CH = '.'
# True when last topic done was the ALL_TOPICS
# - %s: %s' % (argName, argVal)
# Automatically generated by %s(**kwargs).' % self.__class__.__name__,
# The kwargs were:',
# two empty line after comment
# accept every topic
# output comment
# '
# output header:
# don't print root of tree, it is the ALL_TOPICS builtin topic
# empty line
# topic name
# each extra content (assume constructor verified that chars are valid)
# generate the message data specification
# print it only if there are args; ie if listener() don't print it
# output a blank line and protocol
# and finally, the args docs
# but ignore the arg keys that are in parent args docs:
# keys iter ok
# ---------------------------------------------------------
# ---------------------------------------------------------
# Allowed return values for isTopicSpecified()
# false
# all other values equate to "true" but different reason
# root of topic tree
# registry of all topics
# define root of all topics
#if not name:
#    raise TopicNameError(name, 'Empty topic name not allowed')
# NOT FOUND! Determine what problem is and raise accordingly:
# find the closest parent up chain that does exists:
# assume no topics exist
# but a topic definition provider has been added via 
# pub.addTopicDefnProvider() and has definition for topics 'a' and 'a.b'
# creates topic a and a.b; both will have MDS from the defn provider:
# creates topic c.d with MDS based on proto; creates c without an MDS
# since no proto for it, nor defn provider:
# if object is not sendable but a proto listener was given,
# update its specification so that it is sendable
# create missing parents
# now the final topic object, args from listener if provided
# POLICY: protoListener is used only if no definition available
# in already existing Topic object:
# from provider?
# find from which parent the topic object should be removed
#obj = weakref( self._topicsMap[dottedName] )
#assert obj().getName() == dottedName
# notification must be before deletion in case
#obj()._undefineSelf_(self._topicsMap)
#assert obj() is None
# will create subtopics of parentObj one by one from subtopicNames
# sanity checks:
# store new object and notify of creation
#%s'
#%s'
#%s'
# Registered listeners were originally kept in a Python list; however 
# a few methods require lookup of the Listener for the given callable, 
# which is an O(n) operation. A set() could have been more suitable but
# there is no way of retrieving an element from a set without iterating 
# over the set, again an O(n) operation. A dict() is ok too. Because 
# Listener.__eq__(callable) returns true if the Listener instance wraps
# the given callable, and because Listener.__hash__ produces the hash 
# value of the wrapped callable, calling dict[callable] on a 
# dict(Listener -> Listener) mapping will be O(1) in most cases: 
# the dict will take the callables hash, find the list of Listeners that 
# have that hash, and then iterate over that inner list to find the 
# Listener instance which satisfies Listener == callable, and will return
# the Listener. 
# specification:
# now that we know the args are fine, we can link to parent
# for root of tree, this method never called!
# discard the lower part of the stack trace
# if no check of args yet, do it now:
# notify of subscription
# notify of unsubscription
# send notification regarding all listeners actually unsubscribed
#############################################################
#
# Impementation
#
#############################################################
# send to ourself
# send up the chain
# done for this topic, continue up branch to parent towards root
# now send message data to each listener for current topic;
# use list of listeners rather than iterator, so that if listeners added/removed during
# send loop, no runtime exception:
# if exception handling is on, handle, otherwise re-raise
# try handling the exception so we can continue the send:
#print 'exception raised', exc
# must make sure can adopt a validator
#print 'Remove %s listeners (%s)' % (self.getName(), self.getNumListeners())
#print 'Unlinking %s from parent' % subObj.getName()
# notify:
# marker functor
# put subtopics in list in alphabetical order
# this puts them in reverse order
# marker functor
# topic name can't start with this
# just want something unlikely to clash with user's topic names
#%s ("%s") has invalid characters' % \
# assume name is most often str; if more often tuple, 
# then better use isinstance(name, tuple)
# assume already tuple of strings
# for function and method parameter counting:
# for weakly bound methods:
# add appropriate subdir for protocol-specific implementation
# accept **kwargs
# accept *args
# accept any keyword args
#assert not paramsInfo.acceptsAllUnnamedArgs
# verify at most one required arg
# if no required args but listener has *args, then we
# don't care about anything else:
# if no policy set, any name ok; otherwise validate name:
# don't care if topic not final: topicObj.getListeners()
# will return nothing if not final but notification will still work
############## IMPLEMENTATION ###############
# no args given
# all args, but not confirmed via user spec
# list of topic message optional argument names
# list of topic message required argument names
# if allKwargs is None then use kwargs
# accept **kwargs
# accept *args
# check if listener missing params (only possible if
# paramsInfo.acceptsAllKwargs is False)
# then can accept that some parameters missing from listener 
# signature
# check if there are unknown parameters in listener signature:
# we accept listener that has fewer required paams than TMS
# since all args passed by name (previous showed that spec met
# for all parameters).
# now make sure listener doesn't require params that are optional in TMS:
#print 'Using protocol', Publisher
############## IMPLEMENTATION ###############
# do a first check that all args are there, costly so only do once
### Exceptions raised during check() from sendMessage()
# no args given
# all args, but not confirmed via user spec
# topic message optional arg names
# doc for each arg
# topic message required arg names
# check that it has all required args
# check that all other args are among the optional spec
# only keep the keys from msgKwargs that are also in topic's kwargs
# method 1: SLOWEST
#newKwargs = dict( (k,msgKwargs[k]) for k in self.__msgArgs.allOptional if k in msgKwargs )
#newKwargs.update( (k,msgKwargs[k]) for k in self.__msgArgs.allRequired )
# method 2: FAST:
#argNames = self.__msgArgs.getArgs()
#newKwargs = dict( (key, val) for (key, val) in msgKwargs.iteritems() if key in argNames )
# method 3: FASTEST:
# dereference weakref
# verify that our spec is compatible with parent's
# validate relative to parent arg spec
# verify that parent args is a subset of spec given:
# doc for each arg
# notify our children
# for the traceback, skip the first 3 entries, since they relate to
# implementation details for pubsub.
# help avoid circular refs
# name of the topic
# iter keys ok
# or:
# or:
# or:
# check that we haven't run out of integers!
# a bug apparently: sometimes on exit, the stream gets closed before
# and leads to a TypeError involving NoneType
# optional
# used to guard against infinite loop
# see if the special topics have already been defined
# no, so create them
# must NOT change
# output for name of 'all topics' topic
# topic name
# each extra content (assume constructor verified that chars are valid)
# topic description
# topic kwargs
#required, optional, complete = topicObj.getArgs()
# iter in 3, list in 2 ok
# for Python 2.4, must use cElementTree:
# dict_keys iter in 3, list in 2
# pubsub way of getting known_args
# there is probably a cleaner way to do this
## http://infix.se/2007/02/06/gentlemen-indent-your-xml
#----------------------------------------------------------------------
# Name:        wx_cairocffi
# Purpose:     wx.lib.wxcairo implementation functions for cairocffi
#
# Author:      Robin Dunn
#
# Created:     19-July-2016
# Copyright:   (c) 2016-2018 by Total Control Software
# Licence:     wxWindows license
#
# Tags:        phoenix-port, py3-port
#----------------------------------------------------------------------
# On Windows try to get cairocffi to import the Cairo DLLs included with
# wxPython instead of the first ones found on the system's PATH. Otherwise, if
# CAIRO is set in the environment then use that one instead.  This hack is
# accomplished by temporarily altering the PATH and then restoring it after
# cairocffi has initialized.
# Make it so subsequent `import cairo` statements still work as if it
# was really PyCairo
# Now restore the original PATH
#----------------------------------------------------------------------------
# convenience functions, just to save a bit of typing below
#----------------------------------------------------------------------------
# use the CGContextRef of the DC to make the cairo surface
# Now create a cairo context for that surface
# Similarly, get the HDC and create a surface from it
# Now create a cairo context for that surface
# With wxGTK3, GetHandle() returns a cairo context directly
# Get the GdkDrawable from the dc
# Call a GDK API to create a cairo context
# Turn it into a Cairo context object
#----------------------------------------------------------------------------
# wow, this is a hell of a lot of steps...
#----------------------------------------------------------------------------
# GTK platforms we need to load some other shared libraries to help us get
# from wx objects to cairo objects.  This is using ctypes mainly because it
# was already working this way in wx_pycairo.py and so it required fewer brain
# cells to be sacrificed to port it to this module.
#
# TODO: consider moving this code to use cffi instead, for consistency.
#----------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx_pycairo
# Purpose:     wx.lib.wxcairo implementation functions for PyCairo
#
# Author:      Robin Dunn
#
# Created:     3-Sept-2008
# Copyright:   (c) 2008-2018 by Total Control Software
# Licence:     wxWindows license
#
# Tags:        phoenix-port, py3-port
#----------------------------------------------------------------------
#----------------------------------------------------------------------------
# A reference to the cairo shared lib via ctypes.CDLL
# A reference to the pycairo C API structure
# a convenience function, just to save a bit of typing below
#----------------------------------------------------------------------------
# use the CGContextRef of the DC to make the cairo surface
# create a cairo context for that surface
# Turn it into a pycairo context object
# The context keeps its own reference to the surface
# This one is easy, just fetch the HDC and use PyCairo to make
# the surface and context.
# Ensure the pointer value is clampped into the range of a C signed long
# With wxGTK3, GetHandle() returns a cairo context directly
# pyCairo will try to destroy it so we need to increase ref count
# Get the GdkDrawable from the dc
# Call a GDK API to create a cairo context
# Turn it into a pycairo context object
#----------------------------------------------------------------------------
# wow, this is a hell of a lot of steps...
#----------------------------------------------------------------------------
# Only implementation helpers after this point
#----------------------------------------------------------------------------
# first look using just the base name
# if that didn't work then use the ctypes util to search the paths
# appropriate for the system
# If the above didn't find it on OS X then we still have a
# trick up our sleeve...
# look at the libs linked to by the pycairo extension module
#----------------------------------------------------------------------------
# For other DLLs we'll just use a dictionary to track them, as there
# probably isn't any need to use them outside of this module.
#----------------------------------------------------------------------------
# PyCairo exports a C API in a structure via a PyCObject.  Using
# ctypes will let us use that API from Python too.  We'll use it to
# convert a C pointer value to pycairo objects.  The information about
# this API structure is gleaned from pycairo.h.
# This structure is known good with pycairo 1.6.4
# This structure is known good with pycairo 1.8.4.
# We have to also test for (1,10,8) because pycairo 1.8.10 has an
# incorrect version_info value
#** new in 1.8.4
#** changed in 1.8.4
# This structure is known good with pycairo 1.10.0. They keep adding stuff
# to the middle of the structure instead of only adding to the end!
#** changed in 1.8.4
#** new
#** new
# This structure is known good with pycairo 1.11.1+.
#** changed in 1.8.4
#** new
#** new
#----------------------------------------------------------------------------
# Load these at import time.  That seems a bit better than doing it at
# first use...
#----------------------------------------------------------------------------
#----------------------------------------------------------------------
# Name:        wx.lib.wxcairo
# Purpose:     Glue code to allow either the PyCairo package or the
#              cairocffi package to be used with a wx.DC as the cairo
#              surface.
#
# Author:      Robin Dunn
#
# Created:     3-Sept-2008
# Copyright:   (c) 2008-2018 by Total Control Software
# Licence:     wxWindows license
#
# Tags:        phoenix-port, py3-port
#----------------------------------------------------------------------
#----------------------------------------------------------------------------
# Import our glue functions for either cairocffi or pycairo, depending on
# which is installed.
# Use cairocffi first if it is available
# otherwise use pycairo
# or provide some exception raising stubs instead
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# wxBitmap <--> ImageSurface
#----------------------------------------------------------------------------
# XXX This should really make sure filedir is first item in syspath.
# XXX Or maybe this should be moved to the update namespace method.
# To create the proper context for updateNamespace.
# XXX Get filename
#                return False
#                return False
# No problems, so update the namespace.
# Turn off the tab-traversal style that is automatically
# turned on by wx.SplitterWindow.  We do this because on
# Windows the event for Ctrl-Enter is stolen and used as a
# navigation key, but the Shell window uses it to insert lines.
# Add 'filling' to the interpreter's locals.
# Add 'pp' (pretty print) to the interpreter's locals.
# Initialize in an unsplit mode, and check later after loading
# settings if we should split or not.
# Make the splitter expand the top window when resized
# Configure various defaults and user preferences.
# TODO: Switch this to a editwindow.EditWindow
## self.SetValue(calltip)  # Caused refresh problem on Windows.
# TODO: Switch this to a editwindow.EditWindow
# preload the existing history, if any
# Override the filling so that status messages go to the status bar.
# Override the shell so that status messages go to the status bar.
# Turn off the tab-traversal style that is automatically
# turned on by wx.SplitterWindow.  We do this because on
# Windows the event for Ctrl-Enter is stolen and used as a
# navigation key, but the SlicesShell window uses it to insert lines.
# Add 'filling' to the interpreter's locals.
# Add 'pp' (pretty print) to the interpreter's locals.
# Initialize in an unsplit mode, and check later after loading
# settings if we should split or not.
# Override the filling so that status messages go to the status bar.
# Override the shell so that status messages go to the status bar.
# Stolen Straight from editor.EditorFrame
# Modified a little... :)
# ||
# \/
#event.Veto()
#self.bufferCreate()
##     def bufferPrint(self):
##         """Print buffer."""
##         pass
##     def bufferRevert(self):
##         """Revert buffer to version of file on disk."""
##         pass
# was self.buffer.save(self): # """Save buffer."""
# XXX Get filename
# self.buffer.save()
# allow overwrite
# if not os.path.exists(result.path):
# Allow overwrite...
# Keep track of senders for cleanup.
# Skip objects that can not be weakly referenced, which means
# they won't be automatically cleaned up, but that's too bad.
# Get receivers that receive *this* signal from *this* sender.
# Add receivers that receive *any* signal from *this* sender.
# Add receivers that receive *this* signal from *any* sender.
# Add receivers that receive *any* signal from *any* sender.
# Call each receiver with whatever arguments it can accept.
# Return a list of tuple pairs [(receiver, response), ... ].
# Dereference the weak reference.
# This receiver is dead, so skip it.
##    if type(receiver) is types.InstanceType:
# receiver is a class instance; assume it is callable.
# Reassign receiver to the actual method that will be called.
# receiver is a method. Drop the first argument, usually 'self'.
# receiver is a function.
# fc does not have a **kwds type parameter, therefore
# remove unacceptable arguments.
# Turn a bound method into a BoundMethodWeakref instance.
# Keep track of these instances for lookup by disconnect().
# wxPython hack to handle wxDead objects.
##                 _removeReceiver(receiver=self)
# No more connected receivers. Therefore, remove the signal.
# No more signal connections. Therefore, remove the sender.
# Senderkey will only be in senders dictionary if sender
# could be weakly referenced.
# Convert from unicode to bytes
#----------------------------------------------------------------------
# Name:        editor.py
# Author:      Patrick K. O'Brien <pobrien@orbtech.com>
# Tags:        phoenix-port
#----------------------------------------------------------------------
# Current buffer.
##         suffix = ' **'
##         notebook = self.notebook
##         selection = notebook.GetSelection()
##         if selection == -1:
##             return
##         text = notebook.GetPageText(selection)
##         window = notebook.GetPage(selection)
##         if window.editor and window.editor.buffer.hasChanged():
##             if text.endswith(suffix):
##                 pass
##             else:
##                 notebook.SetPageText(selection, text + suffix)
##         else:
##             if text.endswith(suffix):
##                 notebook.SetPageText(selection, text[:len(suffix)])
##     def bufferPrint(self):
##         """Print buffer."""
##         pass
##     def bufferRevert(self):
##         """Revert buffer to version of file on disk."""
##         pass
# Override the filling so that status messages go to the status bar.
# Override the shell so that status messages go to the status bar.
# Fix a problem with the sash shrinking to nothing.
##         title = self.GetTitle()
##         if self.bufferHasChanged():
##             if title.startswith('* '):
##                 pass
##             else:
##                 self.SetTitle('* ' + title)
##         else:
##             if title.startswith('* '):
##                 self.SetTitle(title[2:])
##         print("Destroy Selection:", selection)
# Don't destroy the PyCrust tab.
# Do this before DeletePage().
# Needed on Win98.
# Do this before DeletePage().
##             print("Destroy Selection:", selection)
# Setup sizers
# Assign handlers for keyboard events.
# Usually the dot (period) key activates auto completion.
# The left paren activates a call tip and cancels an
# active auto completion.
# Allow the normal event handling to take place.
# If the auto-complete window is up let it do its thing.
# Let Ctrl-Alt-* get handled normally.
# Increase font size.
# Decrease font size.
# Default font size.
# In case there isn't enough room, only go back to the
# fallback.
#FFFFFF',
#FFFFB8',
#404040',
#FFFFFF',
#FFFFB8',
#404040',
#FFFFFF',
#FFFFB8',
#404040',
# GTK1, etc.
#FFFFFF',
#FFFFB8',
#404040',
# Do we want to automatically pop up command completion options?
# Do we want to automatically pop up command argument help?
# Leave a small margin so the feature hidden lines marker can be seen
# Default style
# Built in styles
#C0C0C0,face:%(mono)s,size:%(lnsize)d" % FACES)
#0000FF,back:#FFFF88")
#FF0000,back:#FFFF88")
# Python styles
#007F00,face:%(mono)s" % faces)
#7F007F,face:%(mono)s" % faces)
#7F007F,face:%(mono)s" % faces)
#00007F,bold")
#7F0000")
#000033,back:#FFFFE8")
#0000FF,bold")
#007F7F,bold")
#7F7F7F")
#000000,face:%(mono)s,back:#E0C0E0,eolfilled" % faces)
# If the auto-complete window is up let it do its thing.
# Check before.
# Check after.
#self.EnsureVisible(line)
# Changed to reflect the fact that StyledTextControl is in UTF-8 encoding
# if it wasn't found then restart at begining
# was it still not found?
# show and select the found text
# Tags: py3-port
#del t
# Method-wrapper in version 2.2.x.
#        self.SelectItem(item)
#        self.CollapseAndReset(item)
#        self.DeleteChildren(item)
#        self.SelectItem(item)
# Believe it or not, some attributes can disappear,
# such as the exc_traceback attribute of the sys
# module. So this is nested in a try block.
# Show string dictionary items with single quotes, except
# for the first level of items, if they represent a
# namespace.
# Windows bug fix.
# Apply dictionary syntax to dictionary items, except the root
# and first level children of a namepace.
# Apply dot syntax to multipart names.
# Repeat for everything but the root item
# and first level children of a namespace.
# This method will likely be replaced by the enclosing app to
# do something more interesting, like write to a text control.
# This method will likely be replaced by the enclosing app to
# do something more interesting, like write to a status bar.
# Configure various defaults and user preferences.
# Override the filling so that descriptions go to FillingText.
# Display the root item.
#this is important: do not evaluate this event=> otherwise,
# splitterwindow behaves strangely
#event.Skip()
# Override so that status messages go to the status bar.
# File Menu
# Edit
# View
# Options
# This menu option is not supported in the current context.
# If autocomplete active, cancel it.  Otherwise, the
# autocomplete list will stay visible on top of the
# z-order after switching to another application
# TODO: track position/size so we can save it even if the
# frame is maximized or iconized.
# We need this one before we have a chance to load the settings...
# always save these
# the shell buffers can always be saved
## This isn't working currently...
##         d = wx.MessageDialog(self,u'Save source code only?\n' + \
##              'Answering yes will only save lines starting with >>> and ...',
##            u'Question', wx.YES_NO | wx.ICON_QUESTION)
##         yes_no = d.ShowModal()
##         if yes_no == wx.ID_YES:
##             m = re.findall('^[>\.]{3,3} (.*)\r', text, re.MULTILINE | re.LOCALE)
##             text = '\n'.join(m)
##         d.Destroy()
# Use newline=None to translate \n \r \r\n to \n on read.  The
# old-style mode='U' is deprecated.
#\x97\xddCUk\xf4B\x8d3\x9f\x8d\x9a\x9bU%\xe2~b\xab\xdf\x82\
#+<j\x17m{\xcd\x9bj\x00.\xaf\xf0Xb\xb8\xdfA\xa6\x14\x18\x03\x06\
#\
#\x0eV,\xc0?\x00\
#_\x04\xa3\
##\xf8\xfc\r\
#|\x1fC\xb8\\\n@&\n\x89$<\xfa5\xb8u\x07\x9e\xa9\x00-\x0f\x16,\x98\xfdx\x9e\
#x\xe6\xd3\xc8\xe5\
#\x1a\x05\xe1\x9c(\xa9\xbf9\x9f$\xdf\xe3\
#\x1a7\x01\
#\x9d\
#jI\xec\xb8M\xcb\
#0\xbe\xe4LM\xe7\xea\xbe_\x80\x9cb"<\xa8\xa3\x04\x05>\xf3\x99)\x9b;\xc8\x8bG\
#g\xa7\
#Gx\xab\xb9\x8d\xb2%N\xb6>[Ns\xc3V\x8c\xc3=\x02\xc0\xe5\x9bP\xfa\
#\x8ab\xbc\xd1\xb44222\xc8\xcc\
#\xbd\xb9\xd2p\x81\xa2\x8e-}A\x90E\xb0\rZY\xf7j\
#Z%D!\x81<\x8b\x8d\x81\
#\xe1\xc4"\xe1V\xaep\x13-\xae\
#\xa6WWW\xc7\xb5}\
#\x06\x14\xccvb\xce\xcf\x86*Okl\xe0\xd6r\x99=\xadJ,\
#\x04Y\x88<\x14@\xd2$\xeeC\xe6\xad\
#\x00<\xbd\xa9b\xec\xfbpQ)\x1dg\xda\xd8RU\x8d,\xcb\
# List of lists to support recursive push().
# In case the command is unicode try encoding it
# otherwise leave it alone
# If an ast code module is passed, pass it to runModule instead
# this was a cute idea, but didn't work...
#more = self.runcode(compile(source,'',
#               ('exec' if self.useExecMode else 'single')))
# If sys.std* is still what we set it to, then restore it.
# But, if the executed source changed sys.std*, assume it was
# meant to be changed and leave it. Power to the people.
# If sys.std* is still what we set it to, then restore it.
# But, if the executed source changed sys.std*, assume it was
# meant to be changed and leave it. Power to the people.
# Get the proper chunk of code from the command.
# Add some attributes that don't always get picked up.
# Special code to allow traits to be caught by autocomplete
# Get all attribute names.
# Store the obj's dir.
# This complexity is necessary to avoid accessing all the
# attributes of the obj.  This is very handy for objects
# whose attributes are lazily evaluated.
# Remove duplicates from the attribute list.
# new-style swig wrappings can result in non-string attributes
# e.g. ITK http://www.itk.org/
# (object, technique, count): [list of attributes]
# !!!
# Do Not use hasattr() as a test anywhere in this function,
# because it is unreliable with remote objects: xmlrpc, soap, etc.
# They always return true for hasattr().
# !!!
# This could(?) fail if the type is poorly defined without
# even a name.
# Wake up sleepy objects - a hack for ZODB objects in "ghost" state.
# Get attributes available through the normal convention.
# Get attributes from the object's dictionary, if it has one.
# Must catch all because object might have __getattr__.
# For a class instance, get the attributes for the class.
# Must catch all because object might have __getattr__.
# Break a circular reference. This happens with extension
# classes.
# Also get attributes from any and all parent classes.
# Must catch all because object might have __getattr__.
# Break a circular reference. Happens in Python 2.2.
# object name, argspec, tip text.
# Get the proper chunk of code from the command.
# Builtin functions don't have an argspec that we can get.
# tip1 is a string like: "getCallTip(command='', locals=None)"
# The first parameter to a method is a reference to an
# instance, usually coded as "self", and is usually passed
# automatically by Python; therefore we want to drop it.
# No other arguments.
# first param is like *args, not self
# Drop the first argument.
# tip2 is the first separated line of the docstring, like:
# "Return call tip text for a command."
# tip3 is the rest of the docstring, like:
# "The call tip information will be based on ... <snip>
# Remove the end marker.
# Remove newline.
# Trap decimals in numbers, versus the dot operator.
# Strip off the terminator.
# We've reached something that's not part of the root.
# If it doesn't have a space after it, remove the prefix.
# The prefix isn't valid because it comes after a dot.
# start represents the last known good point in the line.
# Remember, we're working backwords.
# So prefix += tokenstring would be wrong.
# We've already got an empty type identified so now we
# are in a nested situation and we can break out with
# what we've got.
# We've reached something that's not part of the root.
# Empty types are safe to be eval()'d and introspected.
# In case the command is unicode try encoding it
# otherwise leave it alone
# tokens is a list of token tuples, each looking like:
# (type, string, (srow, scol), (erow, ecol), line)
# Can't use list comprehension:
#   tokens = [token for token in tokenize.generate_tokens(f.readline)]
# because of need to append as much as possible before TokenError.
# This is due to a premature EOF, which we expect since we are
# feeding in fragments of Python code.
# Builtin functions don't have an argspec that we can get.
# Get the function from the object otherwise
# inspect.getargspec() complains that the object isn't a
# Python function.
# This is an unbound method so we do not drop self
# from the argspec, since an instance must be passed
# as the first arg.
# Get the __init__ method function for the class.
# Get the __call__ method instead.
#----------------------------------------------------------------------
# Name:        magic.py
# Author:      David N. Mashburn <david.n.mashburn@gmail.com>
# Created:     07/01/2009
# Tags:        phoenix-port
#----------------------------------------------------------------------
# created 07/01/2009
#DNM
# TODO : Still Refining this... seems to be ok for now... still finding gotchas, though!
# TODO : Multi-line strings seem to be correctly broken into commands by PyCrust(PySlices)
# TODO : Is there a better version of ls, cd, pwd, etc that could be used?
# Pass if command is blank
# Pass if command begins with a space
# Do help if starts with ?
# Use os.system if starts with !
# automatically use ls and pwd with no arguments
# when using the 'ls ' or 'cd ' constructs, fill in both parentheses and quotes
#print('Not enough arguments for alias!')
# if there is at least one space, add parentheses at beginning and end
# add parentheses where the first space was and at the end... hooray!
# Error case...
# unless this is in a larger expression, use magic
#----------------------------------------------------------------------
# Name:        parse.py
# Author:      David N. Mashburn <david.n.mashburn@gmail.com>
# Created:     12/20/2009
# Tags:        phoenix-port
#----------------------------------------------------------------------
# created 12/20/2009
# change this to testForContinuations
# For \ continuations ... False because cannot start as line Continuation...
# first, check for non-executing lines (whitespace and/or comments only)
#':
# otherwise, check the indentation...
# This is the end of an indentation block
#print('Invalid Indentation!!')
#''',l)
#': # If it is a legitimate comment, ignore everything after
# get length up to last non-comment character
#print('Invalid Syntax!!')
# Now stringContinuationList (et al) is line by line key for magic
# telling it whether or not each next line is part of a string continuation
#print('Incomplete Syntax!!')
#print('Incomplete Indentation!')
# Note that if one of these errors above gets thrown, the best solution is to pass the resulting block
# to the interpreter as exec instead of interp
# 07/01/2009
# This prints the results of running a command in the GUI shell but be warned!
# This is a blocking call, and if you open any kind of interactive
# command-line program like python or bash, the shell will permanantly
# freeze!
# If you want this kind of behavior to be available, please use ipython
# This is NOT a feature or goal of the Py project!
#cd('~',usePrint=False)
#!/usr/bin/env python
#!/usr/bin/env python
#!/usr/bin/env python
#!/usr/bin/env python
# The next two lines, and the other code below that makes use of
# ``__main__`` and ``original``, serve the purpose of cleaning up the
# main namespace to look as much as possible like the regular Python
# shell environment.
#!/usr/bin/env python
# Cleanup the main namespace, leaving the App class.
# Create an application instance.
# Mimic the contents of the standard Python shell's sys.path.
# Add the application object to the sys module's namespace.
# This allows a shell user to do:
# >>> import sys
# >>> sys.app.whatever
# Cleanup the main namespace some more.
# Start the wxPython event loop.
#!/usr/bin/env python
# We use this object to get more introspection when run standalone.
# These are imported just to have something interesting to inspect.
#!/usr/bin/env python
# The next two lines, and the other code below that makes use of
# ``__main__`` and ``original``, serve the purpose of cleaning up the
# main namespace to look as much as possible like the regular Python
# shell environment.
#!/usr/bin/env python
# Cleanup the main namespace, leaving the App class.
# Create an application instance.
# Cleanup the main namespace some more.
# Mimic the contents of the standard Python shell's sys.path.
# Add the application object to the sys module's namespace.
# This allows a shell user to do:
# >>> import sys
# >>> sys.app.whatever
# Start the wxPython event loop.
#!/usr/bin/env python
# The next two lines, and the other code below that makes use of
# ``__main__`` and ``original``, serve the purpose of cleaning up the
# main namespace to look as much as possible like the regular Python
# shell environment.
##        self.frame.startupFileName = os.path.join(confDir,'pycrust_startup')
##        self.frame.historyFileName = os.path.join(confDir,'pycrust_history')
#!/usr/bin/env python
# Cleanup the main namespace, leaving the App class.
# Create an application instance.
# Mimic the contents of the standard Python shell's sys.path.
# Add the application object to the sys module's namespace.
# This allows a shell user to do:
# >>> import sys
# >>> sys.app.whatever
# Cleanup the main namespace some more.
# Start the wxPython event loop.
#!/usr/bin/env python
# The next two lines, and the other code below that makes use of
# ``__main__`` and ``original``, serve the purpose of cleaning up the
# main namespace to look as much as possible like the regular Python
# shell environment.
#!/usr/bin/env python
# Cleanup the main namespace, leaving the App class.
# Create an application instance.
# Cleanup the main namespace some more.
# Mimic the contents of the standard Python shell's sys.path.
# Add the application object to the sys module's namespace.
# This allows a shell user to do:
# >>> import sys
# >>> sys.app.whatever
# Start the wxPython event loop.
#!/usr/bin/env python
#----------------------------------------------------------------------
# Name:        PyWrap.py
# Purpose:     PyWrap is a command line utility that runs a wxPython program with
#              additional runtime-tools, such as PyCrust.
# Tags:        phoenix-port
#----------------------------------------------------------------------
# Find the App class.
# Input prompt.
# Force updates from long-running commands after this many seconds
# Override the shell so that status messages go to the status bar.
# This isn't working the way I want, but I'll leave it for now.
#DNM
# Grab these so they can be restored by self.redirect* methods.
# Import a default interpreter class if one isn't provided.
# Create a replacement for stdin.
# Set up the interpreter.
# Set up the buffer.
# Find out for which keycodes the interpreter will autocomplete.
# Keep track of the last non-continuation prompt positions.
# Keep track of multi-line commands.
# For use with forced updates during long-running scripts
# Create the command history.  Commands are added into the
# front of the list (ie. at index 0) as they are entered.
# self.historyIndex is the current position in the history; it
# gets incremented as you retrieve the previous command,
# decremented as you retrieve the next, and reset when you hit
# Enter.  self.historyIndex == -1 means you're on the current
# command, not in the history.
#seb add mode for "free edit"
# marker for hidden
# Assign handlers for keyboard events.
# Assign handler for the context menu
# add the option to not use the stock IDs; otherwise the context menu
# may not work on Mac without adding the proper IDs to the menu bar
# Assign handlers for edit events
# Assign handler for idle time.
# Display the introductory banner information.
# Assign some pseudo keywords to the interpreter's namespace.
# Add 'shell' to the interpreter's local namespace.
## NOTE:  See note at bottom of this file...
## #seb: File drag and drop
## self.SetDropTarget( FileDropTarget(self) )
# Do this last so the user has complete control over their
# environment.  They can override anything they want.
# XXX Good enough for now but later we want to send a close event.
# In the close event handler we can make sure they want to
# quit.  Other applications, like PythonCard, may choose to
# hide rather than quit so we should just post the event and
# let the surrounding app decide what it wants to do.
#DNM
# Prevent modification of previously submitted
# commands/responses.
# Return (Enter) needs to be ignored in this handler.
# Usually the dot (period) key activates auto completion.
# Get the command between the prompt and the cursor.  Add
# the autocomplete character to the end of the command.
# The left paren activates a call tip and cancels an
# active auto completion.
# Get the command between the prompt and the cursor.  Add
# the '(' to the end of the command.
# Allow the normal event handling to take place.
# If the auto-complete window is up let it do its thing.
# Prevent modification of previously submitted
# commands/responses.
# li stayed visible as header-line
# select reappearing text to allow "hide again"
# never hide last prompt
# to ensure caret stays visible !
#seb
# self.promptPosStart not used anyway - or ?
#make sure we have a prompt
#default
#default
#steady
# Return (Enter) is used to submit a command to the
# interpreter.
# Complete Text (from already typed words)
# Ctrl+Return (Ctrl+Enter) is used to insert a line break.
# Let Ctrl-Alt-* get handled normally.
# Clear the current, unexecuted command.
# Clear the current command
# Increase font size.
# Decrease font size.
# Default font size.
# Cut to the clipboard.
# Copy to the clipboard.
# Copy to the clipboard, including prompts.
# Copy to the clipboard, including prefixed prompts.
# Home needs to be aware of the prompt.
# Home needs to be aware of the prompt.
#self.SetCurrentPos(home)
#
# The following handlers modify text, so we need to see if
# there is a selection that includes text prior to the prompt.
#
# Don't modify a selection with text prior to the prompt.
# Paste from the clipboard.
# manually invoke AutoComplete and Calltips
# Paste from the clipboard, run commands.
# Replace with the previous command from the history buffer.
# Replace with the next command from the history buffer.
# Insert the previous command from the history buffer.
# Insert the next command from the history buffer.
# Search up the history for the text in front of the cursor.
# Don't backspace over the latest non-continuation prompt.
# Only allow these keys after the latest prompt.
# Don't toggle between insert mode and overwrite mode.
# Don't allow line deletion.
# TODO : Allow line deletion eventually...
#event.Skip()
# Don't allow line transposition.
# TODO : Allow line transposition eventually...
# TODO : Will have to adjust markers accordingly and test if allowed...
#event.Skip()
# Basic navigation keys should work anywhere.
# Protect the readonly portion of the shell.
#copy from history
#put together in one string
#sort out only "good" words
#length > 1 (mix out "trash")
#unique (no duplicate words
#oneliner from german python forum => unique list
#sort lowercase
#this is more convenient, isn't it?
#join again together in a string
#pos von 0 noch ausrechnen
#how big is the offset?
#the most important part
# The text up to the cursor is what we search for.
# Search upwards from the current history position and loop
# back to the beginning if we don't find anything.
# Replace the current selection with the one we found.
# We've now warped into middle of the history.
# This method will likely be replaced by the enclosing app to
# do something more interesting, like write to a status bar.
# The user hit ENTER and we need to decide what to do. They
# could be sitting on any line in the shell.
# If they hit RETURN inside the current command, execute the
# command.
# Match the behavior of the standard Python shell
# when the user hits return without entering a
# value.
# Or replace the current command with the other command.
# If the line contains a command (even an invalid one).
# Otherwise, put the cursor back where we started.
# XXX Need to extract real prompts here. Need to keep track of
# the prompt every time a command is issued.
# This is a total hack job, but it works.
# Strip the prompt off the front leaving just the command.
# Real commands have prompts.
# Strip the prompt off the front of text.
#DNM
# Reset the history position.
# Insert this command into the history, unless it's a blank
# line or the same as the last command.
# Keep the undo feature from undoing previous responses.
# Get the first alnum word:
# because it is all whitespace!
# In case of Unicode.
# Go to the very bottom of the text.
# Run shell methods silently.
#offset = 0
# In case there isn't enough room, only go back to the
# fallback.
#go back until '.' is found
#word from non whitespace until '.'
#look backward for first whitespace char
#call AutoComplete
#call CallTips
#insert calltip, if current pos is '(', otherwise show it only
# If we are pasting from something like a
# web page that drops the trailing space
# from the ps2 prompt of a blank line.
# New command.
# Add the previous command to the list.
# Start a new command, which may be multiline.
# Multiline command. Add to the command.
## NOTE: The DnD of file names is disabled until we can figure out how
## best to still allow DnD of text.
## #seb : File drag and drop
## class FileDropTarget(wx.FileDropTarget):
##     def __init__(self, obj):
##         wx.FileDropTarget.__init__(self)
##         self.obj = obj
##     def OnDropFiles(self, x, y, filenames):
##         if len(filenames) == 1:
##             txt = 'r\"%s\"' % filenames[0]
##         else:
##             txt = '( '
##             for f in filenames:
##                 txt += 'r\"%s\" , ' % f
##             txt += ')'
##         self.obj.AppendText(txt)
##         pos = self.obj.GetCurrentPos()
##         self.obj.SetCurrentPos( pos )
##         self.obj.SetSelection( pos, pos )
## class TextAndFileDropTarget(wx.DropTarget):
##     def __init__(self, shell):
##         wx.DropTarget.__init__(self)
##         self.shell = shell
##         self.compdo = wx.DataObjectComposite()
##         self.textdo = wx.TextDataObject()
##         self.filedo = wx.FileDataObject()
##         self.compdo.Add(self.textdo)
##         self.compdo.Add(self.filedo, True)
##         self.SetDataObject(self.compdo)
##     def OnDrop(self, x, y):
##         return True
##     def OnData(self, x, y, result):
##         self.GetData()
##         if self.textdo.GetTextLength() > 1:
##             text = self.textdo.GetText()
##             # *** Do somethign with the dragged text here...
##             self.textdo.SetText('')
##         else:
##             filenames = str(self.filename.GetFilenames())
##             if len(filenames) == 1:
##                 txt = 'r\"%s\"' % filenames[0]
##             else:
##                 txt = '( '
##                 for f in filenames:
##                     txt += 'r\"%s\" , ' % f
##                 txt += ')'
##             self.shell.AppendText(txt)
##             pos = self.shell.GetCurrentPos()
##             self.shell.SetCurrentPos( pos )
##             self.shell.SetSelection( pos, pos )
##         return result
#----------------------------------------------------------------------
# Name:        sliceshell.py
# Author:      David N. Mashburn, Patrick K. O'Brien
# Tags:        phoenix-port
#----------------------------------------------------------------------
# Input prompt.
# Force updates from long-running commands after this many seconds
# Could add C integration right into the markers...
# Non-editable file marker for auto-loaded files...
# Weave VariableInput = 15
# Weave C code = 16
# C code = 17 (only for use with Pyrex)
# Pyrex / Cython code = 18
#!/usr/bin/env python\n'
#PySlices Save Format Version 1.1 (PySlices v0.9.7.8 and later)\n',
#PySlices Save Format Version 1.2 (PySlices v0.9.8 and later)\n']
#PySlices Marker Information -- Begin Grouping Slice\n'
#PySlices Marker Information -- Begin Input Slice\n'
#PySlices Marker Information -- Begin Output Slice\n'
# Override the shell so that status messages go to the status bar.
# This isn't working the way I want, but I'll leave it for now.
#if self.sliceshell.waiting:
#    if event.CanVeto():
#        event.Veto(True)
#else:
#    # TODO: Add check for saving
#    self.SaveSettings()
#    self.sliceshell.destroy()
#    self.Destroy()
# Copied Straight from crustslices.py (update both with any changes...)
# Stolen Straight from editor.EditorFrame
# Modified a little... :)
# ||
# \/
#event.Veto()
#self.bufferCreate()
##     def bufferPrint(self):
##         """Print buffer."""
##         pass
##     def bufferRevert(self):
##         """Revert buffer to version of file on disk."""
##         pass
# was self.buffer.save(self): # """Save buffer."""
# XXX Get filename
# self.buffer.save()
# allow overwrite
# if not os.path.exists(result.path):
# Allow overwrite...
# TODO : Update the help text
# Grab these so they can be restored by self.redirect* methods.
# Import a default interpreter class if one isn't provided.
# Create a replacement for stdin.
# Set up the interpreter.
# Set up the buffer.
# Find out for which keycodes the interpreter will autocomplete.
# Keep track of the last non-continuation prompt positions.
# Removed all references to these... solved a lot of odd bugs...
# self.promptPosStart = 0
# self.promptPosEnd = 0
# Keep track of multi-line commands.
# Use Margins to track input / output / slice number
# For use with forced updates during long-running scripts
# margin 1 is already defined for the line numbers
#  may eventually change it back to 0 like it ought to be...
# tabs are bad, use spaces
# Display Markers -24...
# Set the mask for the line markers, too...
#E0E0E0"
# Markers for folding margin...
#808080")
#808080")
#808080")
#808080")
#808080")
#808080")
#808080")
# Create the command history.  Commands are added into the
# front of the list (ie. at index 0) as they are entered.
# self.historyIndex is the current position in the history; it
# gets incremented as you retrieve the previous command,
# decremented as you retrieve the next, and reset when you hit
# Enter.  self.historyIndex == -1 means you're on the current
# command, not in the history.
#DNM -- disable these markers...
#seb add mode for "free edit"
#self.MarkerDefine(0,stc.STC_MARK_ROUNDRECT)  # marker for hidden
# Assign handlers for keyboard events.
# TODO : Add a general functions to handle mouse clicks in the
# TODO:  STC window whose sole purpose is to make it so
# TODO:  that margin selection becomes unselected...
# Assign handler for the context menu
# add the option to not use the stock IDs; otherwise the context menu
# may not work on Mac without adding the proper IDs to the menu bar
# Assign handlers for edit events
# Assign handler for idle time.
# Display the introductory banner information.
# Make "executed startup script move to the top..."
# Assign some pseudo keywords to the interpreter's namespace.
# Add 'shell' to the interpreter's local namespace.
# Do this last so the user has complete control over their
# environment.  They can override anything they want.
# Set all the line markers to the proper initial states...
# Background color is confusing for tutorial... skip it!
#self.MarkerAdd(i,OUTPUT_BG)
#self.MarkerAdd(i,OUTPUT_BG)
#self.MarkerAdd(i,OUTPUT_BG)
## NOTE:  See note at bottom of this file...
## #seb: File drag and drop
## self.SetDropTarget( FileDropTarget(self) )
#ADD UNDO
# Everywhere "ADD UNDO" appears, there is new code to handle markers
# XXX Good enough for now but later we want to send a close event.
# In the close event handler we can make sure they want to
# quit.  Other applications, like PythonCard, may choose to
# hide rather than quit so we should just post the event and
# let the surrounding app decide what it wants to do.
#text = text.lstrip() # This should not be done!
# Error case...
# Get the first alnum word:
# Continue the command if it is blank, has indentation,
# starts with else, elif,except, or finally
# or previous line had a line continuation \
# Multiline command. Add to the command.
# New command.
# Add the previous command to the list.
# Start a new command, which may be multiline.
# the solo case...
# the solo case...
#print('Bad Markers!!!')
#print('Bad Markers!!!')
#print('You can only run "DeleteOutputSlicesAfter" from an Input slice!')
# Can't split one line!
# Warning: This is not good at checking for bad markers!
# Disallow deleting the first line or it will destroy the markers...
# Disallow deleting lines between slices...
# Disallow deleting lines between slices...
# Special case for use in processLine
# Disallow deleting lines between slices...
# Disallow deleting lines between slices...
# If everything went well, return True and do the delete...
# Disallow deleting the first line or it will destroy the markers...
# Disallow deleting lines between slices...
# Disallow deleting lines between slices...
# Disallow deleting lines between slices...
# Disallow deleting lines between slices...
#print('No Selection!!')
# collect the line numbers to be deleted...
# Unselect everything
# Going in reverse, delete the selections, fixing the markers as we go...
# If we've made a mess of the grouping markers, clean it up...
# Prevent modification of output slices
# Return (Enter) needs to be ignored in this handler.
# Usually the dot (period) key activates auto completion.
# Get the command between the prompt and the cursor.  Add
# the autocomplete character to the end of the command.
# write with undo wrapper...
#ADD UNDO
# The left paren activates a call tip and cancels an
# active auto completion.
# Get the command between the prompt and the cursor.  Add
# the '(' to the end of the command.
# write with undo wrapper...
# Allow the normal event handling to take place.
# Use undo wrapper
# If the auto-complete window is up let it do its thing.
#DNM
# Prevent modification of output slices
#seb
# self.promptPosStart not used anyway - or ?
##                # We don't need to do this any more!
##                self.promptPosEnd = self.PositionFromLine(self.GetLineCount()-1 ) +
##                                    len(str(sys.ps1))
##                self.GotoLine(self.GetLineCount())
##                self.GotoPos(self.promptPosEnd)
##                self.prompt()  #make sure we have a prompt
#default
#default
#steady
# Return is used to insert a line break.
# In Shell Mode, hit Return or Enter twice to submit a command
# all whitespace...
# Enter (Shift/Ctrl + Enter/Return) submits a command to the interpreter.
# In Shell Mode, hit Return or Enter twice to submit a command
#Only relevant in ShellMode...
#Only relevant in ShellMode...
# Let Ctrl-Alt-* get handled normally.
# Clear the current, unexecuted command.
# Clear the current command
# Increase font size.
# Decrease font size.
# Default font size.
# Cut to the clipboard.
# Copy to the clipboard.
# Copy to the clipboard, including prompts.
# Copy to the clipboard, including prefixed prompts.
# Home needs to be aware of the prompt.
# Go to the beginning of the IO Slice
# Paste from the clipboard.
# Paste from the clipboard, run commands.
# Replace with the previous command from the history buffer.
# Replace with the next command from the history buffer.
# Insert the previous command from the history buffer.
# Insert the next command from the history buffer.
# Ctrl-Space shows Auto Completion
# Ctrl-Shift-Space shows CallTips
# Ctrl+Shift+H is used to complete Text (from already typed words)
# Search up the history for the text in front of the cursor.
# Don't backspace over the latest non-continuation prompt.
#event.Skip()
#event.Skip()
# Only allow these keys after the latest prompt.
# use the same mechanism as with autocmplete...
# Don't toggle between insert mode and overwrite mode.
# Don't allow line deletion.
#elif controlDown and key in (ord('L'), ord('l')):
# TODO : Allow line deletion eventually ??
#event.Skip()
#    pass
# Don't allow line transposition.
# Toggle Shell Mode / Slices Mode
#Open and Save now work when using CrustSlicesFrames
#print('Load it')
#Disallow line duplication in favor of divide slices
#ADD UNDO
# Turn off selecting
#ADD UNDO
# Turn off selecting
# Change arrow keys to allow margin behaviors...
# TODO : This is useful, but not optimal!
#Grouping
#IO
#Grouping
#IO
# Go to the beginning of the IO Slice
# Basic navigation keys should work anywhere.
# Protect the readonly portion of the slices shell.
# Check to see if we're selecting
# Check to see if a normal input took place
# This seems to work...
# these events are not sent right now...
#print(start, end)
# TODO : Folding ??
#self.MarkerGet(lineClicked) & ( 1<<7 | 1<<8 ):
# fold and unfold as neededNAVKEYS
#copy from history
#put together in one string
#sort out only "good" words
#length > 1 (mix out "trash")
#unique (no duplicate words
#oneliner from german python forum => unique list
#sort lowercase
#this is more convenient, isn't it?
#join again together in a string
#pos von 0 noch ausrechnen
#how big is the offset?
#the most important part
#ADD UNDO
# + ps2)
# TODO: Fix Me!
# The text up to the cursor is what we search for.
#print('history search', startpos, numCharsAfterCursor, searchText)
# Search upwards from the current history position and loop
# back to the beginning if we don't find anything.
# Replace the current selection with the one we found.
# We've now warped into middle of the history.
# This method will likely be replaced by the enclosing app to
# do something more interesting, like write to a status bar.
# write with undo wrapper...
# The user hit ENTER (Shift+RETURN) (Shift+ENTER) and we need to
# decide what to do. They could be sitting on any line in the slices shell.
#print('BLANK LINE!!')
# If they hit ENTER inside the current command, execute the command.
# Match the behavior of the standard Python shell
# when the user hits return without entering a value.
#print('command: %s'%command)
# Not Used!!
# DNM
# XXX Need to extract real prompts here. Need to keep track of
# the prompt every time a command is issued.
# Add Marker testing here...
# Need to add markers handling...
# Strip the prompt off the front leaving just the command.
# Change this -- Nothing has prompts!
#if command == text:
#    command = ''  # Real commands have prompts.
# Strip the prompt off the front of text.
# TODO : What other magic might we insert here?
# TODO : Is there a good reason not to include magic?
# Allows multi-component commands...
# not sure how to easily recover this information...
# (the \n stops many things from bouncing at the interpreter)
# I could do the following, but I don't really like it!
#if useMultiCommand:
#    self.SplitSlice()
# could loop-add to history, too, but I don't like it!
# Reset the history position.
# Insert this command into the history, unless it's a blank
# line or the same as the last command.
#print('ERROR! NO GROUPING MARKERS!')
# Blank marker
#print('ERROR! NO IO MARKERS!')
# Blank marker
#self.MarkerAdd(0,OUTPUT_BG) # More harm than good??
#self.MarkerAdd(0,OUTPUT_BG) # More harm than good??
#1
#1
#2
#3
#4
#5
#6
#7
#8
#9
#2
#2
#3
#4
#3
#6
#7
#4
#1
#5
#5
#1
#2
#3
#4
#5
#6
#7
#8
#9
#6
#8
#9
#7
#1
#5
#8
#8
#9
#9
#1
#5
# FIX MARKER!!
# FIX ME
# This part handles all the marker stuff that accompanies
# adding or removing new lines of text...
# Get the total number of lines in the Document == last line number
# Get the line number we ended on in the write
# Get the number of returns we are using == number of lines we pasted -1
# So if num_new_lines==0, start_line_num and end_line_num are the same
# This is a little unnecessary because there will always
# be a line before if we just inserted a newline!
#However, this is very important...
# preparation for more io types...
# To test for bad writes...
# To test for bad writes...
#self.MarkerAdd(start_line_num,GROUPING_START_FOLDED)
# preparation for more io types...
# To test for bad writes...
# To test for bad writes...
#Do nothing if typing within a line...
# Update the Grouping Markers
# For the previous line and the start_line
# Test to make sure we can write ... but not here ...
#    test this before we call write or before we add text...
# So we assume it already obeys the rules
# This is an impossible case, here just for completeness...
# May be overwritten below if start_line_num==end_line_num...
# ensure previous_line only has one marker & turn end into middle
# Adjust previous line appropriately, ensure only one marker
# Only print errors if we are on input!
#if type=='Input' and not silent: print('BLANK LINE!' # BAD CASE)
# Make GROUPING slice continue unless we hit
#  an output end and are starting a new input...
# ONLY CHANGING CASE
# ONLY CHANGING CASE
# BAD CASE
#print('Should have been a bad marker!')
# We can only add input to an input slice
# And can only add output to an output slice
# This may be overwritten if start_line_num==end_line_num
# Take care of all the middle lines...
# Does nothing for only one line...
# Take care of the end_line if we haven't already done so...
#print('BLANK LINE!' # BAD CASE)
#print('BAD MARKERS!')
#print('BAD MARKERS!!!')
# Autoindent added!!!
# TODO : How much of this can I do away with now without prompts??
# Not needed anymore! # self.promptPosStart = self.GetCurrentPos()
# Not needed anymore! # self.promptPosEnd = self.GetCurrentPos()
# Clear the undo history after running a command.
#DNM/CP
# Autoindent magic
# Match the indent of the line above
# UNLESS the line above ends in a colon...then add four spaces
# (after valid keywords (if, else, etc...) only)
# because it is all whitespace!
#ADD UNDO
# Ensure that we get a new line and that it's got an input marker...
# Also need to temporarily block any other action...
# In case of Unicode.
# Go to the very bottom of the text.
# TODO : Will have to fix this to handle other kinds of errors mentioned before...
# Run shell methods silently.
#offset = 0
# write with undo history...
# In case there isn't enough room, only go back to the fallback.
#go back until '.' is found
#word from non whitespace until '.'
#look backward for first whitespace char
#call AutoComplete
#call CallTips
#insert calltip, if current pos is '(', otherwise show it only
# TODO : FLUSH?? How to make this update real-time...
# Take a spashot of the WHOLE grouping slice (or slices)
# The argument s is either what got added or deleted
# This is a continuation of the previous insert
# posStart cannot move
# This is a forward continuation of the previous delete
# This is a backward continuation of the previous delete
#print('Unsupported Action Type!!')
# remove actions after undoIndex
# Action type ('insert','delete','marker')
# Can action be joined with others?
# Character list
# Cursor poition at the start of the action
# Cursor position at the end of the action
# Start line number,
# Number of newlines involved
# Starting line for markers BEFORE action
# Starting line for markers AFTER action
# [markers BEFORE action]
# [markers AFTER action]
# Only update the before when starting a new action
# Update Marker Info
# s is either what got added or deleted
#ADD UNDO
#Skip undo if there are no actions...
# This will perform the opposite of the action given
# No text changed, don't pass to STC
#print('Unsupported actionType in undoHistory!!')
#ADD UNDO
# First check to see if there are any redo operations available
# Note that for redo, undoIndex=-1 is a valid input
# This will re-perform the given action
# No text changed, don't pass to STC
#print('Unsupported actionType in undoHistory!!')
#ADD UNDO
# TODO : This is still useful... Add it back other places?
#DNM--Don't use '... '
# + ps2)
# Makes paste -> type -> undo consistent with other STC apps
# Read the initial three (or four) lines that have version and marker information
# Add the option to place #!/usr/bin/env python at the top
# Write the file's text to the text area
# Capture Marker information to
# Delete the old ioStartTypes (keep the current copy for later use)
#print('Invalid Type!')
# Only delete markers we are totally finished with...
# Keep one more "StartTypes" than "StartLines"
#print('Invalid Type!')
#print('Invalid Type!')
# maybe not?
#')
# FIX ME!!
#self.SetCurrentPos(newpos)
#self.SetSelection(newpos,newpos)
## NOTE: The DnD of file names is disabled until we can figure out how
## best to still allow DnD of text.
## #seb : File drag and drop
## class FileDropTarget(wx.FileDropTarget):
##     def __init__(self, obj):
##         wx.FileDropTarget.__init__(self)
##         self.obj = obj
##     def OnDropFiles(self, x, y, filenames):
##         if len(filenames) == 1:
##             txt = 'r\"%s\"' % filenames[0]
##         else:
##             txt = '( '
##             for f in filenames:
##                 txt += 'r\"%s\" , ' % f
##             txt += ')'
##         self.obj.AppendText(txt)
##         pos = self.obj.GetCurrentPos()
##         self.obj.SetCurrentPos( pos )
##         self.obj.SetSelection( pos, pos )
## class TextAndFileDropTarget(wx.DropTarget):
##     def __init__(self, sliceshell):
##         wx.DropTarget.__init__(self)
##         self.sliceshell = sliceshell
##         self.compdo = wx.DataObjectComposite()
##         self.textdo = wx.TextDataObject()
##         self.filedo = wx.FileDataObject()
##         self.compdo.Add(self.textdo)
##         self.compdo.Add(self.filedo, True)
##         self.SetDataObject(self.compdo)
##     def OnDrop(self, x, y):
##         return True
##     def OnData(self, x, y, result):
##         self.GetData()
##         if self.textdo.GetTextLength() > 1:
##             text = self.textdo.GetText()
##             # *** Do somethign with the dragged text here...
##             self.textdo.SetText('')
##         else:
##             filenames = str(self.filename.GetFilenames())
##             if len(filenames) == 1:
##                 txt = 'r\"%s\"' % filenames[0]
##             else:
##                 txt = '( '
##                 for f in filenames:
##                     txt += 'r\"%s\" , ' % f
##                 txt += ')'
##             self.sliceshell.AppendText(txt)
##             pos = self.sliceshell.GetCurrentPos()
##             self.sliceshell.SetCurrentPos( pos )
##             self.sliceshell.SetSelection( pos, pos )
##         return result
#!/usr/bin/env python
#!/usr/bin/env python
#!/usr/bin/env python
## The original intent was to detect when we were inside a string.
## That has proven to be very difficult, for little benefit.
## The fact that autocomplete or calltips might be triggered inside
## a string is not a big deal. Sometimes it is even helpful.
##    def test_getRoot_InsideStrings(self):
##        values = (
##            ('x = ".', '.', ''),
##            ("x = '.", '.', ''),
##            ('x = """.', '.', ''),
##            ("x = '''.", '.', ''),
##
##            ('x = "(', '(', ''),
##            ("x = '(", '(', ''),
##            ('x = """(', '(', ''),
##            ("x = '''(", '(', ''),
##
##            ('x = "spam', '.', ''),
##            ('x = "spam.', '.', ''),
##            ("x = 'spam.", '.', ''),
##            ('x = """spam.', '.', ''),
##            ("x = '''spam.", '.', ''),
##
##            ('x = "spam', '(', ''),
##            ('x = "spam(', '(', ''),
##            ("x = 'spam(", '(', ''),
##            ('x = """spam(', '(', ''),
##            ("x = '''spam(", '(', ''),
##
##            ('x = "spam.eggs.', '.', ''),
##            ("x = 'spam.eggs.", '.', ''),
##            ('x = """spam.eggs.', '.', ''),
##            ("x = '''spam.eggs.", '.', ''),
##
##            ('x = "spam.eggs(', '(', ''),
##            ("x = 'spam.eggs(", '(', ''),
##            ('x = """spam.eggs(', '(', ''),
##            ("x = '''spam.eggs(", '(', ''),
##        )
##        for input, terminator, output in values:
##            self._checkRoot(input, terminator, output)
# Support for GetBaseObjectTestCase and GetAttributeNamesTestCase.
# It shouldn't matter what we call "self".
# Builtin function.
# Builtin method.
# User function.
# Lambda.
# Class with no init.
# Byte-compiled code.
# Class with init.
# Bound method.
# Bound method with self named something else (spam).
# Unbound method. (Do not drop the self argument.)
# Callable instance.
# Since getAllAttributeNames() calls str(object),
# we need to test for a broken __str__ method.
# Builtin function.
# Builtin method.
# User function.
# Lambda.
# Class with no init.
# Instance with no init.
# Class with init and del.
# Instance with init and del.
# Bound method.
# Unbound method.
# Callable instance.
# Module.
# Package.
# File.
# Slice.
# Ellipsis.
# BrokenStr class.
# BrokenStr instance.
# Byte-compiled code.
# Buffer.
# Builtin function.
# Builtin method.
# Support for GetConstructorTestCase.
# Test old style inheritance rules.
# Test new style inheritance rules as well.
#!/usr/bin/env python
#!/usr/bin/env python
/* Generated by Cython 0.29.13 */
/* BEGIN: Cython Metadata
/* Early includes */
/* _OPENMP */
/* Test for GCC > 2.95 */
/* !__GNUC__ or GCC < 2.95 */
/* __GNUC__ */
/*--- Type declarations ---*/
/* "wx/svg/_nanosvg.pyx":55
/* "wx/svg/_nanosvg.pyx":59
/* "wx/svg/_nanosvg.pyx":61
/* "wx/svg/_nanosvg.pyx":64
/* "wx/svg/_nanosvg.pyx":66
/* "wx/svg/_nanosvg.pyx":69
/* "wx/svg/_nanosvg.pyx":71
/* "wx/svg/_nanosvg.pyx":74
/* "wx/svg/_nanosvg.pyx":76
/* "wx/svg/_nanosvg.pyx":78
/* "wx/svg/_nanosvg.pyx":80
/* "wx/svg/_nanosvg.pyx":81
/* "wx/svg/_nanosvg.pyx":115
/* "wx/svg/_nanosvg.pyx":87
/* "wx/svg/_nanosvg.pyx":280
/* "wx/svg/_nanosvg.pyx":419
/* "wx/svg/_nanosvg.pyx":505
/* "wx/svg/_nanosvg.pyx":557
/* "wx/svg/_nanosvg.pyx":609
/* "wx/svg/_nanosvg.pyx":267
/* "wx/svg/_nanosvg.pyx":407
/* "wx/svg/_nanosvg.pyx":599
/* "EnumBase":15
/* "wx/svg/_nanosvg.pyx":87
/* "wx/svg/_nanosvg.pyx":280
/* "wx/svg/_nanosvg.pyx":419
/* "wx/svg/_nanosvg.pyx":505
/* "wx/svg/_nanosvg.pyx":557
/* "wx/svg/_nanosvg.pyx":609
/* --- Runtime support code (head) --- */
/* Refnanny.proto */
/* PyObjectGetAttrStr.proto */
/* GetBuiltinName.proto */
/* RaiseArgTupleInvalid.proto */
/* KeywordStringCheck.proto */
/* PyObjectCall.proto */
/* PyThreadStateGet.proto */
/* PyErrFetchRestore.proto */
/* RaiseException.proto */
/* PyCFunctionFastCall.proto */
/* PyFunctionFastCall.proto */
/* PyObjectCallMethO.proto */
/* PyObjectCallOneArg.proto */
/* PyObjectCallNoArg.proto */
/* RaiseDoubleKeywords.proto */
/* ParseKeywords.proto */
/* ArgTypeTest.proto */
/* PyDictVersioning.proto */
/* GetModuleGlobalName.proto */
/* UnpackUnboundCMethod.proto */
/* CallUnboundCMethod1.proto */
/* ExtTypeTest.proto */
/* PyObjectCall2Args.proto */
/* ListCompAppend.proto */
/* PyIntBinop.proto */
/* PyIntBinop.proto */
/* PyIntBinop.proto */
/* PyObjectSetAttrStr.proto */
/* GetItemInt.proto */
/* ObjectGetItem.proto */
/* PyErrExceptionMatches.proto */
/* GetAttr.proto */
/* GetAttr3.proto */
/* Import.proto */
/* ImportFrom.proto */
/* HasAttr.proto */
/* IncludeStringH.proto */
/* PyObject_GenericGetAttrNoDict.proto */
/* PyObject_GenericGetAttr.proto */
/* SetVTable.proto */
/* SetupReduce.proto */
/* PyIntCompare.proto */
/* ClassMethod.proto */
/* GetNameInClass.proto */
/* CalculateMetaclass.proto */
/* SetNameInClass.proto */
/* FetchCommonType.proto */
/* CythonFunction.proto */
/* Py3ClassCreate.proto */
/* Globals.proto */
/* CLineInTraceback.proto */
/* CodeObjectCache.proto */
/* AddTraceback.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* CIntFromPy.proto */
/* CIntFromPy.proto */
/* CIntFromPy.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* CIntToPy.proto */
/* FastTypeChecks.proto */
/* GetTopmostException.proto */
/* SaveResetException.proto */
/* SwapException.proto */
/* PyObjectGetMethod.proto */
/* PyObjectCallMethod1.proto */
/* CoroutineBase.proto */
/* PatchModuleWithCoroutine.proto */
/* PatchGeneratorABC.proto */
/* Generator.proto */
/* CheckBinaryVersion.proto */
/* InitStrings.proto */
/* proto*/
/* proto*/
/* proto*/
/* proto*/
/* proto*/
/* proto*/
/* proto*/
/* proto*/
/* Module declarations from 'cpython.buffer' */
/* Module declarations from 'wx.svg._nanosvg' */
/*proto*/
/* Implementation of 'wx.svg._nanosvg' */
//github.com/memononen/nanosvg. The output of the parser is a collection\nof data structures representing cubic bezier shapes.\n\nNanoSVG supports a wide range of SVG features. The library is well suited for\nanything from rendering scalable icons in your editor application to prototyping\na game. There is not a full coverage of the SVG specification, however the\nfeatures needed for typical icons or even more advanced vector images are\npresent.\n\nThe shapes in the SVG images are transformed by the viewBox and converted to\nspecified units. That is, you should get the same looking data as you designed\nin your favorite app.\n\nNanoSVG can return the paths in few different units. For example if you want to\nrender an image, you may choose to get the paths in pixels, or if you are\nfeeding the data into a CNC-cutter, you may want to use millimeters.\n\nThe units passed to NanoSVG should be one of: 'px', 'pt', 'pc' 'mm', 'cm', or\n'in'. DPI (dots-per-inch) controls how the unit conversion is done.\n\nIf you don't know or care about the units stuff, \"px\" and 96 should get you\ngoing.\n\nThis module implements a Cython-based wrapper for the NanoSVG code, providing\naccess to the parsed SVG data as a nested collection of objects and properties.\nNote that these classes are essentially read-only. There is no support (yet?)\nfor manipulating the SVG shape info in memory.\n";
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/* proto */
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/* Late includes */
/* "wx/svg/_nanosvg.pyx":101
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":102
/* "wx/svg/_nanosvg.pyx":103
/* "wx/svg/_nanosvg.pyx":101
/* function exit code */
/* "wx/svg/_nanosvg.pyx":105
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":106
/* "wx/svg/_nanosvg.pyx":107
/* "wx/svg/_nanosvg.pyx":106
/* "wx/svg/_nanosvg.pyx":108
/* "wx/svg/_nanosvg.pyx":109
/* "wx/svg/_nanosvg.pyx":108
/* "wx/svg/_nanosvg.pyx":105
/* function exit code */
/* "wx/svg/_nanosvg.pyx":111
/* "wx/svg/_nanosvg.pyx":112
/* "wx/svg/_nanosvg.pyx":113
/* "wx/svg/_nanosvg.pyx":112
/* "wx/svg/_nanosvg.pyx":111
/* function exit code */
/* "wx/svg/_nanosvg.pyx":115
/* "wx/svg/_nanosvg.pyx":116
/* "wx/svg/_nanosvg.pyx":117
/* "wx/svg/_nanosvg.pyx":116
/* "wx/svg/_nanosvg.pyx":118
/* "wx/svg/_nanosvg.pyx":119
/* "wx/svg/_nanosvg.pyx":120
/* "wx/svg/_nanosvg.pyx":118
/* "wx/svg/_nanosvg.pyx":121
/* "wx/svg/_nanosvg.pyx":122
/* "wx/svg/_nanosvg.pyx":121
/* "wx/svg/_nanosvg.pyx":123
/* "wx/svg/_nanosvg.pyx":115
/* function exit code */
/* "wx/svg/_nanosvg.pyx":127
/* "wx/svg/_nanosvg.pyx":128
/* "wx/svg/_nanosvg.pyx":129
/* "wx/svg/_nanosvg.pyx":130
/* "wx/svg/_nanosvg.pyx":127
/* function exit code */
/* "wx/svg/_nanosvg.pyx":134
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":144
/* "wx/svg/_nanosvg.pyx":145
/* "wx/svg/_nanosvg.pyx":146
/* "wx/svg/_nanosvg.pyx":147
/* "wx/svg/_nanosvg.pyx":148
/* "wx/svg/_nanosvg.pyx":147
/* "wx/svg/_nanosvg.pyx":149
/* "wx/svg/_nanosvg.pyx":134
/* function exit code */
/* "wx/svg/_nanosvg.pyx":153
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":163
/* "wx/svg/_nanosvg.pyx":164
/* "wx/svg/_nanosvg.pyx":165
/* "wx/svg/_nanosvg.pyx":167
/* "wx/svg/_nanosvg.pyx":153
/* function exit code */
/* "wx/svg/_nanosvg.pyx":170
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":171
/* "wx/svg/_nanosvg.pyx":172
/* "wx/svg/_nanosvg.pyx":171
/* "wx/svg/_nanosvg.pyx":174
/*else*/ {
/* "wx/svg/_nanosvg.pyx":170
/* function exit code */
/* "wx/svg/_nanosvg.pyx":177
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":194
/* "wx/svg/_nanosvg.pyx":195
/* "wx/svg/_nanosvg.pyx":196
/* "wx/svg/_nanosvg.pyx":195
/* "wx/svg/_nanosvg.pyx":198
/* "wx/svg/_nanosvg.pyx":199
/* "wx/svg/_nanosvg.pyx":198
/* "wx/svg/_nanosvg.pyx":200
/* "wx/svg/_nanosvg.pyx":201
/* "wx/svg/_nanosvg.pyx":200
/* "wx/svg/_nanosvg.pyx":202
/* "wx/svg/_nanosvg.pyx":203
/* "wx/svg/_nanosvg.pyx":202
/* "wx/svg/_nanosvg.pyx":205
/* "wx/svg/_nanosvg.pyx":206
/* "wx/svg/_nanosvg.pyx":205
/* "wx/svg/_nanosvg.pyx":209
/* "wx/svg/_nanosvg.pyx":210
/* "wx/svg/_nanosvg.pyx":209
/* "wx/svg/_nanosvg.pyx":211
/* "wx/svg/_nanosvg.pyx":212
/* "wx/svg/_nanosvg.pyx":213
/* "wx/svg/_nanosvg.pyx":211
/* "wx/svg/_nanosvg.pyx":215
/* "wx/svg/_nanosvg.pyx":217
/* "wx/svg/_nanosvg.pyx":177
/* function exit code */
/* "wx/svg/_nanosvg.pyx":220
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":234
/* "wx/svg/_nanosvg.pyx":235
/* "wx/svg/_nanosvg.pyx":236
/* "wx/svg/_nanosvg.pyx":235
/* "wx/svg/_nanosvg.pyx":238
/* "wx/svg/_nanosvg.pyx":239
/* "wx/svg/_nanosvg.pyx":238
/* "wx/svg/_nanosvg.pyx":240
/* "wx/svg/_nanosvg.pyx":241
/* "wx/svg/_nanosvg.pyx":240
/* "wx/svg/_nanosvg.pyx":242
/* "wx/svg/_nanosvg.pyx":243
/* "wx/svg/_nanosvg.pyx":242
/* "wx/svg/_nanosvg.pyx":245
/* "wx/svg/_nanosvg.pyx":246
/* "wx/svg/_nanosvg.pyx":247
/* "wx/svg/_nanosvg.pyx":248
/* "wx/svg/_nanosvg.pyx":220
/* function exit code */
/* "wx/svg/_nanosvg.pyx":251
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":255
/* "wx/svg/_nanosvg.pyx":256
/* "wx/svg/_nanosvg.pyx":251
/* function exit code */
/* "wx/svg/_nanosvg.pyx":259
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":263
/* "wx/svg/_nanosvg.pyx":264
/* "wx/svg/_nanosvg.pyx":259
/* function exit code */
/* proto */
/* "wx/svg/_nanosvg.pyx":267
/* Python wrapper */
/*proto*/
/* function exit code */
/* function exit code */
/* generator body */
/* CPython raises the right error here */
/* "wx/svg/_nanosvg.pyx":271
/* "wx/svg/_nanosvg.pyx":272
/* "wx/svg/_nanosvg.pyx":273
/* "wx/svg/_nanosvg.pyx":274
/* return from generator, yielding value */
/* "wx/svg/_nanosvg.pyx":275
/* "wx/svg/_nanosvg.pyx":267
/* function exit code */
/* "(tree fragment)":1
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":2
/* "(tree fragment)":1
/* function exit code */
/* "(tree fragment)":3
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":4
/* "(tree fragment)":3
/* function exit code */
/* "wx/svg/_nanosvg.pyx":288
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":289
/* "wx/svg/_nanosvg.pyx":288
/* function exit code */
/* "wx/svg/_nanosvg.pyx":291
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":292
/* "wx/svg/_nanosvg.pyx":293
/* "wx/svg/_nanosvg.pyx":292
/* "wx/svg/_nanosvg.pyx":291
/* function exit code */
/* "wx/svg/_nanosvg.pyx":296
/* "wx/svg/_nanosvg.pyx":297
/* "wx/svg/_nanosvg.pyx":298
/* "wx/svg/_nanosvg.pyx":299
/* "wx/svg/_nanosvg.pyx":296
/* function exit code */
/* "wx/svg/_nanosvg.pyx":301
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":302
/* "wx/svg/_nanosvg.pyx":303
/* "wx/svg/_nanosvg.pyx":302
/* "wx/svg/_nanosvg.pyx":305
/*else*/ {
/* "wx/svg/_nanosvg.pyx":301
/* function exit code */
/* "wx/svg/_nanosvg.pyx":308
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":310
/* "wx/svg/_nanosvg.pyx":311
/* "wx/svg/_nanosvg.pyx":308
/* function exit code */
/* "wx/svg/_nanosvg.pyx":314
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":316
/* "wx/svg/_nanosvg.pyx":317
/* "wx/svg/_nanosvg.pyx":314
/* function exit code */
/* "wx/svg/_nanosvg.pyx":320
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":322
/* "wx/svg/_nanosvg.pyx":323
/* "wx/svg/_nanosvg.pyx":320
/* function exit code */
/* "wx/svg/_nanosvg.pyx":326
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":328
/* "wx/svg/_nanosvg.pyx":329
/* "wx/svg/_nanosvg.pyx":326
/* function exit code */
/* "wx/svg/_nanosvg.pyx":332
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":334
/* "wx/svg/_nanosvg.pyx":335
/* "wx/svg/_nanosvg.pyx":332
/* function exit code */
/* "wx/svg/_nanosvg.pyx":338
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":340
/* "wx/svg/_nanosvg.pyx":341
/* "wx/svg/_nanosvg.pyx":338
/* function exit code */
/* "wx/svg/_nanosvg.pyx":344
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":346
/* "wx/svg/_nanosvg.pyx":347
/* "wx/svg/_nanosvg.pyx":348
/* "wx/svg/_nanosvg.pyx":347
/* "wx/svg/_nanosvg.pyx":344
/* function exit code */
/* "wx/svg/_nanosvg.pyx":351
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":353
/* "wx/svg/_nanosvg.pyx":354
/* "wx/svg/_nanosvg.pyx":351
/* function exit code */
/* "wx/svg/_nanosvg.pyx":357
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":359
/* "wx/svg/_nanosvg.pyx":360
/* "wx/svg/_nanosvg.pyx":357
/* function exit code */
/* "wx/svg/_nanosvg.pyx":363
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":365
/* "wx/svg/_nanosvg.pyx":366
/* "wx/svg/_nanosvg.pyx":363
/* function exit code */
/* "wx/svg/_nanosvg.pyx":369
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":371
/* "wx/svg/_nanosvg.pyx":372
/* "wx/svg/_nanosvg.pyx":369
/* function exit code */
/* "wx/svg/_nanosvg.pyx":375
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":377
/* "wx/svg/_nanosvg.pyx":378
/* "wx/svg/_nanosvg.pyx":375
/* function exit code */
/* "wx/svg/_nanosvg.pyx":381
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":383
/* "wx/svg/_nanosvg.pyx":384
/* "wx/svg/_nanosvg.pyx":381
/* function exit code */
/* "wx/svg/_nanosvg.pyx":387
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":388
/* "wx/svg/_nanosvg.pyx":389
/* "wx/svg/_nanosvg.pyx":387
/* function exit code */
/* "wx/svg/_nanosvg.pyx":392
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":393
/* "wx/svg/_nanosvg.pyx":394
/* "wx/svg/_nanosvg.pyx":392
/* function exit code */
/* "wx/svg/_nanosvg.pyx":397
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":398
/* "wx/svg/_nanosvg.pyx":399
/* "wx/svg/_nanosvg.pyx":397
/* function exit code */
/* "wx/svg/_nanosvg.pyx":402
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":403
/* "wx/svg/_nanosvg.pyx":404
/* "wx/svg/_nanosvg.pyx":402
/* function exit code */
/* proto */
/* "wx/svg/_nanosvg.pyx":407
/* Python wrapper */
/*proto*/
/* function exit code */
/* function exit code */
/* generator body */
/* CPython raises the right error here */
/* "wx/svg/_nanosvg.pyx":411
/* "wx/svg/_nanosvg.pyx":412
/* "wx/svg/_nanosvg.pyx":413
/* "wx/svg/_nanosvg.pyx":414
/* return from generator, yielding value */
/* "wx/svg/_nanosvg.pyx":415
/* "wx/svg/_nanosvg.pyx":407
/* function exit code */
/* "(tree fragment)":1
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":2
/* "(tree fragment)":1
/* function exit code */
/* "(tree fragment)":3
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":4
/* "(tree fragment)":3
/* function exit code */
/* "wx/svg/_nanosvg.pyx":427
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":428
/* "wx/svg/_nanosvg.pyx":427
/* function exit code */
/* "wx/svg/_nanosvg.pyx":431
/* "wx/svg/_nanosvg.pyx":432
/* "wx/svg/_nanosvg.pyx":433
/* "wx/svg/_nanosvg.pyx":434
/* "wx/svg/_nanosvg.pyx":431
/* function exit code */
/* "wx/svg/_nanosvg.pyx":436
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":437
/* "wx/svg/_nanosvg.pyx":438
/* "wx/svg/_nanosvg.pyx":437
/* "wx/svg/_nanosvg.pyx":436
/* function exit code */
/* "wx/svg/_nanosvg.pyx":440
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":441
/* "wx/svg/_nanosvg.pyx":442
/* "wx/svg/_nanosvg.pyx":441
/* "wx/svg/_nanosvg.pyx":444
/*else*/ {
/* "wx/svg/_nanosvg.pyx":440
/* function exit code */
/* "wx/svg/_nanosvg.pyx":447
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":452
/* "wx/svg/_nanosvg.pyx":453
/* "wx/svg/_nanosvg.pyx":447
/* function exit code */
/* "wx/svg/_nanosvg.pyx":456
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":458
/* "wx/svg/_nanosvg.pyx":459
/* "wx/svg/_nanosvg.pyx":456
/* function exit code */
/* "wx/svg/_nanosvg.pyx":462
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":467
/* "wx/svg/_nanosvg.pyx":468
/* "wx/svg/_nanosvg.pyx":469
/* "wx/svg/_nanosvg.pyx":468
/* "wx/svg/_nanosvg.pyx":469
/* "wx/svg/_nanosvg.pyx":462
/* function exit code */
/* "wx/svg/_nanosvg.pyx":472
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":474
/* "wx/svg/_nanosvg.pyx":475
/* "wx/svg/_nanosvg.pyx":472
/* function exit code */
/* "wx/svg/_nanosvg.pyx":478
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":480
/* "wx/svg/_nanosvg.pyx":481
/* "wx/svg/_nanosvg.pyx":478
/* function exit code */
/* "wx/svg/_nanosvg.pyx":484
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":485
/* "wx/svg/_nanosvg.pyx":486
/* "wx/svg/_nanosvg.pyx":484
/* function exit code */
/* "wx/svg/_nanosvg.pyx":489
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":490
/* "wx/svg/_nanosvg.pyx":491
/* "wx/svg/_nanosvg.pyx":489
/* function exit code */
/* "wx/svg/_nanosvg.pyx":494
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":495
/* "wx/svg/_nanosvg.pyx":496
/* "wx/svg/_nanosvg.pyx":494
/* function exit code */
/* "wx/svg/_nanosvg.pyx":499
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":500
/* "wx/svg/_nanosvg.pyx":501
/* "wx/svg/_nanosvg.pyx":499
/* function exit code */
/* "(tree fragment)":1
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":2
/* "(tree fragment)":1
/* function exit code */
/* "(tree fragment)":3
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":4
/* "(tree fragment)":3
/* function exit code */
/* "wx/svg/_nanosvg.pyx":513
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":514
/* "wx/svg/_nanosvg.pyx":513
/* function exit code */
/* "wx/svg/_nanosvg.pyx":517
/* "wx/svg/_nanosvg.pyx":518
/* "wx/svg/_nanosvg.pyx":519
/* "wx/svg/_nanosvg.pyx":520
/* "wx/svg/_nanosvg.pyx":517
/* function exit code */
/* "wx/svg/_nanosvg.pyx":522
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":523
/* "wx/svg/_nanosvg.pyx":524
/* "wx/svg/_nanosvg.pyx":523
/* "wx/svg/_nanosvg.pyx":522
/* function exit code */
/* "wx/svg/_nanosvg.pyx":527
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":529
/* "wx/svg/_nanosvg.pyx":530
/* "wx/svg/_nanosvg.pyx":527
/* function exit code */
/* "wx/svg/_nanosvg.pyx":533
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":534
/* "wx/svg/_nanosvg.pyx":535
/* "wx/svg/_nanosvg.pyx":536
/* "wx/svg/_nanosvg.pyx":535
/* "wx/svg/_nanosvg.pyx":537
/* "wx/svg/_nanosvg.pyx":533
/* function exit code */
/* "wx/svg/_nanosvg.pyx":540
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":542
/* "wx/svg/_nanosvg.pyx":543
/* "wx/svg/_nanosvg.pyx":544
/* "wx/svg/_nanosvg.pyx":545
/* "wx/svg/_nanosvg.pyx":546
/* "wx/svg/_nanosvg.pyx":543
/* "wx/svg/_nanosvg.pyx":540
/* function exit code */
/* "wx/svg/_nanosvg.pyx":549
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":550
/* "wx/svg/_nanosvg.pyx":551
/* "wx/svg/_nanosvg.pyx":552
/* "wx/svg/_nanosvg.pyx":551
/* "wx/svg/_nanosvg.pyx":553
/* "wx/svg/_nanosvg.pyx":549
/* function exit code */
/* "(tree fragment)":1
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":2
/* "(tree fragment)":1
/* function exit code */
/* "(tree fragment)":3
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":4
/* "(tree fragment)":3
/* function exit code */
/* "wx/svg/_nanosvg.pyx":564
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":565
/* "wx/svg/_nanosvg.pyx":564
/* function exit code */
/* "wx/svg/_nanosvg.pyx":568
/* "wx/svg/_nanosvg.pyx":569
/* "wx/svg/_nanosvg.pyx":570
/* "wx/svg/_nanosvg.pyx":571
/* "wx/svg/_nanosvg.pyx":568
/* function exit code */
/* "wx/svg/_nanosvg.pyx":573
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":574
/* "wx/svg/_nanosvg.pyx":575
/* "wx/svg/_nanosvg.pyx":574
/* "wx/svg/_nanosvg.pyx":573
/* function exit code */
/* "wx/svg/_nanosvg.pyx":578
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":580
/* "wx/svg/_nanosvg.pyx":581
/* "wx/svg/_nanosvg.pyx":578
/* function exit code */
/* "wx/svg/_nanosvg.pyx":584
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":585
/* "wx/svg/_nanosvg.pyx":586
/* "wx/svg/_nanosvg.pyx":584
/* function exit code */
/* "wx/svg/_nanosvg.pyx":589
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":590
/* "wx/svg/_nanosvg.pyx":591
/* "wx/svg/_nanosvg.pyx":589
/* function exit code */
/* "wx/svg/_nanosvg.pyx":594
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":595
/* "wx/svg/_nanosvg.pyx":596
/* "wx/svg/_nanosvg.pyx":594
/* function exit code */
/* proto */
/* "wx/svg/_nanosvg.pyx":599
/* Python wrapper */
/*proto*/
/* function exit code */
/* function exit code */
/* generator body */
/* CPython raises the right error here */
/* "wx/svg/_nanosvg.pyx":603
/* "wx/svg/_nanosvg.pyx":604
/* "wx/svg/_nanosvg.pyx":605
/* return from generator, yielding value */
/* "wx/svg/_nanosvg.pyx":599
/* function exit code */
/* "(tree fragment)":1
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":2
/* "(tree fragment)":1
/* function exit code */
/* "(tree fragment)":3
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":4
/* "(tree fragment)":3
/* function exit code */
/* "wx/svg/_nanosvg.pyx":615
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":616
/* "wx/svg/_nanosvg.pyx":615
/* function exit code */
/* "wx/svg/_nanosvg.pyx":619
/* "wx/svg/_nanosvg.pyx":620
/* "wx/svg/_nanosvg.pyx":621
/* "wx/svg/_nanosvg.pyx":622
/* "wx/svg/_nanosvg.pyx":619
/* function exit code */
/* "wx/svg/_nanosvg.pyx":624
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":625
/* "wx/svg/_nanosvg.pyx":626
/* "wx/svg/_nanosvg.pyx":625
/* "wx/svg/_nanosvg.pyx":624
/* function exit code */
/* "wx/svg/_nanosvg.pyx":629
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":630
/* "wx/svg/_nanosvg.pyx":631
/* "wx/svg/_nanosvg.pyx":629
/* function exit code */
/* "wx/svg/_nanosvg.pyx":634
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":636
/* "wx/svg/_nanosvg.pyx":637
/* "wx/svg/_nanosvg.pyx":638
/* "wx/svg/_nanosvg.pyx":639
/* "wx/svg/_nanosvg.pyx":640
/* "wx/svg/_nanosvg.pyx":637
/* "wx/svg/_nanosvg.pyx":634
/* function exit code */
/* "wx/svg/_nanosvg.pyx":643
/* Python wrapper */
/*proto*/
/* function exit code */
/* "wx/svg/_nanosvg.pyx":644
/* "wx/svg/_nanosvg.pyx":645
/* "wx/svg/_nanosvg.pyx":643
/* function exit code */
/* "(tree fragment)":1
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":2
/* "(tree fragment)":1
/* function exit code */
/* "(tree fragment)":3
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":4
/* "(tree fragment)":3
/* function exit code */
/* "EnumBase":16
/* Python wrapper */
/*proto*/
/* function exit code */
/* "EnumBase":17
/* "EnumBase":18
/* "EnumBase":16
/* function exit code */
/* "EnumBase":19
/* Python wrapper */
/*proto*/
/* function exit code */
/* "EnumBase":20
/* "EnumBase":19
/* function exit code */
/* "EnumBase":21
/* Python wrapper */
/*proto*/
/* function exit code */
/* "EnumBase":22
/* "EnumBase":21
/* function exit code */
/* "(tree fragment)":1
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":5
/* "(tree fragment)":6
/* "(tree fragment)":7
/* "(tree fragment)":8
/* "(tree fragment)":9
/* "(tree fragment)":7
/* "(tree fragment)":11
/*else*/ {
/* "(tree fragment)":12
/* "(tree fragment)":13
/* "(tree fragment)":12
/* "(tree fragment)":15
/*else*/ {
/* "(tree fragment)":1
/* function exit code */
/* "(tree fragment)":16
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":17
/* "(tree fragment)":16
/* function exit code */
/* "EnumBase":28
/* Python wrapper */
/*proto*/
/* function exit code */
/* "EnumBase":29
/* "EnumBase":30
/* "EnumBase":31
/* "EnumBase":30
/* "EnumBase":29
/* "EnumBase":32
/* "EnumBase":33
/* "EnumBase":32
/* "EnumBase":34
/* "EnumBase":35
/* "EnumBase":36
/* "EnumBase":37
/* "EnumBase":38
/* "EnumBase":28
/* function exit code */
/* "EnumBase":39
/* Python wrapper */
/*proto*/
/* function exit code */
/* "EnumBase":40
/* "EnumBase":39
/* function exit code */
/* "EnumBase":41
/* Python wrapper */
/*proto*/
/* function exit code */
/* "EnumBase":42
/* "EnumBase":41
/* function exit code */
/* "(tree fragment)":1
/* Python wrapper */
/*proto*/
/* function exit code */
/* "(tree fragment)":4
/* "(tree fragment)":5
/* "(tree fragment)":6
/* "(tree fragment)":4
/* "(tree fragment)":7
/* "(tree fragment)":8
/* "(tree fragment)":9
/* "(tree fragment)":8
/* "(tree fragment)":10
/* "(tree fragment)":1
/* function exit code */
/* "(tree fragment)":11
/* "(tree fragment)":12
/* "(tree fragment)":13
/* "(tree fragment)":12
/* "(tree fragment)":11
/* function exit code */
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*sq_length*/
/*sq_concat*/
/*sq_repeat*/
/*sq_item*/
/*sq_slice*/
/*sq_ass_item*/
/*sq_ass_slice*/
/*sq_contains*/
/*sq_inplace_concat*/
/*sq_inplace_repeat*/
/*mp_length*/
/*mp_subscript*/
/*mp_ass_subscript*/
/*tp_name*/
/*tp_basicsize*/
/*tp_itemsize*/
/*tp_dealloc*/
/*tp_print*/
/*tp_getattr*/
/*tp_setattr*/
/*tp_compare*/
/*tp_as_async*/
/*tp_repr*/
/*tp_as_number*/
/*tp_as_sequence*/
/*tp_as_mapping*/
/*tp_hash*/
/*tp_call*/
/*tp_str*/
/*tp_getattro*/
/*tp_setattro*/
/*tp_as_buffer*/
/*tp_flags*/
/*tp_doc*/
/*tp_traverse*/
/*tp_clear*/
/*tp_richcompare*/
/*tp_weaklistoffset*/
/*tp_iter*/
/*tp_iternext*/
/*tp_methods*/
/*tp_members*/
/*tp_getset*/
/*tp_base*/
/*tp_dict*/
/*tp_descr_get*/
/*tp_descr_set*/
/*tp_dictoffset*/
/*tp_init*/
/*tp_alloc*/
/*tp_new*/
/*tp_free*/
/*tp_is_gc*/
/*tp_bases*/
/*tp_mro*/
/*tp_cache*/
/*tp_subclasses*/
/*tp_weaklist*/
/*tp_del*/
/*tp_version_tag*/
/*tp_finalize*/
/*tp_vectorcall*/
/*proto*/
/*proto*/
/* m_doc */
/* m_size */
/* m_size */
/* m_methods */,
/* m_slots */
/* m_reload */
/* m_traverse */
/* m_clear */
/* m_free */
/* "wx/svg/_nanosvg.pyx":113
/* "wx/svg/_nanosvg.pyx":206
/* "wx/svg/_nanosvg.pyx":210
/* "wx/svg/_nanosvg.pyx":213
/* "(tree fragment)":2
/* "(tree fragment)":4
/* "wx/svg/_nanosvg.pyx":293
/* "(tree fragment)":2
/* "(tree fragment)":4
/* "wx/svg/_nanosvg.pyx":438
/* "(tree fragment)":2
/* "(tree fragment)":4
/* "wx/svg/_nanosvg.pyx":524
/* "wx/svg/_nanosvg.pyx":536
/* "wx/svg/_nanosvg.pyx":552
/* "(tree fragment)":2
/* "(tree fragment)":4
/* "wx/svg/_nanosvg.pyx":575
/* "(tree fragment)":2
/* "(tree fragment)":4
/* "wx/svg/_nanosvg.pyx":626
/* "(tree fragment)":2
/* "(tree fragment)":4
/* "EnumBase":28
/* "EnumBase":39
/* "EnumBase":41
/* "(tree fragment)":1
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*proto*/
/*--- Global init code ---*/
/*--- Variable export code ---*/
/*--- Function export code ---*/
/*--- Type init code ---*/
/*--- Type import code ---*/
/*--- Variable import code ---*/
/*--- Function import code ---*/
/*proto*/
/*proto*/
/*--- Library function declarations ---*/
/*--- Threads initialization code ---*/
/* Python build with threading support? */
/*--- Module creation code ---*/
/*--- Initialize various global constants etc. ---*/
/*--- Builtin init code ---*/
/*--- Constants init code ---*/
/*--- Global type/function init code ---*/
/*--- Execution code ---*/
/* "wx/svg/_nanosvg.pyx":43
/* "wx/svg/_nanosvg.pyx":50
/* "wx/svg/_nanosvg.pyx":134
/* "wx/svg/_nanosvg.pyx":133
/* "wx/svg/_nanosvg.pyx":153
/* "wx/svg/_nanosvg.pyx":152
/* "wx/svg/_nanosvg.pyx":1
/* "EnumBase":9
/* "EnumBase":10
/* "EnumBase":9
/* "EnumBase":12
/*else*/ {
/* "EnumBase":26
/* "EnumBase":27
/* "EnumBase":28
/* "EnumBase":39
/* "EnumBase":41
/* "EnumBase":26
/* "EnumBase":44
/* "EnumBase":45
/* "EnumBase":44
/* "(tree fragment)":1
/* "EnumType":50
/* "EnumType":51
/* "EnumType":54
/* "EnumType":55
/* "EnumType":53
/* "EnumType":57
/* "EnumType":58
/* "EnumType":51
/* "EnumType":60
/*else*/ {
/* "EnumType":62
/* "EnumType":63
/* "EnumType":50
/* "EnumType":51
/* "EnumType":54
/* "EnumType":53
/* "EnumType":56
/* "EnumType":51
/* "EnumType":58
/*else*/ {
/* "EnumType":60
/* "EnumType":50
/* "EnumType":51
/* "EnumType":54
/* "EnumType":55
/* "EnumType":56
/* "EnumType":53
/* "EnumType":58
/* "EnumType":59
/* "EnumType":60
/* "EnumType":51
/* "EnumType":62
/*else*/ {
/* "EnumType":64
/* "EnumType":65
/* "EnumType":66
/* "EnumType":50
/* "EnumType":51
/* "EnumType":54
/* "EnumType":55
/* "EnumType":56
/* "EnumType":53
/* "EnumType":58
/* "EnumType":59
/* "EnumType":60
/* "EnumType":51
/* "EnumType":62
/*else*/ {
/* "EnumType":64
/* "EnumType":65
/* "EnumType":66
/* "EnumType":50
/* "EnumType":51
/* "EnumType":54
/* "EnumType":55
/* "EnumType":56
/* "EnumType":57
/* "EnumType":53
/* "EnumType":59
/* "EnumType":60
/* "EnumType":61
/* "EnumType":62
/* "EnumType":51
/* "EnumType":64
/*else*/ {
/* "EnumType":66
/* "EnumType":67
/* "EnumType":68
/* "EnumType":69
/* "EnumType":50
/* "EnumType":51
/* "EnumType":54
/* "EnumType":55
/* "EnumType":56
/* "EnumType":53
/* "EnumType":58
/* "EnumType":59
/* "EnumType":60
/* "EnumType":51
/* "EnumType":62
/*else*/ {
/* "EnumType":64
/* "EnumType":65
/* "EnumType":66
/*--- Wrapped vars code ---*/
/* --- Runtime support code --- */
/* Refnanny */
/* PyObjectGetAttrStr */
/* GetBuiltinName */
/* RaiseArgTupleInvalid */
/* KeywordStringCheck */
/* PyObjectCall */
/* PyErrFetchRestore */
/* RaiseException */
/* PyCFunctionFastCall */
/* _PyCFunction_FastCallDict() must not be called with an exception set,
/* PyFunctionFastCall */
/* XXX Perhaps we should create a specialized
/* function called with no arguments, but all parameters have
/* PyObjectCallMethO */
/* PyObjectCallOneArg */
/* PyObjectCallNoArg */
/* RaiseDoubleKeywords */
/* ParseKeywords */
/* ArgTypeTest */
/* PyDictVersioning */
/* GetModuleGlobalName */
/* UnpackUnboundCMethod */
/* CallUnboundCMethod1 */
/* ExtTypeTest */
/* PyObjectCall2Args */
/* PyIntBinop */
/* PyIntBinop */
/* PyIntBinop */
/* PyObjectSetAttrStr */
/* GetItemInt */
/* ObjectGetItem */
/* PyErrExceptionMatches */
/* GetAttr */
/* GetAttr3 */
/* Import */
/* ImportFrom */
/* HasAttr */
/* PyObject_GenericGetAttrNoDict */
/* PyObject_GenericGetAttr */
/* SetVTable */
/* SetupReduce */
/* PyIntCompare */
/* ClassMethod */
/* GetNameInClass */
/* CalculateMetaclass */
/* FetchCommonType */
/* CythonFunction */
/* Py3ClassCreate */
/* Globals */
/* CLineInTraceback */
/* CodeObjectCache */
/* AddTraceback */
/*PyObject *code,*/
/*PyObject *consts,*/
/*PyObject *names,*/
/*PyObject *varnames,*/
/*PyObject *freevars,*/
/*PyObject *cellvars,*/
/*PyObject *filename,*/
/*PyObject *name,*/
/*PyObject *lnotab*/
/*PyThreadState *tstate,*/
/*PyCodeObject *code,*/
/*PyObject *globals,*/
/*PyObject *locals*/
/* CIntToPy */
/* CIntFromPyVerify */
/* CIntToPy */
/* CIntToPy */
/* CIntToPy */
/* CIntToPy */
/* CIntToPy */
/* CIntFromPy */
/* CIntFromPy */
/* CIntFromPy */
/* CIntToPy */
/* CIntToPy */
/* CIntToPy */
/* CIntToPy */
/* CIntToPy */
/* FastTypeChecks */
/* GetTopmostException */
/* SaveResetException */
/* SwapException */
/* PyObjectGetMethod */
/* PyObjectCallMethod1 */
/* CoroutineBase */
/* We have to handle this case for asynchronous generators
/* PatchModuleWithCoroutine */
/* PatchGeneratorABC */
/* Generator */
/* CheckBinaryVersion */
/* InitStrings */
/* Py_PYTHON_H */
#----------------------------------------------------------------------
# Name:        wx.svg.__init__.py
# Purpose:     Python code to augment or extend the nanosvg wrappers,
#              and provide wxPython-specific integrations.
#
# Author:      Robin Dunn
#
# Created:     23-July-2019
# Copyright:   (c) 2019 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# All the supported renderers now support gradient transforms, more or less, but
# let's leave this in place in case it's needed again in the future.
# We can only have one overall scale factor for both dimensions with
# this rasterization method, so chose either the minimum of width or
# height to help ensure it fits both ways within the specified size.
# set scale either from the scale parameter or as ratio of the sizes
# scale the context to the given size
# The shape's path is comprised of one or more subpaths, collect
# and accumulate them in a new GraphicsPath
# Draw the combined set of paths, using the given pen and brush to
# fill and stroke the shape.
# set up a brush from the shape.fill (SVGpaint) object
# no brush
# brush with a solid color
# brush with a linear gradient
# NanoSVG gives gradients their own transform which normalizes the
# linear gradients to go from (0, 0) to (0,1) in the transformed
# space. So once we have the transform set we can use those points
# too.
# Except for GDI+, which doesn't support applying a transform to a
# gradient, so we'll translate the points back to real space
# ourselves. This is only an approximation of the desired outcome
# however, as things like scale and shear in the transform will not
# be applied to the rest of the fill.
# brush with a radial gradient
# Likewise, NanoSVG normalizes radial gradients with a transform
# that puts the center (cx, cy) at (0,0) and the radius has a length
# of 1.
# Except for GDI+...  See note above
# set up a pen from the shape.stroke (SVGpaint) object
# TODO: handle dashes
# Except for GDI+...  See note above
# Except for GDI+...  See note above
#----------------------------------------------------------------------------
# Name:         dbg.py
# Author:       Will Sadkin
# Email:        wsadkin@nameconnector.com
# Created:      07/11/2002
# Copyright:    (c) 2002 by Will Sadkin, 2002
# License:      wxWindows license
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o V2.5 compatibility update
#
# current number of indentations
# enable/disable flag
# allows code to "suspend/resume" potential dbg output
# use wxLogMessage for debug output
# default output stream
# for restoration of streams as necessary
# (emulate print functionality; handle unicode as best as possible:)
# else do nothing
# post process args:
# aliases for the log function
# backwards compatible
#
# this one lets you 'call' the instance directly
#------------------------------------------------------------
# shouldn't print, according to doc...
#----------------------------------------------------------------------------
# Name:         genaxmodule.py
# Tags:         phoenix-port
#----------------------------------------------------------------------------
# unfortunatly we need to make an app, frame and an instance of
# the ActiceX control in order to get the TypeInfo about it...
# Cleanup
#----------------------------------------------------------------------
# Name:        wx.tools.helpviewer
# Purpose:     HTML Help viewer
#
# Author:      Robin Dunn
#
# Created:     11-Dec-2002
# Copyright:   (c) 2002-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, py3-port
#----------------------------------------------------------------------
#---------------------------------------------------------------------------
#wx.Log.SetActiveTarget(wx.LogStderr())
# Set up the default config so the htmlhelp frame can save its preferences
# Add the Zip filesystem
# Create the viewer
# and add the books
# The frame used by the HtmlHelpController is set to not prevent
# app exit, so in the case of a standalone helpviewer like this
# when the Print dialog is closed the help frame will be the only
# one left and the app will close unexpectedly. [Strangely, this
# doesn't happen when the Options dialog is closed].
# To work around this we'll create another frame that is never shown,
# but which will be closed when the helpviewer frame is closed.
# start it up!
#----------------------------------------------------------------------
# Name:        wx.tools.img2img
# Purpose:     Common routines for the image converter utilities.
#
# Author:      Robin Dunn
#
# Copyright:   (c) 2002-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, py3-port
#----------------------------------------------------------------------
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o V2.5 compatibility update
#
#----------------------------------------------------------------------
# Name:        wx.tools.img2png
# Purpose:     Convert an image to PNG format
#
# Author:      Robin Dunn
#
# Copyright:   (c) 2002-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o V2.5 compatibility update
#
#rrggbb>   If the original image has a mask or transparency defined
# some bitmap related things need to have a wxApp initialized...
#----------------------------------------------------------------------
# Name:        wx.tools.img2py
# Purpose:     Convert an image to Python code.
#
# Author:      Robin Dunn
#
# Copyright:   (c) 2002-2018 by Total Control Software
# Licence:     wxWindows license
# Tags:        phoenix-port, py3-port
#----------------------------------------------------------------------
#
# Changes:
#    - Cliff Wells <LogiplexSoftware@earthlink.net>
#      20021206: Added catalog (-c) option.
#
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#        V2.5 compatibility update
#
# 2/25/2007 - Gianluca Costa (archimede86@katamail.com)
#        -Refactorization of the script-creation code in a specific "img2py()" function
#        -Added regex parsing instead of module importing
#        -Added some "try/finally" statements
#        -Added default values as named constants
#        -Made some parts of code a bit easier to read
#        -Updated the module docstring
#        -Corrected a bug with EmptyIcon
#
# 11/26/2007 - Anthony Tuininga (anthony.tuininga@gmail.com)
#        -Use base64 encoding instead of simple repr
#        -Remove compression which doesn't buy anything in most cases and
#         costs more in many cases
#        -Use wx.lib.embeddedimage.PyEmbeddedImage class which has methods
#         rather than using standalone methods
#
#rrggbb>   If the original image has a mask or transparency defined
# THIS IS USED TO IDENTIFY, IN THE GENERATED SCRIPT, LINES IN THE FORM
# "index.append('Image name')"
# if the file is already the right type then just use it directly
# typo version for backward compatibility
# was the typo version used?
# convert the image file to a temporary file
# check to see if catalog exists already (file may have been created
# with an earlier version of img2py or without -c option)
# ***************** Catalog starts here *******************")
#" + "-" * 70 + "\n")
# This file was generated by %s\n#\n" % sys.argv[0])
#----------------------------------------------------------------------
# Name:        wx.tools.img2xpm
# Purpose:     Convert an image to XPM format
#
# Author:      Robin Dunn
#
# Copyright:   (c) 2002-2018 by Total Control Software
# Licence:     wxWindows license
#----------------------------------------------------------------------
# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)
#
# o V2.5 compatibility update
#
#rrggbb>   If the original image has a mask or transparency defined
# some bitmap related things need to have a wxApp initialized...
#----------------------------------------------------------------------
# Name:        wx.tools.pywxrc
# Purpose:     XML resource compiler
#
# Author:      Robin Dunn
#              Based on wxrc.cpp by Vaclav Slavik, Eduardo Marques
#              Ported to Python in order to not require yet another
#              binary in wxPython distributions
#
#              Massive rework by Eli Golovinsky
#
#              Editable blocks by Roman Rolinsky
#
# Copyright:   (c) 2004-2018 by Total Control Software, 2000 Vaclav Slavik
# Licence:     wxWindows license
# Tags:        phoenix-port
#----------------------------------------------------------------------
#----------------------------------------------------------------------
#!XRCED:begin-block:(\S+)')
#!XRCED:end-block:(\S+)')
# This file was automatically generated by pywxrc.
# -*- coding: UTF-8 -*-
#!XRCED:begin-block:xrc%(windowName)s.PreCreate
#!XRCED:end-block:xrc%(windowName)s.PreCreate
# Define variables for the controls, bind event handlers
#!XRCED:begin-block:%(subclass)s._PostInit
#!XRCED:end-block:%(subclass)s._PostInit
#!XRCED:begin-block:xrc%(windowName)s.%(eventHandler)s
# Replace with event handler code
#!XRCED:end-block:xrc%(windowName)s.%(eventHandler)s
# This is a copy of Robin's PostCreate voodoo magic in wx.Window that
# relinks the self object with the menu object.
# Define variables for the menu items
# Define variables for the menu items
# Define variables for the toolbar items
# ------------------------ Resource data ----------------------
# ----------------------- Gettext strings ---------------------
# This is a dummy function that lists all the strings that are used in
# the XRC file in the _("a string") format to be recognized by GNU
# gettext utilities (specificaly the xgettext utility) and the
# mki18n.py script.  For more information see:
# http://wiki.wxpython.org/index.cgi/Internationalization
#----------------------------------------------------------------------
# process all the inputFiles, collecting the output data
# now write it all out
# Note: Technically it is not legal to have anything other
# than ascii for class and variable names, but since the user
# can create the XML with non-ascii names we'll go ahead and
# allow for it here, and then let Python complain about it
# later when they try to run the program.
# gettextStrings is a list of unicode strings as returned by ConvertText
#-------------------------------------------------------------------
# strings is a list of unicode strings as returned by ConvertText
#-------------------------------------------------------------------
# Generate a class for each top-window object (Frame, Panel, Dialog, etc.)
#-------------------------------------------------------------------
# assign_var override mode
# output the header
# create an attribute for menus and menu items that have names
# output the header
# output the header
# create an attribute for menus and menu items that have names
# output the header
# Generate an attribute for each named item in the container
# Only look directly under for the "label"
#                 elif widgetClass == "ToolBar":
#                     outputList.append(self.templates.FRAME_TOOLBAR_VAR % locals())
#-------------------------------------------------------------------
# Generate subclasses
#-------------------------------------------------------------------
# Generate child event handlers
#-------------------------------------------------------------------
# what about this? encoding=resourceDocument.encoding)
#-------------------------------------------------------------------
# take only the filename portion out of resourceFilename
#-------------------------------------------------------------------
# Remove special chars from the filename
#-------------------------------------------------------------------
#-------------------------------------------------------------------
# Any bitmaps:
# URLs in wxHtmlWindow:
# wxBitmapButton:
# wxBitmap or wxIcon toplevel resources:
#-------------------------------------------------------------------
# Is 'node' XML node element?
# Recurse into children
#-------------------------------------------------------------------
# parent is an element, i.e. has subnodes...
# ...it is textnode...
# ...and known to contain translatable string
# subnodes:
#-------------------------------------------------------------------
#-------------------------------------------------------------------
# Replace editable block contents with previous
#-------------------------------------------------------------------
# Parse existing file to collect editable blocks
#---------------------------------------------------------------------------
# If there is no input file argument, show help and exit
# Parse options and arguments
# check for and expand any wildcards in the list of input files
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------
# Name:        wx.tools.wxget
# Purpose:     wx Based alternative to wget
#
# Author:      Steve Barnes
#
# Created:     06-Aug-2017
# Copyright:   (c) 2017-2018 by Steve Barnes
# Licence:     wxWindows license
# Tags:        phoenix-port, py3-port
#
# Module to allow cross platform downloads originally from answers to:
# https://stackoverflow.com/questions/22676/how-do-i-download-a-file-over-http-using-python
# by Stan and PabloG then converted to wx.
#----------------------------------------------------------------------
# note some users may need to add "--no-check-certificate" on some sites
# Give the GUI some update time
# take up to http://something/ as host
# Try wget
# Try urllib
# Try urllib
# Only run if this file is called directly
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------
# Name:        wx.tools.wxget_docs_demo
# Purpose:     wx fetch and launch demo or docs
#
# Author:      Steve Barnes
#
# Created:     06-Aug-2017
# Copyright:   (c) 2017-2018 by Steve Barnes
# Licence:     wxWindows license
# Tags:        phoenix-port, py3-port
#
# Module to allow the correct version of the documents and/or demos to be
# launched after, if necessarily being fetched.
#----------------------------------------------------------------------
#pathdict['wxDocs'] = os.path.join(sp.GetAppDocumentsDir(), 'wxDocs', wx.VERSION_STRING)
#pathdict['wxDemo'] = os.path.join(sp.GetUserLocalDataDir(), 'wxDemo', wx.VERSION_STRING)
# Already exists
# No cached copy
# We now have a cached copy
# Debug
#subprocess.check_call(cmds) # Use instead for debug
#else:
#else:
#APP = wx.App()
# XRCed is purposfully left out so epydoc won't document it
