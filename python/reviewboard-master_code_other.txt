________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\setup.py
#!/usr/bin/env python
#
# Setup script for Review Board.
#
# A big thanks to Django project for some of the fixes used in here for
# MacOS X and data files installation.
# Make sure this is a version of Python we are compatible with. This should
# prevent people on older versions from unintentionally trying to install
# the source tarball, and failing.
# Make sure we're actually in the directory containing setup.py.
# Tell distutils to put the data_files in platform-specific installation
# locations. See here for an explanation:
# http://groups.google.com/group/comp.lang.python/browse_thread/thread/35ec7b2fed36eaec/2105ee4d9e8042cb
# If we're packaging, include the package-only dependencies.
# In this case, we don't want to install any of the dependencies
# below. However, it's really unlikely that a user is going to
# want to pass --no-deps.
#
# Instead, what this really does is give us a way to know we've
# been called by `pip install -e .`. That will call us with
# --no-deps, as it's going to actually handle all dependency
# installation, rather than having easy_install do it.
# Install the latest pip and setuptools. Note that the order here
# matters, as otherwise a stale setuptools can be left behind,
# causing installation errors.
# Install the dependencies using pip instead of easy_install. This
# will use wheels instead of eggs, which are ideal for our users.
# We're building on macOS, and some of our dependencies
# (hi there, mercurial!) won't compile using gcc (their default
# in some cases), so we want to force the proper compiler.
# By this point, dependencies should be installed for us. We're also
# using the same exact dependencies as Djblets, so no need to
# duplicate that list.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\internal\build-i18n.py
#!/usr/bin/env python
# Django >= 1.7
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\internal\build-media.py
#!/usr/bin/env python
# Source root directory
# Script config directory
# Django >= 1.7
# This will raise a CommandError or call sys.exit(1) on failure.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\internal\devserver.py
#!/usr/bin/env python
# Assign default settings
# Do any command-line argument processing
# Ensure we're at the top-level Review Board directory
# Next, ensure settings_local.py exists where we expect it
# Build ReviewBoard.egg-info if it doesn't already exist
# And now just boot up the server
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\internal\prepare-dev.py
#!/usr/bin/env python
# Our git post-checkout hook script which ensures stale .pyc files are not left
# around when switching branches, especially when switching between releases.
#!/bin/sh\n"
# TODO: Use an actual templating system.
# XXX: Once we switch to Python 2.7+, use the multiple form of 'with'
#$%^&*(-_=+)')
# The file does not exist.
# The file exists. We need to determine if we should write to it.
# The file is non-empty and executable, which means this *isn't*
# the default hook that git installs when you create a new
# repository.
#
# Let's check the hook's contents to see if its a hook we installed
# previously or if the user has already set up their own hook.
# At this point we know we are safe to write to the hook file. This is
# because one of the following is true:
#
# 1. The hook file does not exist.
# 2. The hook file exists but is empty.
# 3. The hook file exists but is non-executable (i.e., it contains a
#    sample git hook).
# Post-process the options so that anything that didn't get explicitly set
# will have a boolean value.
# Insert the current directory first in the module path so we find the
# correct reviewboard package.
# Re-use the Site class, since it has some useful functions.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\internal\run-pyflakes.py
#!/usr/bin/env python
#
# Utility script to run pyflakes with the modules we care about and
# exclude errors we know to be fine.
# The user didn't specify anything specific. Scan for modules.
# Read in the exclusions file
#"):
# Now filter things
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\internal\test-upgrade.py
#!/usr/bin/env python
# Validate the branches
# Clone the tree
# Prepare for a dev installation
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\internal\webapi-lint.py
#!/usr/bin/env python
# We have to fetch this first in order to build the tree, before accessing
# subclasses.
# Check that the HTTP method handlers contain everything we need.
# Check that we have all the permission checking functions we need.
# Even if they'd use default behavior from WebAPIResource, they
# should be defined explicitly in the resource class.
# Make sure the class can be instantiated.
# This has been explicitly set to None in the test file to
# let the linter know it's aware of the check for the class,
# but won't provide one.
# The error is already handled.
# These should be checked against list and singleton resources.
# These should be checked against item and singleton resources.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\internal\conf\settings_local.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\profiling\gather_profile_stats.py
#!/usr/bin/env python
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\contrib\profiling\print_info.py
#!/usr/bin/env python
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\codebase\conf.py
# -*- coding: utf-8 -*-
#
# Review Board Codebase documentation build configuration file, created by
# sphinx-quickstart on Thu Feb 12 02:10:34 2009.
#
# This file is execfile()d with the current directory set to its containing
# dir.
#
# The contents of this file are pickled, so don't put values in the namespace
# that aren't pickleable (module imports are okay, they're removed
# automatically).
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
# Set this up to parse Django-driven code.
# If your extensions are in another directory, add it here. If the directory
# is relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
#sys.path.append(os.path.abspath('.'))
# General configuration
# ---------------------
# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# Add any paths that contain templates here, relative to this directory.
# The suffix of source filenames.
# The encoding of source files.
#source_encoding = 'utf-8'
# The master toctree document.
# General information about the project.
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None
# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'
# List of documents that shouldn't be included in the build.
#unused_docs = []
# List of directories, relative to source directory, that shouldn't be searched
# for source files.
# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None
# If true, '()' will be appended to :func: etc. cross-reference text.
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False
# The name of the Pygments (syntax highlighting) style to use.
# Options for HTML output
# -----------------------
# The style sheet to use for HTML and HTML Help pages. A file of that name
# must exist either in Sphinx' static/ path, or in one of the custom paths
# given in html_static_path.
# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None
# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None
# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'
# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True
# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}
# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}
# If false, no module index is generated.
#html_use_modindex = True
# If false, no index is generated.
#html_use_index = True
# If true, the index is split into individual pages for each letter.
#html_split_index = False
# If true, the reST sources are included in the HTML build as _sources/<name>.
#html_copy_source = True
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''
# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''
# Output file base name for HTML help builder.
# Options for LaTeX output
# ------------------------
# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'
# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, document class
# [howto/manual]).
# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None
# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False
# Additional stuff for the LaTeX preamble.
#latex_preamble = ''
# Documents to append as an appendix to all manuals.
#latex_appendices = []
# If false, no module index is generated.
#latex_use_modindex = True
# Example configuration for intersphinx: refer to the Python standard library.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\codebase\settings_local.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\manual\conf.py
# -*- coding: utf-8 -*-
#
# Review Board Manual build configuration file, created by
# sphinx-quickstart on Thu Feb 12 02:10:34 2009.
#
# This file is execfile()d with the current directory set to its containing
# dir.
#
# The contents of this file are pickled, so don't put values in the namespace
# that aren't pickleable (module imports are okay, they're removed
# automatically).
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
# Set this up to parse Django-driven code.
# The nightly docs system needs to inject certain builds of Djblets and Django.
# PYTHONPATH will only append, meaning that the system-installed ones will
# be looked up first, so allow us to append instead.
# Set up logging. Sphinx won't set up a root logger for us, and we want to
# avoid errors about not having handlers there.
# If your extensions are in another directory, add it here. If the directory
# is relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
#sys.path.append(os.path.abspath('.'))
# General configuration
# ---------------------
# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# Add any paths that contain templates here, relative to this directory.
# The suffix of source filenames.
# The encoding of source files.
#source_encoding = 'utf-8'
# The master toctree document.
# General information about the project.
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None
# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'
# List of documents that shouldn't be included in the build.
#unused_docs = []
# List of directories, relative to source directory, that shouldn't be searched
# for source files.
# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None
# If true, '()' will be appended to :func: etc. cross-reference text.
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False
# The name of the Pygments (syntax highlighting) style to use.
# Disable warning of unknown referenced options.
# Options for HTML output
# -----------------------
# The style sheet to use for HTML and HTML Help pages. A file of that name
# must exist either in Sphinx' static/ path, or in one of the custom paths
# given in html_static_path.
# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None
# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "classic.css" will overwrite the builtin "classic.css".
#html_static_path = ['_static']
# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'
# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True
# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}
# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}
# If false, no module index is generated.
#html_use_modindex = True
# If false, no index is generated.
#html_use_index = True
# If true, the index is split into individual pages for each letter.
#html_split_index = False
# If true, the reST sources are included in the HTML build as _sources/<name>.
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''
# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''
# Output file base name for HTML help builder.
# Options for LaTeX output
# ------------------------
# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'
# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, document class
# [howto/manual]).
# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None
# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False
# Additional stuff for the LaTeX preamble.
#latex_preamble = ''
# Documents to append as an appendix to all manuals.
#latex_appendices = []
# If false, no module index is generated.
#latex_use_modindex = True
# Determine the branch or tag used for code references.
# Check whether reviewboard.org intersphinx lookups should use the local
# server.
#%s', 'Backbone.'),
# Common to models.
# Common to forms.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\manual\docsmanage.py
#!/usr/bin/env python
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\manual\settings_local.py
# Set this in order to bypass code that auto-fills the database with
# SCMTool data.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\manual\_ext\webapidocs.py
# Mapping of mimetypes to language names for syntax highlighting.
# Initialize Review Board
# Build the list of parents.
# This is normally set internally by Djblets, but we don't
# go through the standard __call__ flow.
# Add the class's file and this extension to the dependencies.
# Main section
# Details section
# Fields section
# Links section
# HTTP method descriptions
# Resources have more specific mimetypes. We want to
# filter out the general ones (like application/json)
# so we don't show redundant examples.
# JSON is preferred. While we support XML, let's not
# continue to advertise it.
# Instead of telling the user to ask for a specific
# mimetype on the request, show them that asking for
# application/json works fine.
# Name
# URI
# Required features
# Token Policy ID
# HTTP Methods
# Parent Resource
# Child Resources
# Anonymous Access
# Description text
# Request Parameters section
# Errors section
# Change "put" and "post" to "update" and "create", respectively.
# "put" and "post" are just wrappers and we don't want to show
# their documentation.
# ResourceFieldDirective outputs two fields (two table cells) per
# field. We want to loop through and grab each.
# Field/type information
# Description/required/versioning information
# First see if this is a string name for a type. This would be
# coming from a docstring.
# We may be dealing with a forward-declared class.
# Maybe we can parse this?
# Add the class's file and this extension to the dependencies.
# Details section
# Example section
# API Error Code
# HTTP Status Code
# Error Text
# HTTP Headers
# Description
# Only the non-recursive calls to this function will reach here. This
# means that there is no suitable set of parent models that match this
# resource.
# Filter out some additional log messages.
# Our fixtures include a Git Repository that is intended to point at the
# git_repo test data. However, the path field of a repository *must*
# contain an absolute path, so we cannot include the real path in the
# fixtures. Instead we include a placeholder path and replace it when we go
# to build docs, as we know then what the path will be.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\releasenotes\conf.py
# -*- coding: utf-8 -*-
#
# Release Notes build configuration file, created by
# sphinx-quickstart on Thu Feb 12 02:10:34 2009.
#
# This file is execfile()d with the current directory set to its containing
# dir.
#
# The contents of this file are pickled, so don't put values in the namespace
# that aren't pickleable (module imports are okay, they're removed
# automatically).
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
# If your extensions are in another directory, add it here. If the directory
# is relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
# Set this up to parse Django-driven code.
# General configuration
# ---------------------
# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# Add any paths that contain templates here, relative to this directory.
# The suffix of source filenames.
# The encoding of source files.
#source_encoding = 'utf-8'
# The master toctree document.
# General information about the project.
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None
# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'
# List of documents that shouldn't be included in the build.
#unused_docs = []
# List of directories, relative to source directory, that shouldn't be searched
# for source files.
# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None
# If true, '()' will be appended to :func: etc. cross-reference text.
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False
# The name of the Pygments (syntax highlighting) style to use.
# Options for HTML output
# -----------------------
# The style sheet to use for HTML and HTML Help pages. A file of that name
# must exist either in Sphinx' static/ path, or in one of the custom paths
# given in html_static_path.
# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None
# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'
# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True
# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}
# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}
# If false, no module index is generated.
#html_use_modindex = True
# If false, no index is generated.
# If true, the index is split into individual pages for each letter.
#html_split_index = False
# If true, the reST sources are included in the HTML build as _sources/<name>.
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''
# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''
# Output file base name for HTML help builder.
# Options for LaTeX output
# ------------------------
# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'
# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, document class
# [howto/manual]).
# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None
# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False
# Additional stuff for the LaTeX preamble.
#latex_preamble = ''
# Documents to append as an appendix to all manuals.
#latex_appendices = []
# If false, no module index is generated.
#latex_use_modindex = True
# Check whether reviewboard.org intersphinx lookups should use the local
# server.
# Add references for intersphinx and custom roles.
#%s', 'Backbone.'),
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\releasenotes\_ext\extralinks.py
#' + utils.unescape(text),
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\docs\releasenotes\_ext\retina_images.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\dependencies.py
#: The minimum supported version of Python 2.x.
#: The minimum supported version of Python 3.x.
#: A string representation of the minimum supported version of Python 2.x.
#: A string representation of the minimum supported version of Python 3.x.
#: A dependency version range for Python 2.x.
#: A dependency version range for Python 3.x.
# NOTE: This file may not import other (non-Python) modules! (Except for
#       the parent reviewboard module, which must be importable anyway). This
#       module is used for packaging and be needed before any dependencies
#       have been installed.
#: The major version of Django we're using for documentation.
#: The major version of Djblets we're using for documentation.
#: The version range required for Django on Python 2.x
#: The version range required for Django on Python 3.x.
#: The version of Django required for the current version of Python.
# We set the above to a default for doc purposes. We'll override here.
#: The version range required for Djblets.
#: All dependencies required to install Review Board.
# The following are pinned versions/ranges needed to satisfy dependency
# conflicts between multiple projects. We are not using these directly.
# These should be removed in future versions of Review Board as
# dependencies change.
# asana dependencies:
# django-oauth-toolkit dependencies:
#: Dependencies only specified during the packaging process.
#:
#: These dependencies are not used when simply developing Review Board.
#: The dependencies here are generally intended to be those that themselves
#: require Review Board.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\deprecation.py
#: An alias for the next release of Djblets where features would be removed.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\manage.py
#!/usr/bin/env python
# We're now safe to import anything that might touch Django settings,
# such as code utilizing the database. Start importing what we need for
# dependency checks.
# Make sure the correct version of Python is being used. This should be
# covered by setup.py, but it's best to make sure here.
# Check for NodeJS and installed modules, to make sure these weren't
# missed during installation.
# The following checks are non-fatal warnings, since these dependencies
# are merely recommended, not required. These are primarily for SCM
# support.
# Along with all those, Django will print warnings/errors for database
# backend modules if the configuration requires it.
#
# Now that that's all done, check if anything was missing and, if so,
# fail with some helpful text.
# See if we can make a backup of the database.
# Make a copy of the database.
# Force using HTTP/1.1 for all responses, in order to work around
# some browsers (Chrome) failing to consistently handle some
# cache headers.
# Some of our checks require access to django.conf.settings, so
# tell Django about our settings.
#
# Initialize Review Board, so we're in a state ready to load
# extensions and run management commands.
#
# Note that we don't do this for operations that may create the
# database, since we don't want to run the risk of initialization
# callbacks causing database creation to fail. (rb-site does not
# initialize during its site creation process.)
# We want to handle this command specially. This function will
# perform its own command line executions, so bail after it's
# done.
# Add the parent directory of 'manage.py' to the python path, so
# manage.py can be run from any directory.
# From http://www.djangosnippets.org/snippets/281/
# Python may insert the directory that manage.py is in into the Python
# path, which can cause conflicts with other modules (such as Python's
# "site" module). We don't want this, so it's important that we remove
# this directory from the path.
# We're running unit tests, so we need to be sure to mark this in
# order for the settings to reflect that. Otherwise, the test runner
# will do things like load extensions or compile static media.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\rb_platform.py
#: Location of the sitelist file. This file maintains a list of the installed
#: Review Board sites on this machine and is used when performing a site
#: upgrade to ensure all sites are upgraded together.
#: Default location of the cache directory. This path is used in
#: :command:`rb-site install` if using a file-based cache instead of a
#: memcached-based cache.
#: Preferred location of the Review Board sites. If the :program:`rb-site`
#: tool is passed a site name instead of a full path, it will be prepended
#: with this path.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\settings.py
# Django settings for reviewboard project.
# Can't import django.utils.translation yet
#: The name of the product.
#:
#: This should not be changed.
# Time zone support. If enabled, Django stores date and time information as
# UTC in the database, uses time zone-aware datetime objects, and translates
# them to the user's time zone in templates and forms.
# Local time zone for this installation. All choices can be found here:
# http://www.postgresql.org/docs/8.1/static/datetime-keywords.html#DATETIME-TIMEZONE-SET-TABLE
# When USE_TZ is enabled, this is used as the default time zone for datetime
# objects
# Language code for this installation. All choices can be found here:
# http://www.w3.org/TR/REC-html40/struct/dirlang.html#langcodes
# http://blogs.law.harvard.edu/tech/stories/storyReader$15
# This should match the ID of the Site object in the database.  This is used to
# figure out URLs to stick in e-mails and related pages.
# The prefix for e-mail subjects sent to administrators.
# Default name of the service used in From e-mail when not spoofing.
#
# This should generally not be overridden unless one needs to thoroughly
# distinguish between two different Review Board servers AND DMARC is causing
# issues for e-mails.
# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
# Keep these first, in order
# These must go before anything that deals with settings.
# Keep this second to last so that everything is initialized before
# middleware from extensions are run.
# Keep this last so we can set the details for an exception as soon as
# possible.
# where is the site on your server ? - add the trailing slash.
# Must be after djblets.pipeline
# If installed, add django_reset to INSTALLED_APPS. This is used for the
# 'manage.py reset' command, which is very useful during development.
# The backends that are used to authenticate requests against the web API.
# A list of supported password hashers. This contains some old hashers we no
# longer want to use to generate passwords, but are needed for legacy servers.
#
# This is current as of Django 1.11.
# Set up a default cache backend. This will mostly be useful for
# local development, as sites will override this.
#
# Later on, we'll swap this 'default' out for the forwarding cache,
# and set up 'default' as the cache being forwarded to.
# Default expiration time for the cache.  Note that this has no effect unless
# CACHE_BACKEND is specified in settings_local.py
# 1 month
# Custom test runner, which uses nose to find tests and execute them.  This
# gives us a somewhat more comprehensive test execution than django's built-in
# runner, as well as some special features like a code coverage report.
# Default ALLOWED_HOSTS to allow everything. This should be overridden in
# settings_local.py
# Cookie settings
# 1 year
# Default support settings
# Regular expression and flags used to match review request IDs in commit
# messages for hosting service webhooks. These can be overriden in
# settings_local.py.
#)'
# The SVN backends to attempt to load, in order. This is useful if more than
# one type of backend is installed on a server, and you need to force usage
# of a specific one.
# Gravatar configuration.
# Don't forget to use absolute paths, not relative paths.
# List of callables that know how to import templates from various sources.
# A list of extensions that will be enabled by default when first loading the
# extension registration. These won't be re-enabled automatically if disabled.
# Load local settings.  This can override anything in here, but at the very
# least it needs to define database connectivity.
# If we're using MySQL, switch to our custom backend.
# reviewboard/ is in the same directory as settings_local.py.
# This is probably a Git checkout.
# This is likely a site install. Get the parent directory.
# XXX This is deprecated, but kept around for compatibility, in case any
#     old extensions reference it. We'll want to deprecate it.
# Haystack requires this to be defined here, otherwise it will throw errors.
# The actual HAYSTACK_CONNECTIONS settings will be loaded through
# load_site_config().
# Custom Django Evolutions for modules we use.
# Make sure that we have a staticfiles cache set up for media generation.
# By default, we want to store this in local memory and not memcached or
# some other backend, since that will cause stale media problems.
# Set up a ForwardingCacheBackend, and forward to the user's specified cache.
# We're swapping this around so that the 'default' is forced to be the
# the forwarding backend, and the former 'default' is what's being forwarded
# to. This is necessary because the settings_local.py will likely specify
# a default.
# URL prefix for media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
#
# Examples: "http://foo.com/media/", "/media/".
# Base these on the user's SITE_ROOT.
# Static media setup
# On production (site-installed) builds, we always want to use the
# pre-compiled versions. We want this regardless of the DEBUG setting
# (since they may turn DEBUG on in order to get better error output).
# This is just here for backwards-compatibility with any stylesheets
# that still have this. It's no longer necessary because compilation
# happens on the back-end instead of in the browser.
# Packages to unit test
# URL Overrides
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\signals.py
#: Emitted when the initialization of Review Board is complete.
#:
#: This will emit any time a process or thread has finished initializing,
#: and is ready to serve requests.
#: Emitted when site settings have been loaded.
#:
#: Any time there are new settings saved or loaded, this will emit. Consumers
#: can listen and update their own state based on the new settings.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\staticbundles.py
# Media compression
# The order matters for the Jasmine modules.
# Note: These are roughly in dependency order.
# Note: These are roughly in dependency order.
# Note: These are roughly in dependency order.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\test.py
# Load in all the models for the admin UI, so tests have access to
# admin URLS.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\tests.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\urls.py
# Useful collections of URL names that may be interesting to callers.
# This is especially useful for any apply_to lists in hooks.
# Load in all the models for the admin UI.
# URLs global to all modes
# Add static media if running in DEBUG mode on a non-production host.
# Support
# Users
# User info box
# User file attachments
# Search
# Main includes
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\__init__.py
#: The version of Review Board.
#:
#: This is in the format of:
#:
#: (Major, Minor, Micro, Patch, alpha/beta/rc/final, Release Number, Released)
#:
# Set RBSITE_PYTHON_PATH to the path we need for any RB-bundled
# scripts we may call.
# Django >= 1.7
# Django < 1.7
# This overrides a default Django templatetag (url), and we want to
# make sure it will always get loaded in every Python instance.
#
# NOTE: This is only needed for Django 1.6, and can be removed when we
#       move to a newer release.
# Set up logging.
# Generate the AJAX serial, used for AJAX request caching.
# Store the AJAX serial as a template serial, so we have a reference
# to the real serial last modified timestamp of our templates. This
# is useful since the extension manager will be modifying AJAX_SERIAL
# to prevent stale caches for templates using hooks. Not all templates
# use hooks, and may want to base cache keys off TEMPLATE_SERIAL
# instead.
#
# We only want to do this once, so we don't end up replacing it
# later with a modified AJAX_SERIAL later.
# Load all extensions
#: An alias for the the version information from :py:data:`VERSION`.
#:
#: This does not include the last entry in the tuple (the released state).
#: An alias for the version used for the Python package.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\admin.py
# Get rid of the old User admin model, and replace it with our own.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\context_processors.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\decorators.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\errors.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\managers.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\middleware.py
#: The smallest period of time between login time updates.
# 30 minutes
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\mixins.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\models.py
# Set this up with a ReviewRequestVisitManager, which inherits from
# ConcurrencyManager to help prevent race conditions.
# This will redirect new users to the account settings page the first time
# they log in (or immediately after creating an account).  This allows
# people to fix their real name and join groups.
# Whether the user wants to receive emails
# Indicate whether closed review requests should appear in the
# review request lists (excluding the dashboard).
# A list of starred review requests. This allows users to monitor a
# review request and receive e-mails on updates without actually being
# on the reviewer list or commenting on the review. This is similar to
# adding yourself to a CC list.
# A list of watched groups. This is so that users can monitor groups
# without actually joining them, preventing e-mails being sent to the
# user and review requests from entering the Incoming Reviews list.
# Allows per-user timezone settings
# A dictionary of permission that the user has granted. Any permission
# missing is considered to be False.
# Counts for quickly knowing how many review requests are incoming
# (both directly and total), outgoing (pending and total ever made),
# and starred (public).
#
# The following functions are patched onto the User model.
#
# This is an optimization used by the web API. It will set
# is_private on this User instance through a query, saving a
# lookup for each instance.
#
# This must be done because select_related() and
# prefetch_related() won't cache reverse foreign key relations.
# Note that we use the same cache variable that a select_related() call
# would use, ensuring that we benefit from Django's caching when possible.
# This may raise Profile.DoesNotExist.
# While modern versions of Review Board set this to an empty dictionary,
# old versions would initialize this to None. Since we don't want to litter
# our code with extra None checks everywhere we use it, normalize it here.
# This may raise LocalSiteProfile.DoesNotExist.
# Set these directly in order to avoid further lookups.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\pages.py
#%s'
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\privacy.py
# Unregister our consent requirements (but leave ones provided by
# extensions).
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\search_indexes.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\test_review_request_visit_manager.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\trophies.py
#: The category of the trophy.
#:
#: This is the string ID of the trophy. For historical reasons, it's
#: referred to as a category and not an ID.
#: The name of the trophy.
#: URLs for the trophy images.
#:
#: This is a dictionary of images, where each key is a resolution
#: specifier (``1x``, ``2x``, etc.), and the value is a URL.
#:
#: Each must have widths/heights that are multipliers on the base
#: width/height for the ``1x`` specifier.
#: The width of the base image.
#: The height of the base image.
#:
#: It is recommended to use a height of 48px max.
#%(review_request_id)d!'
#: The registry of available trophies.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\views.py
# These are accessed several times, so bring them in to reduce
# attribute lookups.
# If we import this at global scope, it will cause issues with admin sites
# being automatically registered.
# Show a warning at the top of the form when the form is disabled for
# security.
#
# We don't need to worry about full_clean not being called (which would
# be if we went through form.errors) because this form will never be
# saved.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\ad.py
# Collect groups recursively.
# Search for groups with the specified CN. Use the CN
# rather than The sAMAccountName so that behavior is
# correct when the values differ (e.g. if a
# "pre-Windows 2000" group name is set in AD)
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\base.py
#: The unique ID for the authentication backend.
#: The display name for the authentication backend.
#:
#: This will be shown in the list of backends in the administration UI.
#: The form class used for authentication settings.
#:
#: This must be a subclass of
#: :py:class:`~djblets.siteconfig.forms.SiteSettingsForm`.
#: Whether this backend supports registering new users.
#: Whether this backend supports changing the user's full name.
#: Whether this backend supports changing the user's e-mail address.
#: Whether this backend supports changing the user's password.
#: Authentication instructions to display above the Login form.
#: A regex for matching invalid characters in usernames.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\http_digest.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\ldap.py
# Don't try to bind using an empty password; the server will
# return success, which doesn't mean we have authenticated.
# http://tools.ietf.org/html/rfc4513#section-5.1.2
# http://tools.ietf.org/html/rfc4513#section-6.3.1
# Now that we have the user, attempt to bind to verify
# authentication.
# The user wasn't in the database, so we'll look it up in
# LDAP below.
# Perform a BASE search since we already know the DN of
# the user
# If a single ldap attribute is used to hold the full name of
# a user, split it into two parts.  Where to split was a coin
# toss and I went with a left split for the first name and
# dumped the remainder into the last name field.  The system
# admin can handle the corner cases.
#
# If the full name has no white space to split on, then the
# entire full name is dumped into the first name and the
# last name becomes an empty string.
# Log in as the service account before searching.
# Bind anonymously to the server.
# If the UID mask has been explicitly set, use it instead of
# computing a search filter.
# Search for the user with the given base DN and uid. If the user
# is found, a fully qualified DN is returned.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\nis.py
# FIXME I'm not sure under what situations this would fail (maybe
# if their NIS server is down), but it'd be nice to inform the
# user.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\registry.py
#: Registry instance for working with available authentication backends.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\standard.py
# First, get the list of all global permissions.
#
# Django's ModelBackend doesn't support passing an object, and will
# return an empty set, so don't pass an object for this attempt.
# We know now that this is a LocalSite, due to the assertion
# above.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\x509.py
# TODO Add the ability to get the first and last names in a
#      configurable manner; not all X.509 certificates will have
#      the same format.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\backends\__init__.py
# Legacy references.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\extra_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\is_private.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\localsiteprofile_permissions.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\open_an_issue.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\profile_default_use_rich_text.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\profile_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\profile_should_send_email.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\profile_should_send_own_updates.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\profile_show_closed.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\reviewrequestvisit_visibility.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\timezone.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\timezone_length_30.py
# http://code.google.com/p/reviewboard/issues/detail?id=3005
# Increasing the size of timezone to deal with largest TZ.
# len('America/Argentina/Buenos_Aires') == 30.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\unique_together_baseline.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\forms\auth.py
# This is done at initialization time instead of in the field
# definition because the format operation causes the lazy translation
# to be evaluated, which has to happen after the i18n infrastructure
# has been started.
#createsite',
# TODO: Invent a URIField and use it.
# This is done at initialization time instead of in the field
# definition because the format operation causes the lazy translation
# to be evaluated, which has to happen after the i18n infrastructure
# has been started.
# Note: These names correspond to environment variables set by
#       mod_ssl.
# Allow the user to use a custom environment variable
# Check if the number of failed login attempts were already exceeded
# before authenticating.
# If authentication for a given user has failed (i.e.
# self.user_cache is None), increment the number of
# failed login attempts.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\forms\pages.py
#: Features required for a form to be displayed.
# Fetch the list of the user's API tokens, globally.
# Group the API tokens by LocalSite or the global site.
# Fetch the list of IDs of groups the user has joined.
# Fetch the list of groups available to the user.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\forms\registration.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\forms\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\templatetags\accounts.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\templatetags\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_account_page.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_account_settings_form.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_ad_auth_backend.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_base_auth_backend.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_change_password_form.py
# Suppresses MessageFailure Exception at the end of save()
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_check_login_required_view_mixin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_edit_oauth_app_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_ldap_auth_backend.py
# These settings will get overridden on future test runs, since
# they'll be reloaded from siteconfig.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_login_required_view_mixin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_my_account_view.py
# Accept all consent requirements *except* the policy.
# Accept all consent requirements *except* the policy.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_privacy_form.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_profile.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_profile_form.py
# Suppresses MessageFailure Exception at the end of save()
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_review_request_visit.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_standard_auth_backend.py
# We do not use isinstance here because we specifically want a
# StandardAuthBackend and not an instance of a subclass of it.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_template_tags.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_trophy.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_update_last_login_middleware.py
# Make sure this has saved.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_user.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_user_infobox_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_user_profile_required_view_mixin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_valid_prefs_required.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\test_x509_auth_middleware.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\accounts\tests\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\apps.py
# Django < 1.7
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\cache_stats.py
# Assume this is a hostname without a port.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\checks.py
#
# reviewboard/admin/checks.py -- Dependency checks for items which are used in
#                                the admin UI. For the most part, when one of
#                                these fails, some piece of UI is disabled with
#                                the returned error message.
#
# Copyright (c) 2008-2009  Christian Hammond
# Copyright (c) 2009  David Trowbridge
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Check if we can access a SiteConfiguration. There should always
# be one, unless the user has erased stuff by hand.
#
# This also checks for any sort of errors in talking to the database.
# This could be due to the database being down, or corrupt, or
# tables locked, or an empty database, or other cases. We want to
# catch this before getting the point where plain 500 Internal Server
# Errors appear.
# Check if the version running matches the last stored version.
# Only do this for non-debug installs, as it's really annoying on
# a developer install.:
# Check if the site has moved and the old media directory no longer
# exists.
# Check if the site has moved and the old media directory no longer
# exists.
# Check if the user has any pending static media configuration
# changes they need to make.
# Check if there's a media/uploaded/images directory. If not, this is
# either a new install or is using the old-style media setup and needs
# to be manually upgraded.
# This will happen if running on Windows (which doesn't have
# the pwd module) and if %LOGNAME%, %USER%, %LNAME% and
# %USERNAME% are all undefined.
# Check if the data directory (should be $HOME) is writable by us.
# This will happen if running on Windows (which doesn't have
# the pwd module) and if %LOGNAME%, %USER%, %LNAME% and
# %USERNAME% are all undefined.
# Check if the the legacy htdocs and modern static extension
# directories exist and are writable by us.
#
# NOTE: Add new checks above this.
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\context_processors.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\decorators.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\form_widgets.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\import_utils.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\middleware.py
# This will be unset if the SiteConfiguration expired, since we'll
# have a new one in the cache.
# Load all site settings.
# Let another handler handle this.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\mixins.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\read_only.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\security_checks.py
# Some web server configurations prevent even saving
# files with certain extensions. In this case, things
# will definitely succeed.
# Filter out any extensions that we failed to save, because we
# don't need to check that they downloaded properly.
#echo var="LAST_MODIFIED" -->\n'
#exec cmd="echo HI!" -->\n'
#!/bin/sh\n'
# An HTTP 403 is also an acceptable response
# Exceptions coming from this will be caught higher up.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\server.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\siteconfig.py
#
# reviewboard/admin/siteconfig.py -- Siteconfig definitions for the admin app
#                                    in Review Board. This expands on
#                                    djblets.siteconfig to let administrators
#                                    configure special authentication and
#                                    storage methods, as well as all our
#                                    reviewboard-specific settings.
#
# Copyright (c) 2008-2009  Christian Hammond
# Copyright (c) 2009  David Trowbridge
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# A mapping of our supported storage backend names to backend class paths.
# A mapping of siteconfig setting names to Django settings.py names.
# This also contains all the djblets-provided mappings as well.
# Settings for django-storages
# All the default values for settings.
# Overwrite this.
# Re-initialize Haystack's connection information to use the updated
# settings.
# If siteconfig needs to be saved back to the DB, set dirty=true
# We got something else. Likely, this doesn't exist yet and we're
# doing a syncdb or something, so silently ignore.
# Populate defaults if they weren't already set.
# The default value for DEFAULT_EMAIL_FROM (webmaster@localhost)
# is less than good, so use a better one if it's set to that or if
# we haven't yet set this value in siteconfig.
# STATIC_* and MEDIA_* must be different paths, and differ in meaning.
# If site_static_* is empty or equal to media_static_*, we're probably
# migrating from an earlier Review Board install.
# Populate the settings object with anything relevant from the siteconfig.
# Logging may have changed, so restart logging.
# Now for some more complicated stuff...
# Site administrator settings
# Explicitly base this off the STATIC_URL
# Set the auth backends
# If we're upgrading from a 1.x LDAP configuration, populate
# ldap_uid and clear ldap_uid_mask
# Get the username attribute from the old UID mask
# LDAP attributes can contain only alphanumeric
# characters and the hyphen and must lead with an
# alphabetic character. This is not dependent upon
# locale.
# Assign LDAP_UID the value of the retrieved attribute
# Couldn't match the old value?
# This should be impossible, but in this case, let's
# just guess a sane default and hope for the best.
# Neither the old nor new value?
# This should be impossible, but in this case, let's just
# guess a sane default and hope for the best.
# Remove the LDAP_UID_MASK value
# Set the dirty flag so we save this back
# Add APITokenBackend to the list of auth backends. This one is always
# present, and is used only for API requests.
# Reset the WebAPI auth backends in case OAuth2 has become disabled.
# Set the storage backend
# These blow up if they're not the perfectly right types
# Migrate over any legacy avatar backend settings.
# Save back changes if they have been made
# Reload privacy consent requirements
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\support.py
# To work around rb-site requiring values in previous releases for these,
# people would try empty quotes. We want to convert those to actual
# empty strings.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\urls.py
#
# reviewboard/admin/urls.py -- URLs for the admin app
#
# Copyright (c) 2008-2009  Christian Hammond
# Copyright (c) 2009  David Trowbridge
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\validation.py
# Ignore escaped `%`'s
# Ensure an arbitrary value can be inserted into the URL string
# Try formatting the URL using an empty tuple to verify that it
# doesn't contain any format characters.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\views.py
# Fall through. It will be reported inline and in the log.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\widgets.py
#: The unique ID of the widget.
#: The name of the widget.
#:
#: This will be shown at the top of the widget.
#: The name of the template used to render the widget.
#: Additional CSS classes to apply to the widget.
#:
#: If set, this must be a string with a space-separated list of CSS
#: classes.
#: The name of the JavaScript view rendering the widget.
#: The name of the JavaScript model handling widget state.
# Constants
# Configuration
# Convert the date from the request.
#
# This takes the date from the request in YYYY-MM-DD format and
# converts into a format suitable for QuerySet later on.
#: The registry of available administration widgets.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\custom_evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\custom_evolutions\oauth2_provider\move_to_migrations.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\custom_evolutions\oauth2_provider\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\auth_settings.py
# Reload any important changes into the Django settings.
# Note that this isn't validated yet, but that's okay given our
# usage. It's a bit of a hack though.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\avatar_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\diff_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\email_settings.py
# Reload any important changes into the Django settings.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\general_settings.py
# Django >= 1.7
# Django < 1.7
# Load the rest of the settings from the form.
# Load the cache settings.
# This must come after we've loaded the general settings.
# urlparse doesn't properly handle URLs without a scheme. It
# believes the domain is actually the path. So we apply a prefix.
# We want to specify a "reviewboard" location to keep items
# separate from those in other caches.
# memcached allows a list of servers, rather than just a
# string representing one.
# Reload any important changes into the Django settings.
# Reset the required flags for any modified field.
# If the cache backend is open, try closing it. This may fail,
# so we want to ignore any failures.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\logging_settings.py
# Reload any important changes into the Django settings.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\privacy_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\search_settings.py
# The search_backend_id field is only available if the backend
# passed validation.
# We only need to update the backend settings when search is
# enabled.
# Reload any import changes to the Django settings.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\ssh_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\storage_settings.py
# TODO: these items are consumed in the S3Storage backend, but I'm not
# totally sure what they mean, or how to let users set them via siteconfig
# (especially AWS_HEADERS, which is a dictionary). For now, defaults will
# suffice.
#
# 'aws_headers':            'AWS_HEADERS',
# 'aws_default_acl':        'AWS_DEFAULT_ACL',
# 'aws_querystring_active': 'AWS_QUERYSTRING_ACTIVE',
# 'aws_querystring_expire': 'AWS_QUERYSTRING_EXPIRE',
# 'aws_s3_secure_urls':     'AWS_S3_SECURE_URLS',
# TODO: this is consumed in the CouchDBStorage backend, but I'm not sure
# how to let users set it via siteconfig, since it's a dictionary. Since I
# haven't tested the CouchDB backend at all, it'll just sit here for now.
#
# 'couchdb_storage_options': 'COUCHDB_STORAGE_OPTIONS',
# Note that this isn't validated yet, but that's okay given our
# usage. It's a bit of a hack though.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\support_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\forms\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\management\sites.py
# new settings key                   # old settings key
# Convert everything in the table.
# This may be a tuple in a tuple, or it may just be a tuple.
# Try to transform the authentication backend
# The user has some custom backend set. Just set the entire list
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\management\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\management\commands\dumpdb.py
# dbdump v1 - %s objects' % totalobjs)
# Skip the "[" and "]"
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\management\commands\loaddb.py
# dbdump v(\d+) - (\d+) objects$', line)
#':
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\management\commands\resolve-check.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\management\commands\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\templatetags\rbadmintags.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\templatetags\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_checks.py
# Make sure we don't break further tests by resetting this fully.
# If test_manual_updates_bad_upload failed in the middle, it could
# neglect to fix the MEDIA_ROOT, which will break a bunch of future
# tests. Make sure it's always what we expect.
# NOTE: This is assuming the install is fine. It should be given
#       that we set things like the uploaded path correctly to
#       a known good directory before starting unit tests.
# Make sure that the site works again once the media root is fixed.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_dashboard_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_legacy_widgets.py
# Just in case a test fails to unregister as expected, remove the
# legacy widget here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_related_group_widget.py
#groups'),
#groups'),
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_related_repository_widget.py
#repositories'),
#repositories'),
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_related_user_widget.py
#default\\u002Dusers'),
#default\\u002Dusers'),
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_search_settings_form.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_ssh_settings_form.py
# Setup temp directory to prevent the original ssh related
# configurations been overwritten.
# Should have no ssh key at this point.
# Send post request with 'generate_key' = 1.
# On success, the form returns HTTP 302 (redirect).
# Check whether the key has been created.
# Should have no ssh key at this point, generate one.
# Send post request with 'delete_key' = 1.
# On success, the form returns HTTP 302 (redirect).
# Check whether the key has been deleted.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\test_validation.py
# Invalid - invalid format specification types
# Invalid - too many format specification types
# Invalid - no format specification types
# Valid - Escaped %'s, with a valid format specification type
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\admin\tests\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\forms.py
#: The caption for the file.
#: The file itself.
#: An optional file attachment history.
#:
#: This is used when creating a new revision for an existing file
#: attachment. If this is not specified, a new history will be created.
# This is a new file: create a new FileAttachmentHistory for it
# This should theoretically never happen, but who knows.
# This is a new update in the draft.
# The most recent revision is part of the same draft. Delete it
# and replace with the newly uploaded file.
#: The caption for the file.
#: The file itself.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\managers.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\mimetypes.py
# The browser didn't know what this was, so we'll need to do
# some guess work. If we have 'file' available, use that to
# figure it out.
# Write the content from the file until file has enough data to
# make a determination.
# file closed, so we hopefully have an answer.
# Reset the read position so we can properly save this.
#: A list of mimetypes supported by this handler.
#: Whether HD thumbnails are provided by this handler.
#:
#: Subclasses (especially in extensions) can use this to introspect what
#: size thumbnails they should generate.
# Override the mimetype if mimeparse is known to misinterpret this
# type of file as `octet-stream`
# We'll just use this as our fallback.
# Read up to 'FILE_CROP_CHAR_LIMIT' number of characters from
# the file attachment to prevent long reads caused by malicious
# or auto-generated files.
# Caches the generated thumbnail to eliminate the need on each page
# reload to:
# 1) re-read the file attachment
# 2) re-generate the html based on the data read
# Use safe filtering against injection attacks
# A mapping of mimetypes to icon names.
#
# Normally, a mimetype will be normalized and looked up in our bundled
# list of mimetype icons. However, if the mimetype is in this list, the
# associated name is used instead.
# A mapping of file extensions to mimetypes
#
# Normally mimetypes are determined by mimeparse, then matched with
# one of the supported mimetypes classes through a best-match algorithm.
# However, mimeparse isn't always able to catch the unofficial mimetypes
# such as 'text/x-rst' or 'text/x-markdown', so we just go by the
# extension name.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\models.py
# Right now, display_position is monotonically increasing for each
# review request. In the future this might be extended to allow the
# user to change the order of attachments on the page.
# repo_path, repo_revision, and repository are used to identify
# FileAttachments associated with committed binary files in a source tree.
# They are not used for new files that don't yet have a revision.
#
# For new files, the added_in_filediff association is used.
# Older versions of Review Board didn't store the original filename,
# instead just using the FileField's name. Newer versions have
# a dedicated filename field.
# Maybe it's on a draft.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\tests.py
# Add a file with the given history
# Post an update
# Post two updates without publishing the draft in between
# Add another (unrelated) file to check display position
# Register test cases in same order as they are defined
# in this test
# Unregister test cases in same order as they are defined
# in this test
# Exact Match
# Handle vendor-specific match
# Left match and Wildcard should trump Left Wildcard and match
# The diff viewer's caching breaks the result of these tests,
# so be sure we clear before each one.
# Set up the initial state.
# Create a diff file attachment to be displayed inline.
# Load the diff viewer.
# The file attachment should appear as the right-hand side
# file attachment in the diff viewer.
# Set up the initial state.
# Create diff file attachments to be displayed inline.
# Load the diff viewer.
# The file attachment should appear as the right-hand side
# file attachment in the diff viewer.
# Django's in-memory cache won't mangle the string types, so we can't
# rely on just calling thumbnail twice. We have to fake it, so that
# that we simulate the real-world behavior of getting a raw string
# back out of a real cache.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\views.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\file_attachment_file_max_length_512.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\file_attachment_orig_filename.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\file_attachment_ownership.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\file_attachment_repo_info.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\file_attachment_repo_path_no_index.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\file_attachment_repo_revision_max_length_64.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\file_attachment_revision.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\file_attachment_uuid.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\attachments\templatetags\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\avatars\registry.py
#: The key for enabling avatars.
#: The legacy key for tracking avatar settings migrations.
#:
#: This was used in Review Board 3.0 through 3.0.3. This is no longer
#: stored in settings, and is used as part of the settings migration
#: process.
#: The legacy key for enabling Gravatars.
#:
#: This was used in Review Board 2.0 up until 3.0 and kept in settings
#: through 3.0.3. This is no longer stored in settings, and is used as
#: part of the settings migration process.
#: The default avatar service classes.
# Check if we're upgrading from a Review Board 2.0/2.5 install with
# Gravatar support disabled. If so, we want to reflect that.
#
# If this is a 3.0.x (pre-3.0.4) install, we'll have
# AVATARS_ENABLED_KEY in siteconfig, so we won't hit this logic. If
# it's 3.0.4+ we won't have 'integration_gravatars'.
#
# If it's a pre-2.0 install (pre-Gravatars), or 2.0/2.5 with Gravatars
# enabled, we won't save anything (in order to prevent an unnecessary
# save). Instead, we'll fall back to the siteconfig default of enabled.
# We're upgrading from a Review Board 2.0/2.5 database with
# Gravatars disabled, so store that in order to override the
# default state.
# Clean up any old state in the siteconfig settings that we don't
# want anymore.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\avatars\services.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\avatars\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\avatars\testcase.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\avatars\tests.py
# This just helps keep things less wordy, and to define some settings
# we no longer have constants for elsewhere.
# Perform the migration.
# Perform the migration.
# Perform the migration.
# Perform the migration.
# Perform the migration.
# Perform the migration.
# Perform the migration.
# Perform the migration.
# Make sure the default avatar and available/enabled avatars are
# still there.
# Verify that the saved settings reflect the correct state. These
# checks include the defaults:
# These checks are for what's actually written to siteconfig.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\avatars\__init__.py
#: The avatar services registry.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\avatars\templatetags\avatars.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\avatars\templatetags\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\changedescs\admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\changedescs\models.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\changedescs\tests.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\changedescs\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\changedescs\evolutions\changedesc_user.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\changedescs\evolutions\fields_changed_longtext.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\changedescs\evolutions\rich_text.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\changedescs\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\cmdline\rbext.py
# NOTE: We want to include Django-based modules as late as possible, in order
#       to allow extension-provided settings to apply.
#: The name of a command.
#:
#: This is what the user will type on the command line after ``rbext``.
#: The summary of the command.
#:
#: This will be shown in the help output.
# Note that we never actually handle this argument anywhere here.
# This is really just to satisfy the parser. The test runner itself
# handles it directly.
# Create the directory hierarchy.
# Create the packaging files.
# Create the extension source files.
# We're done!
#!/usr/bin/env python
# Your package dependencies go here.
# Don't include "ReviewBoard" in this list.
# For a full list of package classifiers, see
# %(classifiers_url)s
# You can create a list of CSS bundles to compile and ship
# with your extension. These can include both *.css and
# *.less (http://lesscss.org/) files. See
# %(static_docs_url)s
# JavaScript bundles are also supported. These support
# standard *.js files and *.es6.js files (which allow for
# writing and transpiling ES6 JavaScript).
# Default values for any configuration settings for your
# extension.
# Set is_configurable and define an admin_urls.py to add
# a standard configuration page for your extension.
# See %(configure_docs_url)s
# Set up any hooks your extension needs here. See
# %(hooks_docs_url)s
#python-extension-hooks' % extension_docs_url,
# We call out to things like the test runner, which expect to operate
# off of sys.argv. We want to simulate that now that we've parsed
# options. We'll restore sys.argv after the command finishes.
# Prevent the '--' and anything after it from being parsed, so the
# command can work with it.
# The "--" isn't in the list anywhere.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\cmdline\rbsite.py
#!/usr/bin/env python
# Ignore the PendingDeprecationWarnings that we'll get from Django.
# See bug 1683.
# Global State
# State saved during installation
# Assuming this is an upgrade, the 'uploaded' directory should
# already have the right permissions for writing, so use that as a
# template for all the new directories.
# The user didn't have permission to change the ownership,
# they'll have to do this manually later.
# Process the error docs templates and add them where the web server
# can get to them.
# This is from an older install where errordocs was linked to
# the versions shipped in the package.
# Remove any old media directories from old sites
# Generate .htaccess files that enable compression and
# never expires various file types.
# Make sure that we have our settings_local.py in our path for when
# we need to run manager commands.
# Django >= 1.7
# Extract the major and minor version from the string
# Raise a generic regex error so we go to the
# exception handler to pick a default
# Version check returned an error or the regular
# expression did not match. Guess 2.2 for historic
# compatibility
# Should never be reached.
# Get the Apache version so we know which
# authorization directive to use
# Should never be reached.
# Generate a secret key based on Django's code.
#$%^&*(-_=+)')
# Generate the settings_local.py
# Site-specific configuration settings for Review Board\n")
# Definitions of these settings can be found at\n")
# http://docs.djangoproject.com/en/dev/ref/settings/\n")
# Database configuration\n")
# Unique secret key. Don't share this with anybody.\n")
# Cache backend settings.\n")
# Extra site information.\n")
# Note that we're importing here so that we can ensure any new
# settings have already been applied prior to import by the caller.
# Check that the database exists and can be accessed.
# Prepare the evolver and queue up all Review Board apps so we can
# start running tests and ensuring everything is ready.
# Make sure that the stored evolutions and migrations will properly
# upgrade the database.
# We're all set up to perform the evolution.
# Begin the evolution process.
# Due to a bug in Review Board 2.0.x < 2.0.25 and 2.5.x < 2.5.7,
# the browser could end up filling in the hidden "password" field
# on repositories that were set up to use a hosting service. For
# these, we want to make sure those credentials are safely removed.
# Any remaining passwords should be encrypted (if coming from an older
# version before encryption was added).
# Very likely, there was no diffviewer_filediff.diff_hash_id
# column, indicating a pre-1.7 database. We want to assume
# a dedup is needed.
# Don't convert anything other than the ones we know about,
# or third parties with custom databases may have problems.
# Reload the settings module
# There may be a number of issues preventing this from working,
# such as a restricted network environment or a server issue on
# our side. This isn't a catastrophic issue, so don't bother them
# about it.
# This is a terrible hack, but it doesn't seem we have a great
# way of disabling Django's system checks otherwise.
#
# It's possible for commands to opt out of doing system checks
# (which we have no control over here), or to skip them when
# invoking the command (but not when executing through an argv
# approach). We'd also have the problem of commands calling other
# commands and re-invoking the checks.
#
# Given that, we're opting to monkey patch.
# Pre-fetch all the available management commands.
# Insert our own management commands into this list.
# Yes, this is a bit of a hack.
# Check if this is a .exe.
# new py2exe
# new py2exe
# tools/freeze
# Read the list in as a unique set.
# This way, we can easily eliminate duplicates.
# Verify that this path exists on the system
# And add it to the dictionary.
# Write all of the sites back to the file.
# Sort keys to ensure consistent order.
# Create the parent directory of the site
# if it doesn't already exist
# Create the parent directory with read-write
# permissions for user but read and execute
# only for others.
# We shouldn't consider this an abort-worthy error
# We'll warn the user and just complete setup
# This came from the 'default' value.
# UNIX-specific arguments
# There were required dependencies missing. Don't show any more
# pages.
# Do not ask for sitelist file, it should not be common.
# Make sure we can create the directory first.
# TODO: Do some chown tests too.
# Remove it first, to see if we own it and to handle the
# case where the directory is empty as a result of a
# previously canceled install.
# Don't leave a mess. We'll actually do this at the end.
# Likely a permission error.
# Appears only if using sqlite.
# Appears only if not using sqlite.
# Appears only if using memcached.
# Appears only if using file caching.
# Add the site to the sitelist file.
# We'll save this later, in case things go wrong. This will at
# least prevent reviewboard.admin.management.sites.init_siteconfig
# from outputting the above message.
# This is an upgrade of a site that pre-dates the new $HOME
# directory ($sitedir/data). Tell the user how to upgrade things.
# A list of all commands supported by rb-site.
# Check whether we've been asked to upgrade all installed sites
# by 'rb-site upgrade' with no path specified.
# Ensure we import djblets.log for it to monkey-patch the logging module.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\cmdline\rbssh.py
#!/usr/bin/env python
#
# rbssh.py -- A custom SSH client for use in Review Board.
#
# This is used as an ssh replacement that can be used across platforms with
# a custom .ssh directory. OpenSSH doesn't respect $HOME, instead reading
# /etc/passwd directly, which causes problems for us. Using rbssh, we can
# work around this.
#
#
# Copyright (c) 2010-2011  Beanbag, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# We don't want any warnings to end up impacting output.
# ... with blackjack, and hookers.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\cmdline\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\datagrids\builtin_items.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\datagrids\columns.py
# Look up the user in the provided obj by traversing the relation.
# If _user_relation is empty, then obj is the user.
# If avatars are eanbled, we'll want to include that in the resulting
# HTML.
# Render the link to the user page, using the avatar and username.
# Note that we're enabling linking but overriding the link function
# to return None. This is to disable the automatic linking to the
# review request, so that the cell isn't generally clickable,
# preventing visual and interaction issues with the bug links.
# XXX It'd be nice to be able to sort on this, but datagrids currently
# can only sort based on stored (in the DB) values, not computed
# values.
# Priority is ranked in the following order:
#
# 1) Non-public (draft) reviews
# 2) Public reviews marked "Ship It"
# 3) Public reviews not marked "Ship It"
# Review requests for un-authenticated users will not contain the
# new_review_count attribute, so confirm its existence before
# attempting to access.
#last-review' % review_request.get_absolute_url()
# Note that the HTML is very whitespace-sensitive, so don't try to
# change the templates to be nicely indented. The spacing is this way
# for a reason.
#
# We also can't use format_html_join, unfortunately, as that doesn't
# support keyword arguments.
# review_request.visibility is not defined when the user is not
# logged in.
# TODO: Update this to fetch only the specific fields when we move
#       to a newer version of Django.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\datagrids\grids.py
# do nothing
#: A list of extra CSS static bundles to load on the page.
#: A list of extra JavaScript static bundles to load on the page.
#: The JavaScript Model to use for the page state.
#: The JavaScript View to use for the page rendering.
#: Whether or not to periodically reload the contents of the datagrid.
#: Extra data to pass to the JavaScript Model.
# Add local timezone info to the columns.
# Add local timezone info to the columns.
# to-group is special because we want to make sure that the
# group exists and show a 404 if it doesn't. Otherwise, we'll
# show an empty datagrid with the name.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\datagrids\sidebar.py
#: The template to use for rendering this item in the sidebar.
#: The displayed label for the item.
#: The name of the optional CSS icon to use beside the label.
#: The datagrid "view" to link to when clicking this item.
#:
#: This corresponds to the ``?view=`` parameter passed to the datagrid
#: page.
#: Additional key/values to pass to the URL when clicking this item.
#:
#: If provided, this must be a dictionary of keys and values for the
#: URL. The keys and values will be automatically URL-encoded.
#: Additional CSS classes to include for the item.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\datagrids\tests.py
#: An instance of the column to use on the datagrid.
# These are public
# These are private
# Log in and check what we get.
# We encountered a bug where the archived state in the dashboard was
# assuming that Profile.extra_data was always a dictionary. In modern
# versions of Review Board, the default value for that field is an
# empty dict, but old versions defaulted it to None. This test verifies
# that the bug is fixed.
# Create all the test data.
# Now load the dashboard and get the sidebar items.
# Test the "Overview" section.
# Test the "Outgoing" section.
# Test the "Incoming" section.
# Now load the page and get the sidebar items.
# Test the User Profile section.
# Test the Groups section.
# Test if this throws an exception. Bug #1250
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
# These are generally set by the column's augment_queryset().
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\datagrids\urls.py
# All Review Requests
# Dashboard
# Users
# Groups
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\datagrids\views.py
# Make sure the group exists
# Make sure the group exists
# Make sure the user exists
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\datagrids\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\admin.py
# NOTE: Django wraps the contents in a <p>, but browsers will
#       be sad about that, because it contains a <pre>. Chrome,
#       for instance, will move it out into its own node. Be
#       consistent and just make that happen for them.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\chunk_generator.py
# The maximum size a line can be before we start shutting off styling.
# 200KB
# A list of filename extensions that won't be styled.
# ResourceLexer is used as a default.
# Default tab size used in browsers.
# Check that the data coming in is in the formats we accept.
# Chunk processing state.
# TODO: Try to figure out the right lexer for these files
#       once instead of twice.
# Normalize the input so that if there isn't a trailing newline, we
# add it.
# Remove the trailing newline, now that we've split this. This will
# prevent a duplicate line number at the end of the diff.
# Very long files, especially XML files, can take a long time to
# highlight. For files over a certain size, don't highlight them.
# Don't style the file if we have any *really* long lines.
# It's likely a minified file or data or something that doesn't
# need styling, and it will just grind Review Board to a halt.
# Generate information on the regions that changed between the
# two lines.
# Record all the moved line numbers, carefully making note of the
# start of each range. Ranges start when the previous line number is
# either not in a move range or does not immediately precede this
# line.
# There may be a tag wrapping this whitespace. If so, we need to
# find where the actual whitespace chars begin.
# We'll only reach this if some corrupted HTML was generated.
# We want to know about that.
# There may be other things in here we didn't expect. It's not
# a straight sequence of characters. Give up on highlighting it.
# Build "------>|" with the room we have available.
# Build "|<------" with the room we have available.
# The diff is against a commit that:
#
# 1. Follows the first commit in a series (the first won't have
#    a base_commit/base_filediff that can be looked up)
#
# 2. Follows a commit that modifies this file, or is the base
#    commit that modifies this file.
#
# We'll be diffing against the patched version of this commit's
# version of the file.
# This diff is against a commit, but no previous FileDiff
# modifying this file could be found. As per the above comment,
# this could end up being the very first commit in a series, or
# it might not have been modified in the base commit or any
# previous commit.
#
# We'll need to fetch the first ancestor of this file in the
# commit history, if we can find one. We'll base the "old" version
# of the file on the original version of this commit, meaning that
# this commit and all modifications since will be shown as "new".
# Basically, viewing the upstream of the file, before any commits.
#
# This should be safe because, without a base_filediff, there
# should be no older commit containing modifications that we want
# to diff against. This would be the first one, and we're using
# its upstream changes.
# Check whether we have a SHA256 checksum first. They were introduced
# in Review Board 4.0, long after SHA1 checksums. If we already have
# a SHA256 checksum, then we'll also have a SHA1 checksum, but the
# inverse is not true.
# Check whether we have a SHA256 checksum first. They were
# introduced in Review Board 4.0, long after SHA1 checksums. If we
# already have a SHA256 checksum, then we'll also have a SHA1
# checksum, but the inverse is not true.
# Basically, revert the change.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\commit_utils.py
# We did not find an entry in our validation info, so we need to fall back
# to checking the repository.
# This is not quite the same as ``enumerate(...)`` because if we run out
# of history, ``i`` will not be incremented.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\differ.py
# Compatibility versions:
#
# Python SequenceMatcher differ.
# Myers differ
# Myers differ with bailing on a too high SMS cost
# (prevents very long diff times for certain files)
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\diffutils.py
# Some SCMTool backends return file data as a bytearray instead of
# bytes.
# Nothing to do
# First try strict utf-8
# Now try any candidate encodings
# Finally, try to convert to unicode and replace all unknown
# characters.
# See https://www.reviewboard.org/bugs/386/ and
# https://reviews.reviewboard.org/r/286/ for the rationale behind the
# normalization.
# splitlines() would chop off the last entry, if the string ends with
# a newline. split() doesn't do this. We need to retain that same
# behavior by chopping it off ourselves.
# Someone uploaded an unchanged file. Return the one we're patching.
# Prepare the temporary directory if none is available
# Munge the output to show the filename instead of
# randomly-generated tempdir locations.
# Convert to unicode before we do anything to manipulate the string.
# Repository.get_file doesn't know or care about how we need line
# endings to work. So, we'll just transform every time.
#
# This is mostly only a problem if the diff chunks aren't in the
# cache, though if several people are working off the same file,
# we'll be doing extra work to convert those line endings for each
# of those instead of once.
#
# Only other option is to cache the resulting file, but then we're
# duplicating the cached contents.
# Convert back to bytes using whichever encoding we used to decode.
# Now that we know an encoding that works, remember it for next
# time.
# If there's a parent diff set, apply it to the buffer.
# patch(1) cannot process diff files that contain no diff sections.
# We are going to check and see if the parent diff contains no diff
# chunks.
# If the FileDiff has a parent diff, it must be the case that it has no
# ancestor FileDiffs. We can fall back to the no history case here.
# Otherwise, there may be one or more ancestors that we have to apply.
# If the file was created outside this history, fetch it from the
# repository and apply the parent diff if it exists.
# TODO: Cache these results so that if this ``filediff`` is an
# ancestor of another FileDiff, computing that FileDiff's original
# file will be cheaper. This will also allow an ancestor filediff's
# original file to be computed cheaper.
# In order to support interdiffs properly, we need to display diffs on
# every file in the union of both diffsets. Iterating over one diffset
# or the other doesn't suffice. We also need to be careful to handle
# things like renamed/moved files, particularly when there are multiple
# of them with the same source filename.
#
# This is done in four stages:
#
# 1. Build up maps and a set for keeping track of possible
#    interfilediff candidates for future stages.
#
# 2. Look for any files that are common between the two diff revisions
#    that have the same source filename, same destination filename, and
#    the same new/deleted states.
#
#    Unless a diff is hand-crafted, there should never be more than one
#    match here.
#
# 3. Look for any files that are common between the two diff revisions
#    that have the same source filename and new/deleted state. These will
#    ignore the destination filename, helping to match cases where diff 1
#    modifies a file and diff 2 modifies + renames/moves it.
#
# 4. Add any remaining files from diff 2 that weren't found in diff 1.
#
# We don't have to worry about things like the order of matched diffs.
# That will be taken care of at the end of the function.
# Stage 1: Build up the maps/set of interfilediffs.
# We'll store this interfilediff in three spots: The set of
# all interfilediffs, the detail map (for source + dest +
# is_new file comparisons), and the simple map (for direct
# source_file comparisons). These will be used for the
# different matching stages.
# Stage 2: Look for common files with the same source/destination
#          filenames and new/deleted states.
#
# There will only be one match per filediff, at most. Any filediff or
# interfilediff that we find will be excluded from future stages.
# Stage 3: Look for common files with the same source/destination
#          filenames (when they differ).
#
# Any filediff from diff 1 not already processed in stage 2 will be
# processed here. We'll look for any filediffs from diff 2 that were
# moved/copied from the same source to the same destination. This is one
# half of the detailed file state we checked in stage 2.
# Stage 4: Look for common files with the same source filenames and
#          new/deleted states.
#
# Any filediff from diff 1 not already processed in stage 3 will be
# processed here. We'll look for any filediffs from diff 2 that match
# the source filename and the new/deleted state. Any that we find will
# be matched up.
# Stage 5: Look for common files with the same source filenames and
#          compatible new/deleted states.
#
# This will help catch files that were marked as new in diff 1 but not in
# diff 2, or deleted in diff 2 but not in diff 1. (The inverse for either
# is NOT matched!). This is important because if a file is introduced in a
# parent diff, the file can end up showing up as new itself (which is a
# separate bug).
#
# Even if that bug did not exist, it's still possible for a file to be new
# in one revision but committed separately (by that user or another), so we
# need these matched.
#
# Any files not found with a matching interdiff will simply be yielded.
# This is the last stage dealing with the filediffs in the first revision.
# NOTE: If more stages are ever added that deal with
#       simple_interdiff_map, then we'll need to remove
#       interfilediff from that map here.
# Stage 6: Add any remaining files from the interdiff.
#
# We've removed everything that we've already found.  What's left are
# interdiff files that are new. They have no file to diff against.
#
# The end result is going to be a view that's the same as when you're
# viewing a standard diff. As such, we can pretend the interdiff is
# the source filediff and not specify an interdiff. Keeps things
# simple, code-wise, since we really have no need to special-case
# this.
# For the hash comparisons, there's a chance we won't have any SHA1 (RB
# 2.0+) or SHA256 (RB 4.0+) hashes, so we have to check for them. We want
# to prioritize SHA256 hashes, but if the filediff or interfilediff lacks
# a SHA256 hash, we want to fall back to SHA1.
# It is presently not supported to do an interdiff with commit spans. It
# would require base/tip commits for the interdiffset as well.
# If the base commit is more recent than the tip commit the interval
# **must** be empty.
# The requested FileDiff is outside the requested commit range.
# Even if we have base_commit, we need to query for all FileDiffs
# so that we can do ancestor computations.
# Filediffs that were created with leading slashes stripped won't match
# those created with them present, so we need to compare them without in
# order for the filenames to match up properly.
# Currently, only interdiffing between cumulative diffs is
# supported.
# We're not working with interdiffs. We can easily create the
# filediff_parts directly.
# Now that we have all the bits and pieces we care about for the filediffs,
# we can start building information about each entry on the diff viewer.
# First, find out if we want to even process this one.
# If the diffs are identical, or the patched files are identical,
# or if the files were deleted in both cases, then we can be
# absolutely sure that there's nothing interesting to show to
# the user.
# If we pre-computed this above (or before) and we have all
# FileDiffs, this will cost no additional queries.
#
# Otherwise this will cost up to
# ``1 + len(diffset.per_commit_files.count())`` queries.
# When displaying an interdiff, we do not want to display the
# revision of the base filediff. Instead, we will display the diff
# revision as computed above.
# In the case of interdiffs, it is possible that there will be headers
# in the chunk that don't belong to it, but were put there due to
# chunks being merged together. We must therefore ensure that the
# header we're looking at is actually in the chunk.
# The most up-to-date header information
# The given line number is the first line of a new chunk so
# there can't be any relevant header information here.
# We've gone past the given line number.
# Use the SequenceMatcher directly. It seems to give us better results
# for this. We should investigate steps to move to the new differ.
# This thresholds our results -- we don't want to show inter-line diffs
# if most of the line has changed, unless those lines are very short.
# FIXME: just a plain, linear threshold is pretty crummy here.  Short
# changes in a short line get lost.  I haven't yet thought of a fancy
# nonlinear test.
# Sort based on basepath in ascending order.
# Sort based on filename in ascending order, then based on
# the extension in descending order, to make *.h sort ahead of
# *.c/cpp.
# We're too early. There won't be anything of interest here.
# We're not going to find anything useful at this point, so bail.
# This chunk contains the first line that can possibly be used for
# the comment range. We know the start and end virtual line numbers
# in the range, so we can compute the proper offset.
# One side of the the comment range may not have started in a valid
# chunk (this would happen if a comment began in an insert or
# delete chunk). If that happened, we may not have been able to set
# the beginning of the range in the condition above. Check for this
# and try setting it now.
# Figure out the end ranges, now that we know the valid ending chunks of
# each. We're going to try to get the line within the chunk that represents
# the end, if within the chunk, capping it to the last line in the chunk.
#
# If a particular range did not have a valid chunk anywhere in that range,
# we're going to invalidate the entire range.
# Look through the chunks of the diff, trying to find the amount
# of context shown at the beginning of each chunk. Though this
# will usually be 3 lines, it may be fewer or more, depending
# on file length and diff generation settings.
# We've found the first change in the original side of the
# chunk. We now know how many lines of context we have here.
#
# We reduce the indexes by 1 because the chunk ranges
# in diffs start at 1, and we want a 0-based index.
# We've found the first change in the modified side of the
# chunk. We now know how many lines of context we have here.
#
# We reduce the indexes by 1 because the chunk ranges
# in diffs start at 1, and we want a 0-based index.
# We might be before a group of changes, inside a group of changes,
# or after a group of changes. Either way, we want to track these
# values.
# This was not a change within a chunk, or we weren't processing,
# so check to see if this is a chunk header instead.
# It is a chunk header. Start by updating the previous range
# to factor in the lines of trailing context.
# Next, reset the state for the next range, and pull the line
# numbers and lengths from the header. We'll also normalize
# the starting locations to be 0-based.
# We need to adjust the last range, if we're still processing
# trailing context.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\errors.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\features.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\filediff_creator.py
# Extensions used for intelligent sorting of header files
# before implementation files.
# If there is a parent file there is not necessarily an original
# revision for the parent file in the case of a renamed file in
# git.
# This state all requires making modifications to the database.
# We only want to do this if we're saving.
# Sort the files so that header files come before implementation
# files.
# This is used only for tools like Mercurial that use atomic changeset
# IDs to identify all file versions. but not individual file version
# IDs.
# If the user supplied a base diff, we need to parse it and later
# apply each of the files that are in main diff.
# This will return a non-None value only for tools that use commit
# IDs to identify file versions as opposed to file revision IDs.
# This will either be a Revision or bytes. Either way, convert it
# bytes now.
# This file isn't actually needed for the diff, so save
# ourselves a remote file existence check and some storage.
# FIXME: this would be a good place to find permissions errors
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\filetypes.py
# A list of regular expressions for headers in the source code that we can
# display in collapsed regions of diffs and diff fragments in reviews.
# return arguments
# method name
# signature start
# This can match C/C++/Objective C header files
# return arguments
# method name
# signature start
# C/C++/Objective-C
# Perl
# Python
# Ruby
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\forms.py
# A diffset will have a history attached if and only if it has been
# published, in which case we cannot attach further commits to it.
# If validation_info is present in `errors`, it will not be in
# self.cleaned_data. We do not want to report it missing if it
# failed validation for another reason.
# This SCMTool uses absolute paths, so there's no need to ask
# the user for the base directory.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\managers.py
# Update all associated FileDiffs to use the new objects
# instead of the old ones.
# Attempt to create all the entries we want in one go.
# One or more entries in the batch conflicte with an existing
# entry, meaning it was already created. We'll just need to
# operate on the contents of this batch one-by-one.
# Every time we work on a batch,, we're re-querying the list of
# objects. This result from the query is expected not to have any
# previously-processed objects from a yielded batch. It may,
# however, have objects we've previously seen that haven't been
# yielded in a batch yet. That's why we're indexing from the
# length of the batch to the object limit.
# Do all we can to limit the memory usage by resetting any stored
# queries (if DEBUG is True), and force garbage collection of
# anything we may have from processing an object.
# Since this is a pretty complex operation, we're going to sanity-check
# results on DEBUG setups, to help catch issues that might come up as
# this code changes.
# If the database supports joins on updates, then we can craft
# a query that will massively speed up the diff transition time.
# Otherwise, we need to fall back on doing a select and then an
# update per result.
#
# The queries are different between databases (yay standards), so
# we can't be smart and do this in a generic way. We have to check
# the database types.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\myersdiff.py
# The Myers diff algorithm effectively turns the diff problem into a graph
# search.  It works by finding the "shortest middle snake," which
# SMS State
# There's nothing to process or yield. Bail.
# Go through the entire set of lines on both the old and new files
# Equal
# Deleted, inserted or replaced
# Count every old line that's been modified, and the
# remainder of old lines if we've reached the end of the new
# file.
# Count every new line that's been modified, and the
# remainder of new lines if we've reached the end of the old
# file.
# TODO: Handle ignoring/triming spaces, ignoring casing, and
#       special hooks
# We still want to show lines that contain only whitespace.
# This is a new, unrecorded line, so mark it and store it.
# Check to see if this is an interesting line that the caller
# wants recorded.
# The vector for the (0, 0) to (x, y) search
# The vector for the (u, v) to (N, M) search
# The k-line to start the forward search
# The k-line to start the reverse search
# Extend the forward path
# Find the end of the furthest reaching forward D-path in
# diagonal k
# Extend the reverse path
# Heuristics courtesy of GNU diff.
#
# We check occasionally for a diagonal that made lots of progress
# compared with the edit distance. If we have one, find the one
# that made the most progress and return it.
#
# This gives us better, more dense chunks, instead of lots of
# small ones often starting with replaces. It also makes the output
# closer to that of GNU diff, which more people would expect.
# We've reached or gone past the max cost. Just give up now
# and report the halfway point between our best results.
# Find the forward diagonal that maximized x + y
# Find the backward diagonal that minimizes x + y
# Use the better of the two diagonals
# We found a sufficient diagonal.
# Fast walkthrough equal lines at the start
# Inserted lines.
# Deleted lines
# Find the middle snake and length of an optimal path for A and B
# Scan forward in order to find the start of a run of changes.
# Find the end of these changes
# Move the changed chunks back as long as the previous
# unchanged line matches the last changed line.
# This merges with the previous changed chunks.
# The end of the changed run at the last point where it
# corresponds to the changed run in the other data set.
# If it's equal to i_end, then we didn't find a corresponding
# point.
# Move the changed region forward as long as the first
# changed line is the same as the following unchanged line.
# Move the fully-merged run back to a corresponding run in the
# other data set, if we can.
# Cancel the provisional discards that are not in the middle
# of a run of discards
# We found a provisional discard
# Find the end of this run of discardable lines and count
# how many are provisionally discardable.
# Cancel the provisional discards at the end and shrink
# the run.
# If 1/4 of the lines are provisional, cancel discarding
# all the provisional lines in the run.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\opcode_generator.py
# Run the opcodes through the chain.
# Filter out any lines unrelated to these changes from the
# interdiff. This will get rid of any merge information.
# True if this chunk is only whitespace.
# List of tuples (i, j), with whitespace changes.
# replace groups are good for whitespace only changes.
# Both original lines are equal when removing all
# whitespace, so include their original line number in
# the meta dict.
# If all lines are considered to have only whitespace change,
# the whole chunk is considered a whitespace-only chunk.
# When filtering out opcodes, we may have converted chunks into
# "filtered-equal" chunks. This allowed us to skip any additional
# processing, particularly the indentation highlighting. It's
# now time to turn those back into "equal" chunks.
# Store delete/insert ranges for later lookup. We will be building
# keys that in most cases will be unique for the particular block
# of text being inserted/deleted. There is a chance of collision,
# so we store a list of matching groups under that key.
#
# Later, we will loop through the keys and attempt to find insert
# keys/groups that match remove keys/groups.
# We'll be going through all the opcodes in this equals chunk and
# grouping with adjacent opcodes based on whether they have
# indentation changes or not. This allows us to keep the lines with
# indentation changes from being collapsed in the diff viewer.
# Yield the previous group.
# We have a new group. Set it up, starting with the current
# calculated state.
# Yield the last group, if we haven't already yielded it.
# These are fake-equal. They really have some indentation changes.
# We want to mark those up.
#
# Our goal for this function from here on out is to figure out whether
# the new line has increased or decreased its indentation, and then
# to determine how much that has increased or decreased by.
#
# Since we may be dealing with the additional or removal of tabs,
# we have some challenges here. We need to expand those tabs in
# order to determine if the new line is indented further or not,
# and then we need to figure out how much of the leading whitespace
# on either side represents new indentation levels.
#
# We do this by chopping off all leading whitespace and expanding
# any tabs, and then figuring out the total line lengths. That gives
# us a basis for comparison to determine whether we've indented
# or unindented.
#
# We can then later figure out exactly which indentation characters
# were added or removed, and then store that information.
# We know that a spacing change did take place. We need to figure
# out now how many characters of indentation were actually
# added or removed.
# Figure out how many characters of indentation were in common
# at the end of the strings. We'll want to exclude these
# characters when showing indentation changes.
#
# This is the area after any new indentation. If the indentation
# style changed (such as going from tabs to spaces), then nothing
# will be in common.
#
# We figure out the common trailing indentation by reversing both
# strings and then finding the common prefix. We only care about
# the length, so we can throw the string away.
#
# It may seem odd that we're using os.path.commonprefix, but this
# isn't really limited to paths. Certainly not in our case. It's
# worth not re-implementing that logic.
# We now need to figure out all the moved locations.
#
# At this point, we know all the inserted groups, and all the
# individually deleted lines. We'll be going through and finding
# consecutive groups of matching inserts/deletes that represent a
# move block.
#
# The algorithm will be documented as we go in the code.
#
# We start by looping through all the inserted groups.
# Store some state on the range we'll be working with inside this
# insert group.
# The current location inside the insert group (from ij1 through ij2).
# The current range of consecutive lines that we'll use for a move.
# Each line in this range has a corresponding consecutive delete line.
# The deleted move ranges. The key is a string in the form of
# "{i1}-{i2}-{j1}-{j2}", with those positions taken from the remove
# group for the line. The value is an instance of MoveRange. The values
# in MoveRange are used to quickly locate deleted lines we've found
# that match the inserted lines, so we can assemble ranges later.
# key -> (start, end, group)
# Loop through every location from ij1 through ij2 - 1 until we've
# reached the end.
# The inserted line at this location has a corresponding
# removed line.
#
# If there's already some information on removed line ranges
# for this particular move block we're processing then we'll
# update the range.
#
# The way we do that is to find each removed line that matches
# this inserted line, and for each of those find out if there's
# an existing move range that the found removed line
# immediately follows. If there is, we update the existing
# range.
#
# If there isn't any move information for this line, we'll
# simply add it to the move ranges.
# Ignore any lines that have already been processed as
# part of a move, so we don't end up with incorrect blocks
# of lines being matched.
# We either didn't have a previous range, or this
# group didn't immediately follow it, so we need
# to start a new one.
# If the remove information for the line is next in
# the sequence for this calculated move range...
# This is part of the current range, so update
# the end of the range to include it.
# Check that this isn't a replace line that's just
# "replacing" itself (which would happen if it's just
# changing whitespace).
# We don't have any move ranges yet, or we're done
# with the existing range, so it's time to build
# one based on any removed lines we find that
# match the inserted line.
# We found a range we were able to update. Don't
# attempt any more matches for removed lines.
# We didn't find a move range that this line is a part
# of, but we do have some existing move ranges stored.
#
# Given that updated_range is set, we'll be processing
# the known move ranges below. We'll actually want to
# re-check this line afterward, so that we can start a
# new move range after we've finished processing the
# current ones.
#
# To do that, just i_move_cur back by one. That negates
# the increment below.
# This is a blank or whitespace-only line, which would not
# be in the list of removed lines above. We also have been
# working on a move range.
#
# At this point, the plan is to just attach this blank
# line onto the end of the last range being operated on.
#
# This blank line will help tie together adjacent move
# ranges. If it turns out to be a trailing line, it'll be
# stripped later in _determine_move_range.
# There was a matching blank line on the other end
# of the range, so we should feel more confident about
# adding the blank line here.
# It's possible that this blank line is actually an
# "equal" line. Though technically it didn't move,
# we're trying to create a logical, seamless move
# range, so we need to try to find that group and
# add it to the list of groups in the range, if it'
# not already there.
# This is in the next group, which hasn't been
# added yet. So add it.
# We've reached the very end of the insert group. See if
# we have anything that looks like a move.
# If we have a move range, see if it's one we want to
# include or filter out. Some moves are not impressive
# enough to display. For example, a small portion of a
# comment, or whitespace-only changes.
# Rebuild the insert and remove ranges based on where
# we are now and which range we won.
#
# The new ranges will be actual lists of positions,
# rather than a beginning and end. These will be
# provided to the renderer.
#
# The ranges expected by the renderers are 1-based,
# whereas our calculations for this algorithm are
# 0-based, so we add 1 to the numbers.
#
# The upper boundaries passed to the range() function
# must actually be one higher than the value we want.
# So, for r_move_range, we actually increment by 2.  We
# only increment i_move_cur by one, because i_move_cur
# already factored in the + 1 by being at the end of
# the while loop.
# Record each of the positions in the removed range
# as used, so that they're not factored in again when
# determining possible ranges for future moves.
#
# We'll use the r_range above, but normalize back to
# 0-based indexes.
# Reset the state for the next range.
# Go through every range of lines we've found and find the longest.
#
# The longest move range wins. If we find two ranges that are equal,
# though, we'll ignore both. The idea is that if we have two identical
# moves, then it's probably common enough code that we don't want to
# show the move. An example might be some standard part of a comment
# block, with no real changes in content.
#
# Note that with the current approach, finding duplicate moves doesn't
# cause us to reset the winning range to the second-highest identical
# match. We may want to do that down the road, but it means additional
# state, and this is hopefully uncommon enough to not be a real
# problem.
# If there are two that are the same, it may be common
# code that we don't want to see moves for. Comments,
# for example.
# Accept this if there's more than one line or if the first
# line is long enough, in order to filter out small bits of garbage.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\parser.py
#: The parsed original name of the file.
#:
#: Type:
#:     bytes
#: The parsed file details of the original file.
#:
#: This will usually be a revision.
#:
#: Type:
#:     bytes or reviewboard.scmtools.core.Revision
#: The parsed modified name of the file.
#:
#: This may be the same as :py:attr:`orig_filename`.
#:
#: Type:
#:     bytes
#: The parsed file details of the modified file.
#:
#: This will usually be a revision.
#:
#: Type:
#:     bytes or reviewboard.scmtools.core.Revision
#: The parsed value for an Index header.
#:
#: If present in the diff, this usually contains a filename, but may
#: contain other content as well, depending on the variation of the diff
#: format.
#:
#: Type:
#:     bytes
#: The parsed original name of the file.
#:
#: Deprecated:
#:     4.0:
#:     Use :py:attr:`orig_filename` instead.
#: The parsed file details of the original file.
#:
#: Deprecated:
#:     4.0:
#:     Use :py:attr:`orig_file_details` instead.
#: The parsed original name of the file.
#:
#: Deprecated:
#:     4.0:
#:     Use :py:attr:`modified_filename` instead.
#: The parsed file details of the modified file.
#:
#: Deprecated:
#:     4.0:
#:     Use :py:attr:`modified_file_details` instead.
#: The parsed value for an Index header.
#:
#: Deprecated:
#:     4.0:
#:     Use :py:attr:`index_header_value` instead.
#: A separator string below an Index header.
#:
#: This is commonly found immediately below an ``Index:`` header, meant
#: to help locate the beginning of the metadata or changes made to a file.
#:
#: Its presence and location is not guaranteed.
# Go through each line in the diff, looking for diff headers.
# This line is the start of a new file diff.
#
# First, finalize the last one.
# We need to prepend the preamble, if we have one.
# If we have enough information to represent a header, build the
# file to return.
# The header is part of the diff, so make sure it gets in the
# diff content.
# Try to find the "====" line.
# We found the line. This is looking like a valid diff
# for CVS, Subversion, and other systems. Try to parse
# the data from the line.
# Set these for backwards-compatibility.
#
# This should be removed in Review Board 5.0.
# We never found that line, but we did hit the start of
# a diff file. We can't treat the "Index:" line as special
# in this case.
# Unified diff headers
# Context diff headers
# This is a unified or context diff header. Parse the
# file and extra info.
# Set these for backwards-compatibility.
#
# This should be removed in Review Board 5.0.
# There's a \t separating the filename and info. This is the
# best case scenario, since it allows for filenames with spaces
# without much work.
# There's spaces being used to separate the filename and info.
# This is technically wrong, so all we can do is assume that
# 1) the filename won't have multiple consecutive spaces, and
# 2) there's at least 2 spaces separating the filename and info.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\processors.py
# There's nothing in here, or it's not a unified diff. Just yield
# what we get.
# We've left the range of the current chunk to consider in the
# original diff. Move on to the next one.
# We've left the range of the current chunk to consider in the
# new diff. Move on to the next one.
# See if the chunk we're looking at is in the range of the chunk in
# one of the uploaded diffs. If so, allow it through.
# This chunk is valid. It may only be a portion of the real
# chunk, though. We'll need to split it up into a known valid
# segment first, and yield that.
# We need to take care to not let the replace lines have
# differing ranges for the orig and modified files. We want the
# replace to take up the full bounds of the two sides, but
# capped to the valid chunk range.
#
# For this, we need to pick a consistent value for the length
# of the range. We know at least one side will be within
# bounds, since we have a valid chunk and at least one is
# capped to be <= the end of the range.
#
# If one side is out of bounds of the range, the other range
# will win. If both are in bounds, the largest wins.
# Sanity-check that valid_j2 is in bounds. We don't need
# to check this in the following conditionals, though,
# since that's covered by the conditionals themselves.
# Set each valid range to be the same length.
# Update the caps, so that we'll process whatever we've
# chopped off.
# There were more parts of this range remaining. We know they're
# all invalid, so let's update i1 and j1 to point to the start
# of those invalid ranges, and mark them.
# Turn this into an "filtered-equal" chunk. The left-hand and
# right-hand side of the diffs will look different, which may be
# noticeable, but it will still help the user pay attention to
# what's actually changed that they care about.
#
# These will get turned back into "equal" chunks in the
# post-processing step.
# We either have a plain equal chunk without any indentation
# changes, or a filtered-equal chunk. In these cases, we can
# safely merge the chunks together and transform them into
# an "equal" chunk.
# This is some sort of changed chunk (insert, delete, replace,
# or equal with indentation changes). Yield the previous chunk
# we were working with, if any, and then yield the current chunk.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\renderers.py
# If we only have one value, then assume it represents before
# and after the collapsed header area.
# We're rendering a specific chunk within a file's diff, rather
# than the whole diff.
# We're rendering a specific range of lines within this chunk,
# rather than the default range.
# The lines of context we're expanding to would cover the
# entire chunk, so just expand the entire thing.
# The start of the collapsed header area.
# Compute the start of the second chunk of code, after the
# header.
# The chunk of context preceding the header.
# The header contents
# The chunk of context after the header.
# Fix the headers to accommodate the new range.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\smdiff.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\validators.py
#: The maximum length of a commit ID.
#: A regular expression for matching commit IDs.
#: A validator for commit IDs.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\views.py
# Base and tip commit selection is not supported in interdiffs.
# Break the list of files into pages
# We'll sometimes see errors about this failing to resolve when
# web crawlers start accessing fragment URLs without the proper
# attributes. Ignore them.
# Depending on whether we're invoked from a URL or from a wrapper
# with precomputed diffsets, we may be working with either IDs or
# actual objects. If they're objects, just use them as-is. Otherwise,
# if they're IDs, we want to grab them both (if both are provided)
# in one go, to save on an SQL query.
# Store this so we don't end up causing an SQL query later when looking
# this up.
# If we're currently expanding part of a chunk, we want to render
# the entire chunk without any lines collapsed. In the case of
# showing a range of lines, we're going to get all chunks and then
# only show the range. This is so that we won't have separate
# cached entries for each range.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\add_diff_hash.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\add_parent_diffs.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\all_extra_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\delete_file_count_fields.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\diffcommit_relations.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\diffsethistory_diff_updated.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\diffset_basedir.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\diffset_base_commit_id.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\filediffdata_extra_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\filediffdata_line_counts.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\filediff_filenames_1024_chars.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\filediff_status.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\raw_diff_file_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\management\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\management\commands\condensediffs.py
# We add a bunch of spaces in order to override any previous
# content on the line, for when it shrinks.
# Don't allow queries to be stored.
# XXX: This can be replaced with total_seconds() once we no longer have
# to support Python 2.6
# NOTE: We use sys.stdout here instead of self.stderr in order
#       to control newlines. Command.stderr will force a \n for
#       each write.
# Only write out the time remaining string if it has changed or
# there's been a shift in the length of the prefix. This reduces
# how much we have to write to the terminal, and how often, by
# a fair amount.
# Something has changed, so output the string and then cache
# the values for the next call.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\management\commands\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\models\diffcommit.py
#: The maximum length of the author_name and committer_name fields.
#: The maximum length of the author_email and committer_email fields.
#: The date format that this model uses.
#: A timestamp used for generating HTTP caching headers.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\models\diffset.py
# This is a giant hack because Django 1.6.x does not support
# Prefetch() statements. In Django 1.8+ we can replace any use of:
#
#     # Django == 1.6
#     ds = DiffSet.objects.prefetch_related('files')
#     for d in ds:
#         # Do something with d.per_commit_files
#
# with:
#
#     # Django >= 1.8
#     ds = DiffSet.objects.prefetch_related(
#         Prefetch('files',
#                  queryset=File.objects.filter(
#                      commit_id__isnull=False),
#                  to_attr='per_commit_files')
#     for d in ds:
#         # Do something with d.per_commit_files
# See per_commit_files for why we are doing this hack.
# Default this to revision 1. We'll use this if the DiffSetHistory
# isn't saved yet (which may happen when creating a new review request)
# or if there aren't yet any diffsets.
# Stay at revision 1.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\models\diffset_history.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\models\filediff.py
# Add hash to table if it doesn't exist, and set diff_hash to this.
# Add hash to table if it doesn't exist, and set diff_hash to this.
# This really shouldn't happen, but if it does, we should handle
# it gracefully.
# Allow overriding, but warn. This really shouldn't be called.
# Allow overriding, but warn. This really shouldn't be called.
# New raw counts have been provided. These apply to the actual
# diff file itself, and will be common across all diffs sharing
# the diff_hash instance. Set it there.
# If the ancestors have already been computed for the direct
# ancestor, we can stop there and re-use those results.
# We reverse below, so we have to add these in reverse order.
# If the FileDiff is new there may have been a previous
# FileDiff with the same name that was deleted.
# Otherwise we need to walk the graph to find the previous
# FileDiff.
# There is no previous FileDiff created by the commit series.
# The only information we know is the previous revision and name,
# of which there might be multiple matches. We need to find the
# most recent FileDiff that matches that criteria that belongs to a
# commit that comes before the current FileDiff's commit in
# application order.
# max() raises ValueError if it is given an empty iterable.
# This means there is no previous FileDiff created by the
# commit series.
# We computed the list of ancestors in reverse order (i.e., most recent
# to least recent) above.
# We need to split the history at the point of the last
# deletion. That way we will have the minimal set of
# ancestors, which we can use to compute the diff for this
# FileDiff, and the maximal set of ancestors, which we can
# use to compute cumulative diffs.
# We traverse the list backwards to find the last deleted FileDiff.
# Everything after that is in the set of minimal ancestors.
# Another process migrated this before we could.
# We'll need to fix the references.
# Another process migrated this before we could.
# We'll need to fix the references.
# Another server/process/thread got to this before we could.
# We need to pull the latest refs and make sure they're set here.
# Delete any LegacyFileDiffData objects no longer associated
# with any FileDiffs.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\models\legacy_file_diff_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\models\raw_file_diff_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\models\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\templatetags\difftags.py
# We need to insert span tags into a string already consisting
# of span tags. We have a list of ranges that our span tags should
# go into, but those ranges are in the markup-less string.
#
# We go through the string and keep track of the location in the
# markup and in the markup-less string. We make sure to insert our
# span tag any time that we're within the current region, so long
# as we haven't already created one. We close the span tag whenever
# we're done with the region or when we're about to enter a tag in
# the markup string.
#
# This code makes the assumption that the list of regions is sorted.
# This is safe to assume in practice, but if we ever at some point
# had reason to doubt it, we could always sort the regions up-front.
# This is the start of a new move range.
# This is the start of a new move range.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\templatetags\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_commit_utils.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diffcommit.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diffcommit_manager.py
# We have to compare regular equality and equality after applying
# ``strftime`` because two datetimes with different timezone info
# may be equal
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diffset.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diffset_manager.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diffutils.py
# A mapping of filediff details to the details of its ancestors in
# (compliment, minimal) form.
# This was only necessary so that we could side step diff validation
# during creation.
#\n'
#\n'
#\n'
# old line\n'
# new line\n'
# new line\n'
# new line\n'
# new line\n'
#\n'
#\n'
#\n'),
#\n'
#\n'
#\n'
# old line\n'
# new line\n'
# new line\n'
# new line\n'
# new line\n'
#\n'
#\n'
#\n'
#\n'
#\n'
#\n'
# old line\n'
# new line\n'
#\n'
#\n'
#\n'),
# old line\n'
# new line\n'
# new line\n'
# new line\n'
# new line\n'
# old line\n'
# new line\n'),
#\n'
#\n'
#\n'
# new line\n'
# new line\n'
# new line\n'
# new line\n'
#\n'
#\n'
#\n'),
#\n'
#\n'
#\n'
# old line\n'
# old line\n'
# old line\n'
# old line\n'
#\n'
#\n'
#\n'),
#\n'
#\n'
#\n'
# new line\n'
#\n'
# old line\n'
# new line\n'
# new line\n'
#\n'
# new line\n'
#\n'
#\n'
#\n'),
# old line\n'
# new line\n'
# new line\n'
#\n'
#\n'
#\n'),
#\n'
# old line\n'
# new line\n'
# new line\n'
#\n'
#\n'
#\n'),
#\n'
#\n'
# old line\n'
# new line\n'
# new line\n'
#\n'
#\n'
#\n'),
# old line\n'
# new line\n'),
#\n'
#\n'
#\n'
# old line\n'
# new line\n'
# new line\n'
# new line\n'
# new line\n'
#\n'
#\n'
#\n'),
# This one should be reverted, as it has no counterpart in the
# interdiff.
# This one should match up with interfilediff1.
# This one should be reverted, as it has no counterpart in the
# interdiff.
# This one should match up with interfilediff3 and interfilediff4.
# This one should match up with filediff2.
# This one should show up as a new file.
# This one should match up with filediff4.
# This one should match up with filediff4 as well.
# Modified in revision 1 and in revision 2. Match.
# Modified in revision 1. Re-created in revision 2 with the same
# revision (implying an edge case where the file was deleted in a
# parent diff and re-introduced in the main diff, turning into what
# looks like a modification in the FileDiff).
# Modified in revision 1. Re-created in revision 2 with a new revision
# (implying it was deleted upstream).
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# See diffviewer.diffutils.get_file_chunks_in_range for a description
# of chunks and its elements. We fake the elements of lines here
# because we only need elements 0, 1, and 4 (of what would be a list).
# This is a header line below the chunk of inserts
# The header we find should be before our line number (which has a
# header itself).
# The line numbers start at 1 and not 0.
# This is a header line below the chunk of deletes
# The header we find should be before our line number (which has a
# header itself).
# The line numbers start at 1 and not 0.
#include <stdio.h>\n'
#include <stdio.h>\n'
# FileDiff creation will set the _IS_PARENT_EMPTY flag.
# Older versions of patch will choke on an empty patch with a "garbage
# input" error, but newer versions will handle it just fine. We stub
# out patch here to always fail so we can test for the case of an older
# version of patch without requiring it to be installed.
# One query for each of the following:
# - saving the RawFileDiffData in RawFileDiffData.recompute_line_counts
# - saving the FileDiff in FileDiff.is_parent_diff_empty
# Refresh the object from the database with the parent diff attached
# and then verify that re-calculating the original file does not cause
# additional queries.
# FileDiff creation will set the _IS_PARENT_EMPTY flag.
# Newer versions of patch will allow empty patches. We stub out patch
# here to always fail so we can test for the case of a newer version
# of patch without requiring it to be installed.
# This is the only call to patch() that should be made.
# Refresh the object from the database with the parent diff attached
# and then verify that re-calculating the original file does not cause
# additional queries.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diff_chunk_generator.py
# We have to consume everything from the get_chunks generator in order
# for the line counts to be set on the FileDiff.
# Simulate an interdiff where the changes are reverted.
# Again, just consuming the generator.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diff_opcode_generator.py
# This has two blocks of code that would appear to be moves:
# a function, and an empty comment block. Only the function should
# be seen as a move, whereas the empty comment block is less useful
# (since it's content-less) and shouldn't be seen as one.
# The move detection rewrite in 2.0 introduced an off-by-one where
# the last line in a chunk wasn't being processed as a move unless
# the line after the chunk had content. That line should never have
# been processed either.
# This is testing an insert move range (the first 4 lines on the
# second list of lines) that spans 3 chunks (1 replace line, 1 equal
# blank line, and 2 delete lines).
# The entire move range is stored for every chunk, hence
# the repeats.
# See https://hellosplat.com/s/beanbag/tickets/4371/ for a description
# of the bug.
#',
#',
#',
#',
#',
#',
#',
#',
# The entire move range is stored for every chunk, hence
# the repeats.
# Log the opcode so we can more easily debug unit test failures.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diff_parser.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_diff_renderer.py
# Should not assert.
# This is not how lines really look, but it's fine for
# current usage tests.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_filediff.py
#include <stdio.h>\n'
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_filediff_creator.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_filediff_migration.py
# This should prompt the migration.
# This should prompt the migration.
# This should prompt the migration.
# This should prompt the migration.
# This should prompt the migration, but with our line counts.
# This should prompt the migration.
# Create a second FileDiff using this legacy data.
# This should prompt the migration.
# This should prompt the migration.
# Create a second FileDiff using this legacy data.
# This should prompt the migration.
# Make sure that we're in the expected state.
# This should prompt the migration of the first instance.
# This should prompt the migration of the second instance.
# At this point, we should have valid diffs, and neither call
# above should have raised an exception due to a dangling hash ID.
# Check the hash references.
# Check the diff content.
# Check the parent_diff content.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_forms.py
# Node ID a6fc203fee9091ff9739c9c00cd4a6694e023f48\n'
# Parent  7c4735ef51a7c665b5654f1a111ae430ce84ebbd\n'
# Node ID 7c4735ef51a7c665b5654f1a111ae430ce84ebbd\n'
# Parent  661e5dd3c4938ecbe8f77e2fdfa905d70485f94c\n'
# We will only be making one call to get_file and we can fake it out.
# We shouldn't call out to patch because the parent diff is just a
# rename.
# We will only be making one call to get_file and we can fake it out.
# Python 2 and 3 differ in the error contents you'll get when
# attempting to load non-JSON data.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_highlight_region.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_interesting_lines.py
# file"""
# Prints Hello World\n'
# Prints "Hello world!" to the screen.\n'
# Hello World class\n'
# Prints Hello World\n'
# Begin the scan.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_myersdiff.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_processors.py
# While developing the fix for replace lines in
# https://reviews.reviewboard.org/r/6030/, an iteration of the fix
# broke replace lines when one side exceeded its last range found in
# the diff.
# These opcodes were taken from the r1-r2 interdiff at
# http://reviews.reviewboard.org/r/4221/
# These opcodes were taken from the r1-r2 interdiff at
# http://reviews.reviewboard.org/r/4257/
# In the case where there's a replace chunk with i2 or j2 larger than
# the end position of the current range, the chunk would get chopped,
# and the two replace ranges could be unequal. This broke an assertion
# check when generating opcode metadata, and would result in a
# corrupt-looking diff.
#
# This is bug #3440
#
# Before the fix, the below opcodes and diff ranges would result
# in the replace turning into (2, 6, 2, 15), instead of staying at
# (2, 15, 2, 15).
#
# This only really tends to happen in early ranges (since the range
# numbers are small), but could also happen further into the diff
# if a replace range is huge on one side.
# Try to calculate a suitable number of lines of context after
# the changes. We want upwards of 3 lines, no fewer than 0. We'll
# see how much room we have left by taking the smaller of the two
# ranges and seeing how many lines are left after factoring in
# the preceding lines of context.
#\n' * pre_lines_of_context,
# deleted\n' * delete_line_count,
# inserted\n' * insert_line_count,
#\n' * post_lines_of_context,
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_raw_diff_chunk_generator.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\test_raw_filediff_data_manager.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\diffviewer\tests\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\base.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\hooks.py
# We don't use the ExtensionHookPoint metaclass here, because we actually
# want these to register in the base DataGridColumnsHook point.
#``,
# Since newly registered top-level actions are appended to the left of
# the other previously registered top-level actions, we must iterate
# through the actions in reverse. However, we don't want to mutate the
# original actions and we want to preserve the order of the original
# actions. Hence, we reverse twice in this method.
#',
#',
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\packaging.py
# NOTE: Command (the base class) is not a new-style object, so
#       we can't use super().
# Add the included conf directory so that there's a settings_local.py
# file that can be used to package the static media.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\tests.py
#',
#" id="test-action">Test Action</a>',
#" id="test-menu-instance-action">'
#" id="test-menu-dict-action">'
#" id="test-menu">%s '
# Note that the hook failed to enable, so there's no need to test
# shutdown().
# Note that the hook failed to enable, so there's no need to test
# shutdown().
# Since the hook registers the callback function on initialization,
# which stores a pointer to the method, we can't use SpyAgency after
# the hook has already been initialized. Since SpyAgency's spy_on
# function requires an instance of a class, we also cannot spy on the
# hook function before initialization. Therefore, as a workaround,
# we're setting a variable in the function to ensure that it is in
# fact being called.
# Since the hook registers the callback function on initialization,
# which stores a pointer to the method, we can't use SpyAgency after
# the hook has already been initialized. Since SpyAgency's spy_on
# function requires an instance of a class, we also cannot spy on the
# hook function before initialization. Therefore, as a workaround,
# we're setting a variable in the function to ensure that it is in
# fact being called.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\views.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\conf\settings_local.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\management\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\management\commands\disable-extension.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\management\commands\enable-extension.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\management\commands\list-extensions.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\management\commands\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\templatetags\rb_extensions.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\templatetags\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\testing\testcases.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\extensions\testing\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\features\checkers.py
# Note that if we're running unit tests, we don't really want
# to bother checking other Local Site associations. They're not
# going to come into play unless we're testing this logic
# itself, and the generated number of queries becomes too
# unpredictable whenever we introduce new features that aren't
# enabled by default.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\features\tests.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\features\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\assembla.py
# We want to use the configured username and other information from
# the account.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\beanstalk.py
# Check if it's a git or an SVN repository and close accordingly.
# On Subversion repositories, we may need to expand properties within
# the file, like ``$Id$``. We only want to do this if we see keywords.
# Unless we're fetching raw content, we optimistically want to
# grab the metadata for the file. That's going to be a lot smaller
# than the file contents in most cases. However, we can only do that
# with a base_commit_id. If we don't have that, we fall back on
# fetching the full file contents.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\bitbucket.py
# These should always be here, but we want to be defensive.
# Perform any default checks.
# If this fails, an exception will be raised.
# No default branch was set in this repository. It may be an
# empty repository.
# Note that we're only building commits for one page worth of data.
# We try to pull the commit's metadata out of the cache. The diff API
# endpoint is just the raw content of the diff and contains no
# metadata.
# However, if it is not in the cache, we have to hit the API to
# get the metadata.
# Now fetch the diff.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\bugtracker.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\bugzilla.py
# This requires making two HTTP requests: one for the summary and
# status, and one to get the "first comment" (description).
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\codebasehq.py
#: Mimetype used for API requests and responses.
#: A mapping of Codebase SCM types to SCMTool names.
# Test the account to make sure the credentials are fine. Note that
# we can only really sanity-check the API token, domain, and username
# from here. There's no way good way to check the actual password,
# which we only use for Subversion repositories.
#
# This will raise a suitable error message if authorization fails.
# The form should enforce these values.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\errors.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\fake.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\fedorahosted.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\fogbugz.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\forms.py
# Make sure that the hosting account, if provided, is compatible with
# the arguments provided.
# If the hosting service is not self-hosted, we don't want to include
# the hosting_url form.
# If it doesn't support two-factor auth, get rid of that field.
# Grab the username from the credentials, sanity-checking that it's
# been provided as part of the get_credentials() result.
# Update the username and hosting URL, if they've changed.
# Fetch an existing hosting account based on the credentials and
# parameters, if there is one. If not, we're going to create one,
# but we won't save it until we've authorized.
# Create a new one, but don't save it yet.
# Attempt to authorize the account.
# Mark this as required for the next form render.
# Re-raise the error.
# Re-raise the error.
# Re-raise the error so the user will see the "I trust this
# host" prompt.
# Re-raise the error.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\gerrit.py
# Note that we enable Digest Auth for Gerrit < 2.14, but keep Basic Auth
# set (via the parent class) for Gerrit >= 2.14.
# get_change uses this under the hood to retrieve a single commit,
# so we can specialize the error message to make it more useful in
# that case.
# The commit endpoint that Gerrit exposes is subtly different from the
# one our plugin exposes and requires more work on our end to parse, so
# we just use the all-commits endpoint we expose and limit it to a
# single commit.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\github.py
# Find all the links in the Link header and key off by the link
# name ('prev', 'next', etc.).
#
# HTTP method overrides
#
#
# API wrappers around HTTP/JSON methods
#
# GitHub uses 1-based indexing, so add one.
#
# Higher-level API methods
#
# Note that we don't always use the branch, since the GitHub API
# doesn't support limiting by branch *and* starting at a SHA. So, the
# branch argument can be safely ignored if a sha is provided.
# If the commit has a parent commit, use GitHub's "compare two commits"
# API to get the diff. Otherwise, fetch the commit itself.
# All repositories belonging to an authenticated user.
# Only public repositories for the user.
#
# Internal utilities
#
# GitHub is checking that this hook is valid, so accept the request
# and return.
# Validate the hook against the stored UUID.
# We don't know what this is.
#issue/%%s',
#issue/%%s',
#issue/%%s',
#issue/%%s',
# This should be the prefix for every field on the plan forms.
# If the site is using a registered GitHub application,
# send it in the requests. This will gain the benefits of
# a GitHub application, such as higher rate limits.
# If we get a 404 Not Found, then the authorization was
# probably already deleted.
# This may produce errors, which we want to bubble up.
# We can use the new API for resetting the token without
# re-authenticating.
# Step 1: fetch the commit itself that we want to review, to get
# the parent SHA and the commit message. Hopefully this information
# is still in cache so we don't have to fetch it again.
# Step 2: Get the diff and tree from the "compare commits" API
# Step 3: fetch the tree for the original commit, so that we can get
# full blob SHAs for each of the files in the diff.
# Make sure there's a trailing newline.
# Errors in fetching are already logged in api_get_issue
# Allow any errors to bubble up
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\gitlab.py
# The maximum number of commits returned from each call to get_commits()
# Pagination links (in GitLab 6.8.0+) take the form:
# '<http://gitlab/api/v3/projects?page=2&per_page=100>; rel="next"'
# This will raise an exception if it fails, which the form will
# catch.
# Ask GitLab for 21 commits per page. GitLab's API doesn't
# include the parent IDs, so we use subsequent commits to fill
# them in (allowing us to return 20 commits with parent IDs).
# If start parameter is given, use it as the latest commit to log
# from, so that we fetch a page of commits, and the first commit id
# on the page is the start parameter.
# The branch is optional. If it is not given, use the default
# branch. The default branch is set to 'master' in get_branches()
# The GitLab API will return a tuple consists of two elements.
# The first one is a list of commits, and the other one is an instance
# type object containing all kinds of headers, which is not required.
# Note that GitLab API documents do not show any returned
# 'parent_id' from the query for a list of commits. So we use
# the current commit id as the previous commit's parent id, and
# remove the last commit from results.
# Strip off the last commit since we don't know its parent id yet.
# Step 1: Fetch the commit itself that we want to review, to get
# the parent SHA and the commit message. Hopefully this information
# is still in cache so we don't have to fetch it again. However, the
# parent SHA is probably empty.
# This response from GitLab consists of one dict type commit and
# on instance type header object. Only the first element is needed.
# Step 2: Get the diff. The revision is the commit header in here.
# Firstly, a diff url should be built up, which has the format of
# <hosting_url>/<user-name>/<project-name>/commit/<revision>.diff,
# then append the private_token to the end of the url and get the diff.
# Get the project path with the namespace.
# Build up diff url and get diff.
# Remove the last two lines. The last line is 'libgit <version>',
# and the second last line is '--', ending with '\n'. To avoid the
# error from parsing the empty file (size is 0), split the string into
# two parts using the delimiter '--\nlibgit'. If only use '\n' or '--'
# delimiter, more characters might be stripped out from file
# modification commit diff.
# Make sure there's a trailing newline.
# GitLab claims pagination support, but it has a number of problems.
# We have no idea how many pages there are, or even if there's another
# page of items. Furthermore, if we try to go beyond the last page,
# we just get the first again, so we can't attempt to guess very
# well.
#
# If the list doesn't return the repository, the user is out of luck.
#
# This is true as of GitLab 6.4.3.
# This is the repository we wanted to find.
# If the full path is available, use that (to support nested
# groups). Otherwise fall back on the group name.
# Not all versions of GitLab support a blob ID, so if a base commit
# ID is provided, we're going to use that instead.
# Note that we're only going to list the error found in the first
# HTTP GET attempt. It's more than likely that if we're unable to
# look up any version URLs, the root cause will be the same.
# Older versions of GitLab don't have a ``message`` field and
# instead only offer the ``title`` (i.e., the first line of the
# commit message).
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\gitorious.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\googlecode.py
# The Google Code payload is the same for SVN and Mercurial
# repositories. There is no information in the payload as to
# which SCM tool was used for the commit. That's why the only way
# to close a review request through this hook is by adding the review
# request id in the commit message.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\hook_utils.py
#%s is already submitted.',
# Closing as submitted will fail if the review request was never public. In
# this case, publish first.
#%s is set to %s.',
# Some of the entries we get may have 'None' keys, so filter them out.
# Look up all review requests that match the given repository, hosting
# service ID, and Local Site.
# Check if there are any listed that we couldn't find, and log them.
#%s '
# Close any review requests we did find.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\jira.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\kiln.py
#
# API wrappers around HTTP/JSON methods
#
#
# Internal utilities
#
# No error was raised, so raise a default one.
# Look for certain errors.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\managers.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\models.py
# Show the hosting URL, so that users can distinguish between
# the accounts across different self-hosted servers of a given
# type.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\rbgateway.py
# Perform any default checks.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\redmine.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\repository.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\service.py
# create_default_context only exists in Python 2.7.9+. Using it
# here should be fine, however, because accepting invalid or
# self-signed certificates is only possible when running
# against versions that have this (see the check for
# create_default_context below).
# HTTP response data will be in byte strings, unless something is
# overridden. Users should never see this in production, but
# it'll be confusing for development. Make sure developers see
# this through both a log message and an exception.
# There's actual data here, so parse it and return it.
# Return whatever falsey value we received.
#: The HTTP request class to construct for HTTP requests.
#:
#: Subclasses can replace this if they need custom behavior when
#: constructing or invoking the request.
#: Whether to add HTTP Basic Auth headers by default.
#:
#: By default, hosting services will support HTTP Basic Auth. This can be
#: turned off if not needed.
#: Whether to add HTTP Digest Auth headers by default.
#:
#: By default, hosting services will not support HTTP Digest Auth. This
#: can be turned on if needed.
#
# HTTP utility methods
#
# This will either raise, or it will return and we'll raise.
#
# JSON utility methods
#
#
# Internal utilities
#
#: The unique ID of the hosting service.
#:
#: This should be lowercase, and only consist of the characters a-z, 0-9,
#: ``_``, and ``-``.
#:
#: Version Added:
#:     3.0.16:
#:     This should now be set on all custom hosting services. It will be
#:     required in Review Board 4.0.
#: Optional form used to configure authentication settings for an account.
# These values are defaults that can be overridden in repository_plans
# above.
# Grab the list of fields for population below. We have to do this
# differently depending on whether or not this hosting service has
# different repository plans.
#: Legacy name for HostingServiceHTTPRequest
#:
#: Deprecated:
#:     4.0:
#:     This has been replaced by :py:class:`HostingServiceHTTPRequest`.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\sourceforge.py
# TODO: Support Git
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\splat.py
# Normalize the text format. For Splat, this is going to look
# a bit silly, but we don't want to make the assumption in code
# that we can just pass through the text format here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\trac.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\unfuddle.py
#/projects/'
#/projects/'
# Maps Unfuddle "system" names to SCMTool names.
# This will raise an exception if it fails, which the form will
# catch.
# If a base commit ID is provided, use it. It may not be provided,
# though, and in this case, we need to use the provided revision,
# which will work for Subversion but not for Git.
#
# If not provided, and using Git, we'll give the user a File Not
# Found error with some info on what they need to do to correct
# this.
# Let the exception bubble up.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\versionone.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\evolutions\account_hosting_url.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\evolutions\account_hosting_url_max_length_255.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\evolutions\account_unique_together_baseline.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\management\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\management\commands\reset-github-tokens.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\management\commands\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\testing\testcases.py
# Check arguments against the request.
# Check arguments against the generated credentials.
# This is a simplification for checking standard username/password
# credentials, and maintains backwards-compatibility.
# Check arguments against the call.
#: The registered name of the service.
#: The default username to use for accounts.
#: The default password to use for accounts.
#: The default hosting URL to use for accounts.
#:
#: This is only used for accounts set with ``use_url=True`` (or when
#: ``default_use_hosting_url`` is ``True``).
#: Whether to create accounts attached to a hosting URL by default.
#: Default data to set for created hosting service accounts.
#: Default data to set for created repositories.
#: Default SCMTool to set for created repositories.
# Sanity-check that the caller isn't mixing incompatible arguments.
# Reset for this next test. This allows the test case to use
# this context function multiple times.
# Validate the paths to make sure payloads are in the right format.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\testing\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_api_paginator.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_assembla.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_beanstalk.py
# $Id$\n'
# $Rev: 123$\n'
# $Revision:: 123   $\n'
# foo\n'
# $Id$\n'
# $Rev$\n'
# $Revision::       $\n'
# foo\n'
# $Id$\n'
# $Rev$\n'
# $Revision::    $\n'
# foo\n'
# $Id$\n'
# $Rev$\n'
# $Revision::    $\n'
# foo\n'
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_bitbucket.py
# Check Git repositories.
# Now check Mercurial repositories.
# Create two review requests: One per referenced commit.
# Simulate the webhook.
# Check the first review request.
#
# The first review request has an entry in the truncated list and the
# fetched list. We'll make sure we've only processed it once.
# Check the first review request.
# Create two review requests: One per referenced commit.
# Simulate the webhook.
# There should have been 5 API requests. We'll never hit the final
# page.
# The review requests should not have been updated.
# Check the first review request.
# We'll test against GitHub for this test.
#%s does not exist.',
# NOTE: This payload only contains the content we make
#       use of in the hook.
# Some entries containing missing keys.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_bugzilla.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_client.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_codebasehq.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_fedora_hosted.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_fogbugz.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_gerrit.py
# During Python 3.7.x, this error has changed a couple of times,
# so we're going to match only the prefix of it.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_github.py
#issue/%s')
#issue/%s')
#issue/%s')
#issue/%s')
# Fetch and check the first page.
# Fetch and check the second page.
# We'll test against Bitbucket for this test.
#%s does not exist.',
# NOTE: This payload only contains the content we make
#       use of in the hook.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_gitlab.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_gitorious.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_google_code.py
# We'll test against Bitbucket for this test.
# NOTE: This payload only contains the content we make
#       use of in the hook.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_hosting_service_auth_form.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_kiln.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_rbgateway.py
#%s does not exist.',
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_redmine.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_registration.py
# Unregister the service, going back to a default state. It's okay
# if it fails.
#
# This will match whichever service we added for testing.
# Once registered, should not be able to register again
# Once unregistered, should not be able to unregister again
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_sourceforge.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_trac.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_unfuddle.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\test_version_one.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\tests\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\utils\paginator.py
#: Query parameter name for the start page in a request.
#:
#: This is optional. Clients can specify this to provide this as part
#: of pagination queries.
#: Query parameter name for the requested number of results per page.
#:
#: This is optional. Clients can specify this to provide this as part
#: of pagination queries.
# Augment the URL with the provided query parameters.
# Make sure the implementation sent the correct data to us.
# NOTE: We're not calling BasePaginator here, because we're actually
#       overriding all the properties it would set that we care about.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\hostingsvcs\utils\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\base.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\forms.py
#: A list of fields on the model that should not be saved in settings
#: The fieldset containing basic information on the configuration.
#:
#: This is the same as the djblets version, but with the local site field
#: added in.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\models.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\urls.py
#: URL patterns for the administration UI views for configuring integrations.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\views.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\__init__.py
# This is a subclass of Integration.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\tests\test_configs.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\tests\test_forms.py
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# This should just simply not raise an exception.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\tests\test_views.py
# NOTE: integration and config are normally set in dispatch(), but
#       we're not calling into all that, so we're taking advantage of
#       the fact that Django's class-based generic views will set any
#       attribute passed in during construction.
# This is normally set by LocalSiteMiddleware.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\integrations\tests\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\forms.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\managers.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\models.py
# Standard information
# Custom content
# HMAC payload signing
# Apply to
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\webhooks.py
# Remove some built-in tags that we don't want to expose.
# There are no built-in filters we have to worry about.
# See how we need to handle normalizing this payload. If we need
# something JSON-safe, then we need to go the more aggressive route
# and normalize keys to strings.
# This payload's going to be provided for XML and custom
# templates. We don't want to alter the keys at all.
# This payload's going to be provided for JSON or
# form-data. We want to normalize all keys to strings.
# The error has already been logged. Don't impact the caller.
# The error has already been logged. Don't impact the caller.
# The error has already been logged. Don't impact the caller.
# The error has already been logged. Don't impact the caller.
# The error has already been logged. Don't impact the caller.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\email\decorators.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\email\hooks.py
# A mapping of signals to EmailHooks.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\email\message.py
#: The number of additional characters each ``X-ReviewBoard-Diff-For`` has.
#:
#: We calculate the length the value of each header at runtime. However,
#: ``X-ReviewBoard-Diff-For: `` is present before the value, and the line
#: terminates with a ``\r\n``.
# This e-mail would have no recipients, so we won't send it.
# The following code segment deals with the case where the client adds
# a significant amount of files with large names. We limit the number
# of headers; when more than 8192 characters are reached, we stop
# adding filename headers.
# Fancy quoted "replies".
# If the only changes are to the target reviewers, try to send a
# much more targeted e-mail. Rather than having it be sent out to
# everyone, it will only be sent to new reviewers.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\email\signal_handlers.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\email\utils.py
# Filter out users who are on the reviewer list in some form or have
# starred the review request but are no longer part of the LocalSite.
# If the submitter has changed and the person sending this e-mail is
# not the original submitter, then we should include them in the list
# of recipients.
# The mailing list field has only one e-mail address in it,
# so we can just use that and the group's display name.
# The mailing list field has multiple e-mail addresses in it.
# We don't know which one should have the group's display name
# attached to it, so just return their custom list as-is.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\email\views.py
#: The function that will build the e-mail.
#:
#: This must be a class method or, if using an existing top-level function,
#: :js:class:`staticmethod` must be used.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\email\__init__.py
# Fixes bug #3613
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\evolutions\webhooktarget_extra_data_null.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\evolutions\webhooktarget_extra_state.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\templatetags\markdown_email.py
# We use XHTML1 instead of HTML5 to ensure the results can be parsed by
# an XML parser. This is actually needed for the main Markdown renderer
# for the web UI, but consistency is good here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\templatetags\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\tests\test_admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\tests\test_base_preview_email_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\tests\test_email_sending.py
# We have to first get the register page so that the CSRF cookie is
# set.
# This was bug 3581.
# Clear the outbox.
# Clear the outbox.
# Clear the outbox.
# Clear the outbox.
# Clear the outbox.
# Ensure all the reviewers are on the site.
# Clear the outbox.
# Clear the outbox.
# Verify that no email is generated as option is false by default
# Clear the outbox.
# Clear the outbox.
# Clear the outbox.
# Clear the outbox.
# The only included users should be the submitter and 'grumpy' (not
# 'dopey', since he was already included on the review request earlier)
# The only included users should be the submitter and 'devgroup' (not
# 'dopey' or 'existing', since they were already included on the
# review request earlier)
# See issue 3985.
# Now that we're set up, send another e-mail.
# Each filename is 100 characters long. For each header we add 26
# characters: the key, a ': ', and the terminating '\r\n'.
# 8192 / (100 + 26) rounds down to 65. We'll bump it up to 70 just
# to be careful.
#03d' % (prefix, i)
# Bug #4572 reported that the 'X-ReviewBoard-Diff-For' header appeared
# only for newly created files and moved files. This test is to check
# that the header appears for modified files as well.
# Before publishing, target_people must be added.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\tests\test_email_utils.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\tests\test_webhooks.py
# Python 3 doesn't have a long type, which generally makes life easier,
# except that we want to continue to test with long values in Python 2 for
# WebHook payloads to avoid regressions. To get around this, we'll just
# provide a dummy long() that actually returns an int, which is fine for
# our testing.
# Check that all sent data are binary strings.
# We need to ensure that logging.exception is not called
# in order to avoid silent swallowing of test assertion failures
# Assuming that if logging.exception is called, an assertion
# error was raised - and should thus be raised further.
# 1 diff comment.
# 2 screenshot comments.
# 3 file attachment comments.
# 4 general comments.
# 1 diff comment.
# 2 screenshot comments.
# 3 file attachment comments.
# 4 general comments.
# Test for bug 3999
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\tests\test_webhook_target_form.py
# Create repositories for the test.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# This should just simply not raise an exception.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\tests\test_webhook_target_manager.py
# These should not match.
# These should match.
# These should not match.
# This should match.
# These should not match.
# These should match.
# These should not match.
# These should match.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\notifications\tests\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\admin.py
# Django 1.6
# Django 1.11
# request.POST is immutable on modern versions of Django. The
# pattern used within Django for this exact situation is to copy
# the dictionary and then modify it.
# Ensure that the oauth2_provider admin modules is loaded so that we can
# replace their admin registration with our own. If we do not do this, we can't
# guarantee that it will be registered before we try to unregister it during
# unit tests.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\apps.py
# Django < 1.7
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\features.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\forms.py
# If we are creating an application (as the
# ApplicationCreationForm is a subclass of this class), the
# client_secret wont be present so we don't have to initialize the
# widget.
# We join the list instead of returning the initial value because the
# the original value may have had multiple adjacent whitespace
# characters.
# redirect_uris will not be present in cleaned_data if validation
# failed.
# This is unfortunately not publicly exposed in Django 1.6, but it
# is exposed in later versions (as add_error).
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\models.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\tests.py
# This should always succeed.
# Ensure that the error cases of AbstractApplication.clean() matches
# our implementation.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\views.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\widgets.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\evolutions\disabled_for_security.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\oauth\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\registries\registry.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\registries\tests.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\registries\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\actions.py
#: The maximum depth limit of any action instance.
#: The mapping of all action IDs to their corresponding action instances.
#: All top-level action IDs (in their left-to-right order of appearance).
#: Determines if the default action instances have been populated yet.
#: The ID of this action. Must be unique across all types of actions and
#: menu actions, at any depth.
#: The label that displays this action to the user.
#: The URL to invoke if this action is clicked.
#'
#: Determines if this action should be initially hidden to the user.
# Unregistration will mutate self.child_actions, so we make a copy.
# TODO: Convert all this to use djblets.registries.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\builtin_fields.py
# This field only exists in ReviewRequest, and not in
# the draft, so we're going to work there instead.
# This is already available in the review request state fed to the
# page, so we don't need it in the data attributes as well.
#: Whether the field should be rendered.
#: Whether the field should be rendered.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
# Abbreviate SHA-1s
# If a published revision of a diff has been deleted from the
# database, this will explode. Just return a blank string for this,
# so that it doesn't show a traceback.
# Fetch the total number of inserts/deletes. These will be shown
# alongside the diff revision.
# Display the label, URL, and line counts for the diff.
# This is not the first diff revision. Include an interdiff link.
# Begin displaying the list of files modified in this diff.
# It will be capped at a fixed number (MAX_FILES_PREVIEW).
# We want a sorted list of filediffs, but tagged with the order in
# which they come from the database, so that we can properly link
# to the respective files in the diff viewer.
#%d' % i,
# There are more files remaining than we've shown, so show
# the count.
# If there's a new diffset at all (in new_value), then it passes
# the test.
# This will be None for a ReviewRequest, and may have a value for
# ReviewRequestDraft if a new diff was attached.
# Fetch the template ourselves only once and render it for each item,
# instead of calling render_to_string() in the loop, so we don't
# have to locate and parse/fetch from cache for every item.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\chunk_generators.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\conditions.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\context.py
# We actually have to do a query
#index_header'),
# The main review request view will already have populated this, but
# other related views (like the diffviewer) don't.
# See if there are any diffsets with comments on them in this review.
# The user is browsing a standard diffset, so filter it out.
# See if there are any interdiffs with comments on them in this review.
# The user is browsing an interdiff, so filter it out.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\default_actions.py
# We want to use a relative URL in the diff viewer as we will not be
# re-rendering the page when switching between revisions.
# If we're on a diff viewer page, then this DownloadDiffAction should
# initially be rendered, but possibly hidden.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\detail.py
# These are populated in query_data_pre_etag().
# These are populated in query_data_post_etag().
# There's specific entries being used for the data collection.
# Loop through them and determine what sets of data we need.
# Query for all the reviews that should be shown on the page (either
# ones which are public or draft reviews owned by the current user).
# Get all the public ChangeDescriptions.
# Get the active draft (if any).
# Get diffsets.
# Get all status updates.
# Find the latest reply timestamp for each top-level review.
# We've already attached all the status updates above, but
# any reviews that don't have status updates can still result
# in a query. We want to null those out.
# Link up all the review body replies.
# Get all the file attachments and screenshots.
#
# Note that we fetch both active and inactive file attachments and
# screenshots. We do this because even though they've been removed,
# they still will be rendered in change descriptions.
# Due to mistakes in how we initially made the schema, we have
# a ManyToManyField in between comments and reviews, instead of
# comments having a ForeignKey to the review. This makes it
# difficult to easily go from a comment to a review ID.
#
# The solution to this is to not query the comment objects, but
# rather the through table. This will let us grab the review
# and comment in one go, using select_related.
# We do two passes. One to build a mapping, and one to actually
# process comments.
# Short-circuit some object fetches for the comment by
# setting some internal state on them.
# If the comment has an associated object (such as a file
# attachment) that we've already fetched, attach it to
# prevent future queries.
# We've hit legacy database cases where there were entries
# that weren't a reply, and were just orphaned. Check and
# ignore anything we don't expect.
# Both "verifying" states get lumped together in the
# same section in the issue summary table.
# Sort all the main entries (such as reviews and change descriptions)
# by their timestamp. We don't sort the initial entries, which are
# displayed in registration order.
#: An initial entry appearing above the review-like boxes.
#: An entry appearing in the main area along with review-like boxes.
#: The ID used for entries of this type.
#: The type of entry on the page.
#:
#: By default, this is a box type, which will appear along with other
#: reviews and change descriptions.
#: Whether the entry needs a review request draft to be queried.
#:
#: If set, :py:attr:`ReviewRequestPageData.draft` will be set (if a draft
#: exists).
#: Whether the entry needs reviews, replies, and comments to be queried.
#:
#: If set, :py:attr:`ReviewRequestPageData.reviews`,
#: :py:attr:`ReviewRequestPageData.diffsets`,
#: :py:attr:`ReviewRequestPageData.diffsets_by_id`,
#: :py:attr:`ReviewRequestPageData.active_file_attachments`,
#: :py:attr:`ReviewRequestPageData.all_file_attachments`,
#: :py:attr:`ReviewRequestPageData.file_attachments_by_id`,
#: :py:attr:`ReviewRequestPageData.active_file_screenshots`,
#: :py:attr:`ReviewRequestPageData.all_file_screenshots`, and
#: :py:attr:`ReviewRequestPageData.file_screenshots_by_id` will be set.
#: Whether the entry needs change descriptions to be queried.
#:
#: If set, :py:attr:`ReviewRequestPageData.changedescs` will be queried.
#: Whether the entry needs status updates-related data to be queried.
#:
#: This will also fetch the reviews, but will not automatically fetch any
#: comments or other related data. For that, set :py:attr:`needs_reviews`.
#:
#: If set, :py:attr:`ReviewRequestPageData.reviews`,
#: If set, :py:attr:`ReviewRequestPageData.all_status_updates`,
#: If set, :py:attr:`ReviewRequestPageData.initial_status_updates`, and
#: If set, :py:attr:`ReviewRequestPageData.change_status_updates` will be
#: set.
#: Whether the entry needs file attachment data to be queried.
#:
#: If set, :py:attr:`ReviewRequestPageData.active_file_attachments`,
#: :py:attr:`ReviewRequestPageData.all_file_attachments`, and
#: :py:attr:`ReviewRequestPageData.file_attachments_by_id` will be set.
#: Whether the entry needs screenshot data to be queried.
#:
#: Most entries should never need this, as screenshots are deprecated.
#:
#: If set, :py:attr:`ReviewRequestPageData.active_screenshots`,
#: :py:attr:`ReviewRequestPageData.all_screenshots`, and
#: :py:attr:`ReviewRequestPageData.screenshots_by_id` will be set.
#: The template to render for the HTML.
#: The template to render for any JavaScript.
#: The name of the JavaScript Backbone.Model class for this entry.
#: The name of the JavaScript Backbone.View class for this entry.
#: Whether this entry has displayable content.
#:
#: This can be overridden as a property to calculate whether to render
#: the entry, or disabled altogether.
# Collapse if older than the most recent review request
# change and there's no recent activity.
# Collapse if the page was previously visited and this entry is
# older than the last visited time.
# Reviews containing comments with open issues should never be
# collapsed.
# Draft reviews with replies should never be collapsed.
# Don't collapse unless the user has visited the page before
# and the review is older than their last visit.
# Add all the comments for the review on this status
# update.
# These are needed for the file attachments/screenshots area.
# Reviews, comments, etc. are needed for the issue summary table.
# Don't collapse if the user has not seen this page before (or
# are anonymous) and there aren't any change descriptions yet.
# Don't collapse if there are status updates containing reviews
# that should not be collapsed.
# See if there was a review request status change.
# Process the list of fields, in order by fieldset. These will be
# put into groups composed of inline vs. full-width field values,
# for render into the box.
# Begin a new group of fields.
# If the change is older than the newest change, consider it
# for collapsing.
# Don't collapse if there are status updates containing reviews
# that should not be collapsed.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\errors.py
# This depth is acceptable.
# This action is too deep.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\features.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\fields.py
# Set the field_classes to an empty list by default if it doesn't
# explicitly provide its own, so that entries don't go into
# BaseReviewRequestFieldSet's global list.
# Fields are only ever registered via the FieldSetRegistry, so we
# ensure that it has been populated as well.
#: The HTML tag to be used when rendering the field.
#: Whether the field should be rendered.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The class name for the JavaScript view representing this field.
#: The default value of the field.
#: The HTML tag to be used when rendering the field.
#: The class name for the JavaScript view representing this field.
#: The default value of the field.
#: The HTML tag to be used when rendering the field.
#: A list of the available options for the dropdown.
#:
#: Each entry in the list should be a 2-tuple of (value, label). The values
#: must be unique. Both values and labels should be unicode.
#: The class name for the JavaScript view representing this field.
#: The default value of the field.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\forms.py
# Set the initial revision to be one newer than the most recent
# public revision, so we can reference it in the diff viewer.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\managers.py
# We allow accessible() to return hidden groups if the user is
# a member, so we must perform this check here.
# Try both the new commit_id and old changenum versions
# Create the review request. We're not going to actually save this
# until we're confident we have all the data we need.
# Now that we've guaranteed we have everything needed for this review
# request, we can save all related objects and re-attach (since the
# "None" IDs are cached).
# We want to atomically set the local_id to be a monotonically
# increasing ID unique to the local_site. This isn't really
# possible in django's DB layer, so we have to drop back to pure
# SQL and then reload the model.
# TODO: Use the cursor as a context manager when we move over
# to Django 1.7+.
# Ensure that a draft exists, so that users will be prompted to publish
# the new review request.
# This must always be kept in sync with RBSearchForm.search.
# We have duplicate reviews, which will break things. We need
# to condense them.
# TODO: should be consolidated with queries in ReviewRequestManager
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\markdown_utils.py
# Keyword arguments used when calling a Markdown renderer function.
#
# We use XHTML1 instead of HTML5 to ensure the results can be parsed by an
# XML parser, needed for change descriptions and other parts of the web UI.
# This isn't rich text, but it's going to be edited as rich text,
# so escape it.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\search_indexes.py
# We shouldn't use 'id' as a field name because it's by default reserved
# for Haystack. Hiding it will cause duplicates when updating the index.
# These fields all contain information needed to perform queries about
# whether a review request is accessible by a given user.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\signals.py
#: Emitted when a review request is publishing.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user publishing the review request.
#:
#:     review_request_draft (reviewboard.reviews.models.ReviewRequestDraft):
#:         The review request draft being published.
#: Emitted when a review request is published.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user who published the review request.
#:
#:     review_request (reviewboard.reviews.models.ReviewRequest):
#:         The review request that was published.
#:
#:     trivial (bool):
#          Whether or not the review request was published trivially or not.
#:
#:     changedesc (reviewboard.changedescs.models.ChangeDescription):
#:         The change description associated with the publish, if any.
#: Emitted when a review request is about to be closed.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user closing the review request.
#:
#:     review_request (reviewboard.reviews.models.ReviewRequest):
#:         The review request being closed.
#:
#:     close_type (unicode):
#:         Describes how the review request is being closed. It is one of
#:         :py:data:`~reviewboard.reviews.models.ReviewRequest.SUBMITTED` or
#:         :py:data:`~reviewboard.reviews.models.ReviewRequest.DISCARDED`.
#:
#:     description (unicode):
#:         The provided closing description.
#:
#:     rich_text (bool):
#:         Whether or not the description is rich text (Markdown).
#: Emitted when a review request has been closed.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user who closed the review request.
#:
#:     review_request (reviewboard.reviews.models.ReviewRequest):
#:         The review request that was closed.
#:
#:     close_type (unicode):
#:         Describes how the review request was closed. It is one of
#:         :py:data:`~reviewboard.reviews.models.ReviewRequest.SUBMITTED` or
#:         :py:data:`~reviewboard.reviews.models.ReviewRequest.DISCARDED`.
#:
#:     description (unicode):
#:         The provided closing description.
#:
#:     rich_text (bool):
#:         Whether or not the description is rich text (Markdown).
#: Emitted when a review request is about to be reopened.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user re-opening the review request.
#:
#:     review_request (reviewboard.reviews.models.ReviewRequest):
#:         The review request being reopened.
#: Emitted when a review request has been reopened.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user who re-opened the review request.
#:
#:     review_request (reviewboard.reviews.models.ReviewRequest):
#:         The review request that was reopened.
#:
#:     old_status (unicode):
#:         The old status for the review request. This will be
#:         :py:attr:`~reviewboard.reviews.models.ReviewRequest.PENDING_REVIEW`,
#:         :py:attr:`~reviewboard.reviews.models.ReviewRequest.SUBMITTED`, or
#:         :py:attr:`~reviewboard.reviews.models.ReviewRequest.DISCARDED`.
#:
#:     old_public (bool):
#:         The old public state for the review request.
#: Emitted when a review is being published.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user publishing the review.
#:
#:     review (reviewboard.reviews.models.Review):
#:         The review that's being published.
#:
#:     to_owner_only (boolean):
#:         Whether the review e-mail should be sent only to the review request
#:         submitter.
#: Emitted when a Ship It is about to be revoked from a review.
#:
#: Listeners can raise a
#: :py:exc:`~reviewboard.reviews.errors.RevokeShipItError` to stop the Ship It
#: from being revoking.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user who requested to revoke the Ship It.
#:
#:     review (reviewboard.reviews.models.review.Review):
#:         The review that will have its Ship It revoked.
#: Emitted when a Ship It has been revoked from a review.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user who revoked the Ship It.
#:
#:     review (reviewboard.reviews.models.review.Review):
#:         The review that had its Ship It revoked.
#: Emitted when a review has been published.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user who published the review.
#:
#:     review (reviewboard.reviews.models.Review):
#:         The review that was published.
#:
#:     to_owner_only (boolean):
#:         Whether the review e-mail should be sent only to the review request
#:         submitter.
#:
#:     request (django.http.HttpRequest):
#:         The request object if the review was published from an HTTP request.
#: Emitted when a reply to a review is being published.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user publishing the reply.
#:
#:     review (reviewboard.reviews.models.Review):
#:         The reply that's being published.
#: Emitted when a reply to a review has ben published.
#:
#: Args:
#:     user (django.contrib.auth.models.User):
#:         The user who published the reply.
#:
#:     review (reviewboard.reviews.models.Review):
#:         The reply that was published.
#:
#:     trivial (bool):
#:         Whether the reply was considered trivial.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\urls.py
# Review request detail
# Review request diffs
# Fragments
# File attachments
# Screenshots
# Bugs
# E-mail previews
# Review Request infobox
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\views.py
# Normalize the revision, since it might come in as a string.
# This will try to grab the diff associated with a draft if the review
# request has an associated draft and is either the revision being
# requested or no revision is being requested.
# Grab a revision if requested.
#
# Helper functions
#
# It's bad that we failed, and we'll return a 500, but we'll
# still return content for anything we have. This will prevent any
# caching.
#
# View functions
#
# Track the visit to this review request, so the dashboard can
# reflect whether there are new updates.
# Begin building data for the contents of the page. This will include
# the reviews, change descriptions, and other content shown on the
# page.
# Prepare data used in both the page and the ETag.
# Somehow, this visit was seen as created but then not
# accessible. We need to log this and then continue on.
# If the review request is public and pending review and if the user
# is logged in, mark that they've visited this review request.
#%s: %s'
# Find out which entries and IDs (if any) that the caller is most
# interested in.
# Build page data only for the entry we care about.
# Finish any querying needed by entries on this page.
# Gather all the entries into a single list.
#
# Note that the order in which we build the resulting list of entries
# doesn't matter at this stage, but it does need to be consistent.
# The current order (main, initial) is based on Python 2.7 sort order,
# which our tests are based on. This could be changed in the future.
# If specific entry IDs have been requested, limit the results
# to those.
# See if the caller only wants to fetch entries updated since a given
# timestamp.
# We can now begin to serialize the payload for all the updates.
# Now that we know the context is needed for entries,
# we can construct and populate it.
# If any of the entries required any information on reviews, then
# the state of the issue summary table may have changed. We'll need
# to send this along as well.
# The payload's complete. Close it out and send to the client.
# An interdiff revision was specified. Try to find a matching
# diffset.
# Try to find an existing pending review of this diff from the
# current user.
# Get the list of diffsets. We only want to calculate this once.
# Compute the lists of comments based on filediffs and interfilediffs.
# We do this using the 'through' table so that we can select_related
# the reviews and comments.
# Build the status information shown below the summary.
# Build the final context for the page.
#%s: %s'
# Get rid of any Unicode characters that may be in the filename.
# Content-Disposition headers containing commas break on Chrome 16
# and newer. To avoid this, replace any commas in the filename with
# an underscore. Was bug 3704.
# 1 year
# Ensure that we have 2 values for lines_of_context. If only one is
# given, assume it is both the before and after context. If more
# than two are given, only consider the first two. If somehow we
# get no lines of context value, we will default to [0, 0].
# Determine the file attachments to display in the diff viewer,
# if any.
# See if we're able to generate a diff review UI for these files.
# Both files are able to be diffed by this review UI.
# We'll display a special diff review UI instead of two
# side-by-side review UIs.
# We won't be showing a diff of these files. Instead, just
# grab the review UIs and render them.
# Don't cache the view, because the Review UI may care about
# state that we can't anticipate. At the least, it may have
# comments or other data that change between renders, and we
# don't want that to go stale.
# Only one FileAttachment should be associated with a FileDiff
# Make sure the attachment returned is part of either the review request
# or an accessible draft.
# Make sure the screenshot returned is part of either the review
# request or an accessible draft.
# Need to create a custom HttpResponse because a non-HTTP url scheme
# will cause HttpResponseRedirect to fail with a "Disallowed Redirect".
# We want to strip the tags away, but keep certain common entities.
# This might not know every bit of Markdown that's thrown at us,
# but we'll do the best we can.
# Should be plain text, but don't trust it.
# We only want to show one label. If there's a draft, then that's
# the most important information, so we'll only show that. Otherwise,
# we'll show the submitted/discarded state.
# Fetch information on the reviews for this review request.
# Fetch information on the draft for this review request.
#index_header' % local_site_reverse(
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\add_issues_to_comments.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\add_owner_to_draft.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\base_comment_extra_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\change_descriptions.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\comment_issue_verification.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\commit_id.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\default_reviewer_local_site.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\default_reviewer_repositories.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\extra_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\file_attachments.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\file_attachment_comment_diff_id.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\file_attachment_comment_extra_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\general_comments.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\group_email_list_only.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\group_incoming_request_count.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\group_invite_only.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\group_mailing_list_charfield.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\group_visible.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\is_default_group.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\last_review_timestamp.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\localsite.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\null_repository.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\reviewrequest_unique_together_baseline.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\review_request_depends_on.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\review_request_draft_commit_id.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\review_request_file_attachment_histories.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\review_request_issue_counts.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\review_request_last_review_activity_timestamp.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\review_request_screenshot_attachment_counters.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\review_request_summary_index.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\review_request_summary_index_manual.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\rich_text.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\shipit_count.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\split_rich_text.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\status_update_timeout.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\unique_together_baseline.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\management\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\management\commands\fill-database.py
# Setup repository.
# Throw exception on error so transaction reverts.
# Create the diff directory locations.
# Throw exception on error so transaction reverts.
# Add trailing slash.
# Get a list of the appropriate files.
# Check for any diffs in the files.
# Users is required for any other operation.
# Start adding data to the database.
# Avoids having to flush db.
# Review Requests.
#%s:" % j)
# Set the targeted reviewer to superuser or 1st defined.
# Add the diffs if any to add.
# If adding diffs add history.
# Won't execute if diff_val is 0, ie: no diffs requested.
#%s" % (i, k))
# Add the reviews if any.
#%s:" %
# Add comments if any.
#%s" %
# Choose random lines to comment.
# Max lines: should be mod'd in future to read
# diff.
# No comments, so have previous layer clear queries.
# Generate output as users & data is created.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\management\commands\fixreviewcounts.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\management\commands\fixscreenshots.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\management\commands\index.py
# Call the appropriate Haystack command to refresh the search index.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\management\commands\reset-issue-counts.py
# Load each review request. The issue counters will recalculate,
# and output will be shown if verbosity > 1.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\management\commands\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\base_comment.py
# Set this up with a ConcurrencyManager to help prevent race conditions.
#%s%d' % (self.get_review_request().get_absolute_url(),
# Update the review timestamp, but only if it's a draft.
# Otherwise, resolving an issue will change the timestamp of
# the review.
# The user has toggled the issue status of this comment,
# so update the issue counts for the review request.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\base_review_request_details.py
# Deprecated and no longer used for new review requests as of 2.0.9.
# First try a numeric sort, to show the best results for the majority
# case of bug trackers with numeric IDs.  If that fails, sort
# alphabetically.
# Handle legacy entries which don't have an associated
# FileAttachmentHistory entry.
# This won't actually be queried until needed, since we're not
# evaluating the queryset at this stage. That means we save a lookup
# if the list of default reviewers is empty below.
# Get the list of users and groups across all matched default
# reviewers. We'll fetch them directly from the ManyToMany tables,
# to avoid extra queries. Django's m2m.add() methods will ensure no
# duplicates are added, and that insertions aren't performed if not
# needed.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\default_reviewer.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\diff_comment.py
# A null line number applies to an entire diff.  Non-null line numbers are
# the line within the entire file, starting at 1.
#file%sline%s" % (
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\file_attachment_comment.py
# Note that we need to create our own instance here, so that we don't
# end up altering the state of another ReviewUI's file attachment
# (particularly with calling set_diff_against below).
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\general_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\group.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\review.py
# Constants used in e-mails when a review contains a Ship It designation.
# These are explicitly not marked for localization to prevent taking the
# submitting user's local into account when generating the e-mail.
# Deprecated and no longer used for new reviews as of 2.0.9.
# XXX Deprecated. This will be removed in a future release.
# Set this up with a ReviewManager to help prevent race conditions and
# to fix duplicate reviews.
# This may raise a RevokeShipItError.
# Update the last_updated timestamp and the last review activity
# timestamp on the review request.
# Since we're publishing the review, all filed issues should be
# open.
# Atomically update the issue count and Ship It count.
#review%s" % (self.review_request.get_absolute_url(),
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\review_request.py
# Tell CounterField not to set or save any values.
# Review-related information
# The timestamp representing the last public activity of a review.
# This includes publishing reviews and manipulating issues.
# Set this up with the ReviewRequestManager
# Update the state in the database, but don't save this
# model, or we can end up with some state (if we haven't
# properly loaded everything yet). This affects docs.db
# generation, and may cause problems in the wild.
# If this ReviewRequest was queried using with_counts=True,
# then we should know the new review count and can use this to
# decide whether we have anything at all to show.
# This visit doesn't exist, so bail.
# Users always have access to their own review requests.
# We specifically iterate over these instead of making it part
# of the query in order to keep the logic in Group, and to allow
# for future expansion (extensions, more advanced policy)
#
# We're looking for at least one group that the user has access
# to. If they can access any of the groups, then they have access
# to the review request.
# Check if the diff was updated along with this.
# Check for the latest review or reply.
# If the changeset is pending, we cache for only one minute to
# speed things up a little bit when navigating through
# different pages. If the changeset is no longer pending, cache
# for the full default time.
# We're fetching all entries instead of just public ones because
# another query may have already prefetched the list of
# changedescs. In this case, a new filter() would result in more
# queries.
#
# Realistically, there will only ever be at most a single
# non-public change description (the current draft), so we
# wouldn't be saving much of anything with a filter.
# If this is not a pending review request now, delete any
# and all ReviewRequestVisit objects.
# Copy over the draft information if this is a private discard.
# TODO: Use the user's default for rich_text.
# Update submission description.
# Needed to renew last-update.
# Delete the associated draft review request.
# The reopening signal is only fired when actually making a status
# change since the main consumers (extensions) probably only care
# about changes.
# A draft is needed if reopening a discarded review request.
# The owner will be changing, and there was an edge case (present
# through Review Board 3.0.14) where, if the new owner didn't
# have a LocalSiteProfile, we'd end up with bad incoming counts.
#
# The reason is that the creation of a new LocalSiteProfile in
# that function resulted in counters that were populated by a
# post-publish state, but before counters were incremented or
# decremented. This caused a redundant increment/decrement at
# times.
#
# We attempted in _update_counts() to deal with this for the
# outgoing counts, carefully checking if it's a new profile,
# but couldn't easily work around the varied states for incoming
# counts. The simplest solution is to ensure a populated profile
# before we begin messing with any counts (below) and before
# publishing new state.
#
# Note that we only need to fetch the profile for what will be
# the current owner after the publish has completed. That's why
# we're fetching the draft owner here, or the old submitter in
# the `else:` below, but not both.
# For good measure, we're going to also query this for the original
# owner, if the owner has not changed. This prevents the same
# sorts of problems from occurring in the event that a review
# request has been created and published for a new user through
# some means like the API or a script without that user having
# a profile.
# Decrement the counts on everything. We'll increment the resulting
# set during _update_counts() (called from ReviewRequest.save()).
# This must be done before the draft is published, or we'll end up
# with bad counts.
#
# Once the draft is published, the target people and groups will be
# updated with new values.
# Calculate the timestamp once and use it for all things that are
# considered as happening now. If we do not do this, there will be
# millisecond timestamp differences between review requests and their
# changedescs, diffsets, and reviews.
#
# Keeping them in sync means that get_last_activity() can work as
# intended. Otherwise, the review request will always have the most
# recent timestamp since it gets saved last.
# This will in turn save the review request, so we'll be done.
# The draft failed to publish, for one reason or another.
# Check if we need to re-increment those counters we
# previously decremented.
# This is a brand new review request that we're publishing
# for the first time. Set the creation timestamp to now.
# This is brand-new review request that hasn't yet been saved.
# We won't have an existing review request to look up for the old
# values (so we'll hard-code them), and we know the owner hasn't
# changed. We can safely bump the outgoing review request count
# for the owner.
# We're saving an existing review request. The status, public flag,
# and owner may have changed, so check the original values in the
# database and see.
# The owner of the review request changed, so we'll need to
# make sure to decrement the outgoing counts from the old
# owner and increment for the new owner.
#
# The pending count is conditional based on the state of the
# review request, but the total outgoing count is a permament
# change. The old user is no longer responsible for this
# review request and should never see it added to their count
# again.
# The old user didn't have a profile (they may no longer
# be on a Local Site, or the data may have been deleted).
# We can ignore this, since we won't need to alter any
# counters. If they ever get a profile, the initial values
# will be computed correctly.
# The status of the review request has changed to Pending
# Review, and we know we didn't take care of the value as
# part of an ownership change. Increment the counter now.
# This was either the first publish, or it's been reopened.
# It's now ready for review. Increment the counters for
# reviewers, so it shows up in their dashboards.
# The status of the review request has changed from Pending
# Review (in other words, it's been closed), and we know we
# didn't take care of the value as part of an ownership
# change. Decrement the counter now.
# We went from open to closed. Decrement the counters for
# reviewers, so it's not showing up in their dashboards.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\review_request_draft.py
# Set this up with a ConcurrencyManager to help prevent race conditions.
# We don't need to query the entirety of each object, and
# we'd like to avoid any JOINs. So, we'll be using the
# M2M 'through' tables to perform lookups of the related
# models' IDs.
# Note that we're using add() instead of directly
# assigning the value. This lets us avoid a query that
# Django would perform to determine if it needed to clear
# out any existing values. Since we know this draft is
# new, there's no point in doing that.
# If no changes were made, raise exception and do not save
# If the SCM supports changesets, they should always include a number,
# summary and description, parsed from the changeset description. Some
# specialized systems may support the other fields, but we don't want
# to clobber the user-entered values if they don't.
# Compute a suitable revision for the diffset.
# Screenshots are a bit special.  The list of associated screenshots
# can change, but so can captions within each screenshot.
# Now scan through again and set the caption correctly for
# newly-added screenshots by copying the draft_caption over. We
# don't need to include this in the changedescs here because it's a
# new screenshot, and update_list will record the newly-added item.
# There's no change notification required for this field.
# Files are treated like screenshots. The list of files can
# change, but so can captions within each file.
# Now scan through again and set the caption correctly for
# newly-added files by copying the draft_caption over. We don't
# need to include this in the changedescs here because it's a new
# screenshot, and update_list will record the newly-added item.
# There's no change notification required for this field.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\screenshot.py
# Maybe it's on a draft.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\screenshot_comment.py
# This is a sub-region of the screenshot.  Null X indicates the entire
# image.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\status_update.py
#: The pending state.
#: The completed successfully state.
#: The completed with reported failures state.
#: The error state.
#: Timeout state.
#: An identifier for the service posting this status update.
#:
#: This ID is self-assigned, and just needs to be unique to that service.
#: Possible values can be an extension ID, webhook URL, or a script name.
#: The user who created this status update.
#: The timestamp of the status update.
#: A user-visible short summary of the status update.
#:
#: This is typically the name of the integration or tool that was run.
#: A user-visible description on the status update.
#:
#: This is shown in the UI adjacent to the summary. Typical results might
#: be things like "running." or "failed.". This should include punctuation.
#: An optional link.
#:
#: This is used in case the tool has some external page, such as a build
#: results page on a CI system.
#: Text for the link. If ``url`` is empty, this will not be used.
#: The current state of this status update.
#:
#: This should be set to :py:attr:`PENDING` while the service is
#: processing the update, and then to either :py:attr:`DONE_SUCCESS` or
#: :py:attr:`DONE_FAILURE` once complete. If the service encountered some
#: error which prevented completion, this should be set to
#: :py:attr:`ERROR`.
#: The review request that this status update is for.
#: The change to the review request that this status update is for.
#:
#: If this is ``None``, this status update refers to the review request as
#: a whole (for example, the initial diff that was posted).
#: An optional review created for this status update.
#:
#: This allows the third-party service to create comments and open issues.
#: Any extra data that the service wants to store for this status update.
#: An (optional) timeout, in seconds. If this is non-None and the state has
#: been ``PENDING`` for longer than this period (computed from the
#: :py:attr:`timestamp` field), :py:attr:`effective_state` will be
#: ``TIMEOUT``.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\models\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\templatetags\reviewtags.py
# Note that update() implies push().
# Note that update() implies push().
# Comments without a line number represent the entire file.
# Build data for the RB.ReviewRequest
# Build the data for the RB.ReviewRequestEditor.
# Build extra data for the RB.ReviewRequest.
# Build the file attachments data for the editor data.
# Build the file attachment comments data for the editor data.
# For the purposes of serialization, we'll create a dummy ReviewUI.
# NOTE: We're setting this here because file attachments serialization
#       requires this to be set, but we don't necessarily have it set
#       by this time. We should rethink parts of this down the road,
#       but it requires dealing with some compatibility issues for
#       subclasses.
# And we're done! Assemble it together and chop off the outer dictionary
# so it can be injected correctly.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\templatetags\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_actions.py
# This prevents registered/unregistered/modified actions from leaking
# between different unit tests.
# Turning on read-only mode prevents creation of some objects so call
# _create_request_context first.
# Turning on read-only mode prevents creation of some objects so call
# _create_request_context first.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_base_review_request_details.py
# Create the default reviewers.
# Create the review request and accompanying diff.
# The following queries will be executed:
#
# 1. Diffset
# 2. The file list
# 3. The default reviewer list
# 4. User list for all matched default reviewers
# 5. Group list for all matched default reviewers
# 6. Existing user ID list (m2m.add())
# 7. Setting new users (m2m.add())
# Create the default reviewers.
# Create the review request and accompanying diff.
# The following queries will be executed:
#
# 1. Diffset
# 2. The file list
# 3. The default reviewer list
# 4. User list for all matched default reviewers
# 5. Group list for all matched default reviewers
# 8. Existing group ID list (m2m.add())
# 9. Setting new groups (m2m.add())
# Create the default reviewers.
# Create the review request and accompanying diff.
# The following queries will be executed:
#
# 1. Diffset
# 2. The file list
# 3. The default reviewer list
# 4. User list for all matched default reviewers
# 5. Group list for all matched default reviewers
# 6. Existing user ID list (m2m.add())
# 7. Setting new users (m2m.add())
# 8. Existing group ID list (m2m.add())
# 9. Setting new groups (m2m.add())
# Create the default reviewers.
# Create the review request and accompanying diff.
# The following queries will be executed:
#
# 1. Diffset
# 2. The file list
# 3. The default reviewer list
# Create the review request and accompanying diff.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_bug_url_redirect_view.py
# Bug #4080
# Create a repository with a bug tracker that uses a non-standard
# url scheme.
# Test if we redirected to the correct url with correct bugID.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_builtin_fields.py
#" class="expand-commit-message" '
#" class="expand-commit-message" '
#" class="expand-commit-message" '
#" class="expand-commit-message" '
#" class="expand-commit-message" '
#" class="expand-commit-message" '
# XXX: Django 1.8 includes the resolver_match in test client requests.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_comment_diff_fragments_view.py
# coding: utf-8
# Create the first review request and review.
# Create the second review request and review.
# Read the comment ID.
# Read the length of the HTML.
# Read the HTML.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_conditions.py
# These should match.
# These should not match.
# These should match.
# These should not match.
# These should match.
# These should not match.
# These should match.
# These should not match.
# These should match.
# These should not match.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_counters.py
# The review request was already created
# The review request was already created
# The review request was already created
# The review request was already created
# We're simulating what a DefaultReviewer would do by populating
# the ReviewRequest's target users and groups while not public and
# without a draft.
# The review request was already created
# We're simulating what a DefaultReviewer would do by populating
# the ReviewRequest's target users and groups while not public and
# without a draft.
# The review request was already created
# We're simulating what a DefaultReviewer would do by populating
# the ReviewRequest's target users and groups while not public and
# without a draft.
# Publish the first time.
# Publish the second time.
# There must be at least one target_group or target_people
# There must be at least one target_group or target_people
# The review request was already created
# The review request was already created
# Lock the fields so we don't re-initialize them on publish.
# Publish the review request. This will normally try to
# increment/decrement the counts, which it should ignore now.
# Unlock the profiles so we can query/re-initialize them again.
# Note that it's not normally possible to update something like an
# owner while also closing in the same operation. Drafts don't allow
# it. However, we have logic that considers these combinations of
# operations, and it's technically possible to do, so we're testing
# it here by updating the review request manually.
# Note that it's not normally possible to update something like an
# owner while also reopening in the same operation. Drafts don't allow
# it. However, we have logic that considers these combinations of
# operations, and it's technically possible to do, so we're testing
# it here by updating the review request manually.
# These should never be affected by updates on the main LocalSite we're
# working with, so they should always be 0.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_default_groups.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_default_reviewer.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_download_diff_file_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_download_raw_diff_view.py
# Bug #3384
# Bug #3704
# Create a diffset with a comma in its name.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_entries.py
# This is needed by the entry's add_comment(). It's normally built when
# creating the entries and their data.
# This state is normally set in ReviewRequestPageData.
# This state is normally set in ReviewRequestPageData.
# To update the status update's timestamp, we need to perform an
# update() call on the queryset and reload.
# To update the status update's timestamp, we need to perform an
# update() call on the queryset and reload.
# This is needed by the entry's add_comment(). It's normally built when
# creating the entries and their data.
# These shouldn't show up in the results.
# These will actually be in database query order (newest to oldest),
# not the order shown on the page.
# This is needed by the entry's add_comment(). It's normally built when
# creating the entries and their data.
# These will actually be in database query order (newest to oldest),
# not the order shown on the page.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_fields.py
# Bug #1352
# Our _("(no summary)") string was failing in the admin UI, as
# django.template.defaultfilters.stringfilter would fail on a
# ugettext_lazy proxy object. We can use any stringfilter for this.
#
# Bug #1346
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_file_attachment_review_ui.py
#1: My Attachment 2')
# These will show up.
# These will not.
# These will show up.
# These will not.
#fcomment1',
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_forms.py
# Create repositories for the test.
# Create users for the test.
# Create groups for the test.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# Note that unlike others, this scenario is allowed.
# This should just simply not raise an exception.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# This was a regression caused by the change to add the new related
# user selector.
# Create users for the test.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# This should just simply not raise an exception.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# This was a regression caused by the change to add the new related
# user selector.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_image_review_ui.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_markdown_review_ui.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_markdown_utils.py
## <script>alert();</script>',
## <script>alert();</script>',
## &lt;script&gt;alert();&lt;/script&gt;')
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_new_review_request_view.py
# TODO: Split this up into multiple unit tests, and do a better job of
#       checking for expected results.
# Ensure user is redirected when trying to create new review
# request.
# Ensure admin can still access new while in read-only mode.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_preview_review_email_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_preview_review_request_email_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review.py
# Some objects we need.
# Create the first review.
# Create the second review.
# Create the third review.
# Now that we've made a mess, see if we get a single review back.
# Make sure the signals fired.
# Check the state of the fields.
# Make sure they persisted to the database.
# ReviewRequest.last_update is a
# django.db.fields.ModificationTimestampField, which retrieves its
# value from datetime.utcnow().replace(tzinfo=utc).
#
# django.utils.timezone.now has the same implementation.
#
# Unfortunately, we cannot spy on datetime.utcnow since it is a
# builtin. So we replace get_tz_aware_utcnow with timezone.now and we
# will replace that with a constant function in the spy_on calls below.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_reviews_diff_fragment_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_reviews_diff_viewer_view.py
# Bug 892
# diffutils.py\n'
# diffutils.py\n'
# Useful for debugging any actual errors here.
# Bug 847
# diffutils.py\n'
# diffutils.py\n'
# Useful for debugging any actual errors here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_reviewtags.py
# exception_id will be a unique value (the ID of the field set) that
# causes the exception; no other exception should have this value.
# There should only be one logging.exception call, from the failed
# instantiation of the TestField.
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_file_attachment_view.py
# Log in so that we can check against the draft.
# Log in so that we can check against the draft.
# Log in so that we can check against the draft.
# Log in so that we can check against the draft.
# Log in so that we can check against the draft.
# Log in so that we can check against the draft.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_group.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_group_manager.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_request.py
# Test that the signals were emitted correctly.
# Create a diff review.
# self.review_request = ReviewRequest.objects.get(
#     pk=self.review_request.pk)
# The initial implementation for issue status counting broke when
# there were multiple types of comments on a review (such as diff
# comments and file attachment comments). There would be an
# artificially large number of issues reported.
#
# That's been fixed, and this test is ensuring that it doesn't
# regress.
# One open file attachment comment
# Two diff comments
# Four screenshot comments
# Three open general comments
# The issue counts should be end up being 0, since they'll initialize
# during load.
# Now publish. We should have 10 open issues, by way of incrementing
# during publish.
# Make sure we get the same number back when initializing counters.
# One comment without an issue opened.
# One comment without an issue opened, which will have its
# status set to a valid status, while closed.
# Three comments with an issue opened.
# Two comments that will have their issues dropped.
# One comment that will have its issue resolved.
# One comment will be in Verifying Dropped mode.
# Two comments will be in Verifying Resolved mode.
# The issue counts should be end up being 0, since they'll initialize
# during load.
# Now publish. We should have 6 open issues, by way of incrementing
# during publish.
# Make sure we get the same number back when initializing counters.
# Set the issue statuses.
# Make sure we get the same number back when initializing counters.
# 3 queries: One for the review request fetch, one for
# the issue status load, and one for updating the issue counts.
# One query for the review request fetch.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_request_detail_view.py
# Make sure this request is made while logged in, to catch the
# login-only pieces of the review_detail view.
# Create the users who will be commenting.
# Create the master review.
# First reply
# Second reply
# Publish them out of order.
# Make sure they published in the order expected.
# Make sure they're looked up in the order expected.
# Now figure out the order on the page.
# Create the users who will be commenting.
# Create the master review.
# First reply
# Second reply
# Publish them out of order.
# Make sure they published in the order expected.
# Make sure they're looked up in the order expected.
# Add two file attachments. One active, one inactive.
# Create a third file attachment on a draft.
# Create the review with comments for each screenshot.
# Check that we can find all the objects we expect on the page.
# Make sure that other users won't see the draft one.
# Make sure we loaded the reviews and all data correctly.
# Add two screenshots. One active, one inactive.
# Add a third screenshot on a draft.
# Create the review with comments for each screenshot.
# Check that we can find all the objects we expect on the page.
# Make sure that other users won't see the draft one.
# Make sure we loaded the reviews and all data correctly.
# Some objects we need.
# Create a review.
# Get the etag
# Change the issue status
# Check the etag again
# Make sure they're not equal
# Turn off some parts of the page, to simplify the resulting HTML
# and shorten render/parse times.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_request_draft.py
# Create the draft.
# Make sure all the fields are the same.
# Create the draft.
# Reload to be sure.
# Create the first draft.
# Try to create it again.
# Create the first draft.
# Try to create it again.
# Reload to be sure.
# Make sure we've deleted the old ChangeDescription.
# Create the first draft.
# Try to create it again.
# Reload to be sure.
# Make sure we have not created any new ChangeDescription in the
# database.
# Exercise special case field name 'text'
# Summary is set by default in create_review_request
# Description is set by default in create_review_request
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_request_manager.py
# This one should be fine.
# This one will yell.
# Make sure that entry doesn't exist in the database.
# This one should be fine.
# This one will yell.
# Make sure that entry doesn't exist in the database.
# Make sure that entry and related objects don't exist in the database.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_request_page_data.py
# Create the review request, diffs, attachments, and screenshots.
# Create a draft for this review request.
# Create some reviews.
# Create some change descriptions.
# Create some status updates.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_request_page_entry_registry.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_request_updates_view.py
# coding: utf-8
# Create the first review.
# Create the second review (10 days later).
# This one shouldn't appear in any updates, since it's not published.
# Add some Unicode content.
# The issue summary table is always added when reviews have updates.
# 1 SQL query for SiteConfiguration in the middleware.
# 1 SQL query for SiteConfiguration in the middleware.
# 1 SQL query for SiteConfiguration in the middleware.
# Read the length of the metadata.
# Read the metadata.
# Read the length of the HTML.
# Read the HTML.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_request_view_mixin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_screenshot_view.py
# Log in so that we can check against the draft.
# Log in so that we can check against the draft.
# Log in so that we can check against the draft.
# Log in so that we can check against the draft.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_review_ui.py
#1: Test Caption')
#1: Test Caption')
#fcomment1",'
#fcomment2",'
# Note that this test is factoring in both the user-owned draft
# review created in setUp() and the ones created in this test.
#
# Comments from review1 and review2 will be included in the results.
# This will not be included.
#fcomment1',
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_root_view.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_signals.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_status_update.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_template_tags.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\test_text_based_review_ui.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\tests\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\ui\base.py
#: The display name for the Review UI.
#: The template that renders the Review UI.
#:
#: Generally, subclasses should use the default template and render the
#: UI using JavaScript.
#: The key passed to the template representing the object.
#: The key passed to the template representing an object to diff against.
#: Whether the Review UI can be rendered inline in diffs and other places.
#:
#: If set, the Review UI will be able to be displayed within the diff
#: viewer (and potentially other locations).
#: Whether this Review UI supports diffing two objects.
#: A list of CSS bundle names to include on the Review UI's page.
#: A list of JavaScript bundle names to include on the Review UI's page.
#: A list of specific JavaScript URLs to include on the page.
#:
#: It is recommended that :py:attr:`js_bundle_names` be used instead
#: where possible.
#: The name of the JavaScript model class to use for the Review UI.
#: The name of the JavaScript view class to use for the Review UI.
#%s: %s'
#%s: %s'
# Override the mimetype if mimeparse is known to misinterpret this
# type of file as 'octet-stream'
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\ui\image.py
# It's possible this comment was made before the review UI
# was provided, meaning it has no data. If this is the case,
# ignore this particular comment, since it doesn't have a
# region.
# This may be a comment from before we had review UIs. Or,
# corrupted data. Either way, don't display anything.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\ui\markdownui.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\ui\screenshot.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\ui\text.py
# It's possible this comment was made before the review UI
# was provided, meaning it has no data. If this is the case,
# ignore this particular comment, since it doesn't have a
# line region.
# This may be a comment from before we had review UIs. Or,
# corrupted data. Either way, don't display anything.
# Grab only the lines we care about.
#
# The line numbers are stored 1-indexed, so normalize to 0.
# This may be a comment from before we had review UIs. Or,
# corrupted data. Either way, just return the default.
#%s/line%s' % (base_url, view_mode, begin_line_num)
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\reviews\ui\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\certs.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\clearcase.py
# This specific import is necessary to handle the paths for
# cygwin enabled machines.
# This is a workaround for buggy Python 2.7.x and Windows 7.
# A console window would pop up every time popen is invoked unless shell=true.
# Original issue was described at http://reviews.reviewboard.org/r/3804/
# Note:
#   - later versions of Windows may probably be impacted too
#   - Python 2.7.x is the only one known to get this issue
# This regular expression can extract from extended_path
# pure system path. It is construct from two main parts.
# First match everything from beginning of line to first
# occurence of /. Second match parts between /main and
# numbers (file version).
# This patch assume each branch present in extended_path
# was derived from /main and there is no file or directory
# called "main" in path.
# Result of regular expression search result is list of tuples. We must
# flat this to one list. The best way is use list comprehension. b is
# first because it frequently occure in tuples. Before that remove @@
# from path.
# Properly handle full (with drive letter) and UNC paths
# Purpose of realpath is remove parts like /./ generated by
# ClearCase when vobs branch was fresh created
# Get the path to (presumably) file element (remove version)
# The '@@' at the end of file_path is required.
# Because ==== oid oid ==== is present after each header
# parse standard +++ and --- headers at the first place
# When using ClearCase in multi-site mode, data replication takes
# much time, including oid. As said above, oid is used to retrieve
# filename path independent of developer view.
# When an oid is not found on server side an exception is thrown
# and review request submission fails.
# However at this time origFile and newFile info have already been
# filled by super.parse_diff_header and contain client side paths,
# client side paths are enough to start reviewing.
# So we can safely catch exception and restore client side paths
# if not found.
# Note: origFile and newFile attributes are not defined when
# managing binaries, so init to '' as fallback.
# To consider filenames translated from oids
# origInfo and newInfo keys must exists.
# Other files already contain this values field
# by timestamp from +++/--- diff header.
# Binary files need add origInfo and newInfo manally
# because they don't have diff's headers (only oids).
# An error should be raised if vobstag cannot be reached.
# Vobstag reach, relpath can be returned.
# Init relpath with basename.
# Use tempfile to generate temporary filename
# Remove the file, so cleartool can write to it
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\conditions.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\core.py
#: The changeset number/ID.
#: The summary of the change.
#: The description of the change.
#: Testing information for the change.
#: The destination branch.
#: The username of the user who made the change.
#: The name/ID of the revision.
#: The ID of the branch.
#: The latest commit ID on the branch.
#: The name of the branch.
#: The ID of the commit.
#:
#: This should be its SHA/revision.
#: The name or username of the author who made the commit.
#: The timestamp of the commit as a string in ISO 8601 format.
#: The commit message.
#: The contents of the commit's diff.
#:
#: This may be ``None``, depending on how the commit is fetched.
#: The ID of the commit's parent.
#:
#: This should be its SHA/revision. If this is the first commit, this
#: should be ``None`` or an empty string.
# This field is only used when we're actually fetching the commit from
# the server to create a new review request, and isn't part of the
# equality test.
# If the description is only one line long, pass through--'message'
# will still be set to what we got from get_change, and will show
# up as being the same thing as the summary.
#: Latest revision in the tree (or branch).
#: Unknown revision.
#:
#: This is used to indicate that a revision could not be found or parsed.
#: Revision representing a new file (prior to entering the repository).
#: A unique identifier for the SCMTool.
#:
#: If not provided, this will be based on its key in the
#: ``reviewboard.scmtools`` Python EntryPoint. This will become a required
#: attribute in a future version.
#:
#: Version Added:
#:     3.0.16
#: The human-readable name of the SCMTool.
#:
#: Users will see this when they go to select a repository type. Some
#: examples would be "Subversion" or "Perforce".
#: Whether or not the SCMTool supports review requests with history.
#: Whether or not commits in this SCMTool require the committer fields.
#: Whether server-side pending changesets are supported.
#:
#: These are used by some types of repositories to track what changes
#: are currently open by what developer, what files they touch, and what
#: the commit message is. Basically, they work like server-side drafts for
#: commits.
#:
#: If ``True``, Review Board will allow updating the review request's
#: information from the pending changeset, and will indicate in the UI
#: if it's pending or submitted.
#: Whether existing commits can be browsed and posted for review.
#:
#: If ``True``, the New Review Request page and API will allow for
#: browsing and posting existing commits and their diffs for review.
#: Whether custom URL masks can be defined to fetching file contents.
#:
#: Some systems (such as Git) have no way of accessing an individual file
#: in a repository over a network without having a complete up-to-date
#: checkout accessible to the Review Board server. For those, Review Board
#: can offer a field for specifying a URL mask (a URL with special strings
#: acting as a template) that will be used when pulling down the contents
#: of a file referenced in a diff.
#:
#: If ``True``, this field will be shown in the repository configuration.
#: It's up to the SCMTool to handle and parse the value.
#: Whether ticket-based authentication is supported.
#:
#: Ticket-based authentication is an authentication method where the
#: SCMTool requests an authentication ticket from the repository, in order
#: to access repository content. For these setups, the SCMTool must handle
#: determining when it needs a new ticket and requesting it, generally
#: based on the provided username and password.
#:
#: If ``True``, an option will be shown for enabling this when configuring
#: the repository. It's up to the SCMTool to make use of it.
#: Whether filenames in diffs are stored using absolute paths.
#:
#: This is used when uploading and validating diffs to determine if the
#: user must supply the base path for a diff. Some types of SCMs (such as
#: Subversion) store relative paths in diffs, requiring additional
#: information in order to generate an absolute path for lookups.
#:
#: By default, this is ``False``. Subclasses must override this if their
#: diff formats list absolute paths.
#: Overridden help text for the configuration form fields.
#:
#: This allows the form fields to have custom help text for the SCMTool,
#: providing better guidance for configuration.
#: A dictionary containing lists of dependencies needed for this SCMTool.
#:
#: This should be overridden by subclasses that require certain external
#: modules or binaries. It has two keys: ``executables`` and ``modules``.
#: Each map to a list of names.
#:
#: The list of Python modules go in ``modules``, and must be valid,
#: importable modules. If a module is not available, the SCMTool will
#: be disabled.
#:
#: The list of executables shouldn't contain a file extensions (e.g.,
#: ``.exe``), as Review Board will automatically attempt to use the
#: right extension for the platform.
#: A custom form used to collect authentication details.
#:
#: This allows subclasses to remove, change, or augment the standard
#: fields for collecting a repository's username and password.
#:
#: Version Added:
#:     3.0.16
#: A custom form used to collect repository details.
#:
#: This allows subclasses to remove, change, or augment the standard
#: fields for collecting a repository's path, mirror path, and other
#: common information.
#:
#: Version Added:
#:     3.0.16
# Avoids a circular import.
# Represent an SSHAuthenticationError as a standard
# AuthenticationError.
# Re-raise anything else
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\crypto_utils.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\cvs.py
# Note that we're not validating the CVSROOT here, as the path may
# contain a value that "worked" prior to us introducing validation.
# In those cases, we'd have either parsed out the invalid data or
# simply let CVS deal with it. We don't want to break those setups.
# Newer versions of CVS stick the file revision after the filename,
# separated by a colon. Check for that format too.
# CVS supports two types of CVSROOTs: Remote and local.
#
# The remote repositories share the same CVSROOT format (defined by
# CVSTool.remove_cvsroot_re), and the local repositories share their
# own format (CVSTool.local_cvsroot_re), but the two formats differ
# in many ways.
#
# We'll be testing both formats to see if the path matches, starting
# with remote repositories (the most common).
# The user either specified a valid remote repository path, or
# simply hostname:port/path. In either case, we'll want to
# construct our own CVSROOT based on that information and the
# provided username and password, favoring the credentials in the
# CVSROOT and falling back on those provided in the repository
# configuration.
#
# There are some restrictions, depending on the type of protocol:
#
# * Only "pserver" supports passwords.
# * Only "pserver", "gserver", and "kserver" support ports.
# Apply the restrictions, validating if necessary.
# Inject any credentials into the string.
# This is a local path (either :local: or :fork). It's much
# easier to deal with. We're only dealing with a path.
# We couldn't parse this as a standard CVSROOT. It might be
# something a lot more specific. We'll treat it as-is, but
# this might cause some small issues in the diff viewer (files
# may show up as read-only, since we can't strip the path,
# for example).
#
# We could in theory treat this as a validation error, but
# we might break special cases with specialized protocols
# (which do exist but are rare).
# CVS paths are a bit strange, so we can't actually use the
# SSH checking in SCMTool.check_repository. Do our own.
# Represent an SSHAuthenticationError as a standard
# AuthenticationError.
# Re-raise anything else
# netloc
# We didn't find an index, so the rest is probably bogus too.
# Check if this is a binary diff.
# The only file information we're going to have will come from
# the binary string or the Index header. The Index header only
# contains the new filename, not the original, so we're going
# to trust the original value in the binary string message and
# attempt to use the Index header value for the new filename.
#
# Later, we may change these up, depending on values, but they
# work as reasonable defaults.
# We can't get any revision information for this file.
# If 'origFile' exists, then 'newFile' will also exist.
# Both the old and new filenames referenced are identical, so
# we'll want to update both to include the RCS filename.
#
# In practice, both of these should be consistent for any
# normal file changes (as CVS does not have
# moves/renames/copies), but we're just covering bases by
# checking for equality.
# This is technically not the right kind of error, but it's the
# pattern we use with all the other tools.
# Restore current working directory
# Remove temporary directory
# We strip the repo off of the fully qualified path as CVS does
# not like to be given absolute paths.
# Strip off the ",v" we sometimes get for CVS paths. This is mostly
# going to be an issue for older diffs, as newly-uploaded diffs should
# strip these.
# We want to try to fetch the files with different permutations of
# "Attic" and no "Attic". This means there are 4 various permutations
# that we have to check, based on whether we're using windows- or
# unix-type paths
# There isn't any path information, so we can't provide an
# Attic path that makes any kind of sense.
# Somehow CVS sometimes seems to write .cvsignore files to current
# working directory even though we force stdout with -p.
# Unfortunately, CVS is not consistent about exiting non-zero on
# errors.  If the file is not found at all, then CVS will print an
# error message on stderr, but it doesn't set an exit code with
# pservers.  If the file is found but an invalid revision is requested,
# then cvs exits zero and nothing is printed at all. (!)
#
# But, when it is successful, cvs will print a header on stderr like
# so:
#
# ===================================================================
# Checking out foobar
# RCS: /path/to/repo/foobar,v
# VERS: 1.1
# ***************
# So, if nothing is in errmsg, or errmsg has a specific recognized
# message, call it FileNotFound.
# Otherwise, if there's an exit code, or errmsg doesn't look like
# successful header, then call it a generic SCMError.
#
# If the .cvspass file doesn't exist, CVS will return an error message
# stating this. This is safe to ignore.
# Running 'cvs version' and specifying a CVSROOT will bail out if said
# CVSROOT is invalid, which is perfect for us. This used to use
# 'cvs rls' which is maybe slightly more correct, but rls is only
# available in CVS 1.12+
# See if there's an "authorization failed" anywhere in here. If so,
# we want to raise AuthenticationError with that error message.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\errors.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\fake.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\forms.py
#" id="repo-edit-hosting-credentials">'
# Pull these out of kwargs so that we can preserve *args calls
# without problems.
# Allow the subclass to override help text and field labels.
#: A set of fields to save directly to the Repository model.
#:
#: This should only be set by internal classes.
#: A set of fields to save in extra_data without an SCMTool ID prefix.
#:
#: This exists for backwards-compatibility with older configuration,
#: and should only be set by internal classes.
# Host trust state
# Repository Hosting fields
# Repository Information fields
# Auto SSH key association field
# Bug Tracker fields
# We do this wacky formatting trick because otherwise
# xgettext gets upset that it sees a format string with
# positional arguments and will abort when trying to
# extract the message catalog.
# Access control fields
# Create some aliases for the current Local Site and name handled by
# the LocalSiteAwareModelFormMixin. This may be a Local Site bound to
# the form or one specified in form data (in which case it would have
# already been checked for access rights).
# Grab the entire list of HostingServiceAccounts that can be
# used by this form. When the form is actually being used by the
# user, the listed accounts will consist only of the ones available
# for the selected hosting service.
#
# These will be fed into auth forms. We don't modify the queryset here,
# since the LocalSiteAwareModelFormMixin will manage that for us.
# Standard forms don't support 'instance', so don't pass it through
# to any created hosting service forms.
# Set some fields based on the instance. We only want to work with
# fields here that aren't dependent on any loaded hosting service or
# SCMTool forms or state.
# Load the list of repository forms and hosting services.
# Load the hosting service's custom authentication form.
#
# We start off constructing the form without any data. We
# don't want to prematurely trigger any validation for forms
# that we won't end up using (even if it matches the current
# hosting time, as we still don't know if we need to link or
# re-authorize an account). We'll replace this with a populated
# form further below.
#
# Note that we do still need the form instantiated here, for
# template rendering.
# Build the list of hosting service choices, sorted, with
# "None" being first.
# Now do the same for bug trackers, but have separate None and Custom
# entries.
# Load the list of SCM tools.
# The SCMTool registration exists in the database, but might
# not be installed anymore. Skip it.
# Create placeholders for any SCMTools we want to list that aren't
# currently installed.
# Get the current SSH public key that would be used for repositories,
# if one has been created.
# If no SSH key has been created, disable the key association field.
# Set a label for the "public" checkbox that better describes its
# impact on the repository, given the settings on the server or
# Local Site.
# Set some more fields based on the instance, now that we've loaded
# all the forms.
# If the repository is public, but has access lists set (which
# could happen prior to 3.0.16 if setting an access list and then
# unchecking the Public Access checkbox), make sure we're not
# reflecting those access lists here in the UI so there isn't any
# confusion when toggling that checkbox. We want them to start
# fresh.
#
# Saving will also clear out any access lists if set to public.
# Note that because we loaded from an instance, the populated
# values are in self.initial and not in field.initial.
# We might get form data without prefixes for some fields, such
# as "path". While the repository page itself will send data with
# prefixed keys, API consumers and those automating the repository
# page won't. Look for those keys and convert them to prefixed
# versions.
# Store these last, in case one of the forms raises an exception.
# want consistent state.
# We only want to load repository data into the form if it's meant
# for this form. Check the hosting service ID and plan against
# what's in the submitted form data.
# We only want to load repository data into the form if it's meant
# for this form. Check the hosting service ID and plan against
# what's in the submitted form data.
# The user has chosen to use the hosting service's bug tracker. We
# only care about the checkbox. Don't bother populating the form.
# Do nothing.
# A bug tracker service or custom bug tracker was chosen.
# We have a custom bug tracker. There's no point in trying to
# reverse-match it, because we can potentially be wrong when a
# hosting service has multiple plans with similar bug tracker
# URLs, so just show it raw. Admins can migrate it if they want.
# This should have been caught during validation, so we can assume
# it's fine.
# Validate that the provided tool is valid for the hosting service.
# Get some more information about the hosting ser
# Verify that any hosting account passed in is allowed to work with
# this type of account.
# If we don't yet have an account, or we have one but it needs to
# be re-authorized, then we need to go through the entire account
# updating and authorization process.
# Rebuild the authentication form, but with data provided to
# this form, so that we can link or re-authorize an account.
# Copy any errors to the main form, so it'll fail validation
# and inform the user.
# There was an error with a value provided to the form from
# The user. Bubble this up.
# Flag that we've linked the account. If there are any
# validation errors, and this flag is set, we tell the user
# that we successfully linked and they don't have to do it
# again.
# Set this back in the form, so the rest of the form has access.
# Set the main repository fields (Path, Mirror Path, etc.) based on
# the field definitions in the hosting service.
#
# This will take into account the hosting service's form data for
# the given repository plan, the main form data, and the hosting
# account information.
#
# It's expected that the required fields will have validated by now.
# We're using the main repository form fields instead of the
# custom bug tracker fields.
# We already validated server-side that the hosting service
# exists.
# We have a valid hosting account linked up, so we can
# process this and copy over the account information.
# Skip the rest of this. There's no sense building a URL if
# the form's going to display errors.
# bug_tracker_url should already be in cleaned_data.
# We're using a bug tracker of a certain type. We need to
# get the right data, strip the prefix on the forms, and
# build the bug tracker URL from that.
# Skip the rest of this. There's no sense building a URL if
# the form's going to display errors.
# Strip the prefix from each bit of cleaned data in the form.
# Save the required values for all native fields, so that we can
# restore them we've changed the values and processed forms.
# If using the hosting service's bug tracker, we want to ignore
# the bug tracker form (which will be hidden) and just use the
# hosting service's form.
# The repository plan will only be listed if the hosting service
# lists some plans. Otherwise, there's nothing to require.
# We want to show this as required (in the label), but not
# actually require, since we use a blank entry as
# "Link new account."
# Only require the bug tracker username if the bug tracker field
# requires the username.
# Only require a URL if the bug tracker is self-hosted and
# we're not using the hosting service's bug tracker.
# Validate the subforms that the repository form is currently working
# with, and store any data or errors for later.
#
# Note that we're not going to validate hosting service authentication
# forms, which is why we compute with_auth_forms above based on
# whether a hosting service is selected. We handle those specially in
# _clean_hosting_info().
# Undo the required settings above. Now that we're done with them
# for validation, we want to fix the display so that users don't
# see the required states change.
# The clean/validation functions could create new errors, so
# skip validating the repository path if everything else isn't
# clean. Also skip in the case where the user is hiding the
# repository.
# We may not be re-raising this exception, which would
# cause the exception to be stored in the attribute
# in the parent try/except handler. We still want to
# store it, so just do that explicitly here.
# Clear out any access lists that may have been set
# before. This ensures we don't run into trouble saving
# repositories later if a removed user remains in a list.
# In the case where there's a certificate error on a hosting
# service, we'll bail out of the validation process before
# computing any of the derived fields (like path). This results
# in the "I trust this host" prompt being shown at the top, but
# a spurious "Please correct the error below" error shown when
# no errors are visible. We therefore want to clear out the
# errors and let the certificate error show on its own. If the
# user then chooses to trust the cert, the regular verification
# will run its course.
# Store this so that the true cause of any ValidationError
# terminating form cleaning can be looked up. Note that in newer
# versions of Django, this information is available natively.
# Don't proceed if there are already errors, or if not using hosting
# (hosting type and account should be clean by this point)
# Check the requirements for SSH key association. If the requirements
# are not met, do not proceed.
# The instance is either a new repository or a repository that
# was previously configured without a hosting service. In either
# case, ensure the repository is fully initialized.
# Try to upload the key if it hasn't already been associated.
# Before we make any changes, we want to see if the hosting service
# or SCMTool have changed. These will determine whether we need to
# clear out some old extra_data state.
# Start removing the keys we don't want.
# We can now start populating the repository's fields.
# This failed validation earlier, so bail.
# This may have been caught during form validation, but it depends
# on the subform, so check again.
# Keep doing this until we have an error we don't want
# to ignore, or it's successful.
# Success.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\git.py
# Register these URI schemes so we can handle them properly.
# Moved files with no changes have no revision, so don't validate
# those.
# TODO: Check for an HTTPS certificate. This will require pycurl.
# Match with a/ and b/ prefixes. Common case.
# Match without a/ and b/ prefixes. Spaces are allowed only if using
# quotes around the filename.
# Match without a/ and b/ prefixes, without quotes, and with the
# original and new names being identical.
# No headers were found on this line so we're
# done parsing them.
# We found a diff, but it was empty and has no file entry.
# Reset the preamble.
# This is probably not an actual git diff file.
# First check if it is a new file with no content or
# a file mode change with no content or
# a deleted file with no content
# then skip
# Now we have a diff we are going to use so get the filenames + commits
# Check to make sure we haven't reached the end of the diff.
# Assume the blob / commit information is provided globally. If
# we found an index header we'll override this.
# Assume by default that the change is empty. If we find content
# later, we'll clear this.
# Get the changes
# Some diffs may incorrectly contain filenames listed as:
#
# --- filename\t
# +++ filename\t
#
# We need to strip those single trailing tabs.
# Strip the Git a/ and b/ prefixes, if set in the diff.
# This file didn't have any --- or +++ lines. This usually means
# the file was deleted or moved without changes. We'll need to
# fall back to parsing the diff --git line, which is more
# error-prone.
# For an empty change, we keep the file's info only if it is a new
# 0-length file, a moved file, a copied file, or a deleted 0-length
# file.
# We didn't find any interesting content, so leave out this
# file's info.
#
# Note that we may want to change this in the future to preserve
# data like mode changes, but that will require filtering out
# empty changes at the diff viewer level in a sane way.
# This is technically not the right kind of error, but it's the
# pattern we use with all the other tools.
# Windows requires drive letter (e.g. C:/)
# See if we have a permissions error
# Git URLs, especially HTTP(s), that require authentication should
# be entered without the authentication info in the URL (because
# then it would be visible), but we need it in the URL when testing
# to make sure it exists. Reformat the path here to include them.
# We want to make sure we can access the file successfully,
# without any HTTP errors. A successful access means the file
# exists. The contents themselves are meaningless, so ignore
# them. If we do successfully get the file without triggering
# any sort of exception, then the file exists.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\hg.py
# This is technically not the right kind of error, but it's the
# pattern we use with all the other tools.
# Create a client. This will fail if the repository doesn't exist.
# Parent') and len(split_line) == 3:
# A diff between two revisions are in the following form:
#
#     diff -r abcdef123456 -r 123456abcdef filename
#
# A diff between a revision and the working copy:
#
#     diff -r abcdef123456 filename
# Ordinary hg diffs don't record renames, so a new file
# is always equivalent to an old file.
# Committed revision
# Uncommitted revision
# Check if this is a new file.
# Check if this is a deleted file.
# Parent``
# Node ID`` or ``# Parent`` lines found at the beginning of the
#'):
# Node ID') and len(split_line) == 4:
# Parent') and len(split_line) == 3:
# Parent``
# If the base commit id is provided it should override anything
# that was parsed from the diffs.
# It failed. Error was logged and we may try again.
# If the base commit id is provided it should override anything
# that was parsed from the diffs.
# We need to query hg for the current SSH configuration. Note
# that _run_hg is calling this function, and this function is then
# (through _get_hg_config) calling _run_hg, but it's okay. Due to
# having set a good default for self.default_args above, there's no
# issue of an infinite loop.
# Just assume it's empty.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\localfile.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\managers.py
# Precompute the cache to reduce lookups.
# We'll try to look up the Tool anyway, since it may have been
# added since. This will also ensure the proper exception is
# raised if not found.
# We allow accessible() to return hidden repositories if the
# user is a member, so we must perform this check here.
# This will trigger a migration of the password.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\models.py
# Templates can't access variables on a class properly. It'll attempt to
# instantiate the class, which will fail without the necessary parameters.
# So, we use these as convenient wrappers to do what the template can't do.
#: Whether or not the SCMTool supports review requests with history.
#:
#: See :py:attr:`SCMTool.supports_history
#: <reviewboard.scmtools.core.SCMTool.supports_history>` for details.
#: Whether custom URL masks can be defined to fetching file contents.
#:
#: See :py:attr:`SCMTool.supports_raw_file_urls
#: <reviewboard.scmtools.core.SCMTool.supports_raw_file_urls>` for details.
#: Whether ticket-based authentication is supported.
#:
#: See :py:attr:`SCMTool.supports_ticket_auth
#: <reviewboard.scmtools.core.SCMTool.supports_ticket_auth>` for details.
#: Whether server-side pending changesets are supported.
#:
#: See :py:attr:`SCMTool.supports_pending_changesets
#: <reviewboard.scmtools.core.SCMTool.supports_pending_changesets>` for
#: details.
#: Overridden help text for the configuration form fields.
#:
#: See :py:attr:`SCMTool.field_help_text
#: <reviewboard.scmtools.core.SCMTool.field_help_text>` for details.
#: The amount of time branches are cached, in seconds.
#:
#: Branches are cached for 5 minutes.
#: The short period of time to cache commit information, in seconds.
#:
#: Some commit information (such as retrieving the latest commits in a
#: repository) should result in information cached only for a short
#: period of time. This is set to cache for 5 minutes.
#: The long period of time to cache commit information, in seconds.
#:
#: Commit information that is unlikely to change should be kept around
#: for a longer period of time. This is set to cache for 1 day.
# 1 day
#: The fallback encoding for text-based files in repositories.
#:
#: This is used if the file isn't valid UTF-8, and if the repository
#: doesn't specify a list of encodings.
#: The error message used to indicate that a repository name conflicts.
#: The error message used to indicate that a repository path conflicts.
#: The prefix used to indicate an encrypted password.
#:
#: This is used to indicate whether a stored password is in encrypted
#: form or plain text form.
# Access control
# NOTE: Due to a bug in 2.0.9, it was possible to get a string of
#       "\tNone", indicating no password. We have to check for this.
# This is a plain-text password. Convert it.
# TODO: we need to figure out some way of storing a second
# hosting service account for bug trackers.
# Ideally, we won't have to instantiate the class, as that can end up
# performing some expensive calls or HTTP requests.  If the SCMTool is
# modern (doesn't define a get_diffs_use_absolute_paths), it will have
# all the information we need on the class. If not, we might have to
# instantiate it, but do this as a last resort.
# This will trigger a deprecation warning.
# We hit a collision with the token value. Try again.
# We wrap the result of get_file in a list and then return the first
# element after getting the result from the cache. This prevents the
# cache backend from converting to unicode, since we're no longer
# passing in a string and the cache backend doesn't recursively look
# through the list in order to convert the elements inside.
#
# Basically, this fixes the massive regressions introduced by the
# Django unicode changes.
# We cache both the entire list for 'start', as well as each individual
# commit. This allows us to reduce API load when people are looking at
# the "new review request" page more frequently than they're pushing
# code, and will usually save 1 API request when they go to actually
# create a new review request.
# This should be sufficiently unlikely to create duplicates. time()
# will use up a max of 8 characters, so we slice the name down to
# make the result fit in 64 characters
# Prevent empty strings from saving in the admin UI, which could lead
# to database-level validation errors.
# First we check to see if we've fetched the file before. If so,
# it's in there and we can just return that we have it.
# We didn't have that in the cache, so check from the repository.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\mtn.py
# Known limitations of this tool include:
#    - It depends on a local database which we somehow need to determine
#      how to update.
#    - Binary files are not currently marked
#    - Empty files cause the diff viewer to blow up.
# revision is actually the file id here...
# revision is actually the file id here...
#"):
# This is a standard mtn diff header (comments with the file
# summary)
# This is technically not the right kind of error, but it's the
# pattern we use with all the other tools.
# vi: et:sw=4 ts=4
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\perforce.py
# Try to run with stunnel -version, which is available in stunnel 4+.
# If this succeeds, we're using a config-based version of stunnel.
# There are two major versions of stunnel we're supporting today:
# stunnel 3, and stunnel 4+.
#
# stunnel 3 used command line arguments instead of a config file, and
# stunnel 4 (released in 2002) completely changed to a config-based
# model.
#
# It's probably not worth continuing to support version 3 at this
# point, given that any modern install supporting Review Board's other
# dependencies will also have a newer version of stunnel. However,
# we'll continue to keep this code for those rare cases where an older
# version is still needed.
# It can sometimes be racy to immediately open the file. We
# therefore have to wait a fraction of a second =/
# This is slightly racy but shouldn't be too bad.
#: The max number of seconds remaining before renewing a ticket.
#:
#: If the ticket has less than this many seconds left before it expires,
#: a login call will be performed and the ticket renewed.
#:
#: We default this to 1 hour.
# The ticket is fine. We don't need to log in again.
# Exceptions will only be raised for errors, not warnings.
# Spin up an stunnel client and then redirect through that
# The repository is configured for ticket-based authentication.
# We're going to start by making sure there's an appropriate
# place to store these tickets, namespaced by Local Site if
# needed, and then set the ticket path for Perforce.
#
# If the ticket file exists and has a valid ticket, Perforce will
# automatically use that.
# The repository does not use ticket-based authentication. We'll
# need to set the password that's provided.
# The ticket may not exist, may have expired, or may be
# close to expiring. Check for those conditions and
# possibly request/extend a ticket.
#%s' % (path, revision)
# p4 print will change the permissions on the file to be
# read-only, which will break the unlink unless we fix it.
#%s' % (path, revision)
# 'p4 info' will succeed even if the server requires ticket auth and we
# don't run 'p4 login' first. We therefore don't go through all the
# trouble of handling tickets here.
#``) and return the results.
#', 1)
# Older versions of Perforce had this lovely idiosyncracy that diffs
# show revision #1 both for pre-creation and when there's an actual
# revision. In this case, we need to check if the file already exists
# in the repository.
#
# Newer versions use #0, so it's quicker to check.
# At it's most basic, a perforce changeset description has three
# sections.
#
# ---------------------------------------------------------
# Change <num> by <user>@<client> on <timestamp> *pending*
#
#         description...
#         this can be any number of lines
#
# Affected files ...
#
# //depot/branch/etc/file.cc#<revision> branch
# //depot/branch/etc/file.hh#<revision> delete
# ---------------------------------------------------------
#
# At the moment, we only care about the description and the list of
# files.  We take the first line of the description as the summary.
#
# We parse the username out of the first line to check that one user
# isn't attempting to "claim" another's changelist.  We then split
# everything around the 'Affected files ...' line, and process the
# results.
#]+)#(\d+) ==([AMD]|MV)== (.*) ====$')
#%s' % (m.group(1),
# We were at the end of the diff. Ignore this.
# In this case, this *is* our diff header. We don't want to
# let the next line's real diff header be a part of this one,
# so return early and don't invoke the next.
# We were at the end of the diff. Ignore this.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\plastic.py
# Changeset data is in the form of multiple lines of:
# <changesetid> <user> <revid> <file spec>
#
# We assume the user and comment will be the same for each item, so
# read it out of the first.
#
# Check for new files
# Check for new files
# Can't use 'cm checkconnection' here as it only checks the
# pre-configured server
# As the diff creation is based on the Perforce code, so this is based
# on the PerforceDiffParser (specifically, the binary file markers)
# In this case, this *is* our diff header.  We don't want to
# let the next line's real diff header be a part of this one,
# so return now
# This is technically not the right kind of error, but it's the
# pattern we use with all the other tools.
# Work around a plastic bug, where 'cm cat --file=blah' gets an
# extra newline, but plain 'cm cat' doesn't
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\signals.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\bzr\__init__.py
# Register these URI schemes so we can handle them properly.
# Timestamp format in bzr diffs.
# This isn't totally accurate: there should be a %z at the end.
# Unfortunately, strptime() doesn't support %z.
# "bzr diff" indicates that a file is new by setting the old
# timestamp to the epoch time.
# Attempt to parse this as a timestamp into a Bazaar date revision
# specifier.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\bzr\plugins\bzrlib\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\bzr\plugins\bzrlib\plugins\rbssh.py
# rbssh plugin for Bazaar.
# Copyright (C) 2017  Beanbag, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\bzr\plugins\bzrlib\plugins\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\bugzilla_url_charfield.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\group_site.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\localsite.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_access_control.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_archive.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_extra_data_null.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_hooks_uuid.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_hosting_accounts.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_name_length_255.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_path_length_255.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_raw_file_url.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_raw_password.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\repository_visible.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\unique_together_baseline.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\management\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\management\commands\registerscmtools.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\management\commands\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\svn\base.py
# -*- coding: utf-8 -*-
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\svn\pysvn.py
# -*- coding: utf-8 -*-
# This try-except block is here for the sole purpose of avoiding
# exceptions with nose if pysvn isn't installed when someone runs
# the testsuite.
# SVN expects to have URLs escaped. Take care to only
# escape the path part of the URL.
# Find out if this file has any keyword expansion set.
# If it does, collapse these keywords. This is because SVN
# will return the file expanded to us, which would break patching.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\svn\subvertpy.py
# -*- coding: utf-8 -*-
# This try-except block is here for the sole purpose of avoiding
# exceptions with nose if subvertpy isn't installed when someone runs
# the testsuite.
# Immediate files in this path. Only in 1.5+.
# This will trigger recurse=False for SVN < 1.5.
# subvertpy asserts that svn_uri not ends with slash
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\svn\utils.py
# Mapping of keywords to known aliases
# Standard keywords
# Aliases
# Get any aliased keywords
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\svn\__init__.py
# -*- coding: utf-8 -*-
# These will be set later in recompute_svn_backend().
# Register these URI schemes so we can handle them properly.
# This will get filled in later in
# recompute_svn_backend()
# If we assign a function to the pysvn Client that accesses anything
# bound to SVNClient, it'll end up keeping a reference and a copy of
# the function for every instance that gets created, and will never
# let go. This will cause a rather large memory leak.
#
# The solution is to access a weakref instead. The weakref will
# reference the repository, but it will safely go away when needed.
# The function we pass can access that without causing the leaks
# 'svn diff' produces patches which have the revision string localized
# to their system locale. This is a little ridiculous, but we have to
# deal with it because not everyone uses RBTools.
#
# svnlook diff creates lines like
# '2016-05-12 12:30:05 UTC (rev 1234)'
#
# whereas svn diff creates lines like
# '(Revision 94754)'
# '        (.../branches/product-2.0) (revision 321)'
# '        (.../trunk)     (nonexistent)'
#
# So we need to form a regex to match relocation information and the
# revision number. Subversion >=1.9 adds the 'nonexistent' revision
# string.
# creating diffs between two branches of a
# remote repository will insert extra
# "relocation information" into the diff.
# svnlook-style diffs contain a timestamp
# on each line before the revision number.
# This here is probably a really crappy
# to express that, but oh well.
# - svn 1.9 nonexistent revision indicator
# English
# German
# Simplified Chinese
# Brazilian Portuguese
# English, German
# - svnlook uses 'rev 0' while svn diff
#   uses 'revision 0'
# French
# Italian
# Japanese
# Korean
# Norwegian
# Polish
# Simplified Chinese
# Spanish
# - the revision number
# 'svn diff' also localises the (working copy) string to the system
# locale.
# Brazilian Portuguese
# English
# French
# German
# Italian
# Japanese
# Korean
# Norweigan
# Polish
# Simplified Chinese
# Spanish
# Looks like the standard layout. Adds trunk and any branches.
# Add anything else from the root of the repository. This is a
# catch-all for repositories which do not use the standard layout, and
# for those that do, will include any additional top-level directories
# that people may have.
# We fetch one more commit than we care about, because the entries in
# the svn log doesn't include the parent revision.
# If there were fewer than the requested number of commits fetched,
# also include the last one in the list so we don't leave off the
# initial revision.
# Some diffs have additional tabs between the parts of the file
# revisions
# "(revision )" is generated by a few weird tools (like IntelliJ). If
# in the +++ line of the diff, it means HEAD, and in the --- line, it
# means PRE_CREATION. Since the more important use case is parsing the
# source revision, we treat it as a new file. See bugs 1937 and 2632.
# Binary diffs don't provide revision information, so we set a fake
# "(unknown)" in the SVNDiffParser. This will never actually appear
# in SVN diffs.
# group(3) holds the revision string in braces, like '(revision 4)'
# group(4) only matches the revision number, which might by None when
# 'nonexistent' is given as the revision string
# LocalSites can have their own Subversion config, used for
# per-LocalSite SSH keys.
# We're looking for a SVN property change for SVN < 1.7.
#
# There's going to be at least 5 lines left:
# 1) --- (blah)
# 2) +++ (blah)
# 3) Property changes on: <path>
# 4) -----------------------------------------------------
# 5) Modified: <propname>
# Subversion diffs with property changes have no really
# parsable format. The content of a property can easily mimic
# the property change headers. So we can't rely upon it, and
# can't easily display it. Instead, skip it, so it at least
# won't break diffs.
# Handle deleted empty files.
# This is an empty Index: line. This might mean we're parsing
# a property change.
# Skip this and the svn:mime-type line.
# We can't get the revision info from this diff header.
# We're looking for a SVN property change for SVN 1.7+.
#
# This differs from SVN property changes in older versions of SVN
# in a couple ways:
#
# 1) The ---, +++, and Index: lines have actual filenames.
#    Because of this, we won't hit the case in parse_diff_header
#    above.
# 2) There's an actual section per-property, so we could parse these
#    out in a usable form. We'd still need a way to display that
#    sanely, though.
# If we're working with binary files, we're going to leave
# the data here and not skip the entry. SVN diffs may include
# property changes as part of the binary file entry.
# Skip over the next 3 lines (blank, "Property changes
# on:", and the "__________" divider.
# Check that this is a valid SVN backend.
# We want either the winning SVN backend or the first one to show
# up in the required module dependencies list.
# We found a suitable backend.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\testcases.py
# This box likely isn't set up for this test.
# Get the user's .ssh key, for use in the tests
# Switch to a new SSH directory.
# Make sure we aren't using the old SSH key. We want auth errors.
# Make sure we can verify the repository and access files.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_bazaar.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_conditions.py
# These should match.
# These should not match.
# These should match.
# These should not match.
# These should match.
# These should not match.
# These should match.
# These should not match.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_core.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_crypto_utils.py
# The encrypted value was made with PyCrypto, to help with
# compatibility testing from older installs.
# The encrypted value was made with PyCrypto, to help with
# compatibility testing from older installs.
# The encrypted value will change every time, since the iv changes,
# so we can't compare a direct value. Instead, we need to ensure that
# we can decrypt what we encrypt.
# The encrypted value will change every time, since the iv changes,
# so we can't compare a direct value. Instead, we need to ensure that
# we can decrypt what we encrypt.
# The encrypted value will change every time, since the iv changes,
# so we can't compare a direct value. Instead, we need to ensure that
# we can decrypt what we encrypt.
# The encrypted value was made with PyCrypto, to help with
# compatibility testing from older installs.
# The encrypted value was made with PyCrypto, to help with
# compatibility testing from older installs.
# The encrypted value was made with PyCrypto, to help with
# compatibility testing from older installs.
# The encrypted value will change every time, since the iv changes,
# so we can't compare a direct value. Instead, we need to ensure that
# we can decrypt what we encrypt.
# The encrypted value will change every time, since the iv changes,
# so we can't compare a direct value. Instead, we need to ensure that
# we can decrypt what we encrypt.
# The encrypted value will change every time, since the iv changes,
# so we can't compare a direct value. Instead, we need to ensure that
# we can decrypt what we encrypt.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_cvs.py
# coding=utf-8
# $Author: bob $\n'
# $Date: 2014/12/18 13:09:42 $\n'
# $Header: /src/Makefile,v 1.2 2014/12/18 '
# $Id: Makefile,v 1.2 2014/12/18 13:09:42 bob Exp $\n'
# $Locker: bob $\n'
# $Name: some_name $\n'
# $RCSfile: Makefile,v $\n'
# $Revision: 1.2 $\n'
# $Source: /src/Makefile,v $\n'
# $State: Exp $\n'
# foo\n'
# $Author$\n'
# $Date$\n'
# $Header$\n'
# $Id$\n'
# $Locker$\n'
# $Name$\n'
# $RCSfile$\n'
# $Revision$\n'
# $Source$\n'
# $State$\n'
# foo\n'
# Test bug 3931: this should succeed without a UnicodeDecodeError
# $Author: bob $\n'
# $Date: 2014/12/18 13:09:42 $\n'
# $Header: /src/Makefile,v 1.2 2014/12/18 '
# $Id: Makefile,v 1.2 2014/12/18 13:09:42 bob Exp $\n'
# $Locker: bob $\n'
# $Name: some_name $\n'
# $RCSfile: Makefile,v $\n'
# $Revision: 1.2 $\n'
# $Source: /src/Makefile,v $\n'
# $State: Exp $\n'
# foo \xf0\x9f\x92\xa9\n'
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_git.py
# coding=utf-8
# These sha's are valid, but commit and tree objects, not blobs.
# Ensure output of fake result matches.
# Grab from cache when no changes and change fake result to confirm
# it is not called.
# When raw_file_url changed, do not grab from cache and ensure output
# equals second fake value.
# Use spy to put key into cache
# Remove spy to ensure key is still in cache without needing spy
# Does not exist when raw_file_url changed because it is not cached.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_hg.py
# coding=utf-8
# HG changeset patch\n'
# Node ID 6187592a72d7\n'
# Parent  9d3f4147f294\n'
# HG changeset patch'
# Node ID 6187592a72d7\n'
# Parent  9d3f4147f294\n'
# HG changeset patch\n'
# Node ID 6187592a72d7\n'
# Parent  9d3f4147f294\n'
# Node ID 4960455a8e88\n'
# Parent bf544ea505f8\n'
# Node ID 4960455a8e88\n'
# Parent bf544ea505f8\n'
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_perforce.py
# coding=utf-8
# Note that P4 will use the native string type on each major version
# of Python. We want to sanity-check that here.
# Perforce will set a default for the host and client. They'll
# be the same. We don't care what they are, just that they're
# equal and of the right string type, and not "none".
# Perforce will set the ticket file to be in the user's home
# directory. We don't care about the exact contents, and will
# just look at the filename.
# Note that P4 will use the native string type on each major version
# of Python. We want to sanity-check that here.
# public.perforce.com doesn't have unicode enabled. Getting this
# error means we at least passed the charset through correctly
# to the p4 client.
#0'),
#1'),
#1'),
#2'),
#2 ==M== /src/proj/README ====\n'
#2')
#1 ==A== /src/proj/test.png '
#1')
#1 ==D== /src/proj/test.png '
#1')
#2\n'
#2')
#5 ==MV== '
#5')
#1 ==A== '
#2\n'
#1')
#2')
#2\n'
#2'.encode('utf-8'))
# Find an available port to listen on
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_policy.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_repository.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_repository_form.py
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# This should just simply not raise an exception.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# Defaults.
# Check a couple more forms to make sure their data wasn't loaded.
# Defaults.
# Make sure none of the other auth forms are unhappy. That would be
# an indicator that we're doing form processing and validation wrong.
# Make sure none of the other auth forms are unhappy. That would be
# an indicator that we're doing form processing and validation wrong.
# Make sure none of the other auth forms are unhappy. That would be
# an indicator that we're doing form processing and validation wrong.
# Make sure none of the other auth forms are unhappy. That would be
# an indicator that we're doing form processing and validation wrong.
# Make sure none of the other auth forms are unhappy. That would be
# an indicator that we're doing form processing and validation wrong.
# Make sure none of the other auth forms are unhappy. That would be
# an indicator that we're doing form processing and validation wrong.
# Make sure the auth form also contains the errors.
# Make sure none of the other auth forms are unhappy. That would be
# an indicator that we're doing form processing and validation wrong.
# Make sure none of the other auth forms are unhappy. That would be
# an indicator that we're doing form processing and validation wrong.
# We won't be setting the password, so that is_authorized() will
# fail.
# We won't be setting the password, so that is_authorized() will
# fail.
#issue/%s')
# Make sure only the relevant forms are bound.
# Make sure only the relevant forms are bound.
# Make sure only the relevant forms are bound.
# Make sure only the relevant forms are bound.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_repository_manager.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\test_svn.py
# coding=utf-8
# There are 3 versions of this test in order to get 100% coverage of
# the svn module.
# Fix for bug 2176
# Fix for bug 2632
# Verify that 'svn diff' localized revision strings parse correctly.
# English
# German
# Simplified Chinese
## -0,0 +1 ##\n'
# 'svn cat' will expand special variables in svn:keywords,
# but 'svn diff' doesn't expand anything.  This causes the
# patch to fail if those variables appear in the patch context.
# $Id$\n'
# $Rev$\n'
# $Revision::     $\n'
# foo\n'
# $Id$\n'
# $Id:\n'
# $Rev$\n'
# $Revision::     $\n'
# foo\n'
## -1 +1 ##\n'
## -0,0 +1,3 ##\n'
## -0,0 +1 ##\n'
# foó\n'
# foo\n'
#\n'
#\n'
#\n'
# test\n'
#\n'
#\n'
#\n'
#\n'
#\n'
#\n'
# test\n'
#\n'
#\n'
#\n'
#1523\n',
#1523\n',
#1523\n',
# $Id$\n'
# $Rev: 123$\n'
# $Revision:: 123   $\n'
# foo\n'
# $Id$\n'
# $Rev$\n'
# $Revision::       $\n'
# foo\n'
# $Id$\n'
# $Rev$\n'
# $Revision::    $\n'
# foo\n'
# $Id$\n'
# $Rev$\n'
# $Revision::    $\n'
# foo\n'
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\scmtools\tests\__init__.py
# Backwards-compatibility for third-party modules that used this import.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\fields.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\forms.py
#: Available model filters.
# Filter out any private review requests the user doesn't have
# access to.
# We're going to build a series of queries that mimic the
# accessibility checks we have internally, based on the access
# permissions the user currently has, and the IDs listed in
# the indexed review request.
#
# This must always be kept in sync with
# ReviewRequestManager._query.
#
# Note that we are not performing Local Site checks here,
# because we're already filtering by Local Sites.
# Make sure they have access to the repository, if any.
# Next, build a query to see if the review request targets any
# invite-only groups the user is a member of.
# Build a query to see if the user is explicitly listed
# in the list of reviewers.
# And, of course, the owner of the review request can see it.
#
# With that, we'll put the whole query together, in the order
# matching ReviewRequest.is_accessible_by.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\indexes.py
#: The model to index.
#: The local site attribute on the model.
#:
#: For ForeignKeys, this should be the name of the ID field, as in
#: 'local_site_id'. For ManyToManyFields, it should be the standar field
#: name.
# Common fields for all search indexes.
# This is from a ForeignKey. We're working with a numeric ID.
# This is most likely a ManyToManyField. Anything else is an
# error.
#
# We want to loop through the actual entries and not the primary
# keys. The caller is responsible for doing a prefetch_related().
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\signal_processor.py
# We define this here instead of at the class level because we cannot
# reference class members during the class' definition.
# When we save a Profile, we want to update the User index.
# When using the reverse relation, the instance is the User and
# the pk_set is the PKs of the groups being added or removed.
# Otherwise the instance is the Group and the pk_set is the set
# of User primary keys.
# When ``reverse`` is ``True``, a User is having their groups
# cleared so we don't need to worry about storing any state in the
# pre_clear  phase.
#
# Otherwise, a ReviewGroup is having their users cleared. In both
# the pre_clear and post_clear phases, the ``pk_set`` argument will
# be empty, so we cache the PKs of the current members of the
# groups so we know to reindex them.
# When ``reverse`` is ``True``, we just have to reindex a
# single user.
# Here, we are reindexing every user that got removed from the
# group via clearing.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\testing.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\tests.py
# Django >= 1.7
# Django 1.6
# Make sure it works once one has been created.
# We already have doc. Now let's create a review request.
# Perform the search.
# We already have doc. Now let's create a review request.
# Perform the search.
# We already have doc. Now let's create a review request.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# Perform the search.
# There will be one call from each publish.
# Django's optimized things since this code was originally written.
# It's a lot smarter when it comes to deciding whether clears/adds
# are needed.
#
# On Django 1.6, there should be five calls:
#
#  * two from each of the m2m_changed actions post_clear and
#    post_add
#  * and one from User.save()
#
# On Django 1.11 (likely older ones as well), we only expect two:
#
#  * One for the User.save()
#  * One for the m2m_changed (post_add) from saving the initial list
#    of groups.
# Django == 1.6
# Django >= 1.7
# Check for the search form.
# And the filtered search links.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\views.py
# If the query is an integer, then assume that it's a review
# request ID that we'll want to redirect to. This mirrors behavior
# we've had since Review Board 1.7.
# We only need to fetch users if the search is for just users or
# both users and review requests (i.e., the '' ID).
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\__init__.py
#: The search backend registry.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\search_backends\base.py
#: The search engine's unique identifier.
#: The human-readable name for the search engine.
#: The name of the Haystack search engine backend.
#: The configuration form class for the search engine.
#: The default search engine settings.
#: A mapping of search engine settings to form fields.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\search_backends\elasticsearch.py
# Check whether there's a supported version of the module available.
# Note that technically, elasticsearch 1.x is supported, but it's
# pretty old. If we're going to reference a version, we want to
# reference 2.x.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\search_backends\registry.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\search_backends\whoosh.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\search\search_backends\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\admin.py
#
# admin.py -- Admin site definitions for the "reviewboard.site" app
#
# Copyright (c) 2010  David Trowbridge
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\conditions.py
#: The field on the model pointing to a LocalSite.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\context_processors.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\decorators.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\middleware.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\mixins.py
#: The name of the Local Site field on the form.
#: Whether the form needs the 'request' argument.
# Always use the assigned Local Site in the model data. We
# don't want to allow this to ever be overridden. We'll delete
# here and then assign after the constructor does its thing.
# Prepare to patch up some fields. We have a few special types we'll
# be dealing with.
# This is a new instance, so force its Local Site now.
# Something went very wrong, and an instance is now in our
# form that isn't part of this Local Site. Log this and
# bail out now.
# We never want to show a "Local Site" field, so let's get rid of
# it.
# Go through the fields and widgets and start limiting querysets
# and other choices.
# Go through the fields and widgets and start limiting querysets
# and other choices.
# Only perform this work if we didn't do it during construction.
# Restore the values so that the original options are available
# if the form is shown again (due to errors).
# Django 1.8+ consolidates the various field fetching functions into
# get_field(), which will now return a wider set of results than the
# old one. We need to call the right function for the right version
# of Django.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\models.py
#
# models.py -- Models for the "reviewboard.site" app.
#
# Copyright (c) 2010  David Trowbridge
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\signals.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\signal_handlers.py
# When reverse is True, `instance` will be a user that was changed (i.e.,
# the signal triggered from user.local_sites.add(site)). Otherwise,
# `instance` will be the `local_site` that changed and `pk_set `will be
# the list of user primary keys that were added/removed.
# We have to grab the list of associated users in the pre_clear
# phase because pk_set is always empty for pre_ and post_clear.
# The user who owns this application no longer has access to the
# Local Site. We must disable the application and
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\tests.py
# Make sure that {% url %} is registered as a built-in tag.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
# Note that Users are compatible even if on a Local Site, so long
# as the form's model instance is not on a Local Site. However,
# the DefaultReviewer is not compatible.
# This should just simply not raise an exception.
# This should just simply not raise an exception.
# Make sure the initial state and querysets are what we expect on init.
# Now test what happens when it's been fed data and validated.
# Make sure any overridden querysets have been restored, so users can
# still change entries.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\urlresolvers.py
# We'll try it again without those arguments.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\validation.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\evolutions\localsite_extra_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\evolutions\localsite_public.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\fixtures\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\templatetags\localsite.py
# We're going to try two versions of the URL: one with the local
# site name, and one without. Of course, we only try with the
# name if that's provided in the context.
#
# We will be plugging in a set of arguments to url_node before
# rendering, based on the backed up values in LocalSiteURLNode's
# constructor.
#
# Since {% url %} can't mix positional and keyword argumetns, we
# must figure out whether we want to use args or kwargs.
# We'll try it again without those arguments.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\site\templatetags\__init__.py
# Django 1.6
# This will add the localsite tags as built-in tags, and override the
# existing {% url %} tag in Django.
# This is instead handled in the TEMPLATES settings.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\ssh\client.py
# We may not be running in the Django environment.
# TODO: Move this wrapping logic into a common templatetag.
# Try to find out what key this is.
# We don't have more detailed info than this, but most
# likely, it's not a valid key. Skip to the next.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\ssh\errors.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\ssh\policy.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\ssh\storage.py
# Paramiko looks in ~/.ssh and ~/ssh, depending on the platform,
# so check both.
# Allow any exceptions to bubble up.
#':
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\ssh\tests.py
# foo\n')
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\ssh\utils.py
# A list of known SSH URL schemes.
# On Python 3, iterating through the byte string will give us integers.
# No need for ord().
# On Python 2, iterating through the byte string will give us
# characters, so we'll need to convert to integers.
# We normally want to notify on unknown host keys, but not when running
# unit tests.
# Some AuthenticationException instances have allowed_types set,
# and some don't.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\ssh\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\testing\hosting_services.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\testing\scmtool.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\testing\testcase.py
# Clear the cache so that previous tests don't impact this one.
# Some warnings such as DeprecationWarning are filtered by
# default, stop filtering them.
# Now that we've done that, some warnings may come in that we
# really don't want. We want to turn those back off.
# Set this separately to avoid issues with CounterField updates.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\testing\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\admin.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\auth_backends.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\base.py
#: The associated extra_data key can be retrieved and updated via the API.
#: The associated extra_data key can only be retrieved via the API.
#: The associated extra_data key cannot be accessed via the API.
#: An optional set of required features to communicate with this resource.
#:
#: If no features are listed here, the resource will behave normally.
#: However, if one or more features are listed here and are **not**
#: enabled, the resource will return a 403 Forbidden error.
# By default, raise an exception if this is called. Specific resources
# will have to explicitly override this and opt-in to access.
# Check each part of the key, making sure none is private.
# Now check for any registered callbacks used to compute access levels.
# Check for a JSON Merge Patch. This is the simplest way to update
# extra_data with new structured JSON content.
# Save extra_data only if it remains a dictionary, so callers
# can't replace the entire contents.
# Check for a JSON Patch. This is more advanced, and can be used in
# conjunction with the JSON Merge Patch.
# Support setting individual keys to simple values. This is the older
# method of setting JSON data, and is no longer recommended for new
# clients.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\decorators.py
# OAuth tokens for applications on the global site cannot be
# used on a local site.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\errors.py
#
# Standard error messages
#
# 400 Bad Request
# 404 Not Found
# 400 Bad Request
# 404 Not Found
# 409 Conflict
# 400 Bad Request
# 400 Bad Request
# 400 Bad Request
# 400 Bad Request
# 501 Not Implemented
# 500 Internal Server Error
# 400 Bad Request
# 400 Bad Request
# 500 Internal Server Error
# 403 Forbidden
# 403 Forbidden
# 403 Forbidden
# 403 Forbidden
# 403 Forbidden
# 400 Bad Request
# 400 Bad Request
# 500 Internal Server Error
# 403 Forbidden
# 409 Conflict
# 400 Bad Request
# 500 Internal Server Error
# 500 Internal Server Error
# 409 Conflict
# 500 Internal Server Error.
# 409 Conflict
# 500 Internal Server Error
# 500 Internal Server Error
# 500 Internal Server Error
# 503 Service Unavailable Error
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\mixins.py
# Work on a copy of extra_data, in case we change it.
# If all_text_types_extra_data is empty that implies we have
# encountered the first field in extra_data which supports
# markdown. In this case we must initialize the dictionary
# with the extra text types that should be included in the
# payload.
# Note that we assume all custom fields are in Markdown by
# default. This is to preserve compatibility with older
# fields. New fields will always have the text_type flag
# set to the proper value.
# If the caller has changed the text type for this field, but
# hasn't provided a new field value, then we will need to update
# the affected field's existing contents by escaping or
# unescaping.
# The user didn't specify rich-text, but the object may be set
# for rich-text, in which case we'll need to pre-escape the text
# field.
# This field was updated in this request. Make sure it's
# stripped.
# Nothing about this field has changed, so bail.
# If the caller has changed the text type for this field, but
# hasn't provided a new field value, then we will need to update
# the affected field's existing contents by escaping or
# unescaping.
# The user didn't specify a text type, but the object may be set
# for Markdown, in which case we'll need to pre-escape the text
# field.
# Ensure we have a text type set for this field. If one wasn't
# provided or set above, we'll set it to the default now.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\models.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\server_info.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\evolutions\webapitoken_jsonfield_null.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\evolutions\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\api_token.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\archived_review_request.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_archived_object.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_comment.py
# Common field definitions for create/update requests
# Field definitions for top-level comment create/update requests
# Field definitions for comment reply create/update requests
# This already exists. Go ahead and update, but we're going to
# redirect the user to the right place.
# Determine whether or not we're updating the issue status.
# If we've updated the comment from having no issue opened,
# to having an issue opened, we need to set the issue status
# to OPEN.
# If we've updated the comment from having an issue opened to
# having no issue opened, set the issue status back to null.
# Check permissions to change the issue status
# We can only update the status of an issue if an issue has been
# opened
# If the issue requires verification, ensure that only people who are
# authorized can close it.
# We can only update the status of the issue
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_diff_comment.py
# Don't allow joins
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_file_attachment.py
# We prefer 'caption' here, because when creating a new file
# attachment, it won't be full of data yet (and since we're posting
# to file-attachments/, it doesn't hit DraftFileAttachmentResource).
# DraftFileAttachmentResource will prefer draft_caption, in case people
# are changing an existing one.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_file_attachment_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_original_file.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_patched_file.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_review.py
# We don't want to show drafts in the list.
# This will be overridden by MarkdownFieldsMixin.
# This will be overridden by MarkdownFieldsMixin.
# Created
# This already exists. Go ahead and update, but we're going to
# redirect the user to the right place.
# See Other
# Can't modify published reviews or those not belonging
# to the user.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_review_general_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_review_request_file_attachment.py
# If this file attachment has never been made public,
# delete the model itself.
# "Delete" all revisions of the given file
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_screenshot.py
# We prefer 'caption' here, because when creating a new screenshot, it
# won't be full of data yet (and since we're posting to screenshots/,
# it doesn't hit DraftScreenshotResource). DraftScreenshotResource will
# prefer draft_caption, in case people are changing an existing one.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_screenshot_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\base_watched_object.py
# TODO: Handle pagination and ?counts-only=1
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\change.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\default_reviewer.py
# The form uses "people" and "repository", but we expose these
# as "users" and "repositories", so transmogrify the errors a bit.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\diff.py
# Prevent a circular dependency, as ReviewRequestDraftResource
# needs DraftDiffResource, which needs DiffResource.
# This could be very wrong, but at least they'll see the error.
# We probably want a new error type for this.
# We only want to add default reviewers the first time.  Was bug 318.
# E-mail gets sent when the draft is saved.
# The field may not have been serialized (e.g., if `only-fields`
# was set to a subset of fields that excludes
# `created_with_history`).
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\diffcommit.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\diff_context.py
# We piggy-back on the ReviewsDiffViewerView to do all the heavy
# lifting. By overriding render_to_response, we don't have to render it
# to HTML, and can just return the data that we need from javascript.
# The javascript side of this is in DiffViewerPageModel and it's associated
# sub-models.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\diff_file_attachment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\draft_diff.py
# Only add default reviewers if this is the first time we've
# published any diffsets.
# Otherwise we silently ignore this option.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\draft_diffcommit.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\draft_filediff.py
# Check if there's already an attachment. If so, bail.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\draft_file_attachment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\draft_original_file.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\draft_patched_file.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\draft_screenshot.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\extension.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\filediff.py
# Only remove the links if we are returning them for
# a specific filediff, and not a list of filediffs.
# This may not be the right error here.
# XXX: Kind of a hack.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\filediff_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\file_attachment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\file_attachment_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\hosting_service.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\hosting_service_account.py
# Validate the service.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\muted_review_request.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\oauth_app.py
# Unless the user is a super user or local site admin, the query will
# be limited to that user's applications.
# These fields are only available to administrators. We must check
# for adequate permissions.
# The user does not have adequate permission to modify these
# fields. We will return an error message for each field they
# attempted to modify.
# When creating the application, if a user is not provided, set it to
# the user making the request.
#
# Do not update the user field during an update when it is not
# explicitly provided.
# We are setting these directly on the instance because the form
# does not support updating the client_secret field.
# Setting instance.original_user to be blank will make
# instance.is_disabled_for_security False so that the form will
# validate.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\oauth_token.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\original_file.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\patched_file.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\remote_repository.py
# Only allow administrators or those with the ability to modify the
# account to see what repositories are listed.
# Only allow administrators or those with the ability to modify the
# account to see what repositories are listed.
# Wrap the paginator in a LocalDataQuerySet, so that we can get
# to it later in RemoteRepositoryResponsePaginated.
# NOTE: We're not augmenting from any resources, because we don't want to
#       include ?counts-only= or ?max-results=, and we have a different
#       ?start=. Because of this, we need to be careful to apply our own
#       decorators.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\repository.py
# We don't actually delete the repository. We instead archive it.
# Otherwise, all the review requests are lost. By archiving it,
# it'll be removed from the UI and from the list in the API.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\repository_branches.py
# For this resource, the fields dictionary is not used for any
# serialization. It's used solely for documentation.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\repository_commits.py
# For this resource, the fields dictionary is not used for any
# serialization. It's used solely for documentation.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\repository_info.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review.py
# Before checking for modify permissions, we're going to check for
# a special ability to revoke Ship Its. This is considered different
# than modifying a review, as modification requires an unpublished
# review.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_diff_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_draft.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_file_attachment_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_general_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_group.py
# If we're changing the group name, make sure that group doesn't
# exist.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_group_user.py
# We do not want the watched resource to be available under this resource
# as it will have the wrong URL and does not make sense as a sub-resource;
# we will be serializing a link to the user resource and it can be found
# from there.
# Since we do not have a direct link to the model parent (the
# Group.users field is a many-to-many field so we cannot use it because
# the reverse relation is not unique), we have to manually generate the
# parent IDs from the parent resource.
# We only want the 'user' link when this is an item resource.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_reply.py
# This will be overridden by MarkdownFieldsMixin.
# This will be overridden by MarkdownFieldsMixin.
# Created
# This already exists. Go ahead and update, but we're going to
# redirect the user to the right place.
# See Other
# Can't modify published replies or those not belonging
# to the user.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_reply_diff_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_reply_draft.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_reply_file_attachment_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_reply_general_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_reply_screenshot_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_request.py
# We already have the diffsets due to get_queryset(), so we aren't
# performing another query here.
# Only select/prefetch these for list resources, since we want to
# reduce the number of queries. We don't want to do this when
# retrieving individual items, as they'd end up stuck with
# prefetched state, which could impact things when handling
# PUT/DELETE operations.
#
# Here's a real-world example (which is interesting enough to
# talk about): We had a bug before when the prefetching was done
# for item resources where a publish on the draft resource would
# fetch the review request from this resource (going through this
# function and therefore prefetching), and then the publish
# operation would associate the new diffset and then emit the
# review_request_published signal. Handlers listening to this that
# tried to fetch diffsets (Review Bot, in our case) would not see
# the new diffset.
#
# By having this only in the list condition, we get the perforamnce
# benefits we wanted without triggering that sort of bug.
# This was set when updating the description in a POST, so
# use that instead of looking up from the database again.
# The field may not have been serialized (e.g., if `only-fields`
# was set to a subset of fields that excludes
# `created_with_history`).
# This was set when updating the description in a POST, so
# use that instead of looking up from the database again.
# This will be overridden by MarkdownFieldsMixin.
# This will be overridden by MarkdownFieldsMixin.
# This will be overridden by MarkdownFieldsMixin.
# Preserve the old changenum behavior.
# The repository is not an ID.
# Set this so that we'll return this new value when
# serializing the object.
# Preserve the old changenum behavior.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_request_draft.py
# This will be overridden by MarkdownFieldsMixin.
# This will be overridden by MarkdownFieldsMixin.
# This will be overridden by MarkdownFieldsMixin.
# A draft is a singleton. Creating and updating it are the same
# operations in practice.
# Before we update anything, sanitize the commit ID, see if it
# changed, and make sure that the the new value isn't owned by
# another review request or draft.
# The commit ID has changed, so now we check for other usages of
# this ID.
# Another review request is using this ID. Error out.
# Another review request draft is using this ID. Error out.
# Now that we've completed our initial accessibility and conflict
# checks, we can start checking for changes to individual fields.
#
# We'll keep track of state pertaining to the fields we want to
# set/save, and any errors we hit. For setting/saving, these's two
# types of things we're tracking: The new field values (which will be
# applied to the objects or Many-To-Many relations) and a list of
# field names to set when calling `save(update_fields=...)`. The
# former implies the latter. The latter only needs to be directly
# set if the fields are modified directly by another function.
# Check for a new value for branch.
# Check for a new value for bugs_closed:
# Check for a new value for changedescription.
# Check for a new value for commit_id.
# Check for a new value for depends_on.
# Check for a new value for submitter.
# While we only allow for one submitter, we'll try to parse a
# possible list of values. This allows us to provide a suitable
# error message if users try to set more than one submitter
# (which people do try, in practice).
# Check for a new value for summary.
# Check for a new value for target_groups.
# Check for a new value for target_people.
# See if we've caught any invalid values. If so, we can error out
# immediately before we update anything else.
# Start applying any rich text processing to any text fields on the
# ChangeDescription and draft. We'll track any fields that get set
# for later saving.
#
# NOTE: If any text fields or text type fields are ever made
#       parameters of this method, then their values will need to be
#       passed directly to set_text_fields() calls below.
# Go through the list of Markdown-enabled custom fields and apply
# any rich text processing. These will go in extra_data, so we'll
# want to make sure that's tracked for saving.
# See if the caller has set or patched extra_data values. For
# compatibility, we're going to do this after processing the rich
# text fields ine extra_data above.
# Track extra_data for saving.
# Everything checks out. We can now begin the process of applying any
# field changes and then save objects.
#
# We'll start by making an initial pass on the objects we need to
# either care about. This optimistically lets us avoid a lookup on the
# ChangeDescription, if it's not being modified.
# If there's any changes made at all to the draft, make sure we
# allow last_updated to be computed and saved.
# We may have a mixture of field values and Many-To-Many
# relation values, which we want to set only after the object
# is saved. Start by setting any field values, and store the
# M2M values for after.
# Save this until after the object is saved.
# We can set this one now, and mark it for saving.
# Now we can set any values on M2M fields.
#
# Each entry will have zero or more values. We'll be
# setting to the list of values, which will fully replace
# the stored entries in the database.
# Next, check if the draft is set to be published.
# This is a new review request. Publish this on behalf of the
# owner of the review request, rather than the current user,
# regardless of the original publish_as_owner in the request.
# This allows a review request previously created with
# submit-as= to be published by that user instead of the
# logged in user.
# Default to posting as the logged in user.
# Make sure this exists.
#`` characters.
# RB stores bug numbers as numbers, but many people have the
# habit of prepending #, so filter it out:
#')
# Filter out anything that isn't an integer.
# Some review requests couldn't be found. Find out which.
# Build a query that will find each group with a case-insensitive
# search.
# Some groups couldn't be found. Find out which.
# Some users couldn't be found. Find out which.
# See if any of these users exist in an auth backend.
# We don't do this for Local Sites, since we don't want to
# risk creating users in sites where they don't belong.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_request_last_update.py
# Should never be able to happen. The object will always at least
# be a ReviewRequest.
# There is no changedesc which means this review request hasn't
# been changed since it was first published, so this change must
# be due to the original submitter.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\review_screenshot_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\root.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\screenshot.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\screenshot_comment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\search.py
# We have to keep the parameter named id for backwards
# compatibility, but it would override the builtin of the same
# name.
# If search is enabled, we will use the index to perform the query.
# If search is disabled, we will fall back to using database queries.
# Group.objects.accessible only respects visible_only for
# non-superusers. We add this here to make the behavior consistent.
# If search is enabled, we will use the index to perform the query.
# Drafts are not indexed.
# If search is disabled, we will fall back to using database queries.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\server_info.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\session.py
# Since there's no object, DELETE won't be populated automatically.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\status_update.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\user.py
# When accessing individual users (not is_list) on public local sites,
# we allow accessing any username. This is so that the links on reviews
# and review requests from non-members won't be 404. The list is still
# restricted to members of the site to avoid leaking information.
# Auth backends may have special naming conventions for users that
# they'd like to be represented in search. If any auth backends
# implement build_search_users_query(), prefer that over the
# built-in searching.
# Hide user info from anonymous users and non-staff users (if
# his/her profile is private).
# The caller may be using ?only-fields. We can ignore
# this.
# Look for both the GET and PUT/POST/PATCH versions of this value.
# If present, we'll render avatars at the sizes specified.
# A non-integer value was passed in. Ignore it.
# We wrap this in a transaction.atomic block because attempting to
# create a user with a username that already exists will generate
# an IntegrityError and break the current transaction.
#
# Unit tests wrap each test case in a transaction.atomic block as
# well. If this is block is not here, the test case's transaction
# will break and cause errors during test teardown.
# Validate the fields that the user wants to set.
# Set any affected fields.
# Notify the auth backend, so any server-side state can be changed.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\user_file_attachment.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\validate_diff.py
# If we get here, the repository uses absolute paths. Deeper down
# (where we don't necessarily know about the details of the
# repository), we do an os.path.join() with the basedir value,
# which will choke if it's None.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\validate_diffcommit.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\validation.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\watched.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\watched_review_group.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\watched_review_request.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\webhook.py
# We only explicitly set use_custom_content if the user has
# provided the custom_content field. We don't want to unset it
# when the user is updating other fields and does not intend to
# update this one.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\resources\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\base.py
#
# Some utility functions shared across test suites.
#
# doc is a member of the default LocalSite.
# Pick a user that's not part of the default LocalSite.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\mimetypes.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\mixins.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\mixins_comment.py
# `This` is a **test**',
# `This` is a **test**')
# `This` is a **test**',
# `This` is a **test**')
# `This` is a **test**',
# <code>This</code> is a '
#<`This` is a **test**>',
#<\`This\` is a \*\*test\*\*>')
#<`This` is a **test**>',
#<`This` is a **test**>')
#<`This` is a **test**>',
#&lt;`This` is a **test**&gt;')
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\mixins_extra_data.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\mixins_review.py
# `This` is a **test**',
# `This` is a **test**')
# `This` is a **test**',
# `This` is a **test**')
# `This` is a **test**',
# <code>This</code> is a '
#<`This` is a **test**>',
#<\`This\` is a \*\*test\*\*>')
#<`This` is a **test**>',
#<`This` is a **test**>')
#<`This` is a **test**>',
#&lt;`This` is a **test**&gt;')
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_api_token.py
#
# HTTP GET tests
#
# Due to running this test with a WebAPIToken, we may
# already have one in the database we need to include.
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_archived_review_request.py
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_base.py
# The URL conf for testing.
# We are going to be using a different URLconf from Review Board for
# these tests so that we can use cls.client to perform the requests.
# That way, the requests will go through all of our middleware.
# When a LocalSite is provided, we want to enable/disable the feature
# only for that LocalSite and do the opposite for the global settings
# to ensure that we are picking up the setting from the LocalSite and
# not from the global settings.
# If we don't clear the URL caches then lookups for the URL will
# break (due to using the URLs cached from the regular Review Board
# URL conf).
# If we don't clear the URL caches then lookups for the URL will
# break (due to using the URLs cached from the regular Review Board
# URL conf).
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_change.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
# Set the initial data on the review request.
# Create some draft data that will end up in the change description.
# Special-case screenshots
# Sanity check the ChangeDescription
# Diff fields are special. They only have "added".
# Now confirm with the API
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_default_reviewer.py
#
# HTTP GET tests
#
# Test for non-LocalSite ones.
# Now test for the ones in the LocalSite.
# Test singling out one repository.
# Test requiring more than one.
# Test singling out one user.
# Test requiring more than one.
# Test singling out one group.
# Test requiring more than one.
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_diff.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
# Now test with a valid path and an invalid basedir.
# This is necessary because basedir is "optional" as defined by
# the resource, but may be required by the form that processes the
# diff.
# Create the state needed for the default reviewer.
# Post the diff.
# Create the initial diffset. This should prevent a default
# reviewer from being applied, since we're not publishing the first
# diff on a review request.
# Create the state needed for the default reviewer.
# Post the diff.
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_diffcommit.py
#
# HTTP GET tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_diff_context.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_diff_file_attachment.py
#
# HTTP GET tests
#
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_draft_diff.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
# Now test with a valid path and an invalid basedir.
# This is necessary because basedir is "optional" as defined by
# the resource, but may be required by the form that processes the
# diff.
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
# Create the state needed for the default reviewer.
# Create the state needed for the diff to post.
# Post the diff.
# Create the state needed for the default reviewer.
# Create the initial diffset. This should prevent a default
# reviewer from being applied, since we're not publishing the first
# diff on a review request.
# Create the state needed for the diff to post.
# Post the diff.
# Python 2 and 3 differ in the error contents you'll get when
# attempting to load non-JSON data.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_draft_diffcommit.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_draft_filediff.py
#
# HTTP GET tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_draft_original_file.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_draft_patched_file.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_filediff.py
#
# HTTP GET Tests
#
#
# HTTP GET Tests
#
#
# HTTP PUT Tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_file_attachment.py
#
# HTTP GET tests
#
# This is the file attachment that should be returned.
# This attachment shouldn't be shown in the results. It represents
# a file to be shown in the diff viewer.
# This attachment shouldn't be shown either, for the same
# reasons.
#
# HTTP POST tests
#
# Add a second revision
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_file_attachment_comment.py
#
# HTTP GET tests
#
# Satisfy the linter check. This resource is a list only, and doesn't
# support items.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_file_attachment_draft.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_file_diff_comment.py
# The group tests don't create a repository by default.
#
# HTTP GET tests
#
# Satisfy the linter check. This resource is a list only, and doesn't
# support items.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_hosting_service.py
# Compute the base URL for links.
# Check the links.
#
# HTTP GET tests
#
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_hosting_service_account.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_oauth2_auth.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_oauth_app.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
#
# HTTP DELETE tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_oauth_token.py
#
# HTTP GET tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
#
# HTTP DELETE tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_original_file.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_patched_file.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_remote_repository.py
#
# HTTP GET tests
#
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_repository.py
# Only generate these keys once.
# Some tests will temporarily replace some functions, so back them up
# so we can restore them.
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_repository_branches.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_repository_commits.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_repository_info.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
# ReviewRequest.last_update is a
# django.db.fields.ModificationTimestampField, which retrieves its
# value from datetime.utcnow().replace(tzinfo=utc).
#
# django.utils.timezone.now has the same implementation.
#
# Unfortunately, we cannot spy on datetime.utcnow since it is a
# builtin. So we replace get_tz_aware_utcnow with timezone.now and we
# will replace that with a constant function in the spy_on calls below.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_comment.py
# Post the second diff.
# The group tests don't create a repository by default.
#
# HTTP GET tests
#
#
# HTTP POST tests
#
# Post the second diff.
# The group tests don't create a repository by default.
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
# The issue_status should not be able to be changed while the review is
# unpublished.
# The issue_status should still be "open"
# Change the owner of the review request so that it's not owned by
# self.user.
# The review/comment (and therefore issue) is still owned by self.user,
# so we should be able to change the issue status.
# Change the owner of the review request and review so that they're
# not owned by self.user.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_general_comment.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
# The issue_status should not be able to be changed while the review is
# unpublished.
# The issue_status should still be "open"
# Change the owner of the review request so that it's not owned by
# self.user
# The review/comment (and therefore issue) is still owned by self.user,
# so we should be able to change the issue status.
# Change the owner of the review request and review so that they're not
# owned by self.user.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_group.py
#
# HTTP GET tests
#
# devgroup
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_group_user.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_reply.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_reply_diff_comment.py
# The group tests don't create a repository by default.
#
# HTTP GET tests
#
#
# HTTP POST tests
#
# Now do it again.
# The group tests don't create a repository by default.
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_reply_file_attachment_comment.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
# Make the file attachment inactive.
# Now make the reply.
# Now post another reply to the same comment in the same review.
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_reply_general_comment.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
# Now post another reply to the same comment in the same review.
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_reply_screenshot_comment.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
# Now post another reply to the same comment in the same review.
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_request.py
#
# HTTP GET tests
#
# Tests for ?issue-dropped-count*= query parameters.
# Tests for ?issue-open-count*= query parameters.
# Tests for ?issue-resolved-count*= query parameters.
# Tests for ?ship-it-count*= query parameters.
# Tests for determining if ship it counter works with removable ship-its
# Create a fake first one so that we can check that the query went
# through.
# Create a fake first one so that we can check that the query went
# through.
# Modern versions of Django will result in one fewer query than 1.6.
# Specifically, the prefetch_related('diffset_history_diffsets') call
# in ReviewRequestResource.get_queryset() doesn't need to perform a
# fetch of the DiffSetHistory, instead utilizing the one we fetched
# in the select_related(). On 1.6, it will need to fetch it anyway.
#
# HTTP POST tests
#
# See if we can fetch this. Also return it for use in other
# unit tests.
# See if we can fetch this. Also return it for use in other
# unit tests.
# First spy messes with User.has_perm, this lets it through
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_request_draft.py
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
# `This` is a **test**',
# `This` is a **test**')
# `This` is a **test**',
# `This` is a **test**')
# `This` is a **test**',
# <code>This</code> is a '
#<`This` is a **test**>',
#<\`This\` is a \*\*test\*\*>')
#<`This` is a **test**>',
#<`This` is a **test**>')
#<`This` is a **test**>',
#&lt;`This` is a **test**&gt;')
# `This` is a **test**',
# `This` is a **test**',
# `This` is a **test**',
# `This` is a **test**',
# `This` is a **test**',
# <code>This</code> is a '
# `This` is a **test**',
# `This` is a **test**',
# `This` is a **test**',
# `This` is a **test**',
# `This` is a **test**',
# <code>This</code> is a '
#<`This` is a **test**>',
#<\`This\` is a \*\*test\*\*>',
#<`This` is a **test**>',
#<`This` is a **test**>',
#<`This` is a **test**>',
#&lt;`This` is a **test**&gt;',
#
# HTTP POST tests
#
# Confirm all the extra_data fields appear in the draft response.
# Further confirm only extra_data contents bound to a field were
# promoted to the review request upon publishing.
#
# HTTP PUT tests
#
# This isn't the review request we want to match.
# We need to send e-mail out for both the initial review request
# publish and the draft publish in order for the latter to have a
# "Re:" in the subject.
# Since we're only testing for the draft's publish e-mail,
# clear the outbox.
# Set some data first.
# We had a bug where diffset and changedesc information was cached
# prior to publishing through the API, and was then stale when handled
# by signal handlers. This change checks to ensure that state is
# always fresh.
# Note that we're explicitly checking all() and not count() here
# and below, because this is what was impacted by the bug before.
# First, we're going to try publishing an initial draft. There
# should be 1 diffset upon publish, and 0 changedescs.
# Now try posting an update. There should be 1 changedesc, 2
# diffsets.
# The first spy messes with permissions, this lets it through
# If the draft still exists we indeed did not publish!
#123,456"
# Exercise custom fields that support markdown (BaseTextAreaField) and
# those that don't (BaseEditableField). Fields that don't support
# markdown do not get serialized into
# <text_type>_text_fields.extra_data.
# Utilize "text" as the field_id because it is a special case and
# results in a text type field named "text_type".
# Ensure the name of the text_type field has not been
# formulated incorrectly, since "text" is a special name, and
# thus we expect "text_type" not "text_text_type".
# Exercise including multiple text types via a CSV list.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_request_last_update.py
#
# HTTP GET tests
#
# We have no way of knowing what user published based on only the
# model, so it will always be the submitter.
# We have no way of knowing what user published based on only the
# model, so it will always be the review author.
# We have no way of knowing what user published based on only the
# model, so it will always be the review author.
# We have no way of knowing what user published based on only the
# model, so it will always be the review author.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_review_screenshot_comment.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
# The issue_status should not be able to be changed while the review is
# unpublished.
# The issue_status should still be "open"
# Change the owner of the review request so that it's not owned by
# self.user
# The review/comment (and therefore issue) is still owned by self.user,
# so we should be able to change the issue status.
# Change the owner of the review request and review so that they're not
# owned by self.user.
# First, let's ensure that the user that has created the comment
# cannot alter the issue_status while the review is unpublished.
# The issue_status should still be "open"
# Next, let's publish the review, and try altering the issue_status.
# This should be allowed, since the review request was made by the
# current user.
# Delete the screenshot.
# Try altering the issue_status. This should be allowed.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_root.py
# djblets had a bug where the uri_templates were cached without any
# consideration of the local site (or, more generally, the base uri).
# In this case, fetching /s/<local_site>/api/ might return uri
# templates for someone else's site. This was breaking rbt post.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_screenshot.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_screenshot_comment.py
#
# HTTP GET tests
#
# Satisfy the linter check. This resource is a list only, and doesn't
# support items.
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_screenshot_draft.py
#
# HTTP GET tests
#
# The first screenshot will be automatically copied into the draft.
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_search.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_server_info.py
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_session.py
#
# HTTP GET tests
#
#
# HTTP DELETE test
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_status_update.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_user.py
#
# HTTP GET tests
#
# grumpy
#
# HTTP POST tests
#
# There's no simple way to test the specific URLs that are returned,
# but we can at least make sure everything we expect to be present is
# present.
# By default, avatars are not rendered.
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_user_file_attachment.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
#
# HTTP PUT tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_validate_diff.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_validate_diffcommit.py
# The basic GET request *does* return JSON, but it is a singleton resource
# whose item_result_key is only present in successful POST responses.
#
# HTTP GET tests
#
#
# HTTP POST tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_watched_review_group.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_watched_review_request.py
#
# HTTP GET tests
#
#
# HTTP POST tests
#
#
# HTTP DELETE tests
#
#
# HTTP GET tests
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\test_webhook.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\urls.py
#
# APITokenResource
#
#
# ArchivedReviewRequestResource
#
#
# ChangeResource
#
#
# DefaultReviewerResource
#
#
# DiffContextResource
#
#
# DiffResource
#
#
# DiffCommitResource
#
#
# DiffFileAttachmentResource
#
#
# DraftDiffCommitResource
#
#
# DraftDiffResource
#
#
# DraftFileAttachmentResource
#
#
# DraftFileDiffResource
#
#
# DraftOriginalFileResource
#
#
# DraftPatchedFileResource
#
#
# FileAttachmentResource
#
#
# FileAttachmentCommentResource
#
#
# FileDiffResource
#
#
# FileDiffCommentResource
#
#
# GeneralCommentResource
#
#
# HostingServiceResource
#
#
# HostingServiceAccountResource
#
#
# OAuthApplicationResource
#
#
# OAuthTokenResource
#
#
# OriginalFileResource
#
#
# PatchedFileResource
#
#
# RemoteRepositoryResource
#
#
# RepositoryResource
#
#
# RepositoryBranchesResource
#
#
# RepositoryCommitsResource
#
#
# RepositoryInfoResource
#
#
# ReviewResource
#
#
# ReviewDiffCommentResource
#
#
# FileAttachmentCommentResource
#
#
# ReviewGeneralCommentResource
#
#
# ReviewGroupResource
#
#
# ReviewGroupUserResource
#
#
# ReviewReplyResource
#
#
# ReviewReplyDiffCommentResource
#
#
# ReviewReplyFileAttachmentCommentResource
#
#
# ReviewReplyGeneralCommentResource
#
#
# ReviewReplyScreenshotCommentResource
#
#
# ReviewRequestResource
#
#
# ReviewRequestDraftResource
#
#
# ReviewRequestLastUpdateResource
#
#
# ReviewScreenshotCommentResource
#
#
# RootResource
#
#
# ScreenshotResource
#
#
# ScreenshotCommentResource
#
#
# ScreenshotDraftResource
#
#
# SearchResource
#
#
# ServerInfoResource
#
#
# SessionResource
#
#
# StatusResource
#
#
# UserResource
#
#
# UserFileAttachmentResource
#
#
# ValidateDiffResource
#
#
# ValidateDiffCommitResource
#
#
# WatchedReviewGroupResource
#
#
# WatchedReviewRequestResource
#
#
# WebHookResource
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\reviewboard\webapi\tests\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/reviewboard-master\reviewboard-master\tests\runtests.py
#!/usr/bin/env python
# We're just wrapping the manage script. Both that script and the test
# runner are expecting sys.argv to be set. Fake it here so we don't have
# to shell out to another process just to get a proper set of arguments.
