# Credits

## Development Leads

* Audrey Roy Greenfeld ([@audreyr](https://github.com/audreyr))
* Daniel Roy Greenfeld ([@pydanny](https://github.com/pydanny))
* Raphael Pierzina ([@hackebrot](https://github.com/hackebrot))

## Core Committers

* Michael Joseph ([@michaeljoseph](https://github.com/michaeljoseph))
* Paul Moore ([@pfmoore](https://github.com/pfmoore))
* Andrey Shpak ([@insspb](https://github.com/insspb))
* Sorin Sbarnea ([@ssbarnea](https://github.com/ssbarnea))
* Fábio C. Barrionuevo da Luz ([@luzfcb](https://github.com/luzfcb))

## Contributors

* Steven Loria ([@sloria](https://github.com/sloria))
* Goran Peretin ([@gperetin](https://github.com/gperetin))
* Hamish Downer ([@foobacca](https://github.com/foobacca))
* Thomas Orozco ([@krallin](https://github.com/krallin))
* Jindrich Smitka ([@s-m-i-t-a](https://github.com/s-m-i-t-a))
* Benjamin Schwarze ([@benjixx](https://github.com/benjixx))
* Raphi ([@raphigaziano](https://github.com/raphigaziano))
* Thomas Chiroux ([@ThomasChiroux](https://github.com/ThomasChiroux))
* Sergi Almacellas Abellana ([@pokoli](https://github.com/pokoli))
* Alex Gaynor ([@alex](https://github.com/alex))
* Rolo ([@rolo](https://github.com/rolo))
* Pablo ([@oubiga](https://github.com/oubiga))
* Bruno Rocha ([@rochacbruno](https://github.com/rochacbruno))
* Alexander Artemenko ([@svetlyak40wt](https://github.com/svetlyak40wt))
* Mahmoud Abdelkader ([@mahmoudimus](https://github.com/mahmoudimus))
* Leonardo Borges Avelino ([@lborgav](https://github.com/lborgav))
* Chris Trotman ([@solarnz](https://github.com/solarnz))
* Rolf ([@relekang](https://github.com/relekang))
* Noah Kantrowitz ([@coderanger](https://github.com/coderanger))
* Vincent Bernat ([@vincentbernat](https://github.com/vincentbernat))
* Germán Moya ([@pbacterio](https://github.com/pbacterio))
* Ned Batchelder ([@nedbat](https://github.com/nedbat))
* Dave Dash ([@davedash](https://github.com/davedash))
* Johan Charpentier ([@cyberj](https://github.com/cyberj))
* Éric Araujo ([@merwok](https://github.com/merwok))
* saxix ([@saxix](https://github.com/saxix))
* Tzu-ping Chung ([@uranusjr](https://github.com/uranusjr))
* Caleb Hattingh ([@cjrh](https://github.com/cjrh))
* Flavio Curella ([@fcurella](https://github.com/fcurella))
* Adam Venturella ([@aventurella](https://github.com/aventurella))
* Monty Taylor ([@emonty](https://github.com/emonty))
* schacki ([@schacki](https://github.com/schacki))
* Ryan Olson ([@ryanolson](https://github.com/ryanolson))
* Trey Hunner ([@treyhunner](https://github.com/treyhunner))
* Russell Keith-Magee ([@freakboy3742](https://github.com/freakboy3742))
* Mishbah Razzaque ([@mishbahr](https://github.com/mishbahr))
* Robin Andeer ([@robinandeer](https://github.com/robinandeer))
* Rachel Sanders ([@trustrachel](https://github.com/trustrachel))
* Rémy Hubscher ([@Natim](https://github.com/Natim))
* Dino Petron3 ([@dinopetrone](https://github.com/dinopetrone))
* Peter Inglesby ([@inglesp](https://github.com/inglesp))
* Ramiro Batista da Luz ([@ramiroluz](https://github.com/ramiroluz))
* Omer Katz ([@thedrow](https://github.com/thedrow))
* lord63 ([@lord63](https://github.com/lord63))
* Randy Syring ([@rsyring](https://github.com/rsyring))
* Mark Jones ([@mark0978](https://github.com/mark0978))
* Marc Abramowitz ([@msabramo](https://github.com/msabramo))
* Lucian Ursu ([@LucianU](https://github.com/LucianU))
* Osvaldo Santana Neto ([@osantana](https://github.com/osantana))
* Matthias84 ([@Matthias84](https://github.com/Matthias84))
* Simeon Visser ([@svisser](https://github.com/svisser))
* Guruprasad ([@lgp171188](https://github.com/lgp171188))
* Charles-Axel Dein ([@charlax](https://github.com/charlax))
* Diego Garcia ([@drgarcia1986](https://github.com/drgarcia1986))
* maiksensi ([@maiksensi](https://github.com/maiksensi))
* Andrew Conti ([@agconti](https://github.com/agconti))
* Valentin Lab ([@vaab](https://github.com/vaab))
* Ilja Bauer ([@iljabauer](https://github.com/iljabauer))
* Elias Dorneles ([@eliasdorneles](https://github.com/eliasdorneles))
* Matias Saguir ([@mativs](https://github.com/mativs))
* Johannes ([@johtso](https://github.com/johtso))
* macrotim ([@macrotim](https://github.com/macrotim))
* Will McGinnis ([@wdm0006](https://github.com/wdm0006))
* Cédric Krier ([@cedk](https://github.com/cedk))
* Tim Osborn ([@ptim](https://github.com/ptim))
* Aaron Gallagher ([@habnabit](https://github.com/habnabit))
* mozillazg ([@mozillazg](https://github.com/mozillazg))
* Joachim Jablon ([@ewjoachim](https://github.com/ewjoachim))
* Andrew Ittner ([@tephyr](https://github.com/tephyr))
* Diane DeMers Chen ([@purplediane](https://github.com/purplediane))
* zzzirk ([@zzzirk](https://github.com/zzzirk))
* Carol Willing ([@willingc](https://github.com/willingc))
* phoebebauer ([@phoebebauer](https://github.com/phoebebauer))
* Adam Chainz ([@adamchainz](https://github.com/adamchainz))
* Sulé ([@suledev](https://github.com/suledev))
* Evan Palmer ([@palmerev](https://github.com/palmerev))
* Bruce Eckel ([@BruceEckel](https://github.com/BruceEckel))
* Robert Lyon ([@ivanlyon](https://github.com/ivanlyon))
* Terry Bates ([@terryjbates](https://github.com/terryjbates))
* Brett Cannon ([@brettcannon](https://github.com/brettcannon))
* Michael Warkentin ([@mwarkentin](https://github.com/mwarkentin))
* Bartłomiej Kurzeja ([@B3QL](https://github.com/B3QL))
* Thomas O'Donnell ([@andytom](https://github.com/andytom))
* Jeremy Carbaugh ([@jcarbaugh](https://github.com/jcarbaugh))
* Nathan Cheung ([@cheungnj](https://github.com/cheungnj))
* Abdó Roig-Maranges ([@aroig](https://github.com/aroig))
* Steve Piercy ([@stevepiercy](https://github.com/stevepiercy))
* Corey ([@coreysnyder04](https://github.com/coreysnyder04))
* Dmitry Evstratov ([@devstrat](https://github.com/devstrat))
* Eyal Levin ([@eyalev](https://github.com/eyalev))
* mathagician ([@mathagician](https://github.com/mathagician))
* Guillaume Gelin ([@ramnes](https://github.com/ramnes))
* @delirious-lettuce ([@delirious-lettuce](https://github.com/delirious-lettuce))
* Gasper Vozel ([@karantan](https://github.com/karantan))
* Joshua Carp ([@jmcarp](https://github.com/jmcarp))
* @meahow ([@meahow](https://github.com/meahow))
* Andrea Grandi ([@andreagrandi](https://github.com/andreagrandi))
* Issa Jubril ([@jubrilissa](https://github.com/jubrilissa))
* Nytiennzo Madooray ([@Nythiennzo](https://github.com/Nythiennzo))
* Erik Bachorski ([@dornheimer](https://github.com/dornheimer))
* cclauss ([@cclauss](https://github.com/cclauss))
* Andy Craze ([@accraze](https://github.com/accraze))
* Anthony Sottile ([@asottile](https://github.com/asottile))
* Jonathan Sick ([@jonathansick](https://github.com/jonathansick))
* Hugo ([@hugovk](https://github.com/hugovk))
* Min ho Kim ([@minho42](https://github.com/minho42))
* Ryan Ly ([@rly](https://github.com/rly))
* Akintola Rahmat ([@mihrab34](https://github.com/mihrab34))
* Jai Ram Rideout ([@jairideout](https://github.com/jairideout))
* Diego Carrasco Gubernatis ([@dacog](https://github.com/dacog))
* Wagner Negrão ([@wagnernegrao](https://github.com/wagnernegrao))
* Josh Barnes ([@jcb91](https://github.com/jcb91))
* Nikita Sobolev ([@sobolevn](https://github.com/sobolevn))
* Matt Stibbs ([@mattstibbs](https://github.com/mattstibbs))
* MinchinWeb ([@MinchinWeb](https://github.com/MinchinWeb))
* kishan ([@kishan](https://github.com/kishan3))
* tonytheleg ([@tonytheleg](https://github.com/tonytheleg))
# Backers

We would like to thank the following people for supporting us in our efforts to maintain and improve Cookiecutter:

* Alex DeBrie
* Alexandre Y. Harano
* Bruno Alla
* Carol Willing
* Russell Keith-Magee
# Case Studies

This showcase is where organizations can describe how they are using Cookiecutter.

## [BeeWare](https://beeware.org/)

Building Python tools for platforms like mobile phones and set top boxes requires a lot of boilerplate code just to get the project running. Cookiecutter has enabled us to very quickly stub out a starter project in which running Python code can be placed, and makes maintaining those templates very easy. With Cookiecutter we've been able to deliver support [Android devices](https://github.com/beeware/Python-Android-template), [iOS devices](https://github.com/beeware/Python-iOS-template), tvOS boxes, and we're planning to add native support for iOS and Windows devices in the future.

[BeeWare](https://beeware.org/) is an organization building open source libraries for Python support on all platforms.

## [ChrisDev](https://chrisdev.com/)

Anytime we start a new project we begin with a [Cookiecutter template that generates a Django/Wagtail project](https://github.com/chrisdev/wagtail-cookiecutter-foundation) Our developers like it for maintainability and our designers enjoy being able to spin up new sites using our tool chain very quickly. Cookiecutter is very useful for because it supports both Mac OSX and Windows users.

[ChrisDev](https://chrisdev.com/) is a Trinidad-based consulting agency.

## [OpenStack](https://www.openstack.org/)

OpenStack uses several Cookiecutter templates to generate:

* [Openstack compliant puppet-modules](https://github.com/openstack/puppet-openstack-cookiecutter)
* [Install guides](https://github.com/openstack/installguide-cookiecutter)
* [New tempest plugins](https://github.com/openstack/tempest-plugin-cookiecutter)

[OpenStack](https://www.openstack.org/) is open source software for creating private and public clouds.
# Code of Conduct

Everyone interacting in the Cookiecutter project's codebases, issue trackers,
chat rooms, and mailing lists is expected to follow the
[PyPA Code of Conduct](https://www.pypa.io/en/latest/code-of-conduct/).
# Contributing

Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.

* [Types of Contributions](#Types-of-Contributions)
* [Contributor Setup](#Setting-Up-the-Code-for-Local-Development)
* [Contributor Guidelines](#Contributor-Guidelines)
* [Contributor Testing](#Testing-with-tox)
* [Core Committer Guide](#Core-Committer-Guide)

## Types of Contributions

You can contribute in many ways:

### Create Cookiecutter Templates

Some other Cookiecutter templates to list in the [README](README.md) would be great.

If you create a Cookiecutter template, submit a pull request adding it to README.md.

### Report Bugs

Report bugs at [https://github.com/cookiecutter/cookiecutter/issues](https://github.com/cookiecutter/cookiecutter/issues).

If you are reporting a bug, please include:

* Your operating system name and version.
* Any details about your local setup that might be helpful in troubleshooting.
* If you can, provide detailed steps to reproduce the bug.
* If you don't have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome.

### Fix Bugs

Look through the GitHub issues for bugs. Anything tagged with "bug" is open to whoever wants to implement it.

### Implement Features

Look through the GitHub issues for features. Anything tagged with "enhancement" and "please-help" is open to whoever wants to implement it.

Please do not combine multiple feature enhancements into a single pull request.

Note: this project is very conservative, so new features that aren't tagged with "please-help" might not get into core. We're trying to keep the code base small, extensible, and streamlined. Whenever possible, it's best to try and implement feature ideas as separate projects outside of the core codebase.

### Write Documentation

Cookiecutter could always use more documentation, whether as part of the official Cookiecutter docs, in docstrings, or even on the web in blog posts, articles, and such.

If you want to review your changes on the documentation locally, you can do:

```bash
pip install -r docs/requirements.txt
make servedocs
```

This will compile the documentation, open it in your browser and start watching the files for changes, recompiling as you save.

### Submit Feedback

The best way to send feedback is to file an issue at [https://github.com/cookiecutter/cookiecutter/issues](https://github.com/cookiecutter/cookiecutter/issues).

If you are proposing a feature:

* Explain in detail how it would work.
* Keep the scope as narrow as possible, to make it easier to implement.
* Remember that this is a volunteer-driven project, and that contributions are welcome :)

## Setting Up the Code for Local Development

Here's how to set up `cookiecutter` for local development.

1. Fork the `cookiecutter` repo on GitHub.
2. Clone your fork locally:

```bash
git clone git@github.com:your_name_here/cookiecutter.git
```

3. Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:

```bash
mkvirtualenv cookiecutter
cd cookiecutter/
python setup.py develop
```

4. Create a branch for local development:

```bash
git checkout -b name-of-your-bugfix-or-feature
```

Now you can make your changes locally.

5. When you're done making changes, check that your changes pass the tests and lint check:

```bash
pip install tox
tox
```

Please note that tox runs lint check automatically, since we have a test environment for it.

If you feel like running only the lint environment, please use the following command:

```bash
tox -e lint
```

6. Ensure that your feature or commit is fully covered by tests. Check report after regular tox run. You can also run coverage only report and get html report with statement by statement highlighting:

```bash
tox -e cov-report
```

You report will be placed to `htmlcov` directory. Please do not include this directory to your commits. By default this directory in our `.gitignore` file.

7. Commit your changes and push your branch to GitHub:

```bash
git add .
git commit -m "Your detailed description of your changes."
git push origin name-of-your-bugfix-or-feature
```

8. Submit a pull request through the GitHub website.

## Contributor Guidelines

### Pull Request Guidelines

Before you submit a pull request, check that it meets these guidelines:

1. The pull request should include tests.
2. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md.
3. The pull request should work for Python 2.7, 3.5, 3.6, 3.7 and PyPy on AppVeyor and Travis CI.
4. Check [https://travis-ci.org/cookiecutter/cookiecutter/pull_requests](https://travis-ci.org/cookiecutter/cookiecutter/pull_requests) and [https://ci.appveyor.com/project/cookiecutter/cookiecutter/history](https://ci.appveyor.com/project/cookiecutter/cookiecutter/history) to ensure the tests pass for all supported Python versions and platforms.

### Coding Standards

* PEP8
* Functions over classes except in tests
* Quotes via [http://stackoverflow.com/a/56190/5549](http://stackoverflow.com/a/56190/5549)

  * Use double quotes around strings that are used for interpolation or that are natural language messages
  * Use single quotes for small symbol-like strings (but break the rules if the strings contain quotes)
  * Use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed.
  * Example:

```python
LIGHT_MESSAGES = {
    'English': "There are %(number_of_lights)s lights.",
    'Pirate':  "Arr! Thar be %(number_of_lights)s lights."
}
def lights_message(language, number_of_lights):
    """Return a language-appropriate string reporting the light count."""
    return LIGHT_MESSAGES[language] % locals()
def is_pirate(message):
    """Return True if the given message sounds piratical."""
    return re.search(r"(?i)(arr|avast|yohoho)!", message) is not None
```

* Write new code in Python 3.

## Testing with tox

Tox uses py.test under the hood, hence it supports the same syntax for selecting tests.

For further information please consult the [`pytest usage docs`](http://pytest.org/en/latest/example/index.html).

To run a particular test class with tox:

```bash
tox -e py '-k TestFindHooks'
```

To run some tests with names matching a string expression:

```bash
tox -e py '-k generate'
```

Will run all tests matching "generate", test_generate_files for example.

To run just one method:

```bash
tox -e py '-k "TestFindHooks and test_find_hook"'
```

To run all tests using various versions of python in virtualenvs defined in tox.ini, just run tox:

```bash
tox
```

This configuration file setup the pytest-cov plugin and it is an additional dependency. It generate a coverage report after the tests.

It is possible to tests with some versions of python, to do this the command is:

```bash
tox -e py27,py35,pypy
```

Will run py.test with the python2.7, python3.5 and pypy interpreters, for example.

## Core Committer Guide

### Vision and Scope

Core committers, use this section to:

* Guide your instinct and decisions as a core committer
* Limit the codebase from growing infinitely

#### Command-Line Accessible

* Provides a command-line utility that creates projects from cookiecutters
* Extremely easy to use without having to think too hard
* Flexible for more complex use via optional arguments

#### API Accessible

* Entirely function-based and stateless (Class-free by intentional design)
* Usable in pieces for developers of template generation tools

#### Being Jinja2-specific

* Sets a standard baseline for project template creators, facilitating reuse
* Minimizes the learning curve for those who already use Flask or Django
* Minimizes scope of Cookiecutter codebase

#### Extensible

Being extendable by people with different ideas for Jinja2-based project template tools.

* Entirely function-based
* Aim for statelessness
* Lets anyone write more opinionated tools

Freedom for Cookiecutter users to build and extend.

* No officially-maintained cookiecutter templates, only ones by individuals
* Commercial project-friendly licensing, allowing for private cookiecutters and private Cookiecutter-based tools

#### Fast and Focused

Cookiecutter is designed to do one thing, and do that one thing very well.

* Cover the use cases that the core committers need, and as little as possible beyond that :)
* Generates project templates from the command-line or API, nothing more
* Minimize internal line of code (LOC) count
* Ultra-fast project generation for high performance downstream tools

#### Inclusive

* Cross-platform and cross-version support are more important than features/functionality
* Fixing Windows bugs even if it's a pain, to allow for use by more beginner coders

#### Stable

* Aim for 100% test coverage and covering corner cases
* No pull requests will be accepted that drop test coverage on any platform, including Windows
* Conservative decisions patterned after CPython's conservative decisions with stability in mind
* Stable APIs that tool builders can rely on
* New features require a +1 from 3 core committers

#### VCS-Hosted Templates

Cookiecutter project templates are intentionally hosted VCS repos as-is.

* They are easily forkable
* It's easy for users to browse forks and files
* They are searchable via standard Github/Bitbucket/other search interface
* Minimizes the need for packaging-related cruft files
* Easy to create a public project template and host it for free
* Easy to collaborate

### Process: Pull Requests

If a pull request is untriaged:

* Look at the roadmap
* Set it for the milestone where it makes the most sense
* Add it to the roadmap

How to prioritize pull requests, from most to least important:

* Fixes for broken tests. Broken means broken on any supported platform or Python version.
* Extra tests to cover corner cases.
* Minor edits to docs.
* Bug fixes.
* Major edits to docs.
* Features.

Ensure that each pull request meets all requirements in [checklist](https://gist.github.com/audreyr/4feef90445b9680475f2).

### Process: Issues

If an issue is a bug that needs an urgent fix, mark it for the next patch release.  
Then either fix it or mark as please-help.

For other issues: encourage friendly discussion, moderate debate, offer your thoughts.

New features require a +1 from 2 other core committers (besides yourself).

### Process: Roadmap

The roadmap located [here](https://github.com/cookiecutter/cookiecutter/milestones?direction=desc&sort=due_date&state=open)

Due dates are flexible. Core committers can change them as needed. Note that GitHub sort on them is buggy.

How to number milestones:

* Follow semantic versioning. Look at: [http://semver.org](http://semver.org)

Milestone size:

* If a milestone contains too much, move some to the next milestone.
* Err on the side of more frequent patch releases.

### Process: Pull Request merging and HISTORY.md maintenance

If you merge a pull request, you're responsible for updating `AUTHORS.md` and `HISTORY.md`

When you're processing the first change after a release, create boilerplate following the existing pattern:

```md
## x.y.z (Development)

The goals of this release are TODO: release summary of features

Features:

* Feature description, thanks to [@contributor](https://github.com/contributor) (#PR).

Bug Fixes:

* Bug fix description, thanks to [@contributor](https://github.com/contributor) (#PR).

Other changes:

* Description of the change, thanks to [@contributor](https://github.com/contributor) (#PR).
```

### Process: Accepting Template Pull Requests

* Run the template to generate the project.
* Attempt to start/use the rendered project.
* Merge the template in.
* Update the history file.

note: Adding a template doesn't give authors credit.

### Process: Your own code changes

All code changes, regardless of who does them, need to be reviewed and merged by someone else.  
This rule applies to all the core committers.

Exceptions:

* Minor corrections and fixes to pull requests submitted by others.
* While making a formal release, the release manager can make necessary, appropriate changes.
* Small documentation changes that reinforce existing subject matter. Most commonly being, but not limited to spelling and grammar corrections.

### Responsibilities

* Ensure cross-platform compatibility for every change that's accepted. Windows, Mac, Debian & Ubuntu Linux.
* Ensure that code that goes into core meets all requirements in this checklist: [https://gist.github.com/audreyr/4feef90445b9680475f2](https://gist.github.com/audreyr/4feef90445b9680475f2)
* Create issues for any major changes and enhancements that you wish to make. Discuss things transparently and get community feedback.
* Don't add any classes to the codebase unless absolutely needed. Err on the side of using functions.
* Keep feature versions as small as possible, preferably one new feature per version.
* Be welcoming to newcomers and encourage diverse new contributors from all backgrounds. Look at [Code of Conduct](CODE_OF_CONDUCT.md).

### Becoming a Core Committer

Contributors may be given core commit privileges. Preference will be given to those with:

1. Past contributions to Cookiecutter and other open-source projects. Contributions to Cookiecutter include both code (both accepted and pending) and friendly participation in the issue tracker. Quantity and quality are considered.
2. A coding style that the other core committers find simple, minimal, and clean.
3. Access to resources for cross-platform development and testing.
4. Time to devote to the project regularly.
# History

History is important, but our current roadmap can be found [here](https://github.com/cookiecutter/cookiecutter/milestones?direction=desc&sort=due_date&state=open)

## 1.7.0 (2019-12-22) Old friend

Important Changes:

* Drop support for EOL Python 3.4, thanks to [@jamescurtin](https://github.com/jamescurtin) and [@insspb](https://github.com/insspb) (#1024)
* Drop support for EOL Python 3.3, thanks to [@hugovk](https://github.com/hugovk) (#1024)
* Increase the minimum click version to 7.0, thanks to [@rly](https://github.com/rly) and [@luzfcb](https://github.com/luzfcb) (#1168)

Other Changes:

* PEP257 fixing docstrings in exceptions.py. Thanks to [@MinchinWeb](https://github.com/MinchinWeb) (#1237)
* PEP257 fixing docstrings in replay.py. Thanks to [@kishan](https://github.com/kishan3) (#1234)
* PEP257 fixing docstrings in test_unzip.py. Thanks to [@tonytheleg](https://github.com/tonytheleg) and [@insspb](https://github.com/insspb) (#1236, #1262)
* Fixed tests sequence for appveyor, to exclude file not found bug. Thanks to [@insspb](https://github.com/insspb) (#1257)
* Updates REAMDE.md with svg badge for appveyor. Thanks to [@sobolevn](https://github.com/sobolevn) (#1254)
* Add missing {% endif %} to Choice Variables example. Thanks to [@mattstibbs](https://github.com/mattstibbs) (#1249)
* Core documentation converted to Markdown format thanks to [@wagnernegrao](https://github.com/wagnernegrao), [@insspb](https://github.com/insspb) (#1216)
* Tests update: use sys.executable when invoking python in python 3 only environment thanks to [@vincentbernat](https://github.com/vincentbernat) (#1221)
* Prevent `click` API v7.0 from showing choices when already shown, thanks to [@rly](https://github.com/rly) and [@luzfcb](https://github.com/luzfcb) (#1168)
* Test the codebase with python3.8 beta on tox and travis-ci (#1206), thanks to [@mihrab34](https://github.com/mihrab34)
* Add a [CODE\_OF\_CONDUCT.md](https://github.com/audreyr/cookiecutter/blob/master/CODE_OF_CONDUCT.md) file to the project, thanks to [@andreagrandi](https://github.com/andreagrandi) (#1009)
* Update docstrings in `cookiecutter/main.py`, `cookiecutter/__init__.py`, and `cookiecutter/log.py` to follow the PEP 257 style guide, thanks to [@meahow](https://github.com/meahow) (#998, #999, #1000)
* Update docstrings in `cookiecutter/utils.py` to follow the PEP 257 style guide, thanks to [@dornheimer](https://github.com/dornheimer)(#1026)
* Fix grammar in *Choice Variables* documentation, thanks to [@jubrilissa](https://github.com/jubrilissa) (#1011)
* Update installation docs with links to the Windows Subsystem and GNU utilities, thanks to [@Nythiennzo](https://github.com/Nythiennzo) for the PR and [@BruceEckel](https://github.com/BruceEckel) for the review (#1016)
* Upgrade flake8 to version 3.5.0, thanks to [@cclauss](https://github.com/cclauss) (#1038)
* Update tutorial with explanation for how cookiecutter finds the template file, thanks to [@accraze](https://github.com/accraze)(#1025)
* Update CI config files to use `TOXENV` environment variable, thanks to [@asottile](https://github.com/asottile) (#1019)
* Improve user documentation for writing hooks, thanks to [@jonathansick](https://github.com/jonathansick) (#1057)
* Make sure to preserve the order of items in the generated cookiecutter context, thanks to [@hackebrot](https://github.com/hackebrot) (#1074)
* Fixed DeprecationWarning for a regular expression on python 3.6, thanks to [@reinout](https://github.com/reinout) (#1124)
* Document use of cookiecutter-template topic on GitHub, thanks to [@ssbarnea](https://github.com/ssbarnea) (#1189)
* Update README badge links, thanks to [@luzfcb](https://github.com/luzfcb) (#1207)
* Update prompt.py to match pep257 guidelines, thanks to [@jairideout](https://github.com/jairideout) (#1105)
* Update link to Jinja2 extensions documentation, thanks to [@dacog](https://github.com/dacog) (#1193)
* Require pip 9.0.0 or newer for tox environments, thanks to [@hackebrot](https://github.com/hackebrot) (#1215)
* Use io.open contextmanager when reading hook files, thanks to [@jcb91](https://github.com/jcb91) (#1147)
* Add more cookiecutter templates to the mix:
  * [cookiecutter-python-cli](https://github.com/xuanluong/cookiecutter-python-cli) by [@xuanluong](https://github.com/xuanluong) (#1003)
  * [cookiecutter-docker-science](https://github.com/docker-science/cookiecutter-docker-science) by [@takahi-i](https://github.com/takahi-i) (#1040)
  * [cookiecutter-flask-skeleton](https://github.com/realpython/cookiecutter-flask-skeleton) by [@mjhea0](https://github.com/mjhea0) (#1052)
  * [cookiecutter-awesome](https://github.com/Pawamoy/cookiecutter-awesome) by [@Pawamoy](https://github.com/Pawamoy) (#1051)
  * [cookiecutter-flask-ask](https://github.com/chrisvoncsefalvay/cookiecutter-flask-ask) by [@machinekoder](https://github.com/machinekoder) (#1056)
  * [cookiecutter-data-driven-journalism](https://github.com/jastark/cookiecutter-data-driven-journalism) by [@JAStark](https://github.com/JAStark) (#1020)
  * [cookiecutter-tox-plugin](https://github.com/tox-dev/cookiecutter-tox-plugin) by [@obestwalter](https://github.com/obestwalter) (#1103)
  * [cookiecutter-django-dokku](https://github.com/mashrikt/cookiecutter-django-dokku) by [@mashrikt](https://github.com/mashrikt) (#1093)

## 1.6.0 (2017-10-15) Tim Tam

New Features:

* Include template path or template URL in cookiecutter context under `_template`, thanks to [@aroig](https://github.com/aroig) (#774)
* Add a URL abbreviation for GitLab template projects, thanks to [@hackebrot](https://github.com/hackebrot) (#963)
* Add option to use templates from Zip files or Zip URLs, thanks to [@freakboy3742](https://github.com/freakboy3742) (#961)

Bug Fixes:

* Fix an issue with missing default template abbreviations for when a user defined custom abbreviations, thanks to [@noirbizarre](https://github.com/noirbizarre) for the issue report and [@hackebrot](https://github.com/hackebrot) for the fix (#966, #967)
* Preserve existing output directory on project generation failure, thanks to [@ionelmc](https://github.com/ionelmc) for the report and
[@michaeljoseph](https://github.com/michaeljoseph) for the fix (#629, #964)
* Fix Python 3.x error handling for `git` operation failures, thanks to [@jmcarp](https://github.com/jmcarp) (#905)

Other Changes:

* Fix broken link to *Copy without Render* docs, thanks to [@coreysnyder04](https://github.com/coreysnyder04) (#912)
* Improve debug log message for when a hook is not found, thanks to [@raphigaziano](https://github.com/raphigaziano/) (#160)
* Fix module summary and `expand_abbreviations()` doc string as per pep257, thanks to [@terryjbates](https://github.com/terryjbates)
(#772)
* Update doc strings in `cookiecutter/cli.py` and `cookiecutter/config.py` according to pep257, thanks to [@terryjbates](https://github.com/terryjbates) (#922, #931)
* Update doc string for `is_copy_only_path()` according to pep257, thanks to [@mathagician](https://github.com/mathagician) and
[@terryjbates](https://github.com/terryjbates) (#935, #949)
* Update doc strings in `cookiecutter/extensions.py` according to pep257, thanks to [@meahow](https://github.com/meahow) (#996)
* Fix miscellaneous issues with building docs, thanks to [@stevepiercy](https://github.com/stevepiercy) (#889)
* Re-implement Makefile and update several make rules, thanks to [@hackebrot](https://github.com/hackebrot) (#930)
* Fix broken link to pytest docs, thanks to [@eyalev](https://github.com/eyalev) for the issue report and [@devstrat](https://github.com/devstrat) for the fix (#939, #940)
* Add `test_requirements.txt` file for easier testing outside of tox, thanks to [@ramnes](https://github.com/ramnes) (#945)
* Improve wording in *copy without render* docs, thanks to [@eyalev](https://github.com/eyalev) (#938)
* Fix a number of typos, thanks to [@delirious-lettuce](https://github.com/delirious-lettuce) (#968)
* Improved *extra context* docs by noting that extra context keys must be present in the template\'s `cookiecutter.json`, thanks to
[@karantan](https://github.com/karantan) for the report and fix (#863, #864)
* Added more cookiecutter templates to the mix:
  * [cookiecutter-kata-cpputest](https://github.com/13coders/cookiecutter-kata-cpputest) by [@13coders](https://github.com/13coders) (#901)
  * [cookiecutter-kata-gtest](https://github.com/13coders/cookiecutter-kata-gtest) by [@13coders](https://github.com/13coders) (#901)
  * [cookiecutter-pyramid-talk-python-starter](https://github.com/mikeckennedy/cookiecutter-pyramid-talk-python-starter) by [@mikeckennedy](https://github.com/mikeckennedy) (#915)
  * [cookiecutter-android](https://github.com/alexfu/cookiecutter-android) by [@alexfu](https://github.com/alexfu) (#890)
  * [cookiecutter-lux-python](https://github.com/alexkey/cookiecutter-lux-python) by [@alexkey](https://github.com/alexkey) (#895)
  * [cookiecutter-git](https://github.com/webevllc/cookiecutter-git) by [@tuxredux](https://github.com/tuxredux) (#921)
  * [cookiecutter-ansible-role-ci](https://github.com/ferrarimarco/cookiecutter-ansible-role) by [@ferrarimarco](https://github.com/ferrarimarco) (#903)
  * [cookiecutter\_dotfile](https://github.com/bdcaf/cookiecutter_dotfile) by [@bdcaf](https://github.com/bdcaf) (#925)
  * [painless-continuous-delivery](https://github.com/painless-software/painless-continuous-delivery) by [@painless-software](https://github.com/painless-software)
        (#927)
  * [cookiecutter-molecule](https://github.com/retr0h/cookiecutter-molecule) by [@retr0h](https://github.com/retr0h) (#954)
  * [sublime-snippet-package-template](https://github.com/agenoria/sublime-snippet-package-template) by [@agenoria](https://github.com/agenoria) (#956)
  * [cookiecutter-conda-python](https://github.com/conda/cookiecutter-conda-python) by [@conda](https://github.com/conda) (#969)
  * [cookiecutter-flask-minimal](https://github.com/candidtim/cookiecutter-flask-minimal) by [@candidtim](https://github.com/candidtim) (#977)
  * [cookiecutter-pypackage-rust-cross-platform-publish](https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish) by [@mckaymatt](https://github.com/mckaymatt) (#957)
  * [cookie-cookie](https://github.com/tuxredux/cookie-cookie) by [@tuxredux](https://github.com/tuxredux) (#951)
  * [cookiecutter-telegram-bot](https://github.com/Ars2014/cookiecutter-telegram-bot) by [@Ars2014](https://github.com/Ars2014) (#984)
  * [python-project-template](https://github.com/Kwpolska/python-project-template) by [@Kwpolska](https://github.com/Kwpolska) (#986)
  * [wemake-django-template](https://github.com/wemake-services/wemake-django-template) by [@wemake-services](https://github.com/wemake-services) (#990)
  * [cookiecutter-raml](https://github.com/genzj/cookiecutter-raml) by [@genzj](https://github.com/genzj) (#994)
  * [cookiecutter-anyblok-project](https://github.com/AnyBlok/cookiecutter-anyblok-project) by [@AnyBlok](https://github.com/AnyBlok) (#988)
  * [cookiecutter-devenv](https://bitbucket.org/greenguavalabs/cookiecutter-devenv.git) by [@greenguavalabs](https://bitbucket.org/greenguavalabs) (#991)

## 1.5.1 (2017-02-04) Alfajor

New Features:

* Major update to installation documentation, thanks to [@stevepiercy](https://github.com/stevepiercy) (#880)

Bug Fixes:

* Resolve an issue around default values for dict variables, thanks to [@e-kolpakov](https://github.com/e-kolpakov) for raising the issue and [@hackebrot](https://github.com/hackebrot) for the PR (#882, #884)

Other Changes:

* Contributor documentation reST fixes, thanks to [@stevepiercy](https://github.com/stevepiercy) (#878)
* Added more cookiecutter templates to the mix:
  * [widget-cookiecutter](https://github.com/jupyter/widget-cookiecutter) by [@willingc](https://github.com/willingc) (#781)
  * [cookiecutter-django-foundation](https://github.com/Parbhat/cookiecutter-django-foundation) by [@Parbhat](https://github.com/Parbhat) (#804)
  * [cookiecutter-tornado](https://github.com/hkage/cookiecutter-tornado) by [@hkage](https://github.com/hkage) (#807)
  * [cookiecutter-django-ansible](https://github.com/HackSoftware/cookiecutter-django-ansible) by [@Ivaylo-Bachvarov](https://github.com/Ivaylo-Bachvarov)(#816)
  * [CICADA](https://github.com/TAMU-CPT/CICADA) by [@elenimijalis](https://github.com/elenimijalis) (#840)
  * [cookiecutter-tf-module](https://github.com/DualSpark/cookiecutter-tf-module) by [@VDuda](https://github.com/VDuda) (#843)
  * [cookiecutter-pyqt4](https://github.com/aeroaks/cookiecutter-pyqt4) by [@aeroaks](https://github.com/aeroaks) (#847)
  * [cookiecutter-golang](https://github.com/lacion/cookiecutter-golang) by [@mjhea0](https://github.com/mjhea0) and [@lacion](https://github.com/lacion) (#872, #873)
  * [cookiecutter-elm](https://github.com/m-x-k/cookiecutter-elm.git), [cookiecutter-java](https://github.com/m-x-k/cookiecutter-java.git) and [cookiecutter-spring-boot](https://github.com/m-x-k/cookiecutter-spring-boot.git) by [@m-x-k](https://github.com/m-x-k) (#879)

## 1.5.0 (2016-12-18) Alfajor

The primary goal of this release was to add command-line support for passing extra context, address minor bugs and make a number of
improvements.

New Features:

* Inject extra context with command-line arguments, thanks to [@msabramo](https://github.com/msabramo) and [@michaeljoseph](https://github.com/michaeljoseph) (#666).
* Updated conda installation instructions to work with the new conda-forge distribution of Cookiecutter, thanks to [@pydanny](https://github.com/pydanny) and especially [@bollwyvl](https://github.com/bollwyvl) (#232, #705).
* Refactor code responsible for interaction with version control systems and raise better error messages, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#778).
* Add support for executing cookiecutter using `python -m cookiecutter` or from a checkout/zip file, thanks to [@brettcannon](https://github.com/brettcannon) (#788).
* New CLI option `--debug-file PATH` to store a log file on disk. By default no log file is written. Entries for `DEBUG` level and     higher. Thanks to [@hackebrot](https://github.com/hackebrot)(#792).
* Existing templates in a user\'s `cookiecutters_dir` (default is `~/.cookiecutters/`) can now be referenced by directory name, thanks
to [@michaeljoseph](https://github.com/michaeljoseph) (#825).
* Add support for dict values in `cookiecutter.json`, thanks to [@freakboy3742](https://github.com/freakboy3742) and [@hackebrot](https://github.com/hackebrot) (#815, #858).
* Add a `jsonify` filter to default jinja2 extensions that json.dumps a Python object into a string, thanks to [@aroig](https://github.com/aroig) (#791).

Bug Fixes:

* Fix typo in the error logging text for when a hook did not exit successfully, thanks to [@luzfcb](https://github.com/luzfcb)    (#656)
* Fix an issue around **replay** file names when **cookiecutter** is used with a relative path to a template, thanks to    [@eliasdorneles](https://github.com/eliasdorneles) for raising the issue and [@hackebrot](https://github.com/hackebrot) for the PR (#752, #753)
* Ignore hook files with tilde-suffixes, thanks to [@hackebrot](https://github.com/hackebrot) (#768)
* Fix a minor issue with the code that generates a name for a template, thanks to [@hackebrot](https://github.com/hackebrot)(#798)
* Handle empty hook file or other OS errors, thanks to [@christianmlong](https://github.com/christianmlong) for raising this bug and [@jcarbaugh](https://github.com/jcarbaugh) and [@hackebrot](https://github.com/hackebrot) for the fix (#632, #729, #862)
* Resolve an issue with custom extensions not being loaded for `pre_gen_project` and `post_gen_project` hooks, thanks to [@cheungnj](https://github.com/cheungnj) (#860)

Other Changes:

* Remove external dependencies from tests, so that tests can be run w/o network connection, thanks to [@hackebrot](https://github.com/hackebrot) (#603)
* Remove execute permissions on Python files, thanks to [@mozillazg](https://github.com/mozillazg) (#650)
* Report code coverage info from AppVeyor build to codecov, thanks to [@ewjoachim](https://github.com/ewjoachim) (#670)
* Documented functions and methods lacking documentation, thanks to [@pydanny](https://github.com/pydanny) (#673)
* Documented `__init__` methods for Environment objects, thanks to [@pydanny](https://github.com/pydanny) (#677)
* Updated whichcraft to 0.4.0, thanks to [@pydanny](https://github.com/pydanny).
* Updated documentation link to Read the Docs, thanks to [@natim](https://github.com/Natim) (#687)
* Moved cookiecutter templates and added category links, thanks to [@willingc](https://github.com/willingc) (#674)
* Added Github Issue Template, thanks to [@luzfcb](https://github.com/luzfcb) (#700)
* Added `ssh` repository examples, thanks to [@pokoli](https://github.com/pokoli/) (#702)
* Fix links to the cookiecutter-data-science template and its documentation, thanks to [@tephyr](https://github.com/tephyr) for the PR and [@willingc](https://github.com/willingc) for the review (#711, #714)
* Update link to docs for Django\'s `--template` command line option, thanks to [@purplediane](https://github.com/purplediane) (#754)
* Create *hook backup files* during the tests as opposed to having them as static files in the repository, thanks to [@hackebrot](https://github.com/hackebrot) (#789)

* Applied PEP 257 docstring conventions to:
  * `environment.py`, thanks to [@terryjbates](https://github.com/terryjbates) (#759)
  * `find.py`, thanks to [@terryjbates](https://github.com/terryjbates) (#761)
  * `generate.py`, thanks to [@terryjbates](https://github.com/terryjbates) (#764)
  * `hooks.py`, thanks to [@terryjbates](https://github.com/terryjbates) (#766)
  * `repository.py`, thanks to [@terryjbates](https://github.com/terryjbates) (#833)
  * `vcs.py`, thanks to [@terryjbates](https://github.com/terryjbates) (#831)

* Fix link to the Tryton cookiecutter, thanks to [@cedk](https://github.com/cedk) and [@nicoe](https://github.com/nicoe) (#697, #698)
* Added PyCon US 2016 sponsorship to README, thanks to [@purplediane](https://github.com/purplediane) (#720)
* Added a sprint contributor doc, thanks to [@phoebebauer](https://github.com/phoebebauer) (#727)
* Converted readthedocs links (.org -\> .io), thanks to [@adamchainz](https://github.com/adamchainz) (#718)
* Added Python 3.6 support, thanks to [@suledev](https://github.com/suledev) (#728)
* Update occurrences of `repo_name` in documentation, thanks to [@palmerev](https://github.com/palmerev) (#734)
* Added case studies document, thanks to [@pydanny](https://github.com/pydanny) (#735)
* Added first steps cookiecutter creation tutorial, thanks to [@BruceEckel](https://github.com/BruceEckel) (#736)
* Reorganised tutorials and setup git submodule to external tutorial, thanks to [@dot2dotseurat](https://github.com/dot2dotseurat) (#740)
* Debian installation instructions, thanks to [@ivanlyon](https://github.com/ivanlyon) (#738)
* Usage documentation typo fix., thanks to [@terryjbates](https://github.com/terryjbates) (#739)
* Updated documentation copyright date, thanks to [@zzzirk](https://github.com/zzzirk) (#747)
* Add a make rule to update git submodules, thanks to [@hackebrot](https://github.com/hackebrot) (#746)
* Split up advanced usage docs, thanks to [@zzzirk](https://github.com/zzzirk) (#749)
* Documentation for the `no_input` option, thanks to [@pokoli](https://github.com/pokoli/) (#701)
* Remove unnecessary shebangs from python files, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#763)
* Refactor cookiecutter template identification, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#777)
* Add a `cli_runner` test fixture to simplify CLI tests, thanks to [@hackebrot](https://github.com/hackebrot) (#790)
* Add a check to ensure cookiecutter repositories have JSON context, thanks to [@michaeljoseph](https://github.com/michaeljoseph)(#782)
* Rename the internal function that determines whether a file should be rendered, thanks to [@audreyr](https://github.com/audreyr) for raising the issue and [@hackebrot](https://github.com/hackebrot)for the PR (#741, #802)
* Fix typo in docs, thanks to [@mwarkentin](https://github.com/mwarkentin) (#828)
* Fix broken link to *Invoke* docs, thanks to [@B3QL](https://github.com/B3QL) (#820)
* Add documentation to `render_variable` function in `prompt.py`, thanks to [@pydanny](https://github.com/pydanny) (#678)
* Fix python3.6 travis-ci and tox configuration, thanks to [@luzfcb](https://github.com/luzfcb) (#844)
* Add missing encoding declarations to python files, thanks to [@andytom](https://github.com/andytom) (#852)
* Disable poyo logging for tests, thanks to [@hackebrot](https://github.com/hackebrot) (#855)
* Remove pycache directories in make clean-pyc, thanks to [@hackebrot](https://github.com/hackebrot) (#849)
* Refactor hook system to only find the requested hook, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#834)
* Add tests for custom extensions in `pre_gen_project` and `post_gen_project` hooks, thanks to [@hackebrot](https://github.com/hackebrot) (#856)
* Make the build reproducible by avoiding nondeterministic keyword arguments, thanks to [@lamby](https://github.com/lamby) and [@hackebrot](https://github.com/hackebrot) (#800, #861)
* Extend CLI help message and point users to the github project to engage with the community, thanks to [@hackebrot](https://github.com/hackebrot) (#859)

* Added more cookiecutter templates to the mix:
  * [cookiecutter-funkload-friendly](https://github.com/tokibito/cookiecutter-funkload-friendly) by [@tokibito](https://github.com/tokibito) (#657)
  * [cookiecutter-reveal.js](https://github.com/keimlink/cookiecutter-reveal.js) by [@keimlink](https://github.com/keimlink) (#660)
  * [cookiecutter-python-app](https://github.com/mdklatt/cookiecutter-python-app) by [@mdklatt](https://github.com/mdklatt) (#659)
  * [morepath-cookiecutter](https://github.com/morepath/morepath-cookiecutter) by [@href](https://github.com/href) (#672)
  * [hovercraft-slides](https://github.com/Springerle/hovercraft-slides) by [@jhermann](https://github.com/jhermann) (#665)
  * [cookiecutter-es6-package](https://github.com/ratson/cookiecutter-es6-package) by [@ratson](https://github.com/ratson) (#667)
  * [cookiecutter-webpack](https://github.com/hzdg/cookiecutter-webpack) by [@hzdg](https://github.com/hzdg) (#668)
  * [cookiecutter-django-herokuapp](https://github.com/dulaccc/cookiecutter-django-herokuapp) by [@dulaccc](https://github.com/dulaccc) (#374)
  * [cookiecutter-django-aws-eb](https://github.com/dolphinkiss/cookiecutter-django-aws-eb) by [@peterlauri](https://github.com/peterlauri) (#626)
  * [wagtail-starter-kit](https://github.com/tkjone/wagtail-starter-kit) by [@tkjone](https://github.com/tkjone) (#658)
  * [cookiecutter-dpf-effect](https://github.com/SpotlightKid/cookiecutter-dpf-effect) by [@SpotlightKid](https://github.com/SpotlightKid) (#663)
  * [cookiecutter-dpf-audiotk](https://github.com/SpotlightKid/cookiecutter-dpf-audiotk) by [@SpotlightKid](https://github.com/SpotlightKid) (#663)
  * [cookiecutter-template](https://github.com/eviweb/cookiecutter-template) by [@eviweb](https://github.com/eviweb) (#664)
  * [cookiecutter-angular2](https://github.com/matheuspoleza/cookiecutter-angular2) by [@matheuspoleza](https://github.com/matheuspoleza) (#675)
  * [cookiecutter-data-science](http://drivendata.github.io/cookiecutter-data-science/) by [@pjbull](https://github.com/pjbull) (#680)
  * [cc\_django\_ember\_app](https://bitbucket.org/levit_scs/cc_django_ember_app) by [@nanuxbe](https://github.com/nanuxbe) (#686)
  * [cc\_project\_app\_drf](https://bitbucket.org/levit_scs/cc_project_app_drf) by [@nanuxbe](https://github.com/nanuxbe) (#686)
  * [cc\_project\_app\_full\_with\_hooks](https://bitbucket.org/levit_scs/cc_project_app_full_with_hooks) by [@nanuxbe](https://github.com/nanuxbe) (#686)
  * [beat-generator](https://github.com/elastic/beat-generator) by [@ruflin](https://github.com/ruflin) (#695)
  * [cookiecutter-scala](https://github.com/Plippe/cookiecutter-scala) by [@Plippe](https://github.com/Plippe) (#751)
  * [cookiecutter-snakemake-analysis-pipeline](https://github.com/xguse/cookiecutter-snakemake-analysis-pipeline) by [@xguse](https://github.com/xguse) (#692)
  * [cookiecutter-py3tkinter](https://github.com/ivanlyon/cookiecutter-py3tkinter) by [@ivanlyon](https://github.com/ivanlyon) (#730)
  * [pyramid-cookiecutter-alchemy](https://github.com/Pylons/pyramid-cookiecutter-alchemy) by [@stevepiercy](https://github.com/stevepiercy) (#745)
  * [pyramid-cookiecutter-starter](https://github.com/Pylons/pyramid-cookiecutter-starter) by [@stevepiercy](https://github.com/stevepiercy) (#745)
  * [pyramid-cookiecutter-zodb](https://github.com/Pylons/pyramid-cookiecutter-zodb) by [@stevepiercy](https://github.com/stevepiercy) (#745)
  * [substanced-cookiecutter](https://github.com/Pylons/substanced-cookiecutter) by [@stevepiercy](https://github.com/stevepiercy) (#745)
  * [cookiecutter-simple-django-cn](https://github.com/shenyushun/cookiecutter-simple-django-cn) by [@shenyushun](https://github.com/shenyushun) (#765)
  * [cookiecutter-pyqt5](https://github.com/mandeepbhutani/cookiecutter-pyqt5) by [@mandeepbhutani](https://github.com/mandeepbhutani) (#797)
  * [cookiecutter-xontrib](https://github.com/laerus/cookiecutter-xontrib) by [@laerus](https://github.com/laerus) (#817)
  * [cookiecutter-reproducible-science](https://github.com/mkrapp/cookiecutter-reproducible-science) by [@mkrapp](https://github.com/mkrapp) (#826)
  * [cc-automated-drf-template](https://github.com/TAMU-CPT/cc-automated-drf-template) by [@elenimijalis](https://github.com/elenimijalis) (#832)

## 1.4.0 (2016-03-20) Shortbread

The goal of this release is changing to a strict Jinja2 environment, paving the way to more awesome in the future, as well as adding support
for Jinja2 extensions.

New Features:

* Added support for Jinja2 extension support, thanks to [@hackebrot](https://github.com/hackebrot) (#617).
* Now raises an error if Cookiecutter tries to render a template that contains an undefined variable. Makes generation more robust and
secure (#586). Work done by [@hackebrot](https://github.com/hackebrot) (#111, #586, #592)
* Uses strict Jinja2 env in prompt, thanks to [@hackebrot](https://github.com/hackebrot) (#598, #613)
* Switched from pyyaml/ruamel.yaml libraries that were problematic across platforms to the pure Python [poyo](https://pypi.python.org/pypi/poyo) library, thanks to [@hackebrot](https://github.com/hackebrot) (#557, #569, #621)
* User config values for `cookiecutters_dir` and `replay_dir` now support environment variable and user home expansion, thanks to   [@nfarrar](https://github.com/nfarrar) for the suggestion and [@hackebrot](https://github.com/hackebrot) for the PR (#640,#642)
* Add [jinja2-time](https://pypi.python.org/pypi/jinja2-time) as default extension for dates and times in templates via `{% now 'utc' %}`,thanks to [@hackebrot](https://github.com/hackebrot) (#653)

Bug Fixes:

* Provided way to define options that have no defaults, thanks to [@johtso](https://github.com/johtso) (#587, #588)
* Make sure that `replay.dump()` and `replay.load()` use the correct user config, thanks to [@hackebrot](https://github.com/hackebrot)
(#590, #594)
* Added correct CA bundle for Git on Appveyor, thanks to [@maiksensi](https://github.com/maiksensi) (#599, #602)
* Open `HISTORY.rst` with `utf-8` encoding when reading the changelog, thanks to [@0-wiz-0](https://github.com/0-wiz-0) for submitting the issue and [@hackebrot](https://github.com/hackebrot) for the fix (#638, #639)
* Fix repository indicators for [privaterepository](http://cookiecutter.readthedocs.io/en/latest/usage.html#works-with-private-repos)
urls, thanks to [@habnabit](https://github.com/habnabit) for the fix (#595) and [@hackebrot](https://github.com/hackebrot) for the
tests (#655)

Other Changes:

* Set path before running tox, thanks to [@maiksensi](https://github.com/maiksensi) (#615, #620)
* Removed xfail in test\_cookiecutters, thanks to [@hackebrot](https://github.com/hackebrot) (#618)
* Removed django-cms-plugin on account of 404 error, thanks to [@mativs](https://github.com/mativs) and [@pydanny](https://github.com/pydanny) (#593)
* Fixed docs/usage.rst, thanks to [@macrotim](https://github.com/macrotim) (#604)
* Update .gitignore to latest Python.gitignore and ignore PyCharm files, thanks to [@audreyr](https://github.com/audreyr)
* Use open context manager to read context\_file in generate() function, thanks to [@hackebrot](https://github.com/hackebrot)
(#607, #608)
* Added documentation for choice variables, thanks to [@maiksensi](https://github.com/maiksensi) (#611)
* Set up Scrutinizer to check code quality, thanks to [@audreyr](https://github.com/audreyr)
* Drop distutils support in setup.py, thanks to [@hackebrot](https://github.com/hackebrot) (#606, #609)
* Change cookiecutter-pypackage-minimal link, thanks to [@kragniz](https://github.com/kragniz) (#614)
* Fix typo in one of the template\'s description, thanks to [@ryanfreckleton](https://github.com/ryanfreckleton) (#643)
* Fix broken link to [\_copy\_without\_render](http://cookiecutter.readthedocs.io/en/latest/advanced_usage.html#copy-without-render)
    in *troubleshooting.rst*, thanks to [@ptim](https://github.com/ptim) (#647)

* Added more cookiecutter templates to the mix:
  * [cookiecutter-pipproject](https://github.com/wdm0006/cookiecutter-pipproject) by [@wdm0006](https://github.com/wdm0006) (#624)
  * [cookiecutter-flask-2](https://github.com/wdm0006/cookiecutter-flask) by [@wdm0006](https://github.com/wdm0006) (#624)
  * [cookiecutter-kotlin-gradle](https://github.com/thomaslee/cookiecutter-kotlin-gradle) by [@thomaslee](https://github.com/thomaslee) (#622)
  * [cookiecutter-tryton-fulfilio](https://github.com/fulfilio/cookiecutter-tryton) by [@cedk](https://github.com/cedk) (#631)
  * [django-starter](https://github.com/tkjone/django-starter) by [@tkjone](https://github.com/tkjone) (#635)
  * [django-docker-bootstrap](https://github.com/legios89/django-docker-bootstrap) by [@legios89](https://github.com/legios89) (#636)
  * [cookiecutter-mediawiki-extension](https://github.com/JonasGroeger/cookiecutter-mediawiki-extension) by [@JonasGroeger](https://github.com/JonasGroeger) (#645)
  * [cookiecutter-django-gulp](https://github.com/valerymelou/cookiecutter-django-gulp) by [@valerymelou](https://github.com/valerymelou) (#648)

## 1.3.0 (2015-11-10) Pumpkin Spice

The goal of this release is to extend the user config feature and to make hook execution more robust.

New Features:

* Abort project generation if `pre_gen_project` or `post_gen_project` hook scripts fail, thanks to [@eliasdorneles](https://github.com/eliasdorneles) (#464, #549)
* Extend user config capabilities with additional cli options `--config-file` and `--default-config` and environment variable   `COOKIECUTTER_CONFIG`, thanks to [@jhermann](https://github.com/jhermann), [@pfmoore](https://github.com/pfmoore), and [@hackebrot](https://github.com/hackebrot) (#258, #424, #565)

Bug Fixes:

* Fixed conditional dependencies for wheels in setup.py, thanks to [@hackebrot](https://github.com/hackebrot) (#557, #568)
* Reverted skipif markers to use correct reasons (bug fixed in pytest), thanks to [@hackebrot](https://github.com/hackebrot)
(#574)

Other Changes:

* Improved path and documentation for rendering the Sphinx documentation, thanks to [@eliasdorneles](https://github.com/eliasdorneles) and [@hackebrot](https://github.com/hackebrot) (#562, #583)
* Added additional help entrypoints, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#563, #492)
* Added Two Scoops Academy to the README, thanks to [@hackebrot](https://github.com/hackebrot) (#576)
* Now handling trailing slash on URL, thanks to [@ramiroluz](https://github.com/ramiroluz) (#573, #546)
* Support for testing x86 and x86-64 architectures on appveyor, thanks to [@maiksensi](https://github.com/maiksensi) (#567)
* Made tests work without installing Cookiecutter, thanks to [@vincentbernat](https://github.com/vincentbernat) (#550)
* Encoded the result of the hook template to utf8, thanks to [@ionelmc](https://github.com/ionelmc) (#577. #578)
* Added test for \_run\_hook\_from\_repo\_dir, thanks to [@hackebrot](https://github.com/hackebrot) (#579, #580)
* Implemented bumpversion, thanks to [@hackebrot](https://github.com/hackebrot) (#582)
* Added more cookiecutter templates to the mix:
  * [cookiecutter-octoprint-plugin](https://github.com/OctoPrint/cookiecutter-octoprint-plugin) by [@foosel](https://github.com/foosel) (#560)
  * [wagtail-cookiecutter-foundation](https://github.com/chrisdev/wagtail-cookiecutter-foundation) by [@chrisdev](https://github.com/chrisdev), et al. (#566)

## 1.2.1 (2015-10-18) Zimtsterne

*Zimtsterne are cinnamon star cookies.*

New Feature:

* Returns rendered project dir, thanks to [@hackebrot](https://github.com/hackebrot) (#553)

Bug Fixes:

* Factor in *choice* variables (as introduced in 1.1.0) when using a user config or extra context, thanks to [@ionelmc](https://github.com/ionelmc) and [@hackebrot](https://github.com/hackebrot) (#536, #542).

Other Changes:

* Enable py35 support on Travis by using Python 3.5 as base Python ([@maiksensi](https://github.com/maiksensi) / #540)
* If a filename is empty, do not generate. Log instead ([@iljabauer](https://github.com/iljabauer) / #444)
* Fix tests as per last changes in [cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage), thanks to [@eliasdorneles](https://github.com/eliasdorneles)(#555).
* Removed deprecated cookiecutter-pylibrary-minimal from the list, thanks to [@ionelmc](https://github.com/ionelmc) (#556)
* Moved to using rualmel.yaml instead of PyYAML, except for Windows users on Python 2.7, thanks
    to [@pydanny](https://github.com/pydanny) (#557)

*Why 1.2.1 instead of 1.2.0? There was a problem in the distribution that we pushed to PyPI. Since you can\'t replace previous files uploaded to PyPI, we deleted the files on PyPI and released 1.2.1.*

## 1.1.0 (2015-09-26) Snickerdoodle

The goals of this release were ```copy without render``` and a few additional command-line options such as ```--overwrite-if-exists```, ```---replay```, and ```output-dir```.

Features:

* Added [copy without render](http://cookiecutter.readthedocs.io/en/latest/advanced_usage.html#copy-without-render) feature, making it much easier for developers of Ansible, Salt Stack, and other recipe-based tools to work with Cookiecutter. Thanks to [@osantana](https://github.com/osantana) and [@LucianU](https://github.com/LucianU) for their innovation, as well as [@hackebrot](https://github.com/hackebrot) for fixing the Windows problems (#132, #184, #425).
* Added specify output directory, thanks to [@tony](https://github.com/tony) and [@hackebrot](https://github.com/hackebrot) (#531, #452).
* Abort template rendering if the project output directory already exists, thanks to [@lgp171188](https://github.com/lgp171188)
(#470, #471).
* Add a flag to overwrite existing output directory, thanks to [@lgp171188](https://github.com/lgp171188) for the implementation (#495) and [@schacki](https://github.com/schacki), [@ionelmc](https://github.com/ionelmc), [@pydanny](https://github.com/pydanny) and [@hackebrot](https://github.com/hackebrot) for submitting issues and code reviews (#475, #493).
* Remove test command in favor of tox, thanks to [@hackebrot](https://github.com/hackebrot) (#480).
* Allow cookiecutter invocation, even without installing it, via `python -m cookiecutter.cli`, thanks to [@vincentbernat](https://github.com/vincentbernat) and [@hackebrot](https://github.com/hackebrot) (#449, #487).
* Improve the type detection handler for online and offline repositories, thanks to [@charlax](https://github.com/charlax)
(#490).
* Add replay feature, thanks to [@hackebrot](https://github.com/hackebrot) (#501).
* Be more precise when raising an error for an invalid user config file, thanks to [@vaab](https://github.com/vaab) and [@hackebrot](https://github.com/hackebrot) (#378, #528).
* Added official Python 3.5 support, thanks to [@pydanny](https://github.com/pydanny) and [@hackebrot](https://github.com/hackebrot) (#522).
* Added support for *choice* variables and switch to click style prompts, thanks to [@hackebrot](https://github.com/hackebrot) (#441, #455).

Other Changes:

* Updated click requirement to \< 6.0, thanks to [@pydanny](https://github.com/pydanny) (#473).
* Added landscape.io flair, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#439).
* Descriptions of PEP8 specifications and milestone management, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#440).
  * Added alternate installation options in the documentation, thanks to [@pydanny](https://github.com/pydanny) (#117, #315).
* The test of the which() function now tests against the date command, thanks to [@vincentbernat](https://github.com/vincentbernat) (#446)
* Ensure file handles in setup.py are closed using with statement, thanks to [@svisser](https://github.com/svisser) (#280).
* Removed deprecated and fully extraneous compat.is\_exe() function, thanks to [@hackebrot](https://github.com/hackebrot) (#485).
* Disabled sudo in .travis, thanks to [@hackebrot](https://github.com/hackebrot) (#482).
* Switched to shields.io for problematic badges, thanks to [@pydanny](https://github.com/pydanny) (#491).
* Added whichcraft and removed `compat.which()`, thanks to [@pydanny](https://github.com/pydanny) (#511).
* Changed to export tox environment variables to codecov, thanks to [@maiksensi](https://github.com/maiksensi). (#508).
* Moved to using click version command, thanks to [@hackebrot](https://github.com/hackebrot) (#489).
* Don\'t use unicode\_literals to please click, thanks to [@vincentbernat](https://github.com/vincentbernat) (#503).
* Remove warning for Python 2.6 from \_\_init\_\_.py, thanks to [@hackebrot](https://github.com/hackebrot).
* Removed compat.py module, thanks to [@hackebrot](https://github.com/hackebrot).
* Added future to requirements, thanks to [@hackebrot](https://github.com/hackebrot).
* Fixed problem where expanduser does not resolve \"\~\" correctly on windows 10 using tox, thanks to [@maiksensi](https://github.com/maiksensi). (#527)

* Added more cookiecutter templates to the mix:
  * [cookiecutter-beamer](https://github.com/luismartingil/cookiecutter-beamer) by [@luismartingil](https://github.com/luismartingil) (#307)
  * [cookiecutter-pytest-plugin](https://github.com/pytest-dev/cookiecutter-pytest-plugin) by [@pytest-dev](https://github.com/pytest-dev) and
        [@hackebrot](https://github.com/hackebrot) (#481)
  * [cookiecutter-csharp-objc-binding](https://github.com/SandyChapman/cookiecutter-csharp-objc-binding) by [@SandyChapman](https://github.com/SandyChapman) (#460)
  * [cookiecutter-flask-foundation](https://github.com/JackStouffer/cookiecutter-Flask-Foundation) by [@JackStouffer](https://github.com/JackStouffer) (#457)
  * [cookiecutter-tryton-fulfilio](https://github.com/fulfilio/cookiecutter-tryton) by [@fulfilio](https://github.com/fulfilio) (#465)
  * [cookiecutter-tapioca](https://github.com/vintasoftware/cookiecutter-tapioca) by [@vintasoftware](https://github.com/vintasoftware) (#496)
  * [cookiecutter-sublime-text-3-plugin](https://github.com/kkujawinski/cookiecutter-sublime-text-3-plugin) by [@kkujawinski](https://github.com/kkujawinski) (#500)
  * [cookiecutter-muffin](https://github.com/drgarcia1986/cookiecutter-muffin) by [@drgarcia1986](https://github.com/drgarcia1986) (#494)
  * [cookiecutter-django-rest](https://github.com/agconti/cookiecutter-django-rest) by [@agconti](https://github.com/agconti) (#520)
  * [cookiecutter-es6-boilerplate](https://github.com/agconti/cookiecutter-es6-boilerplate) by [@agconti](https://github.com/agconti) (#521)
  * [cookiecutter-tampermonkey](https://github.com/christabor/cookiecutter-tampermonkey) by [@christabor](https://github.com/christabor) (#516)
  * [cookiecutter-wagtail](https://github.com/torchbox/cookiecutter-wagtail) by [@torchbox](https://github.com/torchbox) (#533)

## 1.0.0 (2015-03-13) Chocolate Chip

The goals of this release was to formally remove support for Python 2.6 and continue the move to using py.test.

Features:

* Convert the unittest suite to py.test for the sake of comprehensibility, thanks to [@hackebrot](https://github.com/hackebrot) (#322, #332, #334, #336, #337, #338, #340, #341, #343, #345, #347, #351, #412, #413, #414).
* Generate pytest coverage, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#326).
* Documenting of Pull Request merging and HISTORY.rst maintenance, thanks to [@michaeljoseph](https://github.com/michaeljoseph)
(#330).
* Large expansions to the tutorials thanks to [@hackebrot](https://github.com/hackebrot) (#384)
* Switch to using Click for command-line options, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#391, #393).
* Added support for working with private repos, thanks to [@marctc](https://github.com/marctc) (#265).
* Wheel configuration thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#118).

Other Changes:

* Formally removed support for 2.6, thanks to [@pydanny](https://github.com/pydanny) (#201).
* Moved to codecov for continuous integration test coverage and badges, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#71, #369).
* Made JSON parsing errors easier to debug, thanks to [@rsyring](https://github.com/rsyring) and [@mark0978](https://github.com/mark0978) (#355, #358, #388).
* Updated to Jinja 2.7 or higher in order to control trailing new lines in templates, thanks to [@sfermigier](https://github.com/sfermigier) (#356).
* Tweaked flake8 to ignore e731, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#390).
* Fixed failing Windows tests and corrected AppVeyor badge link thanks to [@msabramo](https://github.com/msabramo) (#403).

* Added more Cookiecutters to the list:
  * [cookiecutter-scala-spark](https://github.com/jpzk/cookiecutter-scala-spark) by [@jpzk](https://github.com/jpzk)
  * [cookiecutter-atari2600](https://github.com/joeyjoejoejr/cookiecutter-atari2600) by [@joeyjoejoejr](https://github.com/joeyjoejoejr)
  * [cookiecutter-bottle](https://github.com/avelino/cookiecutter-bottle) by [@avelino](https://github.com/avelino)
  * [cookiecutter-latex-article](https://github.com/Kreger51/cookiecutter-latex-article) by [@Kreger51](https://github.com/Kreger51)
  * [cookiecutter-django-rest-framework](https://github.com/jpadilla/cookiecutter-django-rest-framework) by [@jpadilla](https://github.com/jpadilla)
  * [cookiedozer](https://github.com/hackebrot/cookiedozer) by [@hackebrot](https://github.com/hackebrot)

## 0.9.0 (2015-01-13)

The goals of this release were to add the ability to Jinja2ify the cookiecutter.json default values, and formally launch support for Python 3.4.

Features:

* Python 3.4 is now a first class citizen, thanks to everyone.
* cookiecutter.json values are now rendered Jinja2 templates, thanks to \@bollwyvl (#291).
* Move to py.test, thanks to [@pfmoore](https://github.com/pfmoore) (#319) and [@ramiroluz](https://github.com/ramiroluz) (#310).
* Add PendingDeprecation warning for users of Python 2.6, as support for it is gone in Python 2.7, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#201).

Bug Fixes:

* Corrected typo in Makefile, thanks to [@inglesp](https://github.com/inglesp) (#297).
* Raise an exception when users don\'t have git or hg installed, thanks to [@pydanny](https://github.com/pydanny) (#303).

Other changes:

* Creation of [gitter](https://gitter.im/audreyr/cookiecutter) account for logged chat, thanks to [@michaeljoseph](https://github.com/michaeljoseph).
* Added ReadTheDocs badge, thanks to [@michaeljoseph](https://github.com/michaeljoseph).
* Added AppVeyor badge, thanks to [@pydanny](https://github.com/pydanny)
* Documentation and PyPI trove classifier updates, thanks to [@thedrow](https://github.com/thedrow) (#323 and #324)

## 0.8.0 (2014-10-30)

The goal of this release was to allow for injection of extra context via the Cookiecutter API, and to fix minor bugs.

Features:

* cookiecutter() now takes an optional extra\_context parameter, thanks to [@michaeljoseph](https://github.com/michaeljoseph), [@fcurella](https://github.com/fcurella), [@aventurella](https://github.com/aventurella),  [@emonty](https://github.com/emonty), [@schacki](https://github.com/schacki), [@ryanolson](https://github.com/ryanolson), [@pfmoore](https://github.com/pfmoore), [@pydanny](https://github.com/pydanny), [@audreyr](https://github.com/audreyr) (#260).
* Context is now injected into hooks, thanks to [@michaeljoseph](https://github.com/michaeljoseph) and [@dinopetrone](https://github.com/dinopetrone).
* Moved all Python 2/3 compatibility code into cookiecutter.compat, making the eventual move to six easier, thanks to [@michaeljoseph](https://github.com/michaeljoseph) (#60, #102).
* Added cookiecutterrc defined aliases for cookiecutters, thanks to [@pfmoore](https://github.com/pfmoore) (#246)
* Added flake8 to tox to check for pep8 violations, thanks to [@natim](https://github.com/Natim).

Bug Fixes:

* Newlines at the end of files are no longer stripped, thanks to [@treyhunner](https://github.com/treyhunner) (#183).
* Cloning prompt suppressed by respecting the ```no\_input``` flag, thanks to [@trustrachel](https://github.com/trustrachel) (#285)
* With Python 3, input is no longer converted to bytes, thanks to [@uranusjr](https://github.com/uranusjr) (#98).

Other Changes:

* Added more Cookiecutters to the list:
  * [Python-iOS-template](https://github.com/pybee/Python-iOS-template) by [@freakboy3742](https://github.com/freakboy3742)
  * [Python-Android-template](https://github.com/pybee/Python-Android-template) by [@freakboy3742](https://github.com/freakboy3742)
  * [cookiecutter-djangocms-plugin](https://github.com/mishbahr/cookiecutter-djangocms-plugin) by [@mishbahr](https://github.com/mishbahr)
  * [cookiecutter-pyvanguard](https://github.com/robinandeer/cookiecutter-pyvanguard) by [@robinandeer](https://github.com/robinandeer)

## 0.7.2 (2014-08-05)

The goal of this release was to fix cross-platform compatibility, primarily Windows bugs that had crept in during the addition of new
features. As of this release, Windows is a first-class citizen again, now complete with continuous integration.

Bug Fixes:

* Fixed the contributing file so it displays nicely in Github, thanks to [@pydanny](https://github.com/pydanny).
* Updates 2.6 requirements to include simplejson, thanks to [@saxix](https://github.com/saxix).
* Avoid unwanted extra spaces in string literal, thanks to [@merwok](https://github.com/merwok).
* Fix @unittest.skipIf error on Python 2.6.
* Let sphinx parse :param: properly by inserting newlines #213, thanks to [@mineo](https://github.com/mineo).
* Fixed Windows test prompt failure by replacing stdin per [@cjrh](https://github.com/cjrh) in #195.
* Made rmtree remove readonly files, thanks to [@pfmoore](https://github.com/pfmoore).
* Now using tox to run tests on Appveyor, thanks to [@pfmoore](https://github.com/pfmoore) (#241).
* Fixed tests that assumed the system encoding was utf-8, thanks to [@pfmoore](https://github.com/pfmoore) (#242, #244).
* Added a tox ini file that uses py.test, thanks to [@pfmoore](https://github.com/pfmoore) (#245).

Other Changes:

* [@audreyr](https://github.com/audreyr) formally accepted position as **BDFL of cookiecutter**.
* Elevated [@pydanny](https://github.com/pydanny), [@michaeljoseph](https://github.com/michaeljoseph), and [@pfmoore](https://github.com/pfmoore) to core committer status.
* Added Core Committer guide, by [@audreyr](https://github.com/audreyr).
* Generated apidocs from make docs, by [@audreyr](https://github.com/audreyr).
* Added contributing command to the makedocs function, by [@pydanny](https://github.com/pydanny).
* Refactored contributing documentation, included adding core committer instructions, by [@pydanny](https://github.com/pydanny) and [@audreyr](https://github.com/audreyr).
* Do not convert input prompt to bytes, thanks to [@uranusjr](https://github.com/uranusjr) (#192).
* Added troubleshooting info about Python 3.3 tests and tox.
* Added documentation about command line arguments, thanks to [@saxix](https://github.com/saxix).
* Style cleanups.
* Added environment variable to disable network tests for environments without networking, thanks to [@vincentbernat](https://github.com/vincentbernat).
* Added Appveyor support to aid Windows integrations, thanks to [@pydanny](https://github.com/pydanny) (#215).
* CONTRIBUTING.rst is now generated via make contributing, thanks to [@pydanny](https://github.com/pydanny) (#220).
* Removed unnecessary endoing argument to json.load, thanks to [@pfmoore](https://github.com/pfmoore) (#234).
* Now generating shell hooks dynamically for Unix/Windows portability, thanks to [@pfmoore](https://github.com/pfmoore) (#236).
* Removed non-portable assumptions about directory structure, thanks to [@pfmoore](https://github.com/pfmoore) (#238).
* Added a note on portability to the hooks documentation, thanks to [@pfmoore](https://github.com/pfmoore) (#239).
* Replaced unicode\_open with direct use of io.open, thanks to [@pfmoore](https://github.com/pfmoore) (#229).
* Added more Cookiecutters to the list:
  * [cookiecutter-kivy](https://github.com/hackebrot/cookiecutter-kivy) by [@hackebrot](https://github.com/hackebrot)
  * [BoilerplatePP](https://github.com/Paspartout/BoilerplatePP) by [@Paspartout](https://github.com/Paspartout)
  * [cookiecutter-pypackage-minimal](https://github.com/kragniz/cookiecutter-pypackage-minimal) by [@borntyping](https://github.com/borntyping)
  * [cookiecutter-ansible-role](https://github.com/iknite/cookiecutter-ansible-role) by [@iknite](https://github.com/iknite)
  * [cookiecutter-pylibrary](https://github.com/ionelmc/cookiecutter-pylibrary) by [@ionelmc](https://github.com/ionelmc)
  * [cookiecutter-pylibrary-minimal](https://github.com/ionelmc/cookiecutter-pylibrary-minimal) by [@ionelmc](https://github.com/ionelmc)

## 0.7.1 (2014-04-26)

Bug fixes:

* Use the current Python interpreter to run Python hooks, thanks to [@coderanger](https://github.com/coderanger).
* Include tests and documentation in source distribution, thanks to [@vincentbernat](https://github.com/vincentbernat).
* Fix various warnings and missing things in the docs (#129, #130), thanks to [@nedbat](https://github.com/nedbat).
* Add command line option to get version (#89), thanks to [@davedash](https://github.com/davedash) and [@cyberj](https://github.com/cyberj).

Other changes:

* Add more Cookiecutters to the list:
  * [cookiecutter-avr](https://github.com/solarnz/cookiecutter-avr) by [@solarnz](https://github.com/solarnz)
  * [cookiecutter-tumblr-theme](https://github.com/relekang/cookiecutter-tumblr-theme) by [@relekang](https://github.com/relekang)
  * [cookiecutter-django-paas](https://github.com/pbacterio/cookiecutter-django-paas) by [@pbacterio](https://github.com/pbacterio)

## 0.7.0 (2013-11-09)

This is a release with significant improvements and changes. Please read through this list before you upgrade.

New features:

* Support for \--checkout argument, thanks to [@foobacca](https://github.com/foobacca/).
* Support for pre-generate and post-generate hooks, thanks to [@raphigaziano](https://github.com/raphigaziano/). Hooks are Python or shell scripts that run before and/or after your project is generated.
* Support for absolute paths to cookiecutters, thanks to [@krallin](https://github.com/krallin/).
* Support for Mercurial version control system, thanks to [@pokoli](https://github.com/pokoli/).
* When a cookiecutter contains invalid Jinja2 syntax, you get a better message that shows the location of the TemplateSyntaxError. Thanks
to [@benjixx](https://github.com/benjixx/).
* Can now prompt the user to enter values during generation from a local cookiecutter, thanks to [@ThomasChiroux](https://github.com/ThomasChiroux/). This is now always the default behavior. Prompts can also be suppressed with ```--no-input```.
* Your cloned cookiecutters are stored by default in your ~/.cookiecutters/ directory (or Windows equivalent). The location is configurable. (This is a major change from the pre-0.7.0 behavior, where cloned cookiecutters were deleted at the end of project generation.) Thanks [@raphigaziano](https://github.com/raphigaziano/).
* User config in a \~/.cookiecutterrc file, thanks to [@raphigaziano](https://github.com/raphigaziano/). Configurable settings are cookiecutters\_dir and default\_context.
* File permissions are now preserved during project generation, thanks to [@benjixx](https://github.com/benjixx/).

Bug fixes:

* Unicode issues with prompts and answers are fixed, thanks to [@s-m-i-t-a](https://github.com/s-m-i-t-a/).
* The test suite now runs on Windows, which was a major effort. Thanks to [@pydanny](https://github.com/pydanny), who collaborated on this with me.

Other changes:

* Quite a bit of refactoring and API changes.
* Lots of documentation improvements. Thanks [@sloria](https://github.com/sloria/), [@alex](https://github.com/alex/), [@pydanny](https://github.com/pydanny), [@freakboy3742](https://github.com/freakboy3742), [@es128](https://github.com/es128/), [@rolo](https://github.com/rolo/).
* Better naming and organization of test suite.
* A CookiecutterCleanSystemTestCase to use for unit tests affected by the user\'s config and cookiecutters directory.
* Improvements to the project\'s Makefile.
* Improvements to tests. Thanks [@gperetin](https://github.com/gperetin/), [@s-m-i-t-a](https://github.com/s-m-i-t-a/).
* Removal of subprocess32 dependency. Now using non-context manager version of subprocess.Popen for Python 2 compatibility.
* Removal of cookiecutter\'s cleanup module.
* A bit of setup.py cleanup, thanks to [@oubiga](https://github.com/oubiga/).
* Now depends on binaryornot 0.2.0.

## 0.6.4 (2013-08-21)

* Windows support officially added.
* Fix TemplateNotFound Exception on Windows (#37).

## 0.6.3 (2013-08-20)

* Fix copying of binary files in nested paths (#41), thanks to [@sloria](https://github.com/sloria/).

## 0.6.2 (2013-08-19)

* Depend on Jinja2\>=2.4 instead of Jinja2==2.7.
* Fix errors on attempt to render binary files. Copy them over from the project template without rendering.
* Fix Python 2.6/2.7 UnicodeDecodeError when values containing Unicode chars are in cookiecutter.json.
* Set encoding in Python 3 unicode_open() to always be utf-8.

## 0.6.1 (2013-08-12)

* Improved project template finding. Now looks for the occurrence of {{,cookiecutter, and }} in a directory name.
* Fix help message for input_dir arg at command prompt.
* Minor edge cases found and corrected, as a result of improved test coverage.

## 0.6.0 (2013-08-08)

* Config is now in a single ```cookiecutter.json``` instead of in ```json/```.
* When you create a project from a git repo template, Cookiecutter prompts you to enter custom values for the fields defined in ```cookiecutter.json```.

## 0.5 (2013-07-28)

* Friendlier, more simplified command line usage:

```bash
    # Create project from the cookiecutter-pypackage/ template
    $ cookiecutter cookiecutter-pypackage/
    # Create project from the cookiecutter-pypackage.git repo template
    $ cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git
```  

* Can now use Cookiecutter from Python as a package:

```python
    from cookiecutter.main import cookiecutter

    # Create project from the cookiecutter-pypackage/ template
    cookiecutter('cookiecutter-pypackage/')

    # Create project from the cookiecutter-pypackage.git repo template
    cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git')
```

* Internal refactor to remove any code that changes the working
    directory.

## 0.4 (2013-07-22)

* Only takes in one argument now: the input directory. The output directory is generated by rendering the name of the input directory.
* Output directory cannot be the same as input directory.

## 0.3 (2013-07-17)

* Takes in command line args for the input and output directories.

## 0.2.1 (2013-07-17)

* Minor cleanup.

## 0.2 (2013-07-17)

Bumped to "Development Status :: 3 - Alpha".

* Works with any type of text file.
* Directory names and filenames can be templated.

## 0.1.0 (2013-07-11)

* First release on PyPI.
Copyright (c) 2013-2017, Audrey Roy
All rights reserved.

Redistribution and use in source and binary forms, with or
without modification, are permitted provided that the following
conditions are met:

* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.

* Neither the name of border nor the names of its contributors
may be used to endorse or promote products derived from this
software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
# Cookiecutter

[![pypi](https://img.shields.io/pypi/v/cookiecutter.svg)](https://pypi.python.org/pypi/cookiecutter)
[![python](https://img.shields.io/pypi/pyversions/cookiecutter.svg)](https://pypi.python.org/pypi/cookiecutter)
[![Build Status](https://travis-ci.org/cookiecutter/cookiecutter.svg?branch=master)](https://travis-ci.org/cookiecutter/cookiecutter)
[![Appveyor](https://ci.appveyor.com/api/projects/status/github/cookiecutter/cookiecutter?branch=master&svg=true)](https://ci.appveyor.com/project/cookiecutter/cookiecutter/branch/master)
[![codecov](https://codecov.io/gh/cookiecutter/cookiecutter/branch/master/graphs/badge.svg?branch=master)](https://codecov.io/github/cookiecutter/cookiecutter?branch=master)
[![gitter](https://badges.gitter.im/JoinChat.svg)](https://gitter.im/audreyr/cookiecutter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
[![docs](https://readthedocs.org/projects/cookiecutter/badge/?version=latest)](https://readthedocs.org/projects/cookiecutter/?badge=latest)
[![Code Qaulity](https://img.shields.io/scrutinizer/g/cookiecutter/cookiecutter.svg)](https://scrutinizer-ci.com/g/cookiecutter/cookiecutter/?branch=master)

A command-line utility that creates projects from **cookiecutters** (project templates), e.g. creating a Python package project from a Python package project template.

* Documentation: [https://cookiecutter.readthedocs.io](https://cookiecutter.readthedocs.io)
* GitHub: [https://github.com/cookiecutter/cookiecutter](https://github.com/cookiecutter/cookiecutter)
* PyPI: [https://pypi.python.org/pypi/cookiecutter](https://pypi.python.org/pypi/cookiecutter)
* Free and open source software: [BSD license](https://github.com/cookiecutter/cookiecutter/blob/master/LICENSE)

![Cookiecutter](https://raw.githubusercontent.com/cookiecutter/cookiecutter/3ac078356adf5a1a72042dfe72ebfa4a9cd5ef38/logo/cookiecutter_medium.png)

We are proud to be an open source sponsor of [PyCon 2016](https://us.pycon.org/2016/sponsors/).

## Features

Did someone say features?

* Cross-platform: Windows, Mac, and Linux are officially supported.

* Works with Python 2.7, 3.5, 3.6, 3.7, and PyPy. *(But you don't have to know/write Python code to use Cookiecutter.)*

* Project templates can be in any programming language or markup format:  
  Python, JavaScript, Ruby, CoffeeScript, RST, Markdown, CSS, HTML, you name it. You can use multiple languages in the same project template.

* Simple command line usage:

```bash
# Create project from the cookiecutter-pypackage.git repo template
# You'll be prompted to enter values.
# Then it'll create your Python package in the current working directory,
# based on those values.
$ cookiecutter https://github.com/audreyr/cookiecutter-pypackage
# For the sake of brevity, repos on GitHub can just use the 'gh' prefix
$ cookiecutter gh:audreyr/cookiecutter-pypackage
```

* Use it at the command line with a local template:

```bash
# Create project in the current working directory, from the local
# cookiecutter-pypackage/ template
$ cookiecutter cookiecutter-pypackage/
```

* Or use it from Python:

```py
from cookiecutter.main import cookiecutter

# Create project from the cookiecutter-pypackage/ template
cookiecutter('cookiecutter-pypackage/')

# Create project from the cookiecutter-pypackage.git repo template
cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git')
```

* Directory names and filenames can be templated. For example:

```py
{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}.py
```

* Supports unlimited levels of directory nesting.

* 100% of templating is done with Jinja2. This includes file and directory names.

* Simply define your template variables in a ``cookiecutter.json`` file. For example:

```json
{
    "full_name": "Audrey Roy",
    "email": "audreyr@gmail.com",
    "project_name": "Complexity",
    "repo_name": "complexity",
    "project_short_description": "Refreshingly simple static site generator.",
    "release_date": "2013-07-10",
    "year": "2013",
    "version": "0.1.1"
}
```

* Unless you suppress it with ``--no-input``, you are prompted for input:

  * Prompts are the keys in ``cookiecutter.json``.
  * Default responses are the values in ``cookiecutter.json``.
  * Prompts are shown in order.

* Cross-platform support for ``~/.cookiecutterrc`` files:

```yaml
default_context:
full_name: "Audrey Roy"
email: "audreyr@gmail.com"
github_username: "audreyr"
cookiecutters_dir: "~/.cookiecutters/"
```

* Cookiecutters (cloned Cookiecutter project templates) are put into ``~/.cookiecutters/`` by default, or cookiecutters_dir if specified.

* If you have already cloned a cookiecutter into ``~/.cookiecutters/``, you can reference it by directory name:

```bash
# Clone cookiecutter-pypackage
$ cookiecutter gh:audreyr/cookiecutter-pypackage
# Now you can use the already cloned cookiecutter by name
$ cookiecutter cookiecutter-pypackage
```

* You can use local cookiecutters, or remote cookiecutters directly from Git repos or from Mercurial repos on Bitbucket.

* Default context: specify key/value pairs that you want used as defaults whenever you generate a project.

* Inject extra context with command-line arguments:

```bash
cookiecutter --no-input gh:msabramo/cookiecutter-supervisor program_name=foobar startsecs=10
```

* Direct access to the Cookiecutter API allows for injection of extra context.

* Pre- and post-generate hooks: Python or shell scripts to run before or after generating a project.

* Paths to local projects can be specified as absolute or relative.

* Projects are always generated to your current directory.

## Available Cookiecutters

Making great cookies takes a lot of cookiecutters and contributors. We're so pleased that there are many Cookiecutter project templates to choose from. We hope you find a cookiecutter that is just right for your needs.

### Cookiecutter Specials

These Cookiecutters are maintained by the cookiecutter team:

* [cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage): [@audreyr's](https://github.com/audreyr) ultimate Python package project template.
* [cookiecutter-django](https://github.com/pydanny/cookiecutter-django): A bleeding edge Django project template with Bootstrap 4, customizable users app, starter templates, working user registration, celery setup, and much more.
* [cookiecutter-pytest-plugin](https://github.com/pytest-dev/cookiecutter-pytest-plugin): Minimal Cookiecutter template for authoring [pytest](http://pytest.org/latest/) plugins that help you to write better programs.

### Categories of Cookiecutters

[Python](#python) | [Python-Django](#python-django) | [Python-Pyramid](#python-pyramid) | [Cookiecutter (meta)](#cookiecutter-meta) | [Ansible](#ansible) | [Git](#git) | [C](#c) | [C++](#c-1) | [C#](#c-sharp) | [Common Lisp](#common-lisp) | [Elm](#elm) | [Golang](#golang) | [Java](#java) | [JS](#js) | [Kotlin](#kotlin) | [LaTeX/XeTeX](#latexxetex) | [PHP](#php) | [Berkshelf-Vagrant](#berkshelf-vagrant) | [HTML](#html) | [Scala](#scala) | [6502 Assembly](#6502-Assembly) | [Data Science](#data-science) | [Tornado](#tornado) | [Reproducible Science](#reproducible-science) | [Continuous Delivery](#continuous-delivery)

If you don't find a cookiecutter that suits your needs here, please consider writing or suggesting one. We wish for our users to find a solution for their use cases, and we provide a list of other projects that we do not maintain for your convenience (please see the [Similar Projects](#similar-projects) section).

## Community

The core committer team can be found in [authors section](AUTHORS.md). We are always welcome and invite you to participate.

Stuck? Try one of the following:

* See the [Troubleshooting](https://cookiecutter.readthedocs.io/en/latest/troubleshooting.html) page.
* Ask for help on [Stack Overflow](https://stackoverflow.com/).
* You are strongly encouraged to [file an issue](https://github.com/cookiecutter/cookiecutter/issues?q=is%3Aopen) about the problem, even if it's just "I can't get it to work on this cookiecutter" with a link to your cookiecutter. Don't worry about naming/pinpointing the issue properly.
* Ask for help on [Gitter](https://gitter.im/audreyr/cookiecutter) if you must (but please try one of the other options first, so that others can benefit from the discussion).

Development on Cookiecutter is community-driven:

* Huge thanks to all the [contributors](AUTHORS.md) who have pitched in to help make Cookiecutter an even better tool.
* Everyone is invited to contribute. Read the [contributing instructions](CONTRIBUTING.md), then get started.

Connect with other Cookiecutter contributors and users on [Gitter](https://gitter.im/audreyr/cookiecutter):

* [https://gitter.im/audreyr/cookiecutter](https://gitter.im/audreyr/cookiecutter) (note: due to work and commitments, a core committer might not always be available)

Encouragement is unbelievably motivating. If you want more work done on Cookiecutter, show support:

* Thank a core committer for their efforts.
* Star [Cookiecutter on GitHub](https://github.com/cookiecutter/cookiecutter).
* [Support this project](#support-this-project)

Got criticism or complaints?

* [File an issue](https://github.com/cookiecutter/cookiecutter/issues?q=is%3Aopen) so that Cookiecutter can be improved. Be friendly and constructive about what could be better. Make detailed suggestions.
* **Keep us in the loop so that we can help.** For example, if you are discussing problems with Cookiecutter on a mailing list, [file an issue](https://github.com/cookiecutter/cookiecutter/issues?q=is%3Aopen) where you link to the discussion thread and/or cc at least 1 core committer on the email.
* Be encouraging. A comment like "This function ought to be rewritten like this" is much more likely to result in action than a comment like "Eww, look how bad this function is."

Waiting for a response to an issue/question?

* Be patient and persistent. All issues are on the core committer team's radar and will be considered thoughtfully, but we have a lot of issues to work through. If urgent, it's fine to ping a core committer in the issue with a reminder.
* Ask others to comment, discuss, review, etc.
* Search the Cookiecutter repo for issues related to yours.
* Need a fix/feature/release/help urgently, and can't wait? [@audreyr](https://github.com/audreyr) is available for hire for consultation or custom development.

## Support This Project

This project is run by volunteers. Shortly we will be providing means for organizations and individuals to support the project.

## Code of Conduct

Everyone interacting in the Cookiecutter project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the [PyPA Code of Conduct](https://www.pypa.io/en/latest/code-of-conduct/).

## A Pantry Full of Cookiecutters

You can check all [cookiecutter templates](https://github.com/topics/cookiecutter-template) on GitHub. If you are template publisher keep in mind to add the ``cookiecutter-template`` topic to your repository and the correct language tags.

Please avoid creating PRs for listing additional templates. We outsourced their listing due to extra maintenance required to review them. We will likely replace the lists below with links to GitHub queries for each category.

### Python

* [cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage): [@audreyr](https://github.com/audreyr)'s ultimate Python package project template.
* [cookiecutter-pipproject](https://github.com/wdm0006/cookiecutter-pipproject): Minimal package for pip-installable projects.
* [cookiecutter-pypackage-minimal](https://github.com/kragniz/cookiecutter-pypackage-minimal): A minimal Python package template.
* [cookiecutter-lux-python](https://github.com/alexkey/cookiecutter-lux-python): A boilerplate Python project that aims to create Python package with a convenient Makefile-facility and additional helpers.
* [cookiecutter-flask](https://github.com/cookiecutter-flask/cookiecutter-flask) : A Flask template with Bootstrap 3, starter templates, and working user registration.
* [cookiecutter-flask-2](https://github.com/wdm0006/cookiecutter-flask): A heavier weight fork of cookiecutter-flask, with more boilerplate including forgotten password and Heroku integration.
* [cookiecutter-flask-foundation](https://github.com/JackStouffer/cookiecutter-Flask-Foundation) : Flask Template with caching, forms, sqlalchemy and unit-testing.
* [cookiecutter-flask-minimal](https://github.com/candidtim/cookiecutter-flask-minimal) : Minimal but production-ready Flask project template with no other dependencies except for Flask itself.
* [cookiecutter-flask-skeleton](https://github.com/realpython/cookiecutter-flask-skeleton) : Flask starter project.
* [cookiecutter-bottle](https://github.com/avelino/cookiecutter-bottle) : A cookiecutter template for creating reusable Bottle projects quickly.
* [cookiecutter-openstack](https://github.com/openstack/cookiecutter): A template for an OpenStack project.
* [cookiecutter-docopt](https://github.com/sloria/cookiecutter-docopt): A template for a Python command-line script that uses [docopt](http://docopt.org/) for arguments parsing.
* [cookiecutter-quokka-module](https://github.com/quokkaproject/cookiecutter-quokka-module): A template to create a blueprint module for Quokka Flask CMS.
* [cookiecutter-kivy](https://github.com/hackebrot/cookiecutter-kivy): A template for NUI applications built upon the kivy python-framework.
* [cookiedozer](https://github.com/hackebrot/cookiedozer): A template for Python Kivy apps ready to be deployed to android devices with Buildozer.
* [cookiecutter-pylibrary](https://github.com/ionelmc/cookiecutter-pylibrary): An intricate template designed to quickly get started with good testing and packaging (working configuration for Tox, Pytest, Travis-CI, Coveralls, AppVeyor, Sphinx docs, isort, bumpversion, packaging checks etc).
* [cookiecutter-pyvanguard](https://github.com/robinandeer/cookiecutter-pyvanguard): A template for cutting edge Python development. [Invoke](http://docs.pyinvoke.org/en/latest/), pytest, bumpversion, and Python 2/3 compatibility.
* [Python-iOS-template](https://github.com/beeware/Python-iOS-template): A template to create a Python project that will run on iOS devices.
* [Python-Android-template](https://github.com/beeware/Python-Android-template): A template to create a Python project that will run on Android devices.
* [cookiecutter-tryton](https://bitbucket.org/tryton/cookiecutter-tryton/src/default/): A template to create base and external Tryton modules.
* [cookiecutter-tryton-fulfilio](https://github.com/trytonus/cookiecutter-tryton): A template for creating tryton modules.
* [cookiecutter-pytest-plugin](https://github.com/pytest-dev/cookiecutter-pytest-plugin): Minimal Cookiecutter template for authoring [pytest](http://pytest.org/latest/) plugins that help you to write better programs.
* [cookiecutter-tox-plugin](https://github.com/tox-dev/cookiecutter-tox-plugin): Minimal Cookiecutter template for authoring [tox](https://tox.readthedocs.io/en/latest/) plugins to change or extend the behavior of your test automation.
* [cookiecutter-tapioca](https://github.com/vintasoftware/cookiecutter-tapioca): A Template for building [tapioca-wrapper](https://github.com/vintasoftware/tapioca-wrapper) based web API wrappers (clients).

* [cookiecutter-muffin](https://github.com/drgarcia1986/cookiecutter-muffin): A Muffin template with Bootstrap 3, starter templates, and working user registration.
* [cookiecutter-octoprint-plugin](https://github.com/OctoPrint/cookiecutter-octoprint-plugin): A template for building plugins for [OctoPrint](https://github.com/foosel/OctoPrint).
* [cookiecutter-funkload-friendly](https://github.com/tokibito/cookiecutter-funkload-friendly): Cookiecutter template for a [funkload-friendly](https://github.com/tokibito/funkload-friendly) project.
* [cookiecutter-python-app](https://github.com/mdklatt/cookiecutter-python-app): A template to create a Python CLI application with subcommands, logging, YAML configuration, pytest tests, and Virtualenv deployment.
* [morepath-cookiecutter](https://github.com/morepath/morepath-cookiecutter): Cookiecutter template for Morepath, the web microframework with superpowers.
* [Springerle/hovercraft-slides](https://github.com/Springerle/hovercraft-slides): A template for new [Hovercraft!](https://hovercraft.readthedocs.io/en/latest/) presentation projects (``impress.js`` slides in *re*\ Structured\ *Text*).
* [cookiecutter-snakemake-analysis-pipeline](https://github.com/xguse/cookiecutter-snakemake-analysis-pipeline): One way to easily set up [Snakemake](https://bitbucket.org/snakemake/snakemake/wiki/Home)-based analysis pipelines.
* [cookiecutter-py3tkinter](https://github.com/ivanlyon/cookiecutter-py3tkinter): Template for Python 3 Tkinter application gui.
* [cookiecutter-pyqt5](https://github.com/mandeep/cookiecutter-pyqt5): A prebuilt PyQt5 GUI template with a fully featured Pytest test suite and Travis CI integration all in an optimal Python package.
* [cookiecutter-pyqt4](https://github.com/aeroaks/cookiecutter-pyqt4): A prebuilt PyQt4 GUI template with a logging support, structure for tests and separation of ui and worker components.
* [cookiecutter-xontrib](https://github.com/laerus/cookiecutter-xontrib): A template for building xontribs, a.k.a [xonsh](https://github.com/xonsh/xonsh) contributions.
* [cookiecutter-conda-python](https://github.com/conda/cookiecutter-conda-python): A template for building Conda Python packages.
* [cookiecutter-pypackage-rust-cross-platform-publish](https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish): A template for a Python wheel containing a Rust binary module that supports releasing on Windows, OSX and Linux.
* [cookiecutter-telegram-bot](https://github.com/Ars2014/cookiecutter-telegram-bot): A template project for Telegram bots with webhooks on CherryPy.
* [python-project-template](https://github.com/Kwpolska/python-project-template): A template for Python projects with sophisticated release automation.
* [cookiecutter-anyblok-project](https://github.com/AnyBlok/cookiecutter-anyblok-project): A template for Anyblok based projects.
* [cookiecutter-python-cli](https://github.com/xuanluong/cookiecutter-python-cli): A cookiecutter template for creating a Python CLI application using click.

### Python-Django

* [cookiecutter-django](https://github.com/pydanny/cookiecutter-django): A bleeding edge Django project template with Bootstrap 4, customizable users app, starter templates, working user registration, celery setup, and much more.
* [cookiecutter-django-rest](https://github.com/agconti/cookiecutter-django-rest): For creating REST apis for mobile and web applications.
* [cookiecutter-simple-django](https://github.com/marcofucci/cookiecutter-simple-django): A cookiecutter template for creating reusable Django projects quickly.
* [django-docker-bootstrap](https://github.com/legios89/django-docker-bootstrap): Django development/production environment with docker, integrated with Postgres, NodeJS(React), Nginx, uWSGI.
* [cookiecutter-djangopackage](https://github.com/pydanny/cookiecutter-djangopackage): A template designed to create reusable third-party PyPI friendly Django apps. Documentation is written in tutorial format.
* [cookiecutter-django-cms](https://github.com/palazzem/cookiecutter-django-cms): A template for Django CMS with simple Bootstrap 3 template. It has a quick start and deploy documentation.
* [cookiecutter-django-crud](https://github.com/wildfish/cookiecutter-django-crud): A template to create a Django app with boilerplate CRUD around a model including a factory and tests.
* [cookiecutter-django-lborgav](https://github.com/lborgav/cookiecutter-django): Another cookiecutter template for Django project with Bootstrap 3 and FontAwesome 4.
* [cookiecutter-django-paas](https://github.com/pbacterio/cookiecutter-django-paas): Django template ready to use in PAAS platforms like Heroku, OpenShift, etc..
* [cookiecutter-django-rest-framework](https://github.com/jpadilla/cookiecutter-django-rest-framework): A template for creating reusable Django REST Framework packages.
* [cookiecutter-django-aws-eb](https://github.com/dolphinkiss/cookiecutter-django-aws-eb): Get up and running with Django on AWS Elastic Beanstalk.
* [cookiecutter-wagtail](https://github.com/torchbox/cookiecutter-wagtail): A cookiecutter template for [Wagtail](https://github.com/wagtail/wagtail) CMS based sites.
* [wagtail-cookiecutter-foundation](https://github.com/chrisdev/wagtail-cookiecutter-foundation): A complete template for Wagtail CMS projects featuring [Zurb Foundation](https://foundation.zurb.com/) 6, ansible provisioning and deployment , front-end dependency management with bower, modular apps to get your site up and running including photo_gallery, RSS feed etc.
* [django-starter](https://github.com/tkjone/starterkit-django): A Django template complete with vagrant and provisioning scripts - inspired by 12 factor apps and cookiecutter-django.
* [cookiecutter-django-gulp](https://github.com/valerymelou/cookiecutter-django-gulp): A Cookiecutter template for integrating frontend development tools in Django projects.
* [wagtail-starter-kit](https://github.com/tkjone/starterkit-wagtail): A cookiecutter complete with wagtail, django layout, vagrant, provisioning scripts, front end build system and more!
* [cookiecutter-django-herokuapp](https://github.com/dulacp/cookiecutter-django-herokuapp): A Django 1.7+ template optimized for Python 3 on Heroku.
* [cookiecutter-simple-django-cn](https://github.com/shenyushun/cookiecutter-simple-django-cn): A simple Django templates for chinese.
* [cc_django_ember_app](https://bitbucket.org/levit_scs/cc_django_ember_app/src/master/): For creating applications with Django and EmberJS.
* [cc_project_app_drf](https://bitbucket.org/levit_scs/cc_project_app_drf/src/master/): For creating REST apis based on the "project app" project architecture.
* [cc_project_app_full_with_hooks](https://bitbucket.org/levit_scs/cc_project_app_full_with_hooks/src/master/): For creating Django projects using the "project app" project architecture.
* [cc-automated-drf-template](https://github.com/TAMU-CPT/cc-automated-drf-template): A template + script that automatically creates your Django REST project with serializers, views, urls, and admin files based on your models file as input.
* [cookiecutter-django-foundation](https://github.com/Parbhat/cookiecutter-django-foundation): Fork of [cookiecutter-django](https://github.com/pydanny/cookiecutter-django) based on [Zurb Foundation](https://foundation.zurb.com/) 6 front-end framework.
* [cookiecutter-django-ansible](https://github.com/HackSoftware/cookiecutter-django-ansible): Cookiecutter Django Ansible is a framework for jumpstarting an ansible project for provisioning a server that is ready for your *cookiecutter-django* application.
* [wemake-django-template](https://github.com/wemake-services/wemake-django-template): Bleeding edge Django template focused on code quality and security.
* [cookiecutter-django-dokku](https://github.com/mashrikt/cookiecutter-django-dokku): A template for jumpstarting Django projects and deploying with Dokku.

### Python-Pyramid

* [pyramid-cookiecutter-alchemy](https://github.com/Pylons/pyramid-cookiecutter-alchemy): A Cookiecutter (project template) for creating a Pyramid project using SQLite for persistent storage SQLAlchemy for an ORM, URL dispatch for routing, and Jinja2 for templating.
* [pyramid-cookiecutter-starter](https://github.com/Pylons/pyramid-cookiecutter-starter): A Cookiecutter (project template) for creating a Pyramid starter project using URL dispatch for routing and either Jinja2, Chameleon, or Mako for templating.
* [pyramid-cookiecutter-zodb](https://github.com/Pylons/pyramid-cookiecutter-zodb): A Cookiecutter (project template) for creating a Pyramid project using ZODB for persistent storage traversal for routing, and Chameleon for templating.
* [substanced-cookiecutter](https://github.com/Pylons/substanced-cookiecutter): A cookiecutter (project template) for creating a Substance D starter project. Substance D is built on top of Pyramid.
* [cookiecutter-pyramid-talk-python-starter](https://github.com/mikeckennedy/cookiecutter-pyramid-talk-python-starter): An opinionated Cookiecutter template for creating Pyramid web applications starting way further down the development chain. This cookiecutter template will create a new Pyramid web application with email, sqlalchemy, rollbar, and way more integrated.

### Cookiecutter (meta)

Meta-templates for generating Cookiecutter project templates.

* [cookiecutter-template](https://github.com/eviweb/cookiecutter-template): Cookiecutter template for creating a... cookiecutter template...

### Ansible

* [cookiecutter-molecule](https://github.com/retr0h/cookiecutter-molecule): Create [Molecule](https://molecule.readthedocs.io/en/v2/) roles following community best practices, with an already implemented test infrastructure leveraging [Molecule](https://molecule.readthedocs.io/en/v2/), Docker and Testinfra.
* [cookiecutter-ansible-role](https://github.com/iknite/cookiecutter-ansible-role): A template to create ansible roles. Forget about file creation and focus on actions.
* [cookiecutter-ansible-role-ci](https://github.com/ferrarimarco/cookiecutter-ansible-role): Create Ansible roles following best practices, with an already implemented test infrastructure leveraging Test-kitchen, Docker and InSpec.

### Git

* [cookiecutter-git](https://github.com/NathanUrwin/cookiecutter-git): Git repo project template :clipboard.

### C

* [bootstrap.c](https://github.com/vincentbernat/bootstrap.c): A template for simple projects written in C with autotools.
* [cookiecutter-avr](https://github.com/solarnz/cookiecutter-avr): A template for avr development.

### C++

* [BoilerplatePP](https://github.com/Paspartout/BoilerplatePP): A simple cmake template with unit testing for projects written in C++.
* [cookiecutter-dpf-effect](https://github.com/SpotlightKid/cookiecutter-dpf-effect): An audio plugin project template for the DISTRHO Plugin Framework (DPF).
* [cookiecutter-dpf-audiotk](https://github.com/SpotlightKid/cookiecutter-dpf-audiotk): An audio plugin project template for the DISTRHO Plugin Framework (DPF) and the Audio Toolkit (ATK) DSP library
* [cookiecutter-kata-gtest](https://github.com/13coders/cookiecutter-kata-gtest): A template for C++ test-driven development katas using the Google Test framework.
* [cookiecutter-kata-cpputest](https://github.com/13coders/cookiecutter-kata-cpputest): A template for C++ test-driven-development katas using the CppUTest framework.

### C-Sharp

* [cookiecutter-csharp-objc-binding](https://github.com/SandyChapman/cookiecutter-csharp-objc-binding): A template for generating a C# binding project for binding an Objective-C static library.

### Common Lisp

* [cookiecutter-cl-project](https://github.com/svetlyak40wt/cookiecutter-cl-project): A template for Common Lisp project with bootstrap script and Slime integration.

### Elm

* [cookiecutter-elm](https://github.com/m-x-k/cookiecutter-elm): Elm based cookiecutter with basic html example.

### Golang

* [cookiecutter-golang](https://github.com/lacion/cookiecutter-golang): A template to create new go based projects following best practices.

### Java

* [cookiecutter-java](https://github.com/m-x-k/cookiecutter-java): Cookiecutter for basic java application setup with gradle.
* [cookiecutter-spring-boot](https://github.com/m-x-k/cookiecutter-spring-boot): Cookiecutter for standard java spring boot gradle application.
* [cookiecutter-android](https://github.com/alexfu/cookiecutter-android): Cookiecutter for Gradle-based Android projects.

### JS

* [cookiecutter-es6-boilerplate](https://github.com/agconti/cookiecutter-es6-boilerplate): A cookiecutter for front end projects in ES6.
* [cookiecutter-webpack](https://github.com/goldhand/cookiecutter-webpack): A template for webpack 2 projects with hot reloading, babel es6 modules, and react.
* [cookiecutter-jquery](https://github.com/audreyr/cookiecutter-jquery): A jQuery plugin project template based on jQuery Boilerplate.
* [cookiecutter-jswidget](https://github.com/audreyr/cookiecutter-jswidget): A project template for creating a generic front-end, non-jQuery JS widget packaged for multiple JS packaging systems.
* [cookiecutter-component](https://github.com/audreyr/cookiecutter-component): A template for a Component JS package.
* [cookiecutter-tampermonkey](https://github.com/christabor/cookiecutter-tampermonkey): A template for a TamperMonkey browser script.
* [cookiecutter-es6-package](https://github.com/ratson/cookiecutter-es6-package): A template for writing node packages using ES6 via babel.
* [cookiecutter-angular2](https://github.com/matheuspoleza/cookiecutter-angular2): A template for modular angular2 with typescript apps.
* [CICADA](https://github.com/TAMU-CPT/CICADA): A template + script that automatically creates list/detail controllers and partials for an AngularJS frontend to connect to a DRF backend. Works well with [cc-automated-drf-template](https://github.com/TAMU-CPT/cc-automated-drf-template).

### Kotlin

* [cookiecutter-kotlin-gradle](https://github.com/thomaslee/cookiecutter-kotlin-gradle): A bare-bones template for Gradle-based Kotlin projects.

### LaTeX/XeTeX

* [pandoc-talk](https://github.com/larsyencken/pandoc-talk): A cookiecutter template for giving talks with pandoc and XeTeX.
* [cookiecutter-latex-article](https://github.com/selimb/cookiecutter-latex-article): A LaTeX template geared towards academic use.
* [cookiecutter-beamer](https://github.com/luismartingil/cookiecutter-beamer): A template for a LaTeX Beamer presentation.

### PHP

* [cookiecutter-mediawiki-extension](https://github.com/JonasGroeger/cookiecutter-mediawiki-extension): A template for MediaWiki extensions.

### Sublime Text

* [cookiecutter-sublime-text-3-plugin](https://github.com/kkujawinski/cookiecutter-sublime-text-3-plugin): Sublime Text 3 plugin template with custom settings, commands, key bindings and main menu.
* [sublime-snippet-package-template](https://github.com/fhightower-templates/sublime-snippet-package-template): Template for Sublime Text packages containing snippets.

### Berkshelf-Vagrant

* [slim-berkshelf-vagrant](https://github.com/mahmoudimus/cookiecutter-slim-berkshelf-vagrant): A simple cookiecutter template with sane cookbook defaults for common vagrant/berkshelf cookbooks.

### HTML

* [cookiecutter-complexity](https://github.com/audreyr/cookiecutter-complexity): A cookiecutter for a Complexity static site with Bootstrap 3.
* [cookiecutter-reveal.js](https://github.com/keimlink/cookiecutter-reveal.js): A cookiecutter template for reveal.js presentations.
* [cookiecutter-tumblr-theme](https://github.com/relekang/cookiecutter-tumblr-theme): A cookiecutter for a Tumblr theme project with GruntJS as concatenation tool.

### Scala

* [cookiecutter-scala](https://github.com/Plippe/cookiecutter-scala): A cookiecutter template for a simple scala hello world application with a few libraries.
* [cookiecutter-scala-spark](https://github.com/jpzk/cookiecutter-scala-spark): A cookiecutter template for Apache Spark applications written in Scala.

### 6502 Assembly

* [cookiecutter-atari2600](https://github.com/joeyjoejoejr/cookiecutter-atari2600): A cookiecutter template for Atari2600 projects.

### Data Science

* [widget-cookiecutter](https://github.com/jupyter-widgets/widget-cookiecutter): A cookiecutter template for creating a custom Jupyter widget project.
* [cookiecutter-data-science](https://github.com/drivendata/cookiecutter-data-science): A logical, reasonably standardized, but flexible project structure for doing and sharing data science work in Python.  Full documentation available [here](http://drivendata.github.io/cookiecutter-data-science/).
* [cookiecutter-r-data-analysis](https://github.com/bdcaf/cookiecutter-r-data-analysis): Template for a R based workflow to docx (via Pandoc) and pdf (via LaTeX) reports.
* [cookiecutter-docker-science](https://github.com/docker-science/cookiecutter-docker-science): Cookiecutter template for data scientists working in Docker containers.

### Reproducible Science

* [cookiecutter-reproducible-science](https://github.com/mkrapp/cookiecutter-reproducible-science): A cookiecutter template to start a reproducible and transparent science project including data models, analysis, and reports (i.e., your scientific paper) with close resemblances to the philosophy of Cookiecutter [Data Science](#data-science).

### Data Driven Journalism

* [cookiecutter-data-driven-journalism](https://github.com/jastark/cookiecutter-data-driven-journalism): A cookiecutter template to facilitate transparency in data journalism with consistent organisation of data journalism projects and some pre-populated files (including .gitignore, README, AUTHORS).

### Continuous Delivery

* [painless-continuous-delivery](https://github.com/painless-software/painless-continuous-delivery): A cookiecutter template for software development setups with continuous delivery baked in. Python (Django, Flask), and experimental PHP support.
* [cookiecutter-devenv](https://bitbucket.org/greenguavalabs/cookiecutter-devenv/src/master/): A template to add a development and ci environment to an existing project.

### Cloud Tools

* [cookiecutter-tf-module](https://github.com/DualSpark/cookiecutter-tf-module): Cookiecutter template for building consistent Terraform modules.

### Tornado

* [cookiecutter-tornado](https://github.com/hkage/cookiecutter-tornado): Cookiecutter template for Tornado based projects.

### Other

* [cookiecutter-awesome](https://github.com/Pawamoy/cookiecutter-awesome): Cookiecutter to create an [awesome](https://github.com/sindresorhus/awesome) list.
* [cookiecutter_dotfile](https://github.com/bdcaf/cookiecutter_dotfile): Template for a folder of dotfiles managed by stow.
* [cookiecutter-raml](https://github.com/genzj/cookiecutter-raml): Template for RAML v1.0 API documents.

## Similar projects

* [Diecutter](https://github.com/diecutter/diecutter): an API service that will give you back a configuration file from a template and variables.

* [Django](https://docs.djangoproject.com/en/1.9/ref/django-admin/#cmdoption-startapp--template)'s `startproject` and `startapp` commands can take in a `--template` option.

* [python-packager](https://github.com/fcurella/python-packager): Creates Python packages from its own template, with configurable options.

* [Yeoman](https://github.com/yeoman/generator) has a Rails-inspired generator system that provides scaffolding for apps.

* [mr.bob](https://github.com/domenkozar/mr.bob) is a filesystem template renderer, meant to deprecate tools such as
  paster and templer.

* [grunt-init](https://github.com/gruntjs/grunt-init) is used to be built into Grunt and is now a standalone scaffolding tool
  to automate project creation.

* [scaffolt](https://github.com/paulmillr/scaffolt) consumes JSON generators with Handlebars support.

* [init-skeleton](https://github.com/brunch/init-skeleton) clones or copies a repository, executes npm install and bower install and removes the .git directory.

* [Cog](https://bitbucket.org/ned/cog/src/default/) python-based code generation toolkit developed by Ned Batchelder

* [Skaffold](https://github.com/christabor/Skaffold) python and json config based django/MVC generator, with some add-ons and integrations.
pytest
pytest-cov
pytest-mock
pytest-catchlog
freezegun
* Cookiecutter version:
* Template project url:
* Python version:
* Operating System:

### Description:

// REPLACE ME: What are you trying to get done, what has happened, what went wrong, and what did you expect?

### What I've run:

```
// REPLACE ME: Paste a log of command(s) you ran and cookiecutter's output, tracebacks, etc, here
```

../AUTHORS.md../BACKERS.md../case_studies.md../CODE_OF_CONDUCT.md../CONTRIBUTING.md../HISTORY.md../README.mdwatchdog>=0.8.3
sphinx-rtd-theme>=0.4.3
recommonmark>=0.6.0
============
Fake Project
============

Blah!!!!
Ha ha ha!# README

{% for extension, details in cookiecutter.file_types|dictsort %}
<dl>
  <dt>Format name:</dt>
  <dd>{{ details.name }}</dd>

  <dt>Extension:</dt>
  <dd>{{ extension }}</dd>

  <dt>Applications:</dt>
  <dd>
      <ul>
      {% for app in details.apps -%}
          <li>{{ app }}</li>
      {% endfor -%}
      </ul>
  </dd>
</dl>
{% endfor %}
============
Fake Project
============

Project name: **{{ cookiecutter.project_name }}**

Blah!!!!
============
Fake Project
============

Project name: **{{ cookiecutter.project_name }}**

Blah!!!!
============
Fake Project
============

Blah!!!!
============
Fake Project
============

Blah!!!!
I eat {{ syntax_error }} {# this comment is not closed}Polish: Ą Ł Ż
Chinese: 倀 倁 倂 倃 倄 倅 倆 倇 倈
Musical Notes: ♬ ♫ ♯{{ cookiecutter | jsonify }}
{{ random_ascii_string(length, punctuation) }}
Testing {{ generate_file }}{{cookiecutter.repo_dir}}
=========================
{% hello cookiecutter.name %}
{% hello cookiecutter.name %}
I eat {{ cookiecutter.binary_test }}
I eat {{ cookiecutter.binary_test }}
============
Fake Project
============

{{cookiecutter.render_test}}
============
Fake Project
============

{{cookiecutter.render_test}}
============
Fake Project
============

{{cookiecutter.render_test}}
============
Fake Project
============

{{cookiecutter.render_test}}
============
Fake Project
============

{{cookiecutter.render_test}}
I eat {{ cookiecutter.food }}
I eat {{ cookiecutter.food }}I eat {{ food }}Some static textHi!
My name is {{ cookiecutter.full_name }}.
It is {{ cookiecutter.year }}.The color is {{ cookiecutter.color }} and the letter is {{ cookiecutter.letter }}.foo
===

bar
foo
===

bar
Empty, just like the hooks we are testing.
{{cookiecutter.project_slug}}
{% for _ in cookiecutter.project_slug %}={% endfor %}
{{cookiecutter.project_slug}}
{% for _ in cookiecutter.project_slug %}={% endfor %}

{{cookiecutter.foobar}}

https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Convert tuple -- e.g.: (u'program_name=foobar', u'startsecs=66')
# to dict -- e.g.: {'program_name': 'foobar', 'startsecs': '66'}
# If you _need_ to support a local template in a directory
# called 'help', use a qualified path to the directory.
# -*- coding: utf-8 -*-
# Make sure to preserve existing items in
# nested dicts, for example `abbreviations`
# Do NOT load a config. Return defaults instead.
# Load the given config file
# Does the user set up a config environment variable?
# Load an optional user config if it exists
# otherwise return the defaults
# There is a config environment variable. Try to load it.
# Do not check for existence, so invalid file paths raise an error.
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# unused locally
# unused locally
# -*- coding: utf-8 -*-
# Python 3.6 and above
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Do not include variables which are not used in the template
# We are dealing with a choice variable
# This overwrite is actually valid for the given context
# Let's set it as default (by definition first item in list)
# see ``cookiecutter.prompt.prompt_choice_for_config``
# Simply overwrite the value for this variable
# JSON decoding error.  Let's throw a new exception that is more
# friendly for the developer or user.
# Add the Python object to the context dictionary
# Overwrite context variable defaults with the default context from the
# user's global config, if available
# Render the path to the output file (not including the root project dir)
# Just copy over binary files. Don't render.
# Force fwd slashes on Windows for get_template
# This is a by-design Jinja issue
# Render the file
# Disable translated so that printed exception contains verbose
# information about syntax error location
# Apply file permissions to output file
# We want the Jinja path and the OS paths to match. Consequently, we'll:
#   + CD to the template folder
#   + Set Jinja's path to '.'
#
#  In order to build our files to the correct folder(s), we'll use an
# absolute path for the target folder (project_dir)
# if we created the output directory, then it's ok to remove it
# if rendering fails
# We must separate the two types of dirs into different lists.
# The reason is that we don't want ``os.walk`` to go through the
# unrendered directories, since they will just be copied.
# We check the full path, because that's how it can be
# specified in the ``_copy_without_render`` setting, but
# we store just the dir name
# We mutate ``dirs``, because we only want to go through these dirs
# recursively
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Set up 'cookiecutter' logger
# Remove all attached handlers, in case there was
# a logger with using the name 'cookiecutter'
# Create a file handler if a log file is provided
# Get settings based on the given stream_level
# Create a stream handler
# -*- coding: utf-8 -*-
# prompt the user to manually configure at the command line.
# except when 'no-input' flag is set
# include template dir or url in the context dict
# Create project from local context and project template.
# Cleanup (if required)
# -*- coding: utf-8 -*-
# Please see http://click.pocoo.org/4/api/#click.prompt
# Please see http://click.pocoo.org/4/api/#click.prompt
# Please see http://click.pocoo.org/4/api/#click.prompt
# Please see http://click.pocoo.org/4/api/#click.prompt
# Leave it up to click to ask the user again
# Leave it up to click to ask the user again
# Please see http://click.pocoo.org/4/api/#click.prompt
# Return the given default w/o any processing
# First pass: Handle simple and raw variables, plus choices.
# These must be done first because the dictionaries keys and
# values might refer to them.
# We are dealing with a choice variable
# We are dealing with a regular variable
# Second pass; handle the dictionaries.
# We are dealing with a dict variable
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# something like git:// ssh:// file:// etc.
# or
# something like user@...
# Split on colon. If there is no colon, rest will be empty
# and prefix will be the whole template
# -*- coding: utf-8 -*-
# Suppress prompt if called via API
# -*- coding: utf-8 -*-
# Ensure that clone_to_dir exists
# identify the repo_type
# check that the appropriate VCS for the repo_type is installed
# BadZipfile was renamed to BadZipFile in Python 3.2.
# Ensure that clone_to_dir exists
# Build the name of the cached zipfile,
# and prompt to delete if it already exists.
# (Re) download the zipfile
# filter out keep-alive new chunks
# Just use the local zipfile as-is.
# Now unpack the repository. The zipfile will be unpacked
# into a temporary directory
# The first record in the zipfile should be the directory entry for
# the archive. If it isn't a directory, there's a problem.
# Construct the final target directory
# Extract the zip file into the temporary directory
# File is password protected; try to get a password from the
# environment; if that doesn't work, ask the user.
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# pragma: no cover
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
#
# cookiecutter documentation build configuration file, created by
# sphinx-quickstart on Thu Jul 11 11:31:49 2013.
#
# This file is execfile()d with the current directory set to its containing
# dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# sys.path.insert(0, os.path.abspath('.'))
# For building docs in foreign environments where we don't have all our
# dependencies (like readthedocs), mock out imports that cause sphinx to fail.
# see: https://docs.readthedocs.io/en/latest/faq.html#i-get-import-errors-on-libraries-that-depend-on-c-modules  # noqa
# Add parent dir to path
# noqa 402
# -- General configuration ----------------------------------------------------
# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'
# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or
# your custom ones.
# Add any paths that contain templates here, relative to this directory.
# The suffix of source filenames.
# The encoding of source files.
# source_encoding = 'utf-8-sig'
# The master toctree document.
# General information about the project.
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# language = None
# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'
# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# The reST default role (used for this markup: `text`) to use for all documents
# default_role = None
# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True
# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False
# The name of the Pygments (syntax highlighting) style to use.
# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []
# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False
# Suppress nonlocal image warnings
# -- Options for HTML output --------------------------------------------------
# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {}
# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []
# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None
# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None
# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = None
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = '%b %d, %Y'
# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True
# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}
# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}
# If false, no module index is generated.
# html_domain_indices = True
# If false, no index is generated.
# html_use_index = True
# If true, the index is split into individual pages for each letter.
# html_split_index = False
# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True
# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True
# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
# html_show_copyright = True
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''
# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None
# Output file base name for HTML help builder.
# -- Options for LaTeX output -------------------------------------------------
# The paper size ('letterpaper' or 'a4paper').
# 'papersize': 'letterpaper',
# The font size ('10pt', '11pt' or '12pt').
# 'pointsize': '10pt',
# Additional stuff for the LaTeX preamble.
# 'preamble': '',
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual])
# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None
# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False
# If true, show page references after internal links.
# latex_show_pagerefs = False
# If true, show URL addresses after external links.
# latex_show_urls = False
# Documents to append as an appendix to all manuals.
# latex_appendices = []
# If false, no module index is generated.
# latex_domain_indices = True
# -- Options for manual page output -------------------------------------------
# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
# If true, show URL addresses after external links.
# man_show_urls = False
# -- Options for Texinfo output -----------------------------------------------
# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
# Documents to append as an appendix to all manuals.
# texinfo_appendices = []
# If false, no module index is generated.
# texinfo_domain_indices = True
# How to display URL addresses: 'footnote', 'no', or 'inline'.
# texinfo_show_urls = 'footnote'
# If true, do not generate a @detailmenu in the "Top" node's menu.
# texinfo_no_detailmenu = False
# -- Options for Epub output --------------------------------------------------
# Bibliographic Dublin Core info.
# The language of the text. It defaults to the language option
# or en if the language is not set.
# epub_language = ''
# The scheme of the identifier. Typical schemes are ISBN or URL.
# epub_scheme = ''
# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
# epub_identifier = ''
# A unique identification for the text.
# epub_uid = ''
# A tuple containing the cover image and cover page html template filenames.
# epub_cover = ()
# A sequence of (type, uri, title) tuples for the guide element of content.opf.
# epub_guide = ()
# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
# epub_pre_files = []
# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
# epub_post_files = []
# A list of files that should not be packed into the epub file.
# epub_exclude_files = []
# The depth of the table of contents in toc.ncx.
# epub_tocdepth = 3
# Allow duplicate toc entries.
# epub_tocdup = True
# Fix unsupported image types using the PIL.
# epub_fix_images = False
# Scale large images.
# epub_max_image_width = 0
# If 'no', URL addresses will not be shown.
# epub_show_urls = 'inline'
# If false, no index is generated.
# epub_use_index = True
# Example configuration for intersphinx: refer to the Python standard library.
# -*- coding: utf-8 -*-
# If the default original_dir is pre-existing, move it to a temp location
# Remove existing backups before backing up. If they exist, they're stale.
# Carefully delete the created original_dir only in certain
# conditions.
# Delete the created original_dir as long as a backup
# exists
# Delete the created original_dir.
# There's no backup because it never existed
# Restore the user's default original_dir contents
# If ~/.cookiecutterrc is pre-existing, move it to a temp location
# If the default cookiecutters_dir is pre-existing, move it to a
# temp location
# If the default cookiecutter_replay_dir is pre-existing, move it to a
# temp location
# If it existed, restore ~/.cookiecutterrc
# We never write to ~/.cookiecutterrc, so this logic is simpler.
# Carefully delete the created ~/.cookiecutters dir only in certain
# conditions.
# Carefully delete the created ~/.cookiecutter_replay dir only in
# certain conditions.
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# README
# The tmp directory will still exist, but the
# extracted template directory *in* the temp directory will not.
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Make sure that the custom extension can be loaded
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# original message from json module should be included
# File name should be included too...for testing purposes, just test the
# last part of the file. If we wanted to test the absolute path, we'd have
# to do some additional work in the test which doesn't seem that needed at
# this point.
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# this comment is not closed}'
# -*- coding: utf-8 -*-
# simple.txt should still be 0o644
# script.sh should still be 0o755
# -*- coding: utf-8 -*-
# OSError.errno=8 is not thrown on Windows when the script is empty
# because it always runs through shell instead of needing a shebang.
#!/usr/bin/env python\n")
#!/usr/bin/env python\n")
#!/bin/bash\n")
# Set the execute bit
#!/bin/bash\n")
# Set the execute bit
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# According to the py.test source code finalizers are popped from an
# internal list that we populated via 'addfinalizer'. As a result the
# last-added finalizer function is executed first.
# -*- coding: utf-8 -*-
#!/usr/bin/env python\n")
# -*- coding: utf-8 -*-\n")
#!/bin/bash\n")
# Set the execute bit
#!/bin/bash\n")
#!/usr/bin/env python\n")
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Make sure to yield the parent directory as `find_hooks()`
# looks into `hooks/` in the current working directory
# Change the current working directory that contains `hooks/`
# -*- coding: utf-8 -*-
# Last line in the log file is an empty line
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Make sure that non None non str variables are converted beforehand
# Suppress user input
# Ask the user for input
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Make sure we return to the correct folder
# Make sure that exceptions are still bubbled up
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# flake8: noqa
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# flake8: noqa
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# might exist from other tests.
# -*- coding: utf-8 -*-
# This is not a valid repo url just yet!
# First `repository.expand_abbreviations` needs to translate it
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# flake8: noqa
# -*- coding: utf-8 -*-
# flake8: noqa
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Create repo_dir to trigger prompt_and_delete
# side_effect is set to an iterable here (and below),
# because of a Python 3.4 unittest.mock regression
# http://bugs.python.org/issue23661
# -*- coding: utf-8 -*-
# uses explicit identifier with 'git' in the wrong place
# uses explicit identifier with 'hg' in the wrong place
# uses explicit identifier with neither 'git' nor 'hg'
# no identifier but neither 'git' nor 'bitbucket' in url
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Create an existing cache of the zipfile
# Create an existing cache of the zipfile
# Create an existing cache of the zipfile
