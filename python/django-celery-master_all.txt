Copyright (c) 2015 Ask Solem.  All Rights Reserved.
Copyright (c) 2012-2014 GoPivotal, Inc.  All Rights Reserved.
Copyright (c) 2009-2012 Ask Solem.  All Rights Reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

Neither the name of Ask Solem nor the names of its contributors may be used
to endorse or promote products derived from this software without specific
prior written permission. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

README.rstLooking for sponsor for working on django 1.11 to 2.2 support https://github.com/celery/django-celery/issues/568

===============================================
 django-celery - Celery Integration for Django
===============================================

.. image:: https://user-images.githubusercontent.com/26336/59113881-917c5180-890b-11e9-9863-f5a98d0e235e.png

:Version: 3.3.1
:Web: http://celeryproject.org/
:Download: http://pypi.python.org/pypi/django-celery/
:Source: http://github.com/celery/django-celery/
:Keywords: celery, task queue, job queue, asynchronous, rabbitmq, amqp, redis,
  python, django, webhooks, queue, distributed

--

.. warning::

    **THIS PROJECT IS ONLY REQUIRED IF YOU WANT TO USE DJANGO RESULT BACKEND
    AND ADMIN INTEGRATION**

    Please follow the new tutorial at:

    http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html

django-celery provides Celery integration for Django; Using the Django ORM
and cache backend for storing results, autodiscovery of task modules
for applications listed in ``INSTALLED_APPS``, and more.

Using django-celery
===================

To enable ``django-celery`` for your project you need to add ``djcelery`` to
``INSTALLED_APPS``::

    INSTALLED_APPS += ("djcelery", )

then add the following lines to your ``settings.py``::

    import djcelery
    djcelery.setup_loader()

Everything works the same as described in the `Celery User Manual`_, except you
need to invoke the programs through ``manage.py``:

=====================================  =====================================
**Program**                            **Replace with**
=====================================  =====================================
``celery``                             ``python manage.py celery``
``celery worker``                      ``python manage.py celery worker``
``celery beat``                        ``python manage.py celery beat``
``celery ...``                         ``python manage.py celery ...``
=====================================  =====================================

The other main difference is that configuration values are stored in
your Django projects' ``settings.py`` module rather than in
``celeryconfig.py``.

If you're trying celery for the first time you should start by reading
`Getting started with django-celery`_

Special note for mod_wsgi users
-------------------------------

If you're using ``mod_wsgi`` to deploy your Django application you need to
include the following in your ``.wsgi`` module::

    import djcelery
    djcelery.setup_loader()

Documentation
=============

The `Celery User Manual`_ contains user guides, tutorials and an API
reference. It also has a dedicated `subsection about the Django integration`_.

.. _`Celery User Manual`: http://docs.celeryproject.org/
.. _`subsection about the Django integration`:
   http://docs.celeryproject.org/en/latest/django/
.. _`Getting started with django-celery`:
   http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html

Installation
=============

You can install ``django-celery`` either via the Python Package Index (PyPI)
or from source.

To install using ``pip``,::

    $ pip install django-celery

To install using ``easy_install``,::

    $ easy_install django-celery

You will then want to create the necessary tables. If you generating
schema migrations, you'll want to run::

    $ python manage.py migrate djcelery



Downloading and installing from source
--------------------------------------

Download the latest version of ``django-celery`` from
http://pypi.python.org/pypi/django-celery/

You can install it by doing the following,::

    $ tar xvfz django-celery-0.0.0.tar.gz
    $ cd django-celery-0.0.0
    # python setup.py install # as root

Using the development version
------------------------------

You can clone the git repository by doing the following::

    $ git clone git://github.com/celery/django-celery.git

Getting Help
============

Mailing list
------------

For discussions about the usage, development, and future of celery,
please join the `celery-users`_ mailing list. 

.. _`celery-users`: http://groups.google.com/group/celery-users/

IRC
---

Come chat with us on IRC. The **#celery** channel is located at the `Freenode`_
network.

.. _`Freenode`: http://freenode.net


Bug tracker
===========

If you have any suggestions, bug reports or annoyances please report them
to our issue tracker at http://github.com/celery/django-celery/issues/

Wiki
====

http://wiki.github.com/celery/celery/

Contributing
============

Development of ``django-celery`` happens at Github:
http://github.com/celery/django-celery

You are highly encouraged to participate in the development.
If you don't like Github (for some reason) you're welcome
to send regular patches.

License
=======

This software is licensed under the ``New BSD License``. See the ``LICENSE``
file in the top distribution directory for the full license text.

.. # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround

django-celery as part of the Tidelift Subscription
=======

The maintainers of django-celery and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/pypi-django-celery?utm_source=pypi-django-celery&utm_medium=referral&utm_campaign=readme&utm_term=repo)

celery>=3.1.15,<4.0Django>=1.8
Sphinx
sphinxcontrib-issuetracker
python-memcached
unittest2>=0.4.0
coverage>=3.0
nose
nose-cover3
mock
django-nose
python-memcached
tox==3.5.2#!/usr/bin/env python
# -*- coding: utf-8 -*-
# noqa
# -*- Python 3 -*-
# -*- Distribution Meta -*-
# -eof meta-':
# Ignore dirnames that start with '.'
# noqa
# convert to local timezone
# ### Periodic Tasks
# noqa
# ChoiceField.__init__ sets ``self.choices = choices``
# which would override ours.
#: The Django-Celery app instance.
# localize something.
# Pass the current language on to the task
# or set the language explicitly
# noqa
# noqa
# pragma: no cover
# noqa
# noqa
# pragma: no cover
# noqa
# pragma: no cover
# noqa
# noqa
# ignore stupid warnings and errors
# noqa
# noqa
# TypeError added for celery#962
# Need to close any open database connection after
# any embedded celerybeat process forks.
# Default backend needs to be the database backend for backward
# compatibility.
# Django 1.6+
# pre multidb
# See http://groups.google.com/group/django-users/
#            browse_thread/thread/78200863d0c07c6d/
# the parent process may have established these,
# so need to close them.
# calling db.close() on some DB connections will cause
# the inherited DB conn to also get broken in the parent
# process so we need to remove it without triggering any
# network IO that close() might cause.
# use the _ version to avoid DB_REUSE preventing the conn.close() call
# f is returned None when app_path is a module
# pre-Django 1.2
# noqa
# pragma: no cover
# Depending on the database backend used we can experience
# various exceptions. E.g. psycopg2 raises an exception
# if some operation breaks the transaction, so saving
# the task result won't be possible until we rollback
# the transaction.
# Pre django 1.6
# TODO compression was enabled by mistake, we need to disable it
# but this is a backwards incompatible change that needs planning.
# Use UTC timestamp if USE_TZ is true, or else use local timestamp
#1694
#513
# noqa
# noqa
# This scheduler must wake up more frequently than the
# regular of 5 minutes because it needs to take external
# changes to the schedule into account.
# seconds
# timezone sanity
# 5 second delay for re-enable.
# for 2to3
# Object may not be synchronized, so only
# change the fields we care about.
# reset schedule
# If MySQL is running with transaction isolation level
# REPEATABLE-READ (default), then we won't see changes done by
# other transactions until the current transaction is
# committed (Issue #41).
# not in transaction management.
# Close the connection when it is broken
# Need to store entry by name, because the entry may change
# in the mean time.
# retry later
# limit worker timestamp write freq.
# Expiry can be timedelta or None for never expire.
# Some fields are only stored in the RECEIVED event,
# so we should remove these from default values,
# so that they are not overwritten by subsequent states.
# -- XXX This module must not use translation as that causes
# -- a recursive loader import!
# Database-related exceptions.
# noqa
# noqa
# noqa
# noqa
# naive datetimes are assumed to be in UTC.
# then convert to the Django configured timezone.
# Ensure built-in tasks are loaded for task_list view
# noqa
# no multivalue
# :copyright: (c) 2009 - 2015 by Ask Solem.
# :license:   BSD, see LICENSE for more details.
# -eof meta-
# noqa
# noqa
# CELERY_CACHE_BACKEND overrides the django-global(tm) backend settings.
# noqa
# Issue #75
# Monkey-patch Task.on_success() method
# monkey patch django.
# This patch make sure that we use real threads to get the ident which
# is going to happen if we are using gevent or eventlet.
# -- patch taken from gunicorn
# --settings and --pythonpath are also handled
# by BaseCommand.handle_default_options, but that is
# called with the resulting options parsed by optparse.
# see http://code.djangoproject.com/changeset/13319
# see http://code.djangoproject.com/changeset/13319.
# -*- coding: utf-8 -*-
# Uncomment the admin/doc line below and add 'django.contrib.admindocs'
# to INSTALLED_APPS to enable admin documentation:
#the-test-client
# We have no content, so the number of results if we search on
# something should be zero.
# coding: utf-8
# Execute cached branch.
# Have to avoid save() because it applies the auto_now=True.
# Have to avoid save() because it applies the auto_now=True.
# update schedule
# Get the entry for m2
# Increment the entry (but make sure it doesn't sync)
# Fetch the raw object from db, change the args
# and save the changes.
# get_schedule should now see the schedule has changed.
# and also sync the dirty objects.
# assert not raises
# 2016-06-01T15:00:00Z
# Cleanup leftovers from previous tests
# Django 1.10+
# On Py2.4 repr(exc) includes the object id, so comparing
# texts is pointless when the id the "same" KeyError does not match.
# pre Django 1.5
# -*- coding: utf-8 -*-
# checks to make sure attr exists
# noqa
# coding: utf-8
# noqa
# is serialized properly.
# is serialized properly.
# bug in 3.1.10 means result did not clear cache after forget.
# Have to avoid save() because it applies the auto_now=True.
# -*- coding: utf-8 -*-
# If your extensions are in another directory, add it here. If the directory
# is relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
# noqa
# noqa
# General configuration
# ---------------------
# Add any paths that contain templates here, relative to this directory.
# The suffix of source filenames.
# The master toctree document.
# General information about the project.
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
# If true, '()' will be appended to :func: etc. cross-reference text.
# The name of the Pygments (syntax highlighting) style to use.
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# If false, no module index is generated.
# If false, no index is generated.
# ## Issuetracker
#(\d+)'
# Django settings for docs project.
# import source code dir
# special
# Skip always-skip stuff
# skip when the next line is a title
#!/usr/bin/even/python
# Find the first previous line with text to append "::" to it.
# non-destructive
#!/usr/bin/env python
# Django settings for testproj project.
# import source code dir
# noqa
# ('Your Name', 'your_email@domain.com'),
# Example:
# (r'^tests/', include('tests.foo.urls')),
# Uncomment the admin/doc line below and add 'django.contrib.admindocs'
# to INSTALLED_APPS to enable admin documentation:
# (r'^admin/doc/', include('django.contrib.admindocs.urls')),
# Uncomment the next line to enable the admin:
# (r'^admin/(.*)', admin.site.root),
# noqa
# Create your views here.
# noqa
# Create your models here.
# Create your views here.
